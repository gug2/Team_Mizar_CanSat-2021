
CanSatSDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b70  080149d8  080149d8  000249d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015548  08015548  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08015548  08015548  00025548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015550  08015550  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015550  08015550  00025550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015554  08015554  00025554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08015558  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004914  20000230  08015788  00030230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b44  08015788  00034b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c0a5  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005468  00000000  00000000  0005c305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021f0  00000000  00000000  00061770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe8  00000000  00000000  00063960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028404  00000000  00000000  00065948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a4f4  00000000  00000000  0008dd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6701  00000000  00000000  000b8240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019e941  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a7a0  00000000  00000000  0019e994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080149c0 	.word	0x080149c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	080149c0 	.word	0x080149c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9ef 	b.w	8001088 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9a4 	b.w	8001088 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468c      	mov	ip, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 8083 	bne.w	8000eda <__udivmoddi4+0x116>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	d947      	bls.n	8000e6a <__udivmoddi4+0xa6>
 8000dda:	fab2 f282 	clz	r2, r2
 8000dde:	b142      	cbz	r2, 8000df2 <__udivmoddi4+0x2e>
 8000de0:	f1c2 0020 	rsb	r0, r2, #32
 8000de4:	fa24 f000 	lsr.w	r0, r4, r0
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4097      	lsls	r7, r2
 8000dec:	ea40 0c01 	orr.w	ip, r0, r1
 8000df0:	4094      	lsls	r4, r2
 8000df2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df6:	0c23      	lsrs	r3, r4, #16
 8000df8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dfc:	fa1f fe87 	uxth.w	lr, r7
 8000e00:	fb08 c116 	mls	r1, r8, r6, ip
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f10e 	mul.w	r1, r6, lr
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x60>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e16:	f080 8119 	bcs.w	800104c <__udivmoddi4+0x288>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 8116 	bls.w	800104c <__udivmoddi4+0x288>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d909      	bls.n	8000e50 <__udivmoddi4+0x8c>
 8000e3c:	193c      	adds	r4, r7, r4
 8000e3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e42:	f080 8105 	bcs.w	8001050 <__udivmoddi4+0x28c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f240 8102 	bls.w	8001050 <__udivmoddi4+0x28c>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	443c      	add	r4, r7
 8000e50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e54:	eba4 040e 	sub.w	r4, r4, lr
 8000e58:	2600      	movs	r6, #0
 8000e5a:	b11d      	cbz	r5, 8000e64 <__udivmoddi4+0xa0>
 8000e5c:	40d4      	lsrs	r4, r2
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e9c5 4300 	strd	r4, r3, [r5]
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	b902      	cbnz	r2, 8000e6e <__udivmoddi4+0xaa>
 8000e6c:	deff      	udf	#255	; 0xff
 8000e6e:	fab2 f282 	clz	r2, r2
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d150      	bne.n	8000f18 <__udivmoddi4+0x154>
 8000e76:	1bcb      	subs	r3, r1, r7
 8000e78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7c:	fa1f f887 	uxth.w	r8, r7
 8000e80:	2601      	movs	r6, #1
 8000e82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e86:	0c21      	lsrs	r1, r4, #16
 8000e88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e90:	fb08 f30c 	mul.w	r3, r8, ip
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0xe4>
 8000e98:	1879      	adds	r1, r7, r1
 8000e9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0xe2>
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	f200 80e9 	bhi.w	8001078 <__udivmoddi4+0x2b4>
 8000ea6:	4684      	mov	ip, r0
 8000ea8:	1ac9      	subs	r1, r1, r3
 8000eaa:	b2a3      	uxth	r3, r4
 8000eac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000eb8:	fb08 f800 	mul.w	r8, r8, r0
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	d907      	bls.n	8000ed0 <__udivmoddi4+0x10c>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x10a>
 8000ec8:	45a0      	cmp	r8, r4
 8000eca:	f200 80d9 	bhi.w	8001080 <__udivmoddi4+0x2bc>
 8000ece:	4618      	mov	r0, r3
 8000ed0:	eba4 0408 	sub.w	r4, r4, r8
 8000ed4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ed8:	e7bf      	b.n	8000e5a <__udivmoddi4+0x96>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d909      	bls.n	8000ef2 <__udivmoddi4+0x12e>
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	f000 80b1 	beq.w	8001046 <__udivmoddi4+0x282>
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eea:	4630      	mov	r0, r6
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	fab3 f683 	clz	r6, r3
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d14a      	bne.n	8000f90 <__udivmoddi4+0x1cc>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d302      	bcc.n	8000f04 <__udivmoddi4+0x140>
 8000efe:	4282      	cmp	r2, r0
 8000f00:	f200 80b8 	bhi.w	8001074 <__udivmoddi4+0x2b0>
 8000f04:	1a84      	subs	r4, r0, r2
 8000f06:	eb61 0103 	sbc.w	r1, r1, r3
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	d0a8      	beq.n	8000e64 <__udivmoddi4+0xa0>
 8000f12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f16:	e7a5      	b.n	8000e64 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f20:	4097      	lsls	r7, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f2a:	40d9      	lsrs	r1, r3
 8000f2c:	4330      	orrs	r0, r6
 8000f2e:	0c03      	lsrs	r3, r0, #16
 8000f30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f34:	fa1f f887 	uxth.w	r8, r7
 8000f38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f40:	fb06 f108 	mul.w	r1, r6, r8
 8000f44:	4299      	cmp	r1, r3
 8000f46:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4a:	d909      	bls.n	8000f60 <__udivmoddi4+0x19c>
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f52:	f080 808d 	bcs.w	8001070 <__udivmoddi4+0x2ac>
 8000f56:	4299      	cmp	r1, r3
 8000f58:	f240 808a 	bls.w	8001070 <__udivmoddi4+0x2ac>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	443b      	add	r3, r7
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b281      	uxth	r1, r0
 8000f64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f70:	fb00 f308 	mul.w	r3, r0, r8
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d907      	bls.n	8000f88 <__udivmoddi4+0x1c4>
 8000f78:	1879      	adds	r1, r7, r1
 8000f7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7e:	d273      	bcs.n	8001068 <__udivmoddi4+0x2a4>
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d971      	bls.n	8001068 <__udivmoddi4+0x2a4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4439      	add	r1, r7
 8000f88:	1acb      	subs	r3, r1, r3
 8000f8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f8e:	e778      	b.n	8000e82 <__udivmoddi4+0xbe>
 8000f90:	f1c6 0c20 	rsb	ip, r6, #32
 8000f94:	fa03 f406 	lsl.w	r4, r3, r6
 8000f98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f9c:	431c      	orrs	r4, r3
 8000f9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fa2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fa6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000faa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fae:	431f      	orrs	r7, r3
 8000fb0:	0c3b      	lsrs	r3, r7, #16
 8000fb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb6:	fa1f f884 	uxth.w	r8, r4
 8000fba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fc6:	458a      	cmp	sl, r1
 8000fc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x220>
 8000fd2:	1861      	adds	r1, r4, r1
 8000fd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fd8:	d248      	bcs.n	800106c <__udivmoddi4+0x2a8>
 8000fda:	458a      	cmp	sl, r1
 8000fdc:	d946      	bls.n	800106c <__udivmoddi4+0x2a8>
 8000fde:	f1a9 0902 	sub.w	r9, r9, #2
 8000fe2:	4421      	add	r1, r4
 8000fe4:	eba1 010a 	sub.w	r1, r1, sl
 8000fe8:	b2bf      	uxth	r7, r7
 8000fea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ff2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ff6:	fb00 f808 	mul.w	r8, r0, r8
 8000ffa:	45b8      	cmp	r8, r7
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x24a>
 8000ffe:	19e7      	adds	r7, r4, r7
 8001000:	f100 31ff 	add.w	r1, r0, #4294967295
 8001004:	d22e      	bcs.n	8001064 <__udivmoddi4+0x2a0>
 8001006:	45b8      	cmp	r8, r7
 8001008:	d92c      	bls.n	8001064 <__udivmoddi4+0x2a0>
 800100a:	3802      	subs	r0, #2
 800100c:	4427      	add	r7, r4
 800100e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001012:	eba7 0708 	sub.w	r7, r7, r8
 8001016:	fba0 8902 	umull	r8, r9, r0, r2
 800101a:	454f      	cmp	r7, r9
 800101c:	46c6      	mov	lr, r8
 800101e:	4649      	mov	r1, r9
 8001020:	d31a      	bcc.n	8001058 <__udivmoddi4+0x294>
 8001022:	d017      	beq.n	8001054 <__udivmoddi4+0x290>
 8001024:	b15d      	cbz	r5, 800103e <__udivmoddi4+0x27a>
 8001026:	ebb3 020e 	subs.w	r2, r3, lr
 800102a:	eb67 0701 	sbc.w	r7, r7, r1
 800102e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001032:	40f2      	lsrs	r2, r6
 8001034:	ea4c 0202 	orr.w	r2, ip, r2
 8001038:	40f7      	lsrs	r7, r6
 800103a:	e9c5 2700 	strd	r2, r7, [r5]
 800103e:	2600      	movs	r6, #0
 8001040:	4631      	mov	r1, r6
 8001042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001046:	462e      	mov	r6, r5
 8001048:	4628      	mov	r0, r5
 800104a:	e70b      	b.n	8000e64 <__udivmoddi4+0xa0>
 800104c:	4606      	mov	r6, r0
 800104e:	e6e9      	b.n	8000e24 <__udivmoddi4+0x60>
 8001050:	4618      	mov	r0, r3
 8001052:	e6fd      	b.n	8000e50 <__udivmoddi4+0x8c>
 8001054:	4543      	cmp	r3, r8
 8001056:	d2e5      	bcs.n	8001024 <__udivmoddi4+0x260>
 8001058:	ebb8 0e02 	subs.w	lr, r8, r2
 800105c:	eb69 0104 	sbc.w	r1, r9, r4
 8001060:	3801      	subs	r0, #1
 8001062:	e7df      	b.n	8001024 <__udivmoddi4+0x260>
 8001064:	4608      	mov	r0, r1
 8001066:	e7d2      	b.n	800100e <__udivmoddi4+0x24a>
 8001068:	4660      	mov	r0, ip
 800106a:	e78d      	b.n	8000f88 <__udivmoddi4+0x1c4>
 800106c:	4681      	mov	r9, r0
 800106e:	e7b9      	b.n	8000fe4 <__udivmoddi4+0x220>
 8001070:	4666      	mov	r6, ip
 8001072:	e775      	b.n	8000f60 <__udivmoddi4+0x19c>
 8001074:	4630      	mov	r0, r6
 8001076:	e74a      	b.n	8000f0e <__udivmoddi4+0x14a>
 8001078:	f1ac 0c02 	sub.w	ip, ip, #2
 800107c:	4439      	add	r1, r7
 800107e:	e713      	b.n	8000ea8 <__udivmoddi4+0xe4>
 8001080:	3802      	subs	r0, #2
 8001082:	443c      	add	r4, r7
 8001084:	e724      	b.n	8000ed0 <__udivmoddi4+0x10c>
 8001086:	bf00      	nop

08001088 <__aeabi_idiv0>:
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_ADC2_Init+0x98>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <MX_ADC2_Init+0x9c>)
 80010a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_ADC2_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ADC2_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_ADC2_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_ADC2_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC2_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_ADC2_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_ADC2_Init+0x98>)
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <MX_ADC2_Init+0xa0>)
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_ADC2_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_ADC2_Init+0x98>)
 80010d8:	2201      	movs	r2, #1
 80010da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_ADC2_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_ADC2_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <MX_ADC2_Init+0x98>)
 80010ec:	f003 ffec 	bl	80050c8 <HAL_ADC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f003 f8ed 	bl	80042d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC2_Init+0x98>)
 800110c:	f004 f9be 	bl	800548c <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001116:	f003 f8dd 	bl	80042d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000049c 	.word	0x2000049c
 8001128:	40012100 	.word	0x40012100
 800112c:	0f000001 	.word	0x0f000001

08001130 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_ADC_MspInit+0x7c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d127      	bne.n	80011a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 800115c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118a:	2304      	movs	r3, #4
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_ADC_MspInit+0x84>)
 800119e:	f004 fd37 	bl	8005c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012100 	.word	0x40012100
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	4613      	mov	r3, r2
 80011c8:	81bb      	strh	r3, [r7, #12]
 80011ca:	466b      	mov	r3, sp
 80011cc:	461d      	mov	r5, r3
    int8_t rslt = BMI160_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	777b      	strb	r3, [r7, #29]

    /* Variable to define temporary length */
    uint16_t temp_len = len + dev->dummy_byte;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011d8:	b29a      	uxth	r2, r3
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	837b      	strh	r3, [r7, #26]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[temp_len];
 80011e0:	8b7c      	ldrh	r4, [r7, #26]
 80011e2:	4623      	mov	r3, r4
 80011e4:	3b01      	subs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	b2a0      	uxth	r0, r4
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	00cb      	lsls	r3, r1, #3
 80011f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011fc:	00c2      	lsls	r2, r0, #3
 80011fe:	b2a0      	uxth	r0, r4
 8001200:	f04f 0100 	mov.w	r1, #0
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	00cb      	lsls	r3, r1, #3
 800120e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001212:	00c2      	lsls	r2, r0, #3
 8001214:	4623      	mov	r3, r4
 8001216:	3307      	adds	r3, #7
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	ebad 0d03 	sub.w	sp, sp, r3
 8001220:	466b      	mov	r3, sp
 8001222:	3300      	adds	r3, #0
 8001224:	613b      	str	r3, [r7, #16]

    /* Variable to define loop */
    uint16_t indx = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	83fb      	strh	r3, [r7, #30]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <bmi160_get_regs+0x80>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <bmi160_get_regs+0x86>
    {
        rslt = BMI160_E_NULL_PTR;
 8001238:	23ff      	movs	r3, #255	; 0xff
 800123a:	777b      	strb	r3, [r7, #29]
 800123c:	e02d      	b.n	800129a <bmi160_get_regs+0xe2>
    }
    else if (len == 0)
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <bmi160_get_regs+0x92>
    {
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
 8001244:	23f4      	movs	r3, #244	; 0xf4
 8001246:	777b      	strb	r3, [r7, #29]
 8001248:	e027      	b.n	800129a <bmi160_get_regs+0xe2>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->interface == BMI160_SPI_INTF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	789b      	ldrb	r3, [r3, #2]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d103      	bne.n	800125a <bmi160_get_regs+0xa2>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001258:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->id, reg_addr, temp_buf, temp_len);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69dc      	ldr	r4, [r3, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7858      	ldrb	r0, [r3, #1]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	8b7b      	ldrh	r3, [r7, #26]
 8001266:	7bf9      	ldrb	r1, [r7, #15]
 8001268:	47a0      	blx	r4
 800126a:	4603      	mov	r3, r0
 800126c:	777b      	strb	r3, [r7, #29]

        if (rslt == BMI160_OK)
 800126e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <bmi160_get_regs+0xde>
        {
            /* Read the data from the position next to dummy byte */
            while (indx < len)
 8001276:	e009      	b.n	800128c <bmi160_get_regs+0xd4>
            {
                data[indx] = temp_buf[indx];
 8001278:	8bfa      	ldrh	r2, [r7, #30]
 800127a:	8bfb      	ldrh	r3, [r7, #30]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	440b      	add	r3, r1
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
                indx++;
 8001286:	8bfb      	ldrh	r3, [r7, #30]
 8001288:	3301      	adds	r3, #1
 800128a:	83fb      	strh	r3, [r7, #30]
            while (indx < len)
 800128c:	8bfa      	ldrh	r2, [r7, #30]
 800128e:	89bb      	ldrh	r3, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3f1      	bcc.n	8001278 <bmi160_get_regs+0xc0>
 8001294:	e001      	b.n	800129a <bmi160_get_regs+0xe2>
            }
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001296:	23fe      	movs	r3, #254	; 0xfe
 8001298:	777b      	strb	r3, [r7, #29]
        }
    }

    return rslt;
 800129a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800129e:	46ad      	mov	sp, r5
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}

080012a8 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	4613      	mov	r3, r2
 80012b8:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <bmi160_set_regs+0x28>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	75fb      	strb	r3, [r7, #23]
 80012d4:	e045      	b.n	8001362 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 80012d6:	89bb      	ldrh	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
 80012dc:	23f4      	movs	r3, #244	; 0xf4
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	e03f      	b.n	8001362 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->interface == BMI160_SPI_INTF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d103      	bne.n	80012f2 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012f0:	73fb      	strb	r3, [r7, #15]
        }
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7a1b      	ldrb	r3, [r3, #8]
 80012f6:	2b11      	cmp	r3, #17
 80012f8:	d003      	beq.n	8001302 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80012fe:	2b15      	cmp	r3, #21
 8001300:	d124      	bne.n	800134c <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1c      	ldr	r4, [r3, #32]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7858      	ldrb	r0, [r3, #1]
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	7bf9      	ldrb	r1, [r7, #15]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	47a0      	blx	r4
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2001      	movs	r0, #1
 800131c:	4798      	blx	r3
 800131e:	e01a      	b.n	8001356 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1c      	ldr	r4, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7858      	ldrb	r0, [r3, #1]
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	441a      	add	r2, r3
 800132e:	7bf9      	ldrb	r1, [r7, #15]
 8001330:	2301      	movs	r3, #1
 8001332:	47a0      	blx	r4
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3301      	adds	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	2001      	movs	r0, #1
 8001344:	4798      	blx	r3
            for (; count < len; count++)
 8001346:	7dbb      	ldrb	r3, [r7, #22]
 8001348:	3301      	adds	r3, #1
 800134a:	75bb      	strb	r3, [r7, #22]
 800134c:	7dbb      	ldrb	r3, [r7, #22]
 800134e:	b29b      	uxth	r3, r3
 8001350:	89ba      	ldrh	r2, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d8e4      	bhi.n	8001320 <bmi160_set_regs+0x78>

            }
        }
        if (rslt != BMI160_OK)
 8001356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 800135e:	23fe      	movs	r3, #254	; 0xfe
 8001360:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001366:	4618      	mov	r0, r3
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}

0800136e <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8001376:	2303      	movs	r3, #3
 8001378:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f94e 	bl	800161c <null_ptr_check>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]

    /* An extra dummy byte is read during SPI read */
    if (dev->interface == BMI160_SPI_INTF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	789b      	ldrb	r3, [r3, #2]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d104      	bne.n	8001396 <bmi160_init+0x28>
    {
        dev->dummy_byte = 1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001394:	e003      	b.n	800139e <bmi160_init+0x30>
    }
    else
    {
        dev->dummy_byte = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <bmi160_init+0x52>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <bmi160_init+0x52>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80013ae:	f107 010d 	add.w	r1, r7, #13
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	207f      	movs	r0, #127	; 0x7f
 80013b8:	f7ff fefe 	bl	80011b8 <bmi160_get_regs>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d127      	bne.n	8001418 <bmi160_init+0xaa>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80013ce:	e007      	b.n	80013e0 <bmi160_init+0x72>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff feee 	bl	80011b8 <bmi160_get_regs>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	1e5a      	subs	r2, r3, #1
 80013e4:	73ba      	strb	r2, [r7, #14]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <bmi160_init+0x84>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2bd1      	cmp	r3, #209	; 0xd1
 80013f0:	d1ee      	bne.n	80013d0 <bmi160_init+0x62>
        }
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <bmi160_init+0xa6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2bd1      	cmp	r3, #209	; 0xd1
 8001400:	d108      	bne.n	8001414 <bmi160_init+0xa6>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	22ff      	movs	r2, #255	; 0xff
 8001406:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f80b 	bl	8001424 <bmi160_soft_reset>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e001      	b.n	8001418 <bmi160_init+0xaa>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001414:	23fd      	movs	r3, #253	; 0xfd
 8001416:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 800142c:	23b6      	movs	r3, #182	; 0xb6
 800142e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <bmi160_soft_reset+0x1a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800143e:	23ff      	movs	r3, #255	; 0xff
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e024      	b.n	800148e <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001444:	f107 010e 	add.w	r1, r7, #14
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	207e      	movs	r0, #126	; 0x7e
 800144e:	f7ff ff2b 	bl	80012a8 <bmi160_set_regs>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	2001      	movs	r0, #1
 800145c:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <bmi160_soft_reset+0x5c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800146e:	f107 010e 	add.w	r1, r7, #14
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	207f      	movs	r0, #127	; 0x7f
 8001478:	f7ff fe9e 	bl	80011b8 <bmi160_get_regs>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8001480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8e7 	bl	800165c <default_param_settg>
        }
    }

    return rslt;
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <bmi160_set_sens_conf+0x1a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80014b4:	23ff      	movs	r3, #255	; 0xff
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e01f      	b.n	80014fa <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f8f8 	bl	80016b0 <set_accel_conf>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d116      	bne.n	80014fa <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fa29 	bl	8001924 <set_gyro_conf>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f811 	bl	8001506 <bmi160_set_power_mode>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d104      	bne.n	80014fa <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f9e2 	bl	80018ba <check_invalid_settg>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <bmi160_set_power_mode+0x1a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001520:	23ff      	movs	r3, #255	; 0xff
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e00d      	b.n	8001542 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fb05 	bl	8001b36 <set_accel_pwr>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fb93 	bl	8001c64 <set_gyro_pwr>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 800156e:	7d7b      	ldrb	r3, [r7, #21]
 8001570:	109b      	asrs	r3, r3, #2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8001582:	7d3b      	ldrb	r3, [r7, #20]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8001588:	2303      	movs	r3, #3
 800158a:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d03c      	beq.n	800160c <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d024      	beq.n	80015e2 <bmi160_get_sensor_data+0x94>
 8001598:	2b03      	cmp	r3, #3
 800159a:	dc34      	bgt.n	8001606 <bmi160_get_sensor_data+0xb8>
 800159c:	2b01      	cmp	r3, #1
 800159e:	d002      	beq.n	80015a6 <bmi160_get_sensor_data+0x58>
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d00f      	beq.n	80015c4 <bmi160_get_sensor_data+0x76>
 80015a4:	e02f      	b.n	8001606 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }
                break;
 80015b0:	e02e      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 80015b2:	7dbb      	ldrb	r3, [r7, #22]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fb97 	bl	8001cec <get_accel_data>
 80015be:	4603      	mov	r3, r0
 80015c0:	75fb      	strb	r3, [r7, #23]
                break;
 80015c2:	e025      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 80015ca:	23ff      	movs	r3, #255	; 0xff
 80015cc:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }
                break;
 80015ce:	e01f      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 80015d0:	7dbb      	ldrb	r3, [r7, #22]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fc5c 	bl	8001e94 <get_gyro_data>
 80015dc:	4603      	mov	r3, r0
 80015de:	75fb      	strb	r3, [r7, #23]
                break;
 80015e0:	e016      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <bmi160_get_sensor_data+0xa0>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 80015ee:	23ff      	movs	r3, #255	; 0xff
 80015f0:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }
                break;
 80015f2:	e00d      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 80015f4:	7db8      	ldrb	r0, [r7, #22]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	f000 fda4 	bl	8002148 <get_accel_gyro_data>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]
                break;
 8001604:	e004      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8001606:	23fb      	movs	r3, #251	; 0xfb
 8001608:	75fb      	strb	r3, [r7, #23]
                break;
 800160a:	e001      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 800160c:	23ff      	movs	r3, #255	; 0xff
 800160e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001610:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <null_ptr_check+0x26>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <null_ptr_check+0x26>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <null_ptr_check+0x26>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001642:	23ff      	movs	r3, #255	; 0xff
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e001      	b.n	800164c <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2208      	movs	r2, #8
 800166e:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2210      	movs	r2, #16
 8001674:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2203      	movs	r2, #3
 800167a:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2208      	movs	r2, #8
 8001686:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2214      	movs	r2, #20
 800168c:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6852      	ldr	r2, [r2, #4]
 800169a:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	611a      	str	r2, [r3, #16]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80016b8:	2300      	movs	r3, #0
 80016ba:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f833 	bl	800172e <check_accel_config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d126      	bne.n	8001722 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80016d4:	f107 010c 	add.w	r1, r7, #12
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	2040      	movs	r0, #64	; 0x40
 80016de:	f7ff fde3 	bl	80012a8 <bmi160_set_regs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d119      	bne.n	8001722 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	795a      	ldrb	r2, [r3, #5]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	79da      	ldrb	r2, [r3, #7]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	2041      	movs	r0, #65	; 0x41
 800170a:	f7ff fdcd 	bl	80012a8 <bmi160_set_regs>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	799a      	ldrb	r2, [r3, #6]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2202      	movs	r2, #2
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	2040      	movs	r0, #64	; 0x40
 8001740:	f7ff fd3a 	bl	80011b8 <bmi160_get_regs>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11b      	bne.n	8001788 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f81e 	bl	8001794 <process_accel_odr>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f848 	bl	80017fc <process_accel_bw>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f867 	bl	8001852 <process_accel_range>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_MAX)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	795b      	ldrb	r3, [r3, #5]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d81a      	bhi.n	80017e8 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	795a      	ldrb	r2, [r3, #5]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7a5b      	ldrb	r3, [r3, #9]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d016      	beq.n	80017ec <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f023 030f 	bic.w	r3, r3, #15
 80017cc:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80017ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e001      	b.n	80017ec <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80017e8:	23fc      	movs	r3, #252	; 0xfc
 80017ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_MAX)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	79db      	ldrb	r3, [r3, #7]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d811      	bhi.n	800183e <process_accel_bw+0x42>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	79da      	ldrb	r2, [r3, #7]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	7adb      	ldrb	r3, [r3, #11]
 8001822:	429a      	cmp	r2, r3
 8001824:	d00d      	beq.n	8001842 <process_accel_bw+0x46>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	79db      	ldrb	r3, [r3, #7]
 800182a:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001834:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7bba      	ldrb	r2, [r7, #14]
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e001      	b.n	8001842 <process_accel_bw+0x46>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800183e:	23fc      	movs	r3, #252	; 0xfc
 8001840:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	799b      	ldrb	r3, [r3, #6]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d81a      	bhi.n	80018a6 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	799a      	ldrb	r2, [r3, #6]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7a9b      	ldrb	r3, [r3, #10]
 8001878:	429a      	cmp	r2, r3
 800187a:	d016      	beq.n	80018aa <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	799b      	ldrb	r3, [r3, #6]
 8001880:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f023 030f 	bic.w	r3, r3, #15
 800188a:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 800188c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	b25a      	sxtb	r2, r3
 8001896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800189a:	4313      	orrs	r3, r2
 800189c:	b25b      	sxtb	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e001      	b.n	80018aa <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80018a6:	23fc      	movs	r3, #252	; 0xfc
 80018a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff fc72 	bl	80011b8 <bmi160_get_regs>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 80018f0:	23fa      	movs	r3, #250	; 0xfa
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e010      	b.n	8001918 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d102      	bne.n	8001902 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 80018fc:	23f9      	movs	r3, #249	; 0xf9
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e00a      	b.n	8001918 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d102      	bne.n	800190e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001908:	23f8      	movs	r3, #248	; 0xf8
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e004      	b.n	8001918 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	2b07      	cmp	r3, #7
 8001912:	d101      	bne.n	8001918 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001914:	23f7      	movs	r3, #247	; 0xf7
 8001916:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800192c:	2300      	movs	r3, #0
 800192e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f833 	bl	80019a2 <check_gyro_config>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d126      	bne.n	8001996 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001948:	f107 010c 	add.w	r1, r7, #12
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	2042      	movs	r0, #66	; 0x42
 8001952:	f7ff fca9 	bl	80012a8 <bmi160_set_regs>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d119      	bne.n	8001996 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7b5a      	ldrb	r2, [r3, #13]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7bda      	ldrb	r2, [r3, #15]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	2043      	movs	r0, #67	; 0x43
 800197e:	f7ff fc93 	bl	80012a8 <bmi160_set_regs>
 8001982:	4603      	mov	r3, r0
 8001984:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7b9a      	ldrb	r2, [r3, #14]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	2042      	movs	r0, #66	; 0x42
 80019b4:	f7ff fc00 	bl	80011b8 <bmi160_get_regs>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80019bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11b      	bne.n	80019fc <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f81e 	bl	8001a08 <process_gyro_odr>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f848 	bl	8001a70 <process_gyro_bw>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80019e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f86b 	bl	8001ace <process_gyro_range>
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_MAX)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	7b5b      	ldrb	r3, [r3, #13]
 8001a22:	2b0d      	cmp	r3, #13
 8001a24:	d81a      	bhi.n	8001a5c <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	7b5a      	ldrb	r2, [r3, #13]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	7c5b      	ldrb	r3, [r3, #17]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d016      	beq.n	8001a60 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	7b5b      	ldrb	r3, [r3, #13]
 8001a36:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001a42:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	b25a      	sxtb	r2, r3
 8001a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e001      	b.n	8001a60 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001a5c:	23fc      	movs	r3, #252	; 0xfc
 8001a5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_MAX)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7bdb      	ldrb	r3, [r3, #15]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d815      	bhi.n	8001aba <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7bdb      	ldrb	r3, [r3, #15]
 8001a92:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a9c:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001a9e:	7b7b      	ldrb	r3, [r7, #13]
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001aa8:	b25a      	sxtb	r2, r3
 8001aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e001      	b.n	8001abe <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001aba:	23fc      	movs	r3, #252	; 0xfc
 8001abc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_MAX)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	7b9b      	ldrb	r3, [r3, #14]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d81a      	bhi.n	8001b22 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7b9a      	ldrb	r2, [r3, #14]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7c9b      	ldrb	r3, [r3, #18]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d016      	beq.n	8001b26 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7b9b      	ldrb	r3, [r3, #14]
 8001afc:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MSK;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f023 0307 	bic.w	r3, r3, #7
 8001b06:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MSK);
 8001b08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	b25a      	sxtb	r2, r3
 8001b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e001      	b.n	8001b26 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001b22:	23fc      	movs	r3, #252	; 0xfc
 8001b24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	791b      	ldrb	r3, [r3, #4]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	d92b      	bls.n	8001ba6 <set_accel_pwr+0x70>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d827      	bhi.n	8001ba6 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	791a      	ldrb	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7a1b      	ldrb	r3, [r3, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d024      	beq.n	8001bac <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001b62:	f107 030e 	add.w	r3, r7, #14
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f826 	bl	8001bba <process_under_sampling>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	1d19      	adds	r1, r3, #4
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	207e      	movs	r0, #126	; 0x7e
 8001b84:	f7ff fb90 	bl	80012a8 <bmi160_set_regs>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7a1b      	ldrb	r3, [r3, #8]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d103      	bne.n	8001b9c <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2005      	movs	r0, #5
 8001b9a:	4798      	blx	r3
                }
                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791a      	ldrb	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ba4:	e002      	b.n	8001bac <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001ba6:	23fc      	movs	r3, #252	; 0xfc
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e000      	b.n	8001bae <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001bac:	bf00      	nop
    }

    return rslt;
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	737b      	strb	r3, [r7, #13]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	2040      	movs	r0, #64	; 0x40
 8001bd4:	f7ff faf0 	bl	80011b8 <bmi160_get_regs>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d139      	bne.n	8001c58 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	2b12      	cmp	r3, #18
 8001bea:	d120      	bne.n	8001c2e <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf4:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	2040      	movs	r0, #64	; 0x40
 8001c0a:	f7ff fb4d 	bl	80012a8 <bmi160_set_regs>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]

            /* disable the pre-filter data in
             * low power mode */
            if (rslt == BMI160_OK)
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11e      	bne.n	8001c58 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
 8001c1a:	f107 010d 	add.w	r1, r7, #13
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2202      	movs	r2, #2
 8001c22:	2058      	movs	r0, #88	; 0x58
 8001c24:	f7ff fb40 	bl	80012a8 <bmi160_set_regs>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e014      	b.n	8001c58 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0f      	bge.n	8001c58 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c40:	73bb      	strb	r3, [r7, #14]

            /* disable under-sampling parameter
             * if already enabled */
            *data = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7bba      	ldrb	r2, [r7, #14]
 8001c46:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	2040      	movs	r0, #64	; 0x40
 8001c50:	f7ff fb2a 	bl	80012a8 <bmi160_set_regs>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7b1b      	ldrb	r3, [r3, #12]
 8001c74:	2b14      	cmp	r3, #20
 8001c76:	d007      	beq.n	8001c88 <set_gyro_pwr+0x24>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7b1b      	ldrb	r3, [r3, #12]
 8001c7c:	2b15      	cmp	r3, #21
 8001c7e:	d003      	beq.n	8001c88 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001c84:	2b17      	cmp	r3, #23
 8001c86:	d129      	bne.n	8001cdc <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7b1a      	ldrb	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7c1b      	ldrb	r3, [r3, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d025      	beq.n	8001ce0 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f103 010c 	add.w	r1, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	207e      	movs	r0, #126	; 0x7e
 8001ca0:	f7ff fb02 	bl	80012a8 <bmi160_set_regs>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7c1b      	ldrb	r3, [r3, #16]
 8001cac:	2b14      	cmp	r3, #20
 8001cae:	d104      	bne.n	8001cba <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2051      	movs	r0, #81	; 0x51
 8001cb6:	4798      	blx	r3
 8001cb8:	e00b      	b.n	8001cd2 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7c1b      	ldrb	r3, [r3, #16]
 8001cbe:	2b17      	cmp	r3, #23
 8001cc0:	d107      	bne.n	8001cd2 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001cc6:	2b15      	cmp	r3, #21
 8001cc8:	d103      	bne.n	8001cd2 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	200a      	movs	r0, #10
 8001cd0:	4798      	blx	r3
            }
            else
            {
                /* do nothing */
            }
            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7b1a      	ldrb	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001cda:	e001      	b.n	8001ce0 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001cdc:	23fc      	movs	r3, #252	; 0xfc
 8001cde:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[9] = { 0 };
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3306      	adds	r3, #6
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f107 0114 	add.w	r1, r7, #20
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2012      	movs	r0, #18
 8001d2c:	f7ff fa44 	bl	80011b8 <bmi160_get_regs>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8001d36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 80a1 	bne.w	8001e82 <get_accel_data+0x196>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8001d40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001d4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d4e:	4413      	add	r3, r2
 8001d50:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8001d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001d62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d66:	4413      	add	r3, r2
 8001d68:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001d70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	8c3a      	ldrh	r2, [r7, #32]
 8001d86:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001d88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001d92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d96:	4413      	add	r3, r2
 8001d98:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8001da0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001daa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dae:	4413      	add	r3, r2
 8001db0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001db8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	8c3a      	ldrh	r2, [r7, #32]
 8001dce:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8001dd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001dda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dde:	4413      	add	r3, r2
 8001de0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8001de8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001df2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001df6:	4413      	add	r3, r2
 8001df8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001e00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	8c3a      	ldrh	r2, [r7, #32]
 8001e16:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d12d      	bne.n	8001e7a <get_accel_data+0x18e>
        {
            time_0 = data_array[idx++];
 8001e1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001e28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001e36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001e40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e44:	4413      	add	r3, r2
 8001e46:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001e50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001e5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e5e:	4413      	add	r3, r2
 8001e60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001e68:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e006      	b.n	8001e88 <get_accel_data+0x19c>
        }
        else
        {
            accel->sensortime = 0;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	e002      	b.n	8001e88 <get_accel_data+0x19c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8001e82:	23fe      	movs	r3, #254	; 0xfe
 8001e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8001e88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3730      	adds	r7, #48	; 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 8082 	bne.w	8001fd4 <get_gyro_data+0x140>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8001ed0:	f107 0110 	add.w	r1, r7, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2206      	movs	r2, #6
 8001ed8:	200c      	movs	r0, #12
 8001eda:	f7ff f96d 	bl	80011b8 <bmi160_get_regs>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8001ee4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d16f      	bne.n	8001fcc <get_gyro_data+0x138>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8001eec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001ef6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001efa:	4413      	add	r3, r2
 8001efc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8001f04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f12:	4413      	add	r3, r2
 8001f14:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	8c3a      	ldrh	r2, [r7, #32]
 8001f32:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8001f34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f42:	4413      	add	r3, r2
 8001f44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8001f4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	8c3a      	ldrh	r2, [r7, #32]
 8001f7a:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8001f7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8001f94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001fac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	8c3a      	ldrh	r2, [r7, #32]
 8001fc2:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	e0b7      	b.n	800213c <get_gyro_data+0x2a8>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001fcc:	23fe      	movs	r3, #254	; 0xfe
 8001fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fd2:	e0b3      	b.n	800213c <get_gyro_data+0x2a8>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	330c      	adds	r3, #12
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f107 0110 	add.w	r1, r7, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	200c      	movs	r0, #12
 8001fe4:	f7ff f8e8 	bl	80011b8 <bmi160_get_regs>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8001fee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 809f 	bne.w	8002136 <get_gyro_data+0x2a2>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8001ff8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002002:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002006:	4413      	add	r3, r2
 8002008:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800200c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002010:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800201a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800201e:	4413      	add	r3, r2
 8002020:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002028:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	8c3a      	ldrh	r2, [r7, #32]
 800203e:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8002040:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800204a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800204e:	4413      	add	r3, r2
 8002050:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002058:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002062:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002066:	4413      	add	r3, r2
 8002068:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800206c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	8c3a      	ldrh	r2, [r7, #32]
 8002086:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8002088:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002092:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002096:	4413      	add	r3, r2
 8002098:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800209c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 80020a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80020aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80020b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80020b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	b21a      	sxth	r2, r3
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	8c3a      	ldrh	r2, [r7, #32]
 80020ce:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 80020d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020d4:	3306      	adds	r3, #6
 80020d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            time_0 = data_array[idx++];
 80020da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80020e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020e8:	4413      	add	r3, r2
 80020ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80020ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80020f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80020fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002100:	4413      	add	r3, r2
 8002102:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002106:	b29b      	uxth	r3, r3
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800210c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002116:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800211a:	4413      	add	r3, r2
 800211c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002124:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	431a      	orrs	r2, r3
 800212a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212e:	431a      	orrs	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e002      	b.n	800213c <get_gyro_data+0x2a8>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8002136:	23fe      	movs	r3, #254	; 0xfe
 8002138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 800213c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002140:	4618      	mov	r0, r3
 8002142:	3730      	adds	r7, #48	; 0x30
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	b29b      	uxth	r3, r3
 8002182:	330c      	adds	r3, #12
 8002184:	b29a      	uxth	r2, r3
 8002186:	f107 0110 	add.w	r1, r7, #16
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	200c      	movs	r0, #12
 800218e:	f7ff f813 	bl	80011b8 <bmi160_get_regs>
 8002192:	4603      	mov	r3, r0
 8002194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8002198:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 8118 	bne.w	80023d2 <get_accel_gyro_data+0x28a>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 80021a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021b0:	4413      	add	r3, r2
 80021b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80021ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021c8:	4413      	add	r3, r2
 80021ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80021d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	b21a      	sxth	r2, r3
 80021da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021de:	b21b      	sxth	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8c3a      	ldrh	r2, [r7, #32]
 80021e8:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80021ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021f8:	4413      	add	r3, r2
 80021fa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002202:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800220c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002210:	4413      	add	r3, r2
 8002212:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002216:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800221a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8c3a      	ldrh	r2, [r7, #32]
 8002230:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8002232:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800223c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002240:	4413      	add	r3, r2
 8002242:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800224a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002254:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002258:	4413      	add	r3, r2
 800225a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800225e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002262:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b21a      	sxth	r2, r3
 800226a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8c3a      	ldrh	r2, [r7, #32]
 8002278:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800227a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002284:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002288:	4413      	add	r3, r2
 800228a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800228e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002292:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800229c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022a0:	4413      	add	r3, r2
 80022a2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	8c3a      	ldrh	r2, [r7, #32]
 80022c0:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80022c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022d0:	4413      	add	r3, r2
 80022d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80022da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022e8:	4413      	add	r3, r2
 80022ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022fe:	b21b      	sxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	8c3a      	ldrh	r2, [r7, #32]
 8002308:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800230a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002314:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002318:	4413      	add	r3, r2
 800231a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800231e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002322:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800232c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002330:	4413      	add	r3, r2
 8002332:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002336:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800233a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21a      	sxth	r2, r3
 8002342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002346:	b21b      	sxth	r3, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	8c3a      	ldrh	r2, [r7, #32]
 8002350:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d135      	bne.n	80023c4 <get_accel_gyro_data+0x27c>
        {
            time_0 = data_array[idx++];
 8002358:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002362:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002366:	4413      	add	r3, r2
 8002368:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800236c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8002370:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800237a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800237e:	4413      	add	r3, r2
 8002380:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002384:	b29b      	uxth	r3, r3
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800238a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002394:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002398:	4413      	add	r3, r2
 800239a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80023a2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80023b2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	431a      	orrs	r2, r3
 80023b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	e009      	b.n	80023d8 <get_accel_gyro_data+0x290>
        }
        else
        {
            accel->sensortime = 0;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e002      	b.n	80023d8 <get_accel_gyro_data+0x290>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 80023d2:	23fe      	movs	r3, #254	; 0xfe
 80023d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 80023d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2203      	movs	r2, #3
 80023fc:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	715a      	strb	r2, [r3, #5]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af04      	add	r7, sp, #16
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	460b      	mov	r3, r1
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	b29a      	uxth	r2, r3
 800243a:	8af9      	ldrh	r1, [r7, #22]
 800243c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	2302      	movs	r3, #2
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2301      	movs	r3, #1
 800244e:	f004 f803 	bl	8006458 <HAL_I2C_Mem_Read>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10b      	bne.n	8002470 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8002458:	7d7b      	ldrb	r3, [r7, #21]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21a      	sxth	r2, r3
 800245e:	7d3b      	ldrb	r3, [r7, #20]
 8002460:	b21b      	sxth	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	b21b      	sxth	r3, r3
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	801a      	strh	r2, [r3, #0]
		return true;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <read_register16+0x56>
	} else
		return false;
 8002470:	2300      	movs	r3, #0

}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800247a:	b590      	push	{r4, r7, lr}
 800247c:	b08b      	sub	sp, #44	; 0x2c
 800247e:	af04      	add	r7, sp, #16
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	461a      	mov	r2, r3
 8002486:	460b      	mov	r3, r1
 8002488:	72fb      	strb	r3, [r7, #11]
 800248a:	4613      	mov	r3, r2
 800248c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	b29a      	uxth	r2, r3
 800249e:	7abb      	ldrb	r3, [r7, #10]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	8af9      	ldrh	r1, [r7, #22]
 80024a4:	f241 3488 	movw	r4, #5000	; 0x1388
 80024a8:	9402      	str	r4, [sp, #8]
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	f003 ffd1 	bl	8006458 <HAL_I2C_Mem_Read>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <read_data+0x46>
		return 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <read_data+0x48>
	else
		return 1;
 80024c0:	2301      	movs	r3, #1

}
 80024c2:	4618      	mov	r0, r3
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}

080024ca <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	461a      	mov	r2, r3
 80024d6:	2188      	movs	r1, #136	; 0x88
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff9f 	bl	800241c <read_register16>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06f      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3302      	adds	r3, #2
 80024e8:	461a      	mov	r2, r3
 80024ea:	218a      	movs	r1, #138	; 0x8a
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff95 	bl	800241c <read_register16>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d065      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	461a      	mov	r2, r3
 80024fe:	218c      	movs	r1, #140	; 0x8c
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff8b 	bl	800241c <read_register16>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05b      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3306      	adds	r3, #6
 8002510:	461a      	mov	r2, r3
 8002512:	218e      	movs	r1, #142	; 0x8e
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff81 	bl	800241c <read_register16>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d051      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3308      	adds	r3, #8
 8002524:	461a      	mov	r2, r3
 8002526:	2190      	movs	r1, #144	; 0x90
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff77 	bl	800241c <read_register16>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d047      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	330a      	adds	r3, #10
 8002538:	461a      	mov	r2, r3
 800253a:	2192      	movs	r1, #146	; 0x92
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff6d 	bl	800241c <read_register16>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03d      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	330c      	adds	r3, #12
 800254c:	461a      	mov	r2, r3
 800254e:	2194      	movs	r1, #148	; 0x94
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff63 	bl	800241c <read_register16>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d033      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	330e      	adds	r3, #14
 8002560:	461a      	mov	r2, r3
 8002562:	2196      	movs	r1, #150	; 0x96
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff59 	bl	800241c <read_register16>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d029      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3310      	adds	r3, #16
 8002574:	461a      	mov	r2, r3
 8002576:	2198      	movs	r1, #152	; 0x98
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff4f 	bl	800241c <read_register16>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01f      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3312      	adds	r3, #18
 8002588:	461a      	mov	r2, r3
 800258a:	219a      	movs	r1, #154	; 0x9a
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff45 	bl	800241c <read_register16>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3314      	adds	r3, #20
 800259c:	461a      	mov	r2, r3
 800259e:	219c      	movs	r1, #156	; 0x9c
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff3b 	bl	800241c <read_register16>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80025b0:	461a      	mov	r2, r3
 80025b2:	219e      	movs	r1, #158	; 0x9e
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff31 	bl	800241c <read_register16>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <read_calibration_data+0xfa>

		return true;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <read_calibration_data+0xfc>
	}

	return false;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f103 0218 	add.w	r2, r3, #24
 80025dc:	2301      	movs	r3, #1
 80025de:	21a1      	movs	r1, #161	; 0xa1
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff4a 	bl	800247a <read_data>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d14b      	bne.n	8002684 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	331a      	adds	r3, #26
 80025f0:	461a      	mov	r2, r3
 80025f2:	21e1      	movs	r1, #225	; 0xe1
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff11 	bl	800241c <read_register16>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d041      	beq.n	8002684 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f103 021c 	add.w	r2, r3, #28
 8002606:	2301      	movs	r3, #1
 8002608:	21e3      	movs	r1, #227	; 0xe3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ff35 	bl	800247a <read_data>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d136      	bne.n	8002684 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8002616:	f107 030e 	add.w	r3, r7, #14
 800261a:	461a      	mov	r2, r3
 800261c:	21e4      	movs	r1, #228	; 0xe4
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fefc 	bl	800241c <read_register16>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02c      	beq.n	8002684 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	461a      	mov	r2, r3
 8002630:	21e5      	movs	r1, #229	; 0xe5
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fef2 	bl	800241c <read_register16>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d022      	beq.n	8002684 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8002644:	2301      	movs	r3, #1
 8002646:	21e7      	movs	r1, #231	; 0xe7
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff16 	bl	800247a <read_data>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d117      	bne.n	8002684 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8002654:	89fb      	ldrh	r3, [r7, #14]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	b21b      	sxth	r3, r3
 800265a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800265e:	b21a      	sxth	r2, r3
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	121b      	asrs	r3, r3, #8
 8002664:	b21b      	sxth	r3, r3
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	b21b      	sxth	r3, r3
 800266c:	4313      	orrs	r3, r2
 800266e:	b21a      	sxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8002674:	89bb      	ldrh	r3, [r7, #12]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	b29b      	uxth	r3, r3
 800267a:	b21a      	sxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	841a      	strh	r2, [r3, #32]

		return true;
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <read_hum_calibration_data+0xb8>
	}

	return false;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af04      	add	r7, sp, #16
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
 800269a:	4613      	mov	r3, r2
 800269c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	89f9      	ldrh	r1, [r7, #14]
 80026b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	2301      	movs	r3, #1
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	1cbb      	adds	r3, r7, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2301      	movs	r3, #1
 80026c0:	f003 fdd0 	bl	8006264 <HAL_I2C_Mem_Write>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <write_register8+0x40>
		return false;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <write_register8+0x42>
	else
		return true;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026e6:	2b76      	cmp	r3, #118	; 0x76
 80026e8:	d005      	beq.n	80026f6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026ee:	2b77      	cmp	r3, #119	; 0x77
 80026f0:	d001      	beq.n	80026f6 <bmp280_init+0x1e>

		return false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e099      	b.n	800282a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026fc:	2301      	movs	r3, #1
 80026fe:	21d0      	movs	r1, #208	; 0xd0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff feba 	bl	800247a <read_data>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <bmp280_init+0x38>
		return false;
 800270c:	2300      	movs	r3, #0
 800270e:	e08c      	b.n	800282a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002716:	2b58      	cmp	r3, #88	; 0x58
 8002718:	d006      	beq.n	8002728 <bmp280_init+0x50>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d001      	beq.n	8002728 <bmp280_init+0x50>

		return false;
 8002724:	2300      	movs	r3, #0
 8002726:	e080      	b.n	800282a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002728:	22b6      	movs	r2, #182	; 0xb6
 800272a:	21e0      	movs	r1, #224	; 0xe0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ffae 	bl	800268e <write_register8>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <bmp280_init+0x64>
		return false;
 8002738:	2300      	movs	r3, #0
 800273a:	e076      	b.n	800282a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800273c:	f107 020c 	add.w	r2, r7, #12
 8002740:	2301      	movs	r3, #1
 8002742:	21f3      	movs	r1, #243	; 0xf3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fe98 	bl	800247a <read_data>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f5      	bne.n	800273c <bmp280_init+0x64>
				&& (status & 1) == 0)
 8002750:	7b3b      	ldrb	r3, [r7, #12]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff feb5 	bl	80024ca <read_calibration_data>
 8002760:	4603      	mov	r3, r0
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d100      	bne.n	800276e <bmp280_init+0x96>
 800276c:	e001      	b.n	8002772 <bmp280_init+0x9a>
		return false;
 800276e:	2300      	movs	r3, #0
 8002770:	e05b      	b.n	800282a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002778:	2b60      	cmp	r3, #96	; 0x60
 800277a:	d10a      	bne.n	8002792 <bmp280_init+0xba>
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff26 	bl	80025ce <read_hum_calibration_data>
 8002782:	4603      	mov	r3, r0
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <bmp280_init+0xba>
		return false;
 800278e:	2300      	movs	r3, #0
 8002790:	e04b      	b.n	800282a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	795b      	ldrb	r3, [r3, #5]
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	b25a      	sxtb	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	785b      	ldrb	r3, [r3, #1]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b25b      	sxtb	r3, r3
 80027a6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	461a      	mov	r2, r3
 80027ac:	21f5      	movs	r1, #245	; 0xf5
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff6d 	bl	800268e <write_register8>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <bmp280_init+0xe6>
		return false;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e035      	b.n	800282a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	78db      	ldrb	r3, [r3, #3]
 80027d0:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80027d2:	b25a      	sxtb	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	789b      	ldrb	r3, [r3, #2]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25a      	sxtb	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80027ea:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027f2:	2b60      	cmp	r3, #96	; 0x60
 80027f4:	d10d      	bne.n	8002812 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	791b      	ldrb	r3, [r3, #4]
 80027fa:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80027fc:	7b7b      	ldrb	r3, [r7, #13]
 80027fe:	461a      	mov	r2, r3
 8002800:	21f2      	movs	r1, #242	; 0xf2
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ff43 	bl	800268e <write_register8>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <bmp280_init+0x13a>
			return false;
 800280e:	2300      	movs	r3, #0
 8002810:	e00b      	b.n	800282a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	461a      	mov	r2, r3
 8002816:	21f4      	movs	r1, #244	; 0xf4
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff38 	bl	800268e <write_register8>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <bmp280_init+0x150>
		return false;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <bmp280_init+0x152>
	}

	return true;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	10da      	asrs	r2, r3, #3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002850:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002854:	12db      	asrs	r3, r3, #11
 8002856:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	111b      	asrs	r3, r3, #4
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	8812      	ldrh	r2, [r2, #0]
 8002860:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	1112      	asrs	r2, r2, #4
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	8809      	ldrh	r1, [r1, #0]
 800286a:	1a52      	subs	r2, r2, r1
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002878:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800287c:	139b      	asrs	r3, r3, #14
 800287e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	3380      	adds	r3, #128	; 0x80
 8002896:	121b      	asrs	r3, r3, #8
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b09c      	sub	sp, #112	; 0x70
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6578      	str	r0, [r7, #84]	; 0x54
 80028ae:	6539      	str	r1, [r7, #80]	; 0x50
 80028b0:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	461a      	mov	r2, r3
 80028b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028ba:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80028be:	f143 35ff 	adc.w	r5, r3, #4294967295
 80028c2:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80028c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ca:	fb03 f102 	mul.w	r1, r3, r2
 80028ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d2:	fb03 f302 	mul.w	r3, r3, r2
 80028d6:	18ca      	adds	r2, r1, r3
 80028d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028da:	fba3 4503 	umull	r4, r5, r3, r3
 80028de:	1953      	adds	r3, r2, r5
 80028e0:	461d      	mov	r5, r3
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028ee:	fb02 f005 	mul.w	r0, r2, r5
 80028f2:	fb04 f103 	mul.w	r1, r4, r3
 80028f6:	4401      	add	r1, r0
 80028f8:	fba4 2302 	umull	r2, r3, r4, r2
 80028fc:	4419      	add	r1, r3
 80028fe:	460b      	mov	r3, r1
 8002900:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8002904:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800290e:	b21a      	sxth	r2, r3
 8002910:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002916:	fb03 f001 	mul.w	r0, r3, r1
 800291a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800291c:	fb02 f101 	mul.w	r1, r2, r1
 8002920:	4408      	add	r0, r1
 8002922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002924:	fba1 2302 	umull	r2, r3, r1, r2
 8002928:	18c1      	adds	r1, r0, r3
 800292a:	460b      	mov	r3, r1
 800292c:	f04f 0000 	mov.w	r0, #0
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	0459      	lsls	r1, r3, #17
 8002936:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800293a:	0450      	lsls	r0, r2, #17
 800293c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002940:	eb12 0800 	adds.w	r8, r2, r0
 8002944:	eb43 0901 	adc.w	r9, r3, r1
 8002948:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800294c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002952:	b21a      	sxth	r2, r3
 8002954:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	00d1      	lsls	r1, r2, #3
 8002962:	2000      	movs	r0, #0
 8002964:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002968:	1814      	adds	r4, r2, r0
 800296a:	61bc      	str	r4, [r7, #24]
 800296c:	414b      	adcs	r3, r1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002974:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800297a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297c:	fb03 f102 	mul.w	r1, r3, r2
 8002980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002984:	fb03 f302 	mul.w	r3, r3, r2
 8002988:	18ca      	adds	r2, r1, r3
 800298a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298c:	fba3 4503 	umull	r4, r5, r3, r3
 8002990:	1953      	adds	r3, r2, r5
 8002992:	461d      	mov	r5, r3
 8002994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002996:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800299a:	b21a      	sxth	r2, r3
 800299c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029a0:	fb02 f005 	mul.w	r0, r2, r5
 80029a4:	fb04 f103 	mul.w	r1, r4, r3
 80029a8:	4401      	add	r1, r0
 80029aa:	fba4 2302 	umull	r2, r3, r4, r2
 80029ae:	4419      	add	r1, r3
 80029b0:	460b      	mov	r3, r1
 80029b2:	f04f 0800 	mov.w	r8, #0
 80029b6:	f04f 0900 	mov.w	r9, #0
 80029ba:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80029be:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80029c2:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029d4:	fb03 f001 	mul.w	r0, r3, r1
 80029d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80029da:	fb02 f101 	mul.w	r1, r2, r1
 80029de:	1844      	adds	r4, r0, r1
 80029e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029e2:	fba1 0102 	umull	r0, r1, r1, r2
 80029e6:	1863      	adds	r3, r4, r1
 80029e8:	4619      	mov	r1, r3
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	030b      	lsls	r3, r1, #12
 80029f4:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80029f8:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80029fa:	eb18 0102 	adds.w	r1, r8, r2
 80029fe:	6139      	str	r1, [r7, #16]
 8002a00:	eb49 0303 	adc.w	r3, r9, r3
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a0a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002a0e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a12:	1c11      	adds	r1, r2, #0
 8002a14:	6439      	str	r1, [r7, #64]	; 0x40
 8002a16:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	88db      	ldrh	r3, [r3, #6]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	fb02 f001 	mul.w	r0, r2, r1
 8002a30:	4621      	mov	r1, r4
 8002a32:	fb01 f103 	mul.w	r1, r1, r3
 8002a36:	4401      	add	r1, r0
 8002a38:	4620      	mov	r0, r4
 8002a3a:	fba0 2302 	umull	r2, r3, r0, r2
 8002a3e:	4419      	add	r1, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	1058      	asrs	r0, r3, #1
 8002a4c:	17d9      	asrs	r1, r3, #31
 8002a4e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8002a52:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a56:	4313      	orrs	r3, r2
 8002a58:	d101      	bne.n	8002a5e <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e0e1      	b.n	8002c22 <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002a64:	461a      	mov	r2, r3
 8002a66:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a6a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a70:	105b      	asrs	r3, r3, #1
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	07db      	lsls	r3, r3, #31
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a7e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002a82:	4621      	mov	r1, r4
 8002a84:	ebb1 0a02 	subs.w	sl, r1, r2
 8002a88:	4629      	mov	r1, r5
 8002a8a:	eb61 0b03 	sbc.w	fp, r1, r3
 8002a8e:	4652      	mov	r2, sl
 8002a90:	465b      	mov	r3, fp
 8002a92:	1891      	adds	r1, r2, r2
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	415b      	adcs	r3, r3
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a9e:	eb12 020a 	adds.w	r2, r2, sl
 8002aa2:	eb43 030b 	adc.w	r3, r3, fp
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	0199      	lsls	r1, r3, #6
 8002ab0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002ab4:	0190      	lsls	r0, r2, #6
 8002ab6:	1812      	adds	r2, r2, r0
 8002ab8:	eb41 0303 	adc.w	r3, r1, r3
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0099      	lsls	r1, r3, #2
 8002ac6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002aca:	0090      	lsls	r0, r2, #2
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	eb12 020a 	adds.w	r2, r2, sl
 8002ad4:	eb43 030b 	adc.w	r3, r3, fp
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	0099      	lsls	r1, r3, #2
 8002ae2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ae6:	0090      	lsls	r0, r2, #2
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	eb12 010a 	adds.w	r1, r2, sl
 8002af0:	6339      	str	r1, [r7, #48]	; 0x30
 8002af2:	eb43 030b 	adc.w	r3, r3, fp
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
 8002af8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002afc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b00:	f7fe f8c2 	bl	8000c88 <__aeabi_ldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002b12:	b218      	sxth	r0, r3
 8002b14:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b18:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	0b62      	lsrs	r2, r4, #13
 8002b26:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8002b2a:	136b      	asrs	r3, r5, #13
 8002b2c:	fb02 f501 	mul.w	r5, r2, r1
 8002b30:	fb00 f403 	mul.w	r4, r0, r3
 8002b34:	442c      	add	r4, r5
 8002b36:	fba0 0102 	umull	r0, r1, r0, r2
 8002b3a:	1863      	adds	r3, r4, r1
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	0b62      	lsrs	r2, r4, #13
 8002b4c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8002b50:	136b      	asrs	r3, r5, #13
 8002b52:	fb02 f501 	mul.w	r5, r2, r1
 8002b56:	fb00 f403 	mul.w	r4, r0, r3
 8002b5a:	442c      	add	r4, r5
 8002b5c:	fba0 0102 	umull	r0, r1, r0, r2
 8002b60:	1863      	adds	r3, r4, r1
 8002b62:	4619      	mov	r1, r3
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	0e42      	lsrs	r2, r0, #25
 8002b6e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002b72:	164b      	asrs	r3, r1, #25
 8002b74:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b86:	fb03 f001 	mul.w	r0, r3, r1
 8002b8a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b8c:	fb02 f101 	mul.w	r1, r2, r1
 8002b90:	1844      	adds	r4, r0, r1
 8002b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b94:	fba1 0102 	umull	r0, r1, r1, r2
 8002b98:	1863      	adds	r3, r4, r1
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	0cc2      	lsrs	r2, r0, #19
 8002ba6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002baa:	14cb      	asrs	r3, r1, #19
 8002bac:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002bb0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002bb4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002bb8:	1884      	adds	r4, r0, r2
 8002bba:	62bc      	str	r4, [r7, #40]	; 0x28
 8002bbc:	eb41 0303 	adc.w	r3, r1, r3
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002bc6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002bca:	4621      	mov	r1, r4
 8002bcc:	1889      	adds	r1, r1, r2
 8002bce:	6239      	str	r1, [r7, #32]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	eb43 0101 	adc.w	r1, r3, r1
 8002bd6:	6279      	str	r1, [r7, #36]	; 0x24
 8002bd8:	f04f 0000 	mov.w	r0, #0
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002be4:	4623      	mov	r3, r4
 8002be6:	0a18      	lsrs	r0, r3, #8
 8002be8:	462b      	mov	r3, r5
 8002bea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002bee:	462b      	mov	r3, r5
 8002bf0:	1219      	asrs	r1, r3, #8
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002bf8:	b21c      	sxth	r4, r3
 8002bfa:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	012b      	lsls	r3, r5, #4
 8002c08:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002c0c:	0122      	lsls	r2, r4, #4
 8002c0e:	1884      	adds	r4, r0, r2
 8002c10:	603c      	str	r4, [r7, #0]
 8002c12:	eb41 0303 	adc.w	r3, r1, r3
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c1c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8002c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3770      	adds	r7, #112	; 0x70
 8002c26:	46bd      	mov	sp, r7
 8002c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c2c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002c3e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	039a      	lsls	r2, r3, #14
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002c4a:	051b      	lsls	r3, r3, #20
 8002c4c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002c54:	4619      	mov	r1, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	fb03 f301 	mul.w	r3, r3, r1
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002c62:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb02 f201 	mul.w	r2, r2, r1
 8002c72:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	7f09      	ldrb	r1, [r1, #28]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	fb01 f100 	mul.w	r1, r1, r0
 8002c80:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002c82:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002c86:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002c8a:	1292      	asrs	r2, r2, #10
 8002c8c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002c90:	68f9      	ldr	r1, [r7, #12]
 8002c92:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002c96:	fb01 f202 	mul.w	r2, r1, r2
 8002c9a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002c9e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	13db      	asrs	r3, r3, #15
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	13d2      	asrs	r2, r2, #15
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	7e12      	ldrb	r2, [r2, #24]
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cca:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002cd2:	bfa8      	it	ge
 8002cd4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002cd8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	131b      	asrs	r3, r3, #12
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08c      	sub	sp, #48	; 0x30
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002cfe:	2b60      	cmp	r3, #96	; 0x60
 8002d00:	d007      	beq.n	8002d12 <bmp280_read_fixed+0x28>
		if (humidity)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <bmp280_read_fixed+0x32>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	e000      	b.n	8002d1e <bmp280_read_fixed+0x34>
 8002d1c:	2306      	movs	r3, #6
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f107 0218 	add.w	r2, r7, #24
 8002d28:	21f7      	movs	r1, #247	; 0xf7
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff fba5 	bl	800247a <read_data>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <bmp280_read_fixed+0x50>
		return false;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e038      	b.n	8002dac <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002d3a:	7e3b      	ldrb	r3, [r7, #24]
 8002d3c:	031a      	lsls	r2, r3, #12
 8002d3e:	7e7b      	ldrb	r3, [r7, #25]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4313      	orrs	r3, r2
 8002d44:	7eba      	ldrb	r2, [r7, #26]
 8002d46:	0912      	lsrs	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002d4e:	7efb      	ldrb	r3, [r7, #27]
 8002d50:	031a      	lsls	r2, r3, #12
 8002d52:	7f3b      	ldrb	r3, [r7, #28]
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	4313      	orrs	r3, r2
 8002d58:	7f7a      	ldrb	r2, [r7, #29]
 8002d5a:	0912      	lsrs	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	461a      	mov	r2, r3
 8002d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fd61 	bl	8002832 <compensate_temperature>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fd91 	bl	80028a4 <compensate_pressure>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002d8e:	7fbb      	ldrb	r3, [r7, #30]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	7ffa      	ldrb	r2, [r7, #31]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6a39      	ldr	r1, [r7, #32]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ff44 	bl	8002c2c <compensate_humidity>
 8002da4:	4602      	mov	r2, r0
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3730      	adds	r7, #48	; 0x30
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <bmp280_read_float+0x1a>
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	e000      	b.n	8002dd0 <bmp280_read_float+0x1c>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f107 0218 	add.w	r2, r7, #24
 8002dd4:	f107 011c 	add.w	r1, r7, #28
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff ff86 	bl	8002cea <bmp280_read_fixed>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d028      	beq.n	8002e36 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002e40 <bmp280_read_float+0x8c>
 8002df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e06:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002e44 <bmp280_read_float+0x90>
 8002e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e24:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002e48 <bmp280_read_float+0x94>
 8002e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <bmp280_read_float+0x84>
	}

	return false;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	42c80000 	.word	0x42c80000
 8002e44:	43800000 	.word	0x43800000
 8002e48:	44800000 	.word	0x44800000

08002e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a46      	ldr	r2, [pc, #280]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a31      	ldr	r2, [pc, #196]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	482c      	ldr	r0, [pc, #176]	; (8002f88 <MX_GPIO_Init+0x13c>)
 8002ed8:	f003 f84e 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2150      	movs	r1, #80	; 0x50
 8002ee0:	482a      	ldr	r0, [pc, #168]	; (8002f8c <MX_GPIO_Init+0x140>)
 8002ee2:	f003 f849 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2104      	movs	r1, #4
 8002eea:	4829      	ldr	r0, [pc, #164]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002eec:	f003 f844 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_8, GPIO_PIN_SET);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002ef6:	4826      	ldr	r0, [pc, #152]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002ef8:	f003 f83e 	bl	8005f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002efc:	2310      	movs	r3, #16
 8002efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	481d      	ldr	r0, [pc, #116]	; (8002f88 <MX_GPIO_Init+0x13c>)
 8002f14:	f002 fe7c 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002f18:	2350      	movs	r3, #80	; 0x50
 8002f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	2303      	movs	r3, #3
 8002f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4817      	ldr	r0, [pc, #92]	; (8002f8c <MX_GPIO_Init+0x140>)
 8002f30:	f002 fe6e 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f34:	2301      	movs	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <MX_GPIO_Init+0x148>)
 8002f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4812      	ldr	r0, [pc, #72]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002f48:	f002 fe62 	bl	8005c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_8;
 8002f4c:	f640 1304 	movw	r3, #2308	; 0x904
 8002f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	480a      	ldr	r0, [pc, #40]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002f66:	f002 fe53 	bl	8005c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2006      	movs	r0, #6
 8002f70:	f002 fd85 	bl	8005a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f74:	2006      	movs	r0, #6
 8002f76:	f002 fd9e 	bl	8005ab6 <HAL_NVIC_EnableIRQ>

}
 8002f7a:	bf00      	nop
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020400 	.word	0x40020400
 8002f94:	10310000 	.word	0x10310000

08002f98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <MX_I2C1_Init+0x54>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fa4:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <MX_I2C1_Init+0x58>)
 8002fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fd4:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fd6:	f003 f801 	bl	8005fdc <HAL_I2C_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fe0:	f001 f978 	bl	80042d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200004e4 	.word	0x200004e4
 8002fec:	40005400 	.word	0x40005400
 8002ff0:	000186a0 	.word	0x000186a0

08002ff4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_I2C_MspInit+0x84>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12b      	bne.n	800306e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_I2C_MspInit+0x88>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003032:	23c0      	movs	r3, #192	; 0xc0
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003036:	2312      	movs	r3, #18
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800303a:	2301      	movs	r3, #1
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003042:	2304      	movs	r3, #4
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <HAL_I2C_MspInit+0x8c>)
 800304e:	f002 fddf 	bl	8005c10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <HAL_I2C_MspInit+0x88>)
 800305c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40005400 	.word	0x40005400
 800307c:	40023800 	.word	0x40023800
 8003080:	40020400 	.word	0x40020400

08003084 <validate>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t validate(char* nmeastr) {
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]

	    // check to ensure that the string starts with a $
	if(nmeastr[i] == '$')
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b24      	cmp	r3, #36	; 0x24
 800309e:	d103      	bne.n	80030a8 <validate+0x24>
	    i++;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3301      	adds	r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
	else
	    return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while(nmeastr[i] != 0 && nmeastr[i] != '*' && i < 75){
 80030a6:	e00c      	b.n	80030c2 <validate+0x3e>
	    return 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	e048      	b.n	800313e <validate+0xba>
	    calculated_check ^= nmeastr[i];// calculate the checksum
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4053      	eors	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
	    i++;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3301      	adds	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
	while(nmeastr[i] != 0 && nmeastr[i] != '*' && i < 75){
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d008      	beq.n	80030e0 <validate+0x5c>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b2a      	cmp	r3, #42	; 0x2a
 80030d8:	d002      	beq.n	80030e0 <validate+0x5c>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b4a      	cmp	r3, #74	; 0x4a
 80030de:	dde5      	ble.n	80030ac <validate+0x28>
	}

	if(i >= 75){
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b4a      	cmp	r3, #74	; 0x4a
 80030e4:	dd01      	ble.n	80030ea <validate+0x66>
	    return 0;// the string was too long so return an error
 80030e6:	2300      	movs	r3, #0
 80030e8:	e029      	b.n	800313e <validate+0xba>
	}

	if(nmeastr[i] == '*'){
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b2a      	cmp	r3, #42	; 0x2a
 80030f4:	d119      	bne.n	800312a <validate+0xa6>
	    check[0] = nmeastr[i+1];    //put hex chars in check string
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	733b      	strb	r3, [r7, #12]
	    check[1] = nmeastr[i+2];
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	3302      	adds	r3, #2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	4413      	add	r3, r2
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	737b      	strb	r3, [r7, #13]
	    check[2] = 0;
 800310e:	2300      	movs	r3, #0
 8003110:	73bb      	strb	r3, [r7, #14]
	} else
	    return 0;// no checksum separator found there for invalid

	sprintf(checkcalcstr,"%02X",calculated_check);
 8003112:	f107 0308 	add.w	r3, r7, #8
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	490b      	ldr	r1, [pc, #44]	; (8003148 <validate+0xc4>)
 800311a:	4618      	mov	r0, r3
 800311c:	f00c ff0e 	bl	800ff3c <siprintf>
	return (checkcalcstr[0] == check[0] && checkcalcstr[1] == check[1]) ? 1 : 0;
 8003120:	7a3a      	ldrb	r2, [r7, #8]
 8003122:	7b3b      	ldrb	r3, [r7, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d108      	bne.n	800313a <validate+0xb6>
 8003128:	e001      	b.n	800312e <validate+0xaa>
	    return 0;// no checksum separator found there for invalid
 800312a:	2300      	movs	r3, #0
 800312c:	e007      	b.n	800313e <validate+0xba>
	return (checkcalcstr[0] == check[0] && checkcalcstr[1] == check[1]) ? 1 : 0;
 800312e:	7a7a      	ldrb	r2, [r7, #9]
 8003130:	7b7b      	ldrb	r3, [r7, #13]
 8003132:	429a      	cmp	r2, r3
 8003134:	d101      	bne.n	800313a <validate+0xb6>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <validate+0xb8>
 800313a:	2300      	movs	r3, #0
 800313c:	b2db      	uxtb	r3, r3
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	080149d8 	.word	0x080149d8

0800314c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	if(huart == &huart4) {
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_UART_RxCpltCallback+0x4c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d119      	bne.n	8003190 <HAL_UART_RxCpltCallback+0x44>
		// TODO: any task
		if(gpsRxIndex < 128) {
 800315c:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_UART_RxCpltCallback+0x50>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b25b      	sxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	db14      	blt.n	8003190 <HAL_UART_RxCpltCallback+0x44>
			gpsRxBuffer[gpsRxIndex] = gpsRx;
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <HAL_UART_RxCpltCallback+0x50>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_UART_RxCpltCallback+0x54>)
 800316e:	7819      	ldrb	r1, [r3, #0]
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_UART_RxCpltCallback+0x58>)
 8003172:	5499      	strb	r1, [r3, r2]
			gpsRxIndex += 1;
 8003174:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_UART_RxCpltCallback+0x50>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	b2da      	uxtb	r2, r3
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <HAL_UART_RxCpltCallback+0x50>)
 800317e:	701a      	strb	r2, [r3, #0]

			gpsRx = 0;
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <HAL_UART_RxCpltCallback+0x54>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart4, &gpsRx, 1);
 8003186:	2201      	movs	r2, #1
 8003188:	4905      	ldr	r1, [pc, #20]	; (80031a0 <HAL_UART_RxCpltCallback+0x54>)
 800318a:	4803      	ldr	r0, [pc, #12]	; (8003198 <HAL_UART_RxCpltCallback+0x4c>)
 800318c:	f007 fa73 	bl	800a676 <HAL_UART_Receive_IT>
		}
	}
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20002a7c 	.word	0x20002a7c
 800319c:	2000053d 	.word	0x2000053d
 80031a0:	200016e4 	.word	0x200016e4
 80031a4:	20000544 	.word	0x20000544

080031a8 <increaseEchoDelayTime>:
bool
	markCountDelayTime = false,
	markProcessDelayTime = false
;

void increaseEchoDelayTime(uint32_t increaseValue) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
	// try to put pc4 anything...
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80031b0:	2201      	movs	r2, #1
 80031b2:	2110      	movs	r1, #16
 80031b4:	4812      	ldr	r0, [pc, #72]	; (8003200 <increaseEchoDelayTime+0x58>)
 80031b6:	f002 fedf 	bl	8005f78 <HAL_GPIO_WritePin>
	echoRepeaterDelayTime += increaseValue;
 80031ba:	4b12      	ldr	r3, [pc, #72]	; (8003204 <increaseEchoDelayTime+0x5c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	4a10      	ldr	r2, [pc, #64]	; (8003204 <increaseEchoDelayTime+0x5c>)
 80031c4:	6013      	str	r3, [r2, #0]

	// log to sd for debug
	memset(SDmessage, 0, SDmessageWidth);
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <increaseEchoDelayTime+0x60>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	2100      	movs	r1, #0
 80031ce:	480f      	ldr	r0, [pc, #60]	; (800320c <increaseEchoDelayTime+0x64>)
 80031d0:	f00c f82c 	bl	800f22c <memset>
	SDmessageWidth = sprintf(SDmessage, "ECHO increase %d\r\n", echoRepeaterDelayTime);
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <increaseEchoDelayTime+0x5c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	490d      	ldr	r1, [pc, #52]	; (8003210 <increaseEchoDelayTime+0x68>)
 80031dc:	480b      	ldr	r0, [pc, #44]	; (800320c <increaseEchoDelayTime+0x64>)
 80031de:	f00c fead 	bl	800ff3c <siprintf>
 80031e2:	4603      	mov	r3, r0
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <increaseEchoDelayTime+0x60>)
 80031e8:	701a      	strb	r2, [r3, #0]
	writeToSD("Data.txt", SDmessage, SDmessageWidth);
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <increaseEchoDelayTime+0x60>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	4906      	ldr	r1, [pc, #24]	; (800320c <increaseEchoDelayTime+0x64>)
 80031f2:	4808      	ldr	r0, [pc, #32]	; (8003214 <increaseEchoDelayTime+0x6c>)
 80031f4:	f000 f994 	bl	8003520 <writeToSD>
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40020800 	.word	0x40020800
 8003204:	20000250 	.word	0x20000250
 8003208:	20001624 	.word	0x20001624
 800320c:	2000177c 	.word	0x2000177c
 8003210:	080149e0 	.word	0x080149e0
 8003214:	080149f4 	.word	0x080149f4

08003218 <startPreEchoDelayTime>:

void startPreEchoDelayTime() {
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 800321c:	2200      	movs	r2, #0
 800321e:	2110      	movs	r1, #16
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <startPreEchoDelayTime+0x14>)
 8003222:	f002 fea9 	bl	8005f78 <HAL_GPIO_WritePin>
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40020800 	.word	0x40020800

08003230 <startPostEchoDelayTime>:

void startPostEchoDelayTime() {
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8003234:	2200      	movs	r2, #0
 8003236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800323a:	4810      	ldr	r0, [pc, #64]	; (800327c <startPostEchoDelayTime+0x4c>)
 800323c:	f002 fe9c 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
 8003242:	2104      	movs	r1, #4
 8003244:	480d      	ldr	r0, [pc, #52]	; (800327c <startPostEchoDelayTime+0x4c>)
 8003246:	f002 fe97 	bl	8005f78 <HAL_GPIO_WritePin>

	// log to sd for debug
	memset(SDmessage, 0, SDmessageWidth);
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <startPostEchoDelayTime+0x50>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	2100      	movs	r1, #0
 8003252:	480c      	ldr	r0, [pc, #48]	; (8003284 <startPostEchoDelayTime+0x54>)
 8003254:	f00b ffea 	bl	800f22c <memset>
	SDmessageWidth = sprintf(SDmessage, "ECHO started\r\n");
 8003258:	490b      	ldr	r1, [pc, #44]	; (8003288 <startPostEchoDelayTime+0x58>)
 800325a:	480a      	ldr	r0, [pc, #40]	; (8003284 <startPostEchoDelayTime+0x54>)
 800325c:	f00c fe6e 	bl	800ff3c <siprintf>
 8003260:	4603      	mov	r3, r0
 8003262:	b2da      	uxtb	r2, r3
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <startPostEchoDelayTime+0x50>)
 8003266:	701a      	strb	r2, [r3, #0]
	writeToSD("Data.txt", SDmessage, SDmessageWidth);
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <startPostEchoDelayTime+0x50>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4905      	ldr	r1, [pc, #20]	; (8003284 <startPostEchoDelayTime+0x54>)
 8003270:	4806      	ldr	r0, [pc, #24]	; (800328c <startPostEchoDelayTime+0x5c>)
 8003272:	f000 f955 	bl	8003520 <writeToSD>
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40020400 	.word	0x40020400
 8003280:	20001624 	.word	0x20001624
 8003284:	2000177c 	.word	0x2000177c
 8003288:	08014a00 	.word	0x08014a00
 800328c:	080149f4 	.word	0x080149f4

08003290 <endEchoDelayTime>:

void endEchoDelayTime() {
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	2104      	movs	r1, #4
 8003298:	4811      	ldr	r0, [pc, #68]	; (80032e0 <endEchoDelayTime+0x50>)
 800329a:	f002 fe6d 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800329e:	2201      	movs	r2, #1
 80032a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032a4:	480e      	ldr	r0, [pc, #56]	; (80032e0 <endEchoDelayTime+0x50>)
 80032a6:	f002 fe67 	bl	8005f78 <HAL_GPIO_WritePin>

	echoRepeaterDelayTime = 0;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <endEchoDelayTime+0x54>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

	// log to sd for debug
	memset(SDmessage, 0, SDmessageWidth);
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <endEchoDelayTime+0x58>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	2100      	movs	r1, #0
 80032b8:	480c      	ldr	r0, [pc, #48]	; (80032ec <endEchoDelayTime+0x5c>)
 80032ba:	f00b ffb7 	bl	800f22c <memset>
	SDmessageWidth = sprintf(SDmessage, "ECHO complete\r\n");
 80032be:	490c      	ldr	r1, [pc, #48]	; (80032f0 <endEchoDelayTime+0x60>)
 80032c0:	480a      	ldr	r0, [pc, #40]	; (80032ec <endEchoDelayTime+0x5c>)
 80032c2:	f00c fe3b 	bl	800ff3c <siprintf>
 80032c6:	4603      	mov	r3, r0
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <endEchoDelayTime+0x58>)
 80032cc:	701a      	strb	r2, [r3, #0]
	writeToSD("Data.txt", SDmessage, SDmessageWidth);
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <endEchoDelayTime+0x58>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4905      	ldr	r1, [pc, #20]	; (80032ec <endEchoDelayTime+0x5c>)
 80032d6:	4807      	ldr	r0, [pc, #28]	; (80032f4 <endEchoDelayTime+0x64>)
 80032d8:	f000 f922 	bl	8003520 <writeToSD>
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40020400 	.word	0x40020400
 80032e4:	20000250 	.word	0x20000250
 80032e8:	20001624 	.word	0x20001624
 80032ec:	2000177c 	.word	0x2000177c
 80032f0:	08014a10 	.word	0x08014a10
 80032f4:	080149f4 	.word	0x080149f4

080032f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0) { // if signal in PB0 falling... & echo allowed
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d12b      	bne.n	8003360 <HAL_GPIO_EXTI_Callback+0x68>

		// log to sd for debug
		memset(SDmessage, 0, SDmessageWidth);
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_GPIO_EXTI_Callback+0x70>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	2100      	movs	r1, #0
 8003310:	4816      	ldr	r0, [pc, #88]	; (800336c <HAL_GPIO_EXTI_Callback+0x74>)
 8003312:	f00b ff8b 	bl	800f22c <memset>
		SDmessageWidth = sprintf(SDmessage, "Echo interrupt, pin state: %d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0));
 8003316:	2101      	movs	r1, #1
 8003318:	4815      	ldr	r0, [pc, #84]	; (8003370 <HAL_GPIO_EXTI_Callback+0x78>)
 800331a:	f002 fe15 	bl	8005f48 <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
 8003320:	461a      	mov	r2, r3
 8003322:	4914      	ldr	r1, [pc, #80]	; (8003374 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003324:	4811      	ldr	r0, [pc, #68]	; (800336c <HAL_GPIO_EXTI_Callback+0x74>)
 8003326:	f00c fe09 	bl	800ff3c <siprintf>
 800332a:	4603      	mov	r3, r0
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_GPIO_EXTI_Callback+0x70>)
 8003330:	701a      	strb	r2, [r3, #0]
		writeToSD("Data.txt", SDmessage, SDmessageWidth);
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_GPIO_EXTI_Callback+0x70>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	490c      	ldr	r1, [pc, #48]	; (800336c <HAL_GPIO_EXTI_Callback+0x74>)
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <HAL_GPIO_EXTI_Callback+0x80>)
 800333c:	f000 f8f0 	bl	8003520 <writeToSD>

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8003340:	2101      	movs	r1, #1
 8003342:	480b      	ldr	r0, [pc, #44]	; (8003370 <HAL_GPIO_EXTI_Callback+0x78>)
 8003344:	f002 fe00 	bl	8005f48 <HAL_GPIO_ReadPin>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <HAL_GPIO_EXTI_Callback+0x5e>
			markCountDelayTime = true;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_GPIO_EXTI_Callback+0x84>)
 8003350:	2201      	movs	r2, #1
 8003352:	701a      	strb	r2, [r3, #0]
		} else {
			markProcessDelayTime = true;
			startPreEchoDelayTime();
		}
	}
}
 8003354:	e004      	b.n	8003360 <HAL_GPIO_EXTI_Callback+0x68>
			markProcessDelayTime = true;
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <HAL_GPIO_EXTI_Callback+0x88>)
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
			startPreEchoDelayTime();
 800335c:	f7ff ff5c 	bl	8003218 <startPreEchoDelayTime>
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20001624 	.word	0x20001624
 800336c:	2000177c 	.word	0x2000177c
 8003370:	40020400 	.word	0x40020400
 8003374:	08014a20 	.word	0x08014a20
 8003378:	080149f4 	.word	0x080149f4
 800337c:	20000258 	.word	0x20000258
 8003380:	20000259 	.word	0x20000259

08003384 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) { //check if the interrupt comes from TIM1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10d      	bne.n	80033b2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		// task every 250 ms
		// if gps packet has been processed - being receive new packet
		if(gpsRxIndex == 0) HAL_UART_Receive_IT(&huart4, &gpsRx, 1);
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d104      	bne.n	80033a8 <HAL_TIM_PeriodElapsedCallback+0x24>
 800339e:	2201      	movs	r2, #1
 80033a0:	4908      	ldr	r1, [pc, #32]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80033a2:	4809      	ldr	r0, [pc, #36]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80033a4:	f007 f967 	bl	800a676 <HAL_UART_Receive_IT>
		taskCounter += 1;
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033b0:	6013      	str	r3, [r2, #0]
	}
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	2000053d 	.word	0x2000053d
 80033c4:	200016e4 	.word	0x200016e4
 80033c8:	20002a7c 	.word	0x20002a7c
 80033cc:	200016ac 	.word	0x200016ac

080033d0 <bmi160_I2Cwrite>:


//// ------  Util methods  ------ ////
uint8_t bmi160_I2Cwrite(uint8_t addr, uint8_t reg, uint8_t* data, uint16_t len) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af04      	add	r7, sp, #16
 80033d6:	603a      	str	r2, [r7, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
 80033de:	460b      	mov	r3, r1
 80033e0:	71bb      	strb	r3, [r7, #6]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, addr << 1, reg, 1, (uint8_t*)data, len, 1000);
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	b299      	uxth	r1, r3
 80033ee:	79bb      	ldrb	r3, [r7, #6]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f6:	9302      	str	r3, [sp, #8]
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	9301      	str	r3, [sp, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	2301      	movs	r3, #1
 8003402:	4805      	ldr	r0, [pc, #20]	; (8003418 <bmi160_I2Cwrite+0x48>)
 8003404:	f002 ff2e 	bl	8006264 <HAL_I2C_Mem_Write>
 8003408:	4603      	mov	r3, r0
 800340a:	73fb      	strb	r3, [r7, #15]
	return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200004e4 	.word	0x200004e4

0800341c <bmi160_I2Cread>:

uint8_t bmi160_I2Cread(uint8_t addr, uint8_t reg, uint8_t* data, uint16_t len) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af04      	add	r7, sp, #16
 8003422:	603a      	str	r2, [r7, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
 800342a:	460b      	mov	r3, r1
 800342c:	71bb      	strb	r3, [r7, #6]
 800342e:	4613      	mov	r3, r2
 8003430:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, addr << 1, reg, 1, (uint8_t*)data, len, 1000);
 8003432:	79fb      	ldrb	r3, [r7, #7]
 8003434:	b29b      	uxth	r3, r3
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	b299      	uxth	r1, r3
 800343a:	79bb      	ldrb	r3, [r7, #6]
 800343c:	b29a      	uxth	r2, r3
 800343e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003442:	9302      	str	r3, [sp, #8]
 8003444:	88bb      	ldrh	r3, [r7, #4]
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2301      	movs	r3, #1
 800344e:	4805      	ldr	r0, [pc, #20]	; (8003464 <bmi160_I2Cread+0x48>)
 8003450:	f003 f802 	bl	8006458 <HAL_I2C_Mem_Read>
 8003454:	4603      	mov	r3, r0
 8003456:	73fb      	strb	r3, [r7, #15]
	return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200004e4 	.word	0x200004e4

08003468 <altitude>:

float altitude(float pressure, bool isRelative) {
 8003468:	b580      	push	{r7, lr}
 800346a:	ed2d 8b02 	vpush	{d8}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	ed87 0a01 	vstr	s0, [r7, #4]
 8003476:	4603      	mov	r3, r0
 8003478:	70fb      	strb	r3, [r7, #3]
	float ref = 0.0F;
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]

	if(isRelative == true) {
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <altitude+0x26>
		ref = reference_pressure;
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <altitude+0xa4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e020      	b.n	80034d0 <altitude+0x68>
	} else if(isRelative == false) {
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	f083 0301 	eor.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01a      	beq.n	80034d0 <altitude+0x68>
		float startAltitude = 110.0F;
 800349a:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <altitude+0xa8>)
 800349c:	60bb      	str	r3, [r7, #8]
		ref = reference_pressure / powf(1.0F - (startAltitude / 44330.0F), 5.255F); // Sea level pressure in [Pa]
 800349e:	4b1b      	ldr	r3, [pc, #108]	; (800350c <altitude+0xa4>)
 80034a0:	ed93 8a00 	vldr	s16, [r3]
 80034a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80034a8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003514 <altitude+0xac>
 80034ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	eddf 0a17 	vldr	s1, [pc, #92]	; 8003518 <altitude+0xb0>
 80034bc:	eeb0 0a67 	vmov.f32	s0, s15
 80034c0:	f010 fb14 	bl	8013aec <powf>
 80034c4:	eeb0 7a40 	vmov.f32	s14, s0
 80034c8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80034cc:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	return 44330.0F * (1.0F - powf(pressure / ref, 1.0F / 5.255F));
 80034d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80034d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034dc:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800351c <altitude+0xb4>
 80034e0:	eeb0 0a66 	vmov.f32	s0, s13
 80034e4:	f010 fb02 	bl	8013aec <powf>
 80034e8:	eef0 7a40 	vmov.f32	s15, s0
 80034ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003514 <altitude+0xac>
 80034f8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80034fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	ecbd 8b02 	vpop	{d8}
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200005c4 	.word	0x200005c4
 8003510:	42dc0000 	.word	0x42dc0000
 8003514:	472d2a00 	.word	0x472d2a00
 8003518:	40a828f6 	.word	0x40a828f6
 800351c:	3e42dcae 	.word	0x3e42dcae

08003520 <writeToSD>:

// ВАЖНО! Запись на SD производится ТОЛЬКО ПР�? ОТКЛЮЧЕННОМ ОТ СЕТ�? �? ОТ STM программаторе
void writeToSD(char* filename, uint8_t* buf, uint8_t width) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800352e:	b672      	cpsid	i
}
 8003530:	bf00      	nop
	// возможно из-за этого эхо репитер иногда долго раздупляется
	__disable_irq();
	open = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8003532:	2212      	movs	r2, #18
 8003534:	68f9      	ldr	r1, [r7, #12]
 8003536:	4814      	ldr	r0, [pc, #80]	; (8003588 <writeToSD+0x68>)
 8003538:	f00a ff00 	bl	800e33c <f_open>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <writeToSD+0x6c>)
 8003542:	701a      	strb	r2, [r3, #0]
	seek = f_lseek(&file, f_size(&file));
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <writeToSD+0x68>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4619      	mov	r1, r3
 800354a:	480f      	ldr	r0, [pc, #60]	; (8003588 <writeToSD+0x68>)
 800354c:	f00b fafe 	bl	800eb4c <f_lseek>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <writeToSD+0x70>)
 8003556:	701a      	strb	r2, [r3, #0]
	write = f_write(&file, buf, width, &SDmessageBW);
 8003558:	79fa      	ldrb	r2, [r7, #7]
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <writeToSD+0x74>)
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	480a      	ldr	r0, [pc, #40]	; (8003588 <writeToSD+0x68>)
 8003560:	f00b f8b8 	bl	800e6d4 <f_write>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <writeToSD+0x78>)
 800356a:	701a      	strb	r2, [r3, #0]
	close = f_close(&file);
 800356c:	4806      	ldr	r0, [pc, #24]	; (8003588 <writeToSD+0x68>)
 800356e:	f00b fac3 	bl	800eaf8 <f_close>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <writeToSD+0x7c>)
 8003578:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800357a:	b662      	cpsie	i
}
 800357c:	bf00      	nop
	__enable_irq();
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200005ec 	.word	0x200005ec
 800358c:	20000045 	.word	0x20000045
 8003590:	20000046 	.word	0x20000046
 8003594:	20000538 	.word	0x20000538
 8003598:	20000047 	.word	0x20000047
 800359c:	20000048 	.word	0x20000048

080035a0 <crc16>:

uint16_t crc16(uint8_t* bytes) {
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	uint16_t crc = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i = 0; i < sizeof(bytes); i++) {
 80035ac:	2300      	movs	r3, #0
 80035ae:	737b      	strb	r3, [r7, #13]
 80035b0:	e026      	b.n	8003600 <crc16+0x60>
		crc ^= bytes[i];
 80035b2:	7b7b      	ldrb	r3, [r7, #13]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	4053      	eors	r3, r2
 80035c0:	81fb      	strh	r3, [r7, #14]
		for(uint8_t n = 0; n < 8; n++) {
 80035c2:	2300      	movs	r3, #0
 80035c4:	733b      	strb	r3, [r7, #12]
 80035c6:	e015      	b.n	80035f4 <crc16+0x54>
			if(crc & 0x01) {
 80035c8:	89fb      	ldrh	r3, [r7, #14]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <crc16+0x48>
				crc >>= 1;
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80035de:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80035e2:	43db      	mvns	r3, r3
 80035e4:	81fb      	strh	r3, [r7, #14]
 80035e6:	e002      	b.n	80035ee <crc16+0x4e>
			} else {
				crc >>= 1;
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	81fb      	strh	r3, [r7, #14]
		for(uint8_t n = 0; n < 8; n++) {
 80035ee:	7b3b      	ldrb	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	733b      	strb	r3, [r7, #12]
 80035f4:	7b3b      	ldrb	r3, [r7, #12]
 80035f6:	2b07      	cmp	r3, #7
 80035f8:	d9e6      	bls.n	80035c8 <crc16+0x28>
	for(uint8_t i = 0; i < sizeof(bytes); i++) {
 80035fa:	7b7b      	ldrb	r3, [r7, #13]
 80035fc:	3301      	adds	r3, #1
 80035fe:	737b      	strb	r3, [r7, #13]
 8003600:	7b7b      	ldrb	r3, [r7, #13]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d9d5      	bls.n	80035b2 <crc16+0x12>
			}
		}
	}
	return crc;
 8003606:	89fb      	ldrh	r3, [r7, #14]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <bmp280__init>:
//// ------  ------------  ------ ////


//// ======  Barometer  ====== ////
bool bmp280__init() {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	bmp280_init_default_params(&bmp280.params);
 8003618:	4807      	ldr	r0, [pc, #28]	; (8003638 <bmp280__init+0x24>)
 800361a:	f7fe fee3 	bl	80023e4 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <bmp280__init+0x28>)
 8003620:	2276      	movs	r2, #118	; 0x76
 8003622:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <bmp280__init+0x28>)
 8003626:	4a06      	ldr	r2, [pc, #24]	; (8003640 <bmp280__init+0x2c>)
 8003628:	629a      	str	r2, [r3, #40]	; 0x28
	return bmp280_init(&bmp280, &bmp280.params);
 800362a:	4903      	ldr	r1, [pc, #12]	; (8003638 <bmp280__init+0x24>)
 800362c:	4803      	ldr	r0, [pc, #12]	; (800363c <bmp280__init+0x28>)
 800362e:	f7ff f853 	bl	80026d8 <bmp280_init>
 8003632:	4603      	mov	r3, r0
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	200016dc 	.word	0x200016dc
 800363c:	200016b0 	.word	0x200016b0
 8003640:	200004e4 	.word	0x200004e4

08003644 <bmi160__init>:


//// ======  IMU sensor  ====== ////
int8_t bmi160__init() {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
	bmi160.id = BMI160_I2C_ADDR;
 800364a:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <bmi160__init+0x78>)
 800364c:	2268      	movs	r2, #104	; 0x68
 800364e:	705a      	strb	r2, [r3, #1]
	bmi160.interface = BMI160_I2C_INTF;
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <bmi160__init+0x78>)
 8003652:	2200      	movs	r2, #0
 8003654:	709a      	strb	r2, [r3, #2]
	bmi160.read = bmi160_I2Cread;
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <bmi160__init+0x78>)
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <bmi160__init+0x7c>)
 800365a:	61da      	str	r2, [r3, #28]
	bmi160.write = bmi160_I2Cwrite;
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <bmi160__init+0x78>)
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <bmi160__init+0x80>)
 8003660:	621a      	str	r2, [r3, #32]
	bmi160.delay_ms = HAL_Delay;
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <bmi160__init+0x78>)
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <bmi160__init+0x84>)
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
	int8_t result = BMI160_E_DEV_NOT_FOUND;
 8003668:	23fd      	movs	r3, #253	; 0xfd
 800366a:	71fb      	strb	r3, [r7, #7]
	result = bmi160_init(&bmi160);
 800366c:	4813      	ldr	r0, [pc, #76]	; (80036bc <bmi160__init+0x78>)
 800366e:	f7fd fe7e 	bl	800136e <bmi160_init>
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]

	bmi160.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <bmi160__init+0x78>)
 8003678:	220c      	movs	r2, #12
 800367a:	715a      	strb	r2, [r3, #5]
	bmi160.accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <bmi160__init+0x78>)
 800367e:	220c      	movs	r2, #12
 8003680:	719a      	strb	r2, [r3, #6]
	bmi160.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <bmi160__init+0x78>)
 8003684:	2202      	movs	r2, #2
 8003686:	71da      	strb	r2, [r3, #7]
	bmi160.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <bmi160__init+0x78>)
 800368a:	2211      	movs	r2, #17
 800368c:	711a      	strb	r2, [r3, #4]
	bmi160.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <bmi160__init+0x78>)
 8003690:	220d      	movs	r2, #13
 8003692:	735a      	strb	r2, [r3, #13]
	bmi160.gyro_cfg.range = BMI160_GYRO_RANGE_1000_DPS;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <bmi160__init+0x78>)
 8003696:	2201      	movs	r2, #1
 8003698:	739a      	strb	r2, [r3, #14]
	bmi160.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <bmi160__init+0x78>)
 800369c:	2202      	movs	r2, #2
 800369e:	73da      	strb	r2, [r3, #15]
	bmi160.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <bmi160__init+0x78>)
 80036a2:	2215      	movs	r2, #21
 80036a4:	731a      	strb	r2, [r3, #12]
	result = bmi160_set_sens_conf(&bmi160);
 80036a6:	4805      	ldr	r0, [pc, #20]	; (80036bc <bmi160__init+0x78>)
 80036a8:	f7fd fef7 	bl	800149a <bmi160_set_sens_conf>
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]

	return result;
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20001650 	.word	0x20001650
 80036c0:	0800341d 	.word	0x0800341d
 80036c4:	080033d1 	.word	0x080033d1
 80036c8:	08005081 	.word	0x08005081
 80036cc:	00000000 	.word	0x00000000

080036d0 <lora__init>:


//// ======  LoRa radio  ====== ////
uint8_t* lora__init() {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af02      	add	r7, sp, #8
	lora.spi = &hspi1;
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <lora__init+0x88>)
 80036d8:	4a20      	ldr	r2, [pc, #128]	; (800375c <lora__init+0x8c>)
 80036da:	601a      	str	r2, [r3, #0]
	lora.nss_port = GPIOA;
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <lora__init+0x88>)
 80036de:	4a20      	ldr	r2, [pc, #128]	; (8003760 <lora__init+0x90>)
 80036e0:	605a      	str	r2, [r3, #4]
	lora.nss_pin = GPIO_PIN_4;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <lora__init+0x88>)
 80036e4:	2210      	movs	r2, #16
 80036e6:	811a      	strh	r2, [r3, #8]
	lora.frequency = 434000000; // 434 Mhz
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <lora__init+0x88>)
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <lora__init+0x94>)
 80036ec:	611a      	str	r2, [r3, #16]
	lora.pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <lora__init+0x88>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	615a      	str	r2, [r3, #20]
	lora.rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <lora__init+0x88>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	765a      	strb	r2, [r3, #25]
	lora.tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <lora__init+0x88>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	761a      	strb	r2, [r3, #24]
	lora.spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <lora__init+0x88>)
 8003702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003706:	60da      	str	r2, [r3, #12]

	// hardware reset
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <lora__init+0x98>)
 8003710:	f002 fc32 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003714:	2001      	movs	r0, #1
 8003716:	f001 fcb3 	bl	8005080 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800371a:	2201      	movs	r2, #1
 800371c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003720:	4811      	ldr	r0, [pc, #68]	; (8003768 <lora__init+0x98>)
 8003722:	f002 fc29 	bl	8005f78 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003726:	20fa      	movs	r0, #250	; 0xfa
 8003728:	f001 fcaa 	bl	8005080 <HAL_Delay>
	//

	return lora_init(&lora, &hspi1, GPIOA, GPIO_PIN_4, 434000000);
 800372c:	a308      	add	r3, pc, #32	; (adr r3, 8003750 <lora__init+0x80>)
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	e9cd 2300 	strd	r2, r3, [sp]
 8003736:	2310      	movs	r3, #16
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <lora__init+0x90>)
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <lora__init+0x8c>)
 800373c:	4806      	ldr	r0, [pc, #24]	; (8003758 <lora__init+0x88>)
 800373e:	f001 f9d9 	bl	8004af4 <lora_init>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	f3af 8000 	nop.w
 8003750:	19de5080 	.word	0x19de5080
 8003754:	00000000 	.word	0x00000000
 8003758:	2000168c 	.word	0x2000168c
 800375c:	200029dc 	.word	0x200029dc
 8003760:	40020000 	.word	0x40020000
 8003764:	19de5080 	.word	0x19de5080
 8003768:	40020400 	.word	0x40020400
 800376c:	00000000 	.word	0x00000000

08003770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003774:	b0b9      	sub	sp, #228	; 0xe4
 8003776:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003778:	f001 fc10 	bl	8004f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800377c:	f000 fd28 	bl	80041d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003780:	f7ff fb64 	bl	8002e4c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8003784:	f000 fe1c 	bl	80043c0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003788:	f008 fa28 	bl	800bbdc <MX_FATFS_Init>
  MX_UART4_Init();
 800378c:	f001 fb62 	bl	8004e54 <MX_UART4_Init>
  MX_RTC_Init();
 8003790:	f000 fda6 	bl	80042e0 <MX_RTC_Init>
  MX_TIM1_Init();
 8003794:	f001 fae6 	bl	8004d64 <MX_TIM1_Init>
  MX_I2C1_Init();
 8003798:	f7ff fbfe 	bl	8002f98 <MX_I2C1_Init>
  MX_SPI1_Init();
 800379c:	f000 feaa 	bl	80044f4 <MX_SPI1_Init>
  MX_ADC2_Init();
 80037a0:	f7fd fc74 	bl	800108c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  bmp280__init_STATUS = bmp280__init();
 80037a4:	f7ff ff36 	bl	8003614 <bmp280__init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <main+0x240>)
 80037ae:	701a      	strb	r2, [r3, #0]
  bmi160__init_STATUS = bmi160__init();
 80037b0:	f7ff ff48 	bl	8003644 <bmi160__init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b7e      	ldr	r3, [pc, #504]	; (80039b4 <main+0x244>)
 80037ba:	701a      	strb	r2, [r3, #0]
  lora__init_STATUS = lora__init();
 80037bc:	f7ff ff88 	bl	80036d0 <lora__init>
 80037c0:	4603      	mov	r3, r0
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b7c      	ldr	r3, [pc, #496]	; (80039b8 <main+0x248>)
 80037c6:	701a      	strb	r2, [r3, #0]

  // mount sd card
  mount = f_mount(&fatfs, "", 1);
 80037c8:	2201      	movs	r2, #1
 80037ca:	497c      	ldr	r1, [pc, #496]	; (80039bc <main+0x24c>)
 80037cc:	487c      	ldr	r0, [pc, #496]	; (80039c0 <main+0x250>)
 80037ce:	f00a fd6f 	bl	800e2b0 <f_mount>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b7b      	ldr	r3, [pc, #492]	; (80039c4 <main+0x254>)
 80037d8:	701a      	strb	r2, [r3, #0]

  // read reference pressure
  bmp280_read_float(&bmp280, NULL, &reference_pressure, NULL);
 80037da:	2300      	movs	r3, #0
 80037dc:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <main+0x258>)
 80037de:	2100      	movs	r1, #0
 80037e0:	487a      	ldr	r0, [pc, #488]	; (80039cc <main+0x25c>)
 80037e2:	f7ff fae7 	bl	8002db4 <bmp280_read_float>
  //

  // write header to SD card
  // Data header
  memset(SDmessage, 0, SDmessageWidth);
 80037e6:	4b7a      	ldr	r3, [pc, #488]	; (80039d0 <main+0x260>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	2100      	movs	r1, #0
 80037ee:	4879      	ldr	r0, [pc, #484]	; (80039d4 <main+0x264>)
 80037f0:	f00b fd1c 	bl	800f22c <memset>
  SDmessageWidth = sprintf(SDmessage, "T+,Ax,y,z,Gx,y,z,Pres,Humi,Temp,AltiAbs,AltiRel,P,R,Y,Light|CRC\r\n");
 80037f4:	4978      	ldr	r1, [pc, #480]	; (80039d8 <main+0x268>)
 80037f6:	4877      	ldr	r0, [pc, #476]	; (80039d4 <main+0x264>)
 80037f8:	f00c fba0 	bl	800ff3c <siprintf>
 80037fc:	4603      	mov	r3, r0
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	4b73      	ldr	r3, [pc, #460]	; (80039d0 <main+0x260>)
 8003802:	701a      	strb	r2, [r3, #0]
  writeToSD("Data.txt", SDmessage, SDmessageWidth);
 8003804:	4b72      	ldr	r3, [pc, #456]	; (80039d0 <main+0x260>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4972      	ldr	r1, [pc, #456]	; (80039d4 <main+0x264>)
 800380c:	4873      	ldr	r0, [pc, #460]	; (80039dc <main+0x26c>)
 800380e:	f7ff fe87 	bl	8003520 <writeToSD>
  // Gps header
  memset(GPSmessage, 0, GPSmessageWidth);
 8003812:	4b73      	ldr	r3, [pc, #460]	; (80039e0 <main+0x270>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	2100      	movs	r1, #0
 800381a:	4872      	ldr	r0, [pc, #456]	; (80039e4 <main+0x274>)
 800381c:	f00b fd06 	bl	800f22c <memset>
  GPSmessageWidth = sprintf(GPSmessage, "T+,GNRMC|CRC\r\n");
 8003820:	4971      	ldr	r1, [pc, #452]	; (80039e8 <main+0x278>)
 8003822:	4870      	ldr	r0, [pc, #448]	; (80039e4 <main+0x274>)
 8003824:	f00c fb8a 	bl	800ff3c <siprintf>
 8003828:	4603      	mov	r3, r0
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <main+0x270>)
 800382e:	701a      	strb	r2, [r3, #0]
  writeToSD("Gps.txt", GPSmessage, GPSmessageWidth);
 8003830:	4b6b      	ldr	r3, [pc, #428]	; (80039e0 <main+0x270>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	496b      	ldr	r1, [pc, #428]	; (80039e4 <main+0x274>)
 8003838:	486c      	ldr	r0, [pc, #432]	; (80039ec <main+0x27c>)
 800383a:	f7ff fe71 	bl	8003520 <writeToSD>
  //

  // start timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 800383e:	486c      	ldr	r0, [pc, #432]	; (80039f0 <main+0x280>)
 8003840:	f006 fa9e 	bl	8009d80 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startProgramTime = HAL_GetTick();
 8003844:	f001 fc10 	bl	8005068 <HAL_GetTick>
 8003848:	4603      	mov	r3, r0
 800384a:	4a6a      	ldr	r2, [pc, #424]	; (80039f4 <main+0x284>)
 800384c:	6013      	str	r3, [r2, #0]
	  //// ==== ////

	  if(gpsRxIndex > 0) {
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <main+0x288>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 812f 	beq.w	8003ab6 <main+0x346>
		  char* nmea = (char*)gpsRxBuffer;
 8003858:	4b68      	ldr	r3, [pc, #416]	; (80039fc <main+0x28c>)
 800385a:	663b      	str	r3, [r7, #96]	; 0x60


		  // GNRMC - GNVTG
		  // GNGGA - GNGSA
		  if(validate(nmea)) {
 800385c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800385e:	f7ff fc11 	bl	8003084 <validate>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d079      	beq.n	800395c <main+0x1ec>
			  for(uint8_t i = 0; i < strlen(nmea) - 5; i++) {
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800386e:	e06c      	b.n	800394a <main+0x1da>
				  if(nmea[i] == '$'
 8003870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003876:	4413      	add	r3, r2
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b24      	cmp	r3, #36	; 0x24
 800387c:	d12c      	bne.n	80038d8 <main+0x168>
				  && nmea[i+1] == 'G'
 800387e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003882:	3301      	adds	r3, #1
 8003884:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b47      	cmp	r3, #71	; 0x47
 800388c:	d124      	bne.n	80038d8 <main+0x168>
			      && nmea[i+2] == 'N'
 800388e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003892:	3302      	adds	r3, #2
 8003894:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003896:	4413      	add	r3, r2
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b4e      	cmp	r3, #78	; 0x4e
 800389c:	d11c      	bne.n	80038d8 <main+0x168>
			      && nmea[i+3] == 'G'
 800389e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038a2:	3303      	adds	r3, #3
 80038a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038a6:	4413      	add	r3, r2
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b47      	cmp	r3, #71	; 0x47
 80038ac:	d114      	bne.n	80038d8 <main+0x168>
			      && nmea[i+4] == 'G'
 80038ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038b2:	3304      	adds	r3, #4
 80038b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038b6:	4413      	add	r3, r2
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b47      	cmp	r3, #71	; 0x47
 80038bc:	d10c      	bne.n	80038d8 <main+0x168>
		          && nmea[i+5] == 'A') gnrmcCounter = i;
 80038be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038c2:	3305      	adds	r3, #5
 80038c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038c6:	4413      	add	r3, r2
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b41      	cmp	r3, #65	; 0x41
 80038cc:	d104      	bne.n	80038d8 <main+0x168>
 80038ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	4b4a      	ldr	r3, [pc, #296]	; (8003a00 <main+0x290>)
 80038d6:	801a      	strh	r2, [r3, #0]

				  if(nmea[i] == '$'
 80038d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038de:	4413      	add	r3, r2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b24      	cmp	r3, #36	; 0x24
 80038e4:	d12c      	bne.n	8003940 <main+0x1d0>
			      && nmea[i+1] == 'G'
 80038e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038ea:	3301      	adds	r3, #1
 80038ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b47      	cmp	r3, #71	; 0x47
 80038f4:	d124      	bne.n	8003940 <main+0x1d0>
			      && nmea[i+2] == 'N'
 80038f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038fa:	3302      	adds	r3, #2
 80038fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b4e      	cmp	r3, #78	; 0x4e
 8003904:	d11c      	bne.n	8003940 <main+0x1d0>
			      && nmea[i+3] == 'G'
 8003906:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800390a:	3303      	adds	r3, #3
 800390c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b47      	cmp	r3, #71	; 0x47
 8003914:	d114      	bne.n	8003940 <main+0x1d0>
			      && nmea[i+4] == 'S'
 8003916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800391a:	3304      	adds	r3, #4
 800391c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800391e:	4413      	add	r3, r2
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b53      	cmp	r3, #83	; 0x53
 8003924:	d10c      	bne.n	8003940 <main+0x1d0>
			      && nmea[i+5] == 'A') gnvtgCounter = i;
 8003926:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800392a:	3305      	adds	r3, #5
 800392c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800392e:	4413      	add	r3, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b41      	cmp	r3, #65	; 0x41
 8003934:	d104      	bne.n	8003940 <main+0x1d0>
 8003936:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b31      	ldr	r3, [pc, #196]	; (8003a04 <main+0x294>)
 800393e:	801a      	strh	r2, [r3, #0]
			  for(uint8_t i = 0; i < strlen(nmea) - 5; i++) {
 8003940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003944:	3301      	adds	r3, #1
 8003946:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800394a:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 800394e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003950:	f7fc fc3e 	bl	80001d0 <strlen>
 8003954:	4603      	mov	r3, r0
 8003956:	3b05      	subs	r3, #5
 8003958:	429c      	cmp	r4, r3
 800395a:	d389      	bcc.n	8003870 <main+0x100>
			  }
		  }

		  if(gnvtgCounter - gnrmcCounter > 12) {
 800395c:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <main+0x294>)
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <main+0x290>)
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b0c      	cmp	r3, #12
 800396a:	dd1c      	ble.n	80039a6 <main+0x236>
			  for(uint8_t i = gnrmcCounter; i < gnvtgCounter; i++) {
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <main+0x290>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003974:	e010      	b.n	8003998 <main+0x228>
			  	  gnrmcString[i - gnrmcCounter] = nmea[i];
 8003976:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800397a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800397c:	441a      	add	r2, r3
 800397e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003982:	491f      	ldr	r1, [pc, #124]	; (8003a00 <main+0x290>)
 8003984:	8809      	ldrh	r1, [r1, #0]
 8003986:	1a5b      	subs	r3, r3, r1
 8003988:	7811      	ldrb	r1, [r2, #0]
 800398a:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <main+0x298>)
 800398c:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = gnrmcCounter; i < gnvtgCounter; i++) {
 800398e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003992:	3301      	adds	r3, #1
 8003994:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003998:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <main+0x294>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d3e7      	bcc.n	8003976 <main+0x206>
		  	  }
		  }

		  // remove \r\n in gnrmcString
		  for(uint8_t i = 0; i < strlen(gnrmcString); i++) {
 80039a6:	2300      	movs	r3, #0
 80039a8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80039ac:	e044      	b.n	8003a38 <main+0x2c8>
 80039ae:	bf00      	nop
 80039b0:	2000053e 	.word	0x2000053e
 80039b4:	2000187c 	.word	0x2000187c
 80039b8:	20001680 	.word	0x20001680
 80039bc:	08014a40 	.word	0x08014a40
 80039c0:	20001880 	.word	0x20001880
 80039c4:	20000044 	.word	0x20000044
 80039c8:	200005c4 	.word	0x200005c4
 80039cc:	200016b0 	.word	0x200016b0
 80039d0:	20001624 	.word	0x20001624
 80039d4:	2000177c 	.word	0x2000177c
 80039d8:	08014a44 	.word	0x08014a44
 80039dc:	080149f4 	.word	0x080149f4
 80039e0:	20001689 	.word	0x20001689
 80039e4:	200016f0 	.word	0x200016f0
 80039e8:	08014a88 	.word	0x08014a88
 80039ec:	08014a98 	.word	0x08014a98
 80039f0:	20002a34 	.word	0x20002a34
 80039f4:	200005e0 	.word	0x200005e0
 80039f8:	2000053d 	.word	0x2000053d
 80039fc:	20000544 	.word	0x20000544
 8003a00:	20001648 	.word	0x20001648
 8003a04:	20000540 	.word	0x20000540
 8003a08:	20000000 	.word	0x20000000
			  if(gnrmcString[i] == '\r' || gnrmcString[i] == '\n') gnrmcString[i] = '\0';
 8003a0c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a10:	4acf      	ldr	r2, [pc, #828]	; (8003d50 <main+0x5e0>)
 8003a12:	5cd3      	ldrb	r3, [r2, r3]
 8003a14:	2b0d      	cmp	r3, #13
 8003a16:	d005      	beq.n	8003a24 <main+0x2b4>
 8003a18:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a1c:	4acc      	ldr	r2, [pc, #816]	; (8003d50 <main+0x5e0>)
 8003a1e:	5cd3      	ldrb	r3, [r2, r3]
 8003a20:	2b0a      	cmp	r3, #10
 8003a22:	d104      	bne.n	8003a2e <main+0x2be>
 8003a24:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a28:	4ac9      	ldr	r2, [pc, #804]	; (8003d50 <main+0x5e0>)
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0; i < strlen(gnrmcString); i++) {
 8003a2e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a32:	3301      	adds	r3, #1
 8003a34:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8003a38:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8003a3c:	48c4      	ldr	r0, [pc, #784]	; (8003d50 <main+0x5e0>)
 8003a3e:	f7fc fbc7 	bl	80001d0 <strlen>
 8003a42:	4603      	mov	r3, r0
 8003a44:	429c      	cmp	r4, r3
 8003a46:	d3e1      	bcc.n	8003a0c <main+0x29c>
		  }
		  //

	  	  memset(GPSmessage, 0, GPSmessageWidth);
 8003a48:	4bc2      	ldr	r3, [pc, #776]	; (8003d54 <main+0x5e4>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2100      	movs	r1, #0
 8003a50:	48c1      	ldr	r0, [pc, #772]	; (8003d58 <main+0x5e8>)
 8003a52:	f00b fbeb 	bl	800f22c <memset>
	  	  sprintf(GPSmessage, "%d,%s", startProgramTime, (char*)gnrmcString);
 8003a56:	4bc1      	ldr	r3, [pc, #772]	; (8003d5c <main+0x5ec>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4bbd      	ldr	r3, [pc, #756]	; (8003d50 <main+0x5e0>)
 8003a5c:	49c0      	ldr	r1, [pc, #768]	; (8003d60 <main+0x5f0>)
 8003a5e:	48be      	ldr	r0, [pc, #760]	; (8003d58 <main+0x5e8>)
 8003a60:	f00c fa6c 	bl	800ff3c <siprintf>
	  	  // calculate gps crc16
	  	  uint16_t crc = crc16(GPSmessage);
 8003a64:	48bc      	ldr	r0, [pc, #752]	; (8003d58 <main+0x5e8>)
 8003a66:	f7ff fd9b 	bl	80035a0 <crc16>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  	  //
	  	  GPSmessageWidth = sprintf(GPSmessage, "%s|%04X\r\n", (char*)GPSmessage, crc);
 8003a70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a74:	4ab8      	ldr	r2, [pc, #736]	; (8003d58 <main+0x5e8>)
 8003a76:	49bb      	ldr	r1, [pc, #748]	; (8003d64 <main+0x5f4>)
 8003a78:	48b7      	ldr	r0, [pc, #732]	; (8003d58 <main+0x5e8>)
 8003a7a:	f00c fa5f 	bl	800ff3c <siprintf>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4bb4      	ldr	r3, [pc, #720]	; (8003d54 <main+0x5e4>)
 8003a84:	701a      	strb	r2, [r3, #0]
	  	  writeToSD("Gps.txt", GPSmessage, GPSmessageWidth);
 8003a86:	4bb3      	ldr	r3, [pc, #716]	; (8003d54 <main+0x5e4>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	49b2      	ldr	r1, [pc, #712]	; (8003d58 <main+0x5e8>)
 8003a8e:	48b6      	ldr	r0, [pc, #728]	; (8003d68 <main+0x5f8>)
 8003a90:	f7ff fd46 	bl	8003520 <writeToSD>

	      validCounter += 1;
 8003a94:	4bb5      	ldr	r3, [pc, #724]	; (8003d6c <main+0x5fc>)
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	4bb3      	ldr	r3, [pc, #716]	; (8003d6c <main+0x5fc>)
 8003a9e:	801a      	strh	r2, [r3, #0]

	      memset(gpsRxBuffer, 0, 128);
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	48b2      	ldr	r0, [pc, #712]	; (8003d70 <main+0x600>)
 8003aa6:	f00b fbc1 	bl	800f22c <memset>
	      gpsRxIndex = 0;
 8003aaa:	4bb2      	ldr	r3, [pc, #712]	; (8003d74 <main+0x604>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
	      gpsRx = 0;
 8003ab0:	4bb1      	ldr	r3, [pc, #708]	; (8003d78 <main+0x608>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
	  }

	  ////HAL_RTC_GetTime(&hrtc, &RTC__Time, RTC_FORMAT_BIN);
	  ////HAL_RTC_GetDate(&hrtc, &RTC__Date, RTC_FORMAT_BIN);

	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8003ab6:	4bb1      	ldr	r3, [pc, #708]	; (8003d7c <main+0x60c>)
 8003ab8:	4ab1      	ldr	r2, [pc, #708]	; (8003d80 <main+0x610>)
 8003aba:	49b2      	ldr	r1, [pc, #712]	; (8003d84 <main+0x614>)
 8003abc:	48b2      	ldr	r0, [pc, #712]	; (8003d88 <main+0x618>)
 8003abe:	f7ff f979 	bl	8002db4 <bmp280_read_float>
	  relativeAltitude = altitude(pressure, true);
 8003ac2:	4baf      	ldr	r3, [pc, #700]	; (8003d80 <main+0x610>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	2001      	movs	r0, #1
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	f7ff fccb 	bl	8003468 <altitude>
 8003ad2:	eef0 7a40 	vmov.f32	s15, s0
 8003ad6:	4bad      	ldr	r3, [pc, #692]	; (8003d8c <main+0x61c>)
 8003ad8:	edc3 7a00 	vstr	s15, [r3]
	  absoluteAltitude = altitude(pressure, false);
 8003adc:	4ba8      	ldr	r3, [pc, #672]	; (8003d80 <main+0x610>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae8:	f7ff fcbe 	bl	8003468 <altitude>
 8003aec:	eef0 7a40 	vmov.f32	s15, s0
 8003af0:	4ba7      	ldr	r3, [pc, #668]	; (8003d90 <main+0x620>)
 8003af2:	edc3 7a00 	vstr	s15, [r3]

	  bmi160_get_sensor_data(BMI160_BOTH_ACCEL_AND_GYRO, &accel, &gyro, &bmi160);
 8003af6:	4ba7      	ldr	r3, [pc, #668]	; (8003d94 <main+0x624>)
 8003af8:	4aa7      	ldr	r2, [pc, #668]	; (8003d98 <main+0x628>)
 8003afa:	49a8      	ldr	r1, [pc, #672]	; (8003d9c <main+0x62c>)
 8003afc:	2003      	movs	r0, #3
 8003afe:	f7fd fd26 	bl	800154e <bmi160_get_sensor_data>
	  ax = accel.x / 32768.0F * 16.0F * 9.81F;
 8003b02:	4ba6      	ldr	r3, [pc, #664]	; (8003d9c <main+0x62c>)
 8003b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b10:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8003da0 <main+0x630>
 8003b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b18:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b20:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8003da4 <main+0x634>
 8003b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b28:	4b9f      	ldr	r3, [pc, #636]	; (8003da8 <main+0x638>)
 8003b2a:	edc3 7a00 	vstr	s15, [r3]
	  ay = accel.y / 32768.0F * 16.0F * 9.81F;
 8003b2e:	4b9b      	ldr	r3, [pc, #620]	; (8003d9c <main+0x62c>)
 8003b30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b34:	ee07 3a90 	vmov	s15, r3
 8003b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b3c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8003da0 <main+0x630>
 8003b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b44:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003b48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b4c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8003da4 <main+0x634>
 8003b50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b54:	4b95      	ldr	r3, [pc, #596]	; (8003dac <main+0x63c>)
 8003b56:	edc3 7a00 	vstr	s15, [r3]
	  az = accel.z / 32768.0F * 16.0F * 9.81F;
 8003b5a:	4b90      	ldr	r3, [pc, #576]	; (8003d9c <main+0x62c>)
 8003b5c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b68:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8003da0 <main+0x630>
 8003b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b70:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b78:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003da4 <main+0x634>
 8003b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b80:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <main+0x640>)
 8003b82:	edc3 7a00 	vstr	s15, [r3]
	  gx = gyro.x / 32768.0F * 1000.0F;
 8003b86:	4b84      	ldr	r3, [pc, #528]	; (8003d98 <main+0x628>)
 8003b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b8c:	ee07 3a90 	vmov	s15, r3
 8003b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b94:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003da0 <main+0x630>
 8003b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b9c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003db4 <main+0x644>
 8003ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ba4:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <main+0x648>)
 8003ba6:	edc3 7a00 	vstr	s15, [r3]
	  gy = gyro.y / 32768.0F * 1000.0F;
 8003baa:	4b7b      	ldr	r3, [pc, #492]	; (8003d98 <main+0x628>)
 8003bac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb8:	eddf 6a79 	vldr	s13, [pc, #484]	; 8003da0 <main+0x630>
 8003bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bc0:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003db4 <main+0x644>
 8003bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bc8:	4b7c      	ldr	r3, [pc, #496]	; (8003dbc <main+0x64c>)
 8003bca:	edc3 7a00 	vstr	s15, [r3]
	  gz = gyro.z / 32768.0F * 1000.0F;
 8003bce:	4b72      	ldr	r3, [pc, #456]	; (8003d98 <main+0x628>)
 8003bd0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bdc:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003da0 <main+0x630>
 8003be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003be4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003db4 <main+0x644>
 8003be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bec:	4b74      	ldr	r3, [pc, #464]	; (8003dc0 <main+0x650>)
 8003bee:	edc3 7a00 	vstr	s15, [r3]

	  // invert axis
	  ay = -ay;
 8003bf2:	4b6e      	ldr	r3, [pc, #440]	; (8003dac <main+0x63c>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	eef1 7a67 	vneg.f32	s15, s15
 8003bfc:	4b6b      	ldr	r3, [pc, #428]	; (8003dac <main+0x63c>)
 8003bfe:	edc3 7a00 	vstr	s15, [r3]
	  gy = -gy;
 8003c02:	4b6e      	ldr	r3, [pc, #440]	; (8003dbc <main+0x64c>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	eef1 7a67 	vneg.f32	s15, s15
 8003c0c:	4b6b      	ldr	r3, [pc, #428]	; (8003dbc <main+0x64c>)
 8003c0e:	edc3 7a00 	vstr	s15, [r3]
	  //

	  pitch = atan2(ay, sqrt(ax*ax + az*az)) * (180.0F / 3.14F);
 8003c12:	4b66      	ldr	r3, [pc, #408]	; (8003dac <main+0x63c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc fc96 	bl	8000548 <__aeabi_f2d>
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	460d      	mov	r5, r1
 8003c20:	4b61      	ldr	r3, [pc, #388]	; (8003da8 <main+0x638>)
 8003c22:	ed93 7a00 	vldr	s14, [r3]
 8003c26:	4b60      	ldr	r3, [pc, #384]	; (8003da8 <main+0x638>)
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c30:	4b5f      	ldr	r3, [pc, #380]	; (8003db0 <main+0x640>)
 8003c32:	edd3 6a00 	vldr	s13, [r3]
 8003c36:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <main+0x640>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c44:	ee17 0a90 	vmov	r0, s15
 8003c48:	f7fc fc7e 	bl	8000548 <__aeabi_f2d>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	ec43 2b10 	vmov	d0, r2, r3
 8003c54:	f00f ff16 	bl	8013a84 <sqrt>
 8003c58:	eeb0 7a40 	vmov.f32	s14, s0
 8003c5c:	eef0 7a60 	vmov.f32	s15, s1
 8003c60:	eeb0 1a47 	vmov.f32	s2, s14
 8003c64:	eef0 1a67 	vmov.f32	s3, s15
 8003c68:	ec45 4b10 	vmov	d0, r4, r5
 8003c6c:	f00f ff08 	bl	8013a80 <atan2>
 8003c70:	ec51 0b10 	vmov	r0, r1, d0
 8003c74:	a334      	add	r3, pc, #208	; (adr r3, 8003d48 <main+0x5d8>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc fcbd 	bl	80005f8 <__aeabi_dmul>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4610      	mov	r0, r2
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7fc ffaf 	bl	8000be8 <__aeabi_d2f>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4a4d      	ldr	r2, [pc, #308]	; (8003dc4 <main+0x654>)
 8003c8e:	6013      	str	r3, [r2, #0]
	  roll = atan2(-ax, sqrt(ay*ay + az*az)) * (180.0F / 3.14F);
 8003c90:	4b45      	ldr	r3, [pc, #276]	; (8003da8 <main+0x638>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	eef1 7a67 	vneg.f32	s15, s15
 8003c9a:	ee17 3a90 	vmov	r3, s15
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc52 	bl	8000548 <__aeabi_f2d>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	4b40      	ldr	r3, [pc, #256]	; (8003dac <main+0x63c>)
 8003caa:	ed93 7a00 	vldr	s14, [r3]
 8003cae:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <main+0x63c>)
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cb8:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <main+0x640>)
 8003cba:	edd3 6a00 	vldr	s13, [r3]
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	; (8003db0 <main+0x640>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ccc:	ee17 0a90 	vmov	r0, s15
 8003cd0:	f7fc fc3a 	bl	8000548 <__aeabi_f2d>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	ec43 2b10 	vmov	d0, r2, r3
 8003cdc:	f00f fed2 	bl	8013a84 <sqrt>
 8003ce0:	eeb0 7a40 	vmov.f32	s14, s0
 8003ce4:	eef0 7a60 	vmov.f32	s15, s1
 8003ce8:	eeb0 1a47 	vmov.f32	s2, s14
 8003cec:	eef0 1a67 	vmov.f32	s3, s15
 8003cf0:	ec45 4b10 	vmov	d0, r4, r5
 8003cf4:	f00f fec4 	bl	8013a80 <atan2>
 8003cf8:	ec51 0b10 	vmov	r0, r1, d0
 8003cfc:	a312      	add	r3, pc, #72	; (adr r3, 8003d48 <main+0x5d8>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f7fc fc79 	bl	80005f8 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f7fc ff6b 	bl	8000be8 <__aeabi_d2f>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <main+0x658>)
 8003d16:	6013      	str	r3, [r2, #0]
	  yaw = gz;
 8003d18:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <main+0x650>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <main+0x65c>)
 8003d1e:	6013      	str	r3, [r2, #0]

	  // gyroscope: negative if rotation clockwise
	  // pitch/roll positive if your rotate up, right (view from top of plate)
	  // угловая скорость: отрицательна при повороте по часовой стрелке
	  // тангаж/крен положителен при наклонении вперед и направо (смотря от верха платы)
	  pitch = pitch - 90.0F;
 8003d20:	4b28      	ldr	r3, [pc, #160]	; (8003dc4 <main+0x654>)
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003dd0 <main+0x660>
 8003d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d2e:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <main+0x654>)
 8003d30:	edc3 7a00 	vstr	s15, [r3]

	  HAL_ADC_Start(&hadc2);
 8003d34:	4827      	ldr	r0, [pc, #156]	; (8003dd4 <main+0x664>)
 8003d36:	f001 fa0b 	bl	8005150 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 500);
 8003d3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003d3e:	4825      	ldr	r0, [pc, #148]	; (8003dd4 <main+0x664>)
 8003d40:	f001 fb0b 	bl	800535a <HAL_ADC_PollForConversion>
 8003d44:	e048      	b.n	8003dd8 <main+0x668>
 8003d46:	bf00      	nop
 8003d48:	60000000 	.word	0x60000000
 8003d4c:	404ca994 	.word	0x404ca994
 8003d50:	20000000 	.word	0x20000000
 8003d54:	20001689 	.word	0x20001689
 8003d58:	200016f0 	.word	0x200016f0
 8003d5c:	200005e0 	.word	0x200005e0
 8003d60:	08014aa0 	.word	0x08014aa0
 8003d64:	08014aa8 	.word	0x08014aa8
 8003d68:	08014a98 	.word	0x08014a98
 8003d6c:	20001774 	.word	0x20001774
 8003d70:	20000544 	.word	0x20000544
 8003d74:	2000053d 	.word	0x2000053d
 8003d78:	200016e4 	.word	0x200016e4
 8003d7c:	20001620 	.word	0x20001620
 8003d80:	200005e8 	.word	0x200005e8
 8003d84:	200005dc 	.word	0x200005dc
 8003d88:	200016b0 	.word	0x200016b0
 8003d8c:	2000167c 	.word	0x2000167c
 8003d90:	200005e4 	.word	0x200005e4
 8003d94:	20001650 	.word	0x20001650
 8003d98:	20001628 	.word	0x20001628
 8003d9c:	200005c8 	.word	0x200005c8
 8003da0:	47000000 	.word	0x47000000
 8003da4:	411cf5c3 	.word	0x411cf5c3
 8003da8:	2000161c 	.word	0x2000161c
 8003dac:	20001778 	.word	0x20001778
 8003db0:	200005d8 	.word	0x200005d8
 8003db4:	447a0000 	.word	0x447a0000
 8003db8:	20001770 	.word	0x20001770
 8003dbc:	200005d4 	.word	0x200005d4
 8003dc0:	20001684 	.word	0x20001684
 8003dc4:	200016e8 	.word	0x200016e8
 8003dc8:	200016ec 	.word	0x200016ec
 8003dcc:	200016a8 	.word	0x200016a8
 8003dd0:	42b40000 	.word	0x42b40000
 8003dd4:	2000049c 	.word	0x2000049c
	  photoResistorValue = HAL_ADC_GetValue(&hadc2);
 8003dd8:	48a9      	ldr	r0, [pc, #676]	; (8004080 <main+0x910>)
 8003dda:	f001 fb49 	bl	8005470 <HAL_ADC_GetValue>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4aa8      	ldr	r2, [pc, #672]	; (8004084 <main+0x914>)
 8003de2:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc2);
 8003de4:	48a6      	ldr	r0, [pc, #664]	; (8004080 <main+0x910>)
 8003de6:	f001 fa85 	bl	80052f4 <HAL_ADC_Stop>
	  if(startProgramTime >= 5000 && photoResistorValue >= photoResistorThreshold) {
 8003dea:	4ba7      	ldr	r3, [pc, #668]	; (8004088 <main+0x918>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f241 3287 	movw	r2, #4999	; 0x1387
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d90a      	bls.n	8003e0c <main+0x69c>
 8003df6:	4ba3      	ldr	r3, [pc, #652]	; (8004084 <main+0x914>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	4ba4      	ldr	r3, [pc, #656]	; (800408c <main+0x91c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d304      	bcc.n	8003e0c <main+0x69c>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003e02:	2201      	movs	r2, #1
 8003e04:	2140      	movs	r1, #64	; 0x40
 8003e06:	48a2      	ldr	r0, [pc, #648]	; (8004090 <main+0x920>)
 8003e08:	f002 f8b6 	bl	8005f78 <HAL_GPIO_WritePin>
	  }

	  // sd
	  memset(SDmessage, 0, SDmessageWidth);
 8003e0c:	4ba1      	ldr	r3, [pc, #644]	; (8004094 <main+0x924>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	2100      	movs	r1, #0
 8003e14:	48a0      	ldr	r0, [pc, #640]	; (8004098 <main+0x928>)
 8003e16:	f00b fa09 	bl	800f22c <memset>
	  sprintf(SDmessage,
 8003e1a:	4b9b      	ldr	r3, [pc, #620]	; (8004088 <main+0x918>)
 8003e1c:	681e      	ldr	r6, [r3, #0]
 8003e1e:	4b9f      	ldr	r3, [pc, #636]	; (800409c <main+0x92c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fb90 	bl	8000548 <__aeabi_f2d>
 8003e28:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8003e2c:	4b9c      	ldr	r3, [pc, #624]	; (80040a0 <main+0x930>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fc fb89 	bl	8000548 <__aeabi_f2d>
 8003e36:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8003e3a:	4b9a      	ldr	r3, [pc, #616]	; (80040a4 <main+0x934>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc fb82 	bl	8000548 <__aeabi_f2d>
 8003e44:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8003e48:	4b97      	ldr	r3, [pc, #604]	; (80040a8 <main+0x938>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fb7b 	bl	8000548 <__aeabi_f2d>
 8003e52:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8003e56:	4b95      	ldr	r3, [pc, #596]	; (80040ac <main+0x93c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fb74 	bl	8000548 <__aeabi_f2d>
 8003e60:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8003e64:	4b92      	ldr	r3, [pc, #584]	; (80040b0 <main+0x940>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fc fb6d 	bl	8000548 <__aeabi_f2d>
 8003e6e:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003e72:	4b90      	ldr	r3, [pc, #576]	; (80040b4 <main+0x944>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fb66 	bl	8000548 <__aeabi_f2d>
 8003e7c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003e80:	4b8d      	ldr	r3, [pc, #564]	; (80040b8 <main+0x948>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fb5f 	bl	8000548 <__aeabi_f2d>
 8003e8a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003e8e:	4b8b      	ldr	r3, [pc, #556]	; (80040bc <main+0x94c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb58 	bl	8000548 <__aeabi_f2d>
 8003e98:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003e9c:	4b88      	ldr	r3, [pc, #544]	; (80040c0 <main+0x950>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc fb51 	bl	8000548 <__aeabi_f2d>
 8003ea6:	e9c7 0100 	strd	r0, r1, [r7]
 8003eaa:	4b86      	ldr	r3, [pc, #536]	; (80040c4 <main+0x954>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fb4a 	bl	8000548 <__aeabi_f2d>
 8003eb4:	4682      	mov	sl, r0
 8003eb6:	468b      	mov	fp, r1
 8003eb8:	4b83      	ldr	r3, [pc, #524]	; (80040c8 <main+0x958>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb43 	bl	8000548 <__aeabi_f2d>
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	4b81      	ldr	r3, [pc, #516]	; (80040cc <main+0x95c>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fc fb3c 	bl	8000548 <__aeabi_f2d>
 8003ed0:	4604      	mov	r4, r0
 8003ed2:	460d      	mov	r5, r1
 8003ed4:	4b7e      	ldr	r3, [pc, #504]	; (80040d0 <main+0x960>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fc fb35 	bl	8000548 <__aeabi_f2d>
 8003ede:	4b69      	ldr	r3, [pc, #420]	; (8004084 <main+0x914>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	931c      	str	r3, [sp, #112]	; 0x70
 8003ee4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8003ee8:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8003eec:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8003ef0:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8003ef4:	ed97 7b00 	vldr	d7, [r7]
 8003ef8:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003efc:	ed97 7b02 	vldr	d7, [r7, #8]
 8003f00:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003f04:	ed97 7b04 	vldr	d7, [r7, #16]
 8003f08:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003f0c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003f10:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003f14:	ed97 7b08 	vldr	d7, [r7, #32]
 8003f18:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003f1c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003f20:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f24:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003f28:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003f2c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003f30:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f34:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003f38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f3c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003f40:	ed8d 7b00 	vstr	d7, [sp]
 8003f44:	4632      	mov	r2, r6
 8003f46:	4963      	ldr	r1, [pc, #396]	; (80040d4 <main+0x964>)
 8003f48:	4853      	ldr	r0, [pc, #332]	; (8004098 <main+0x928>)
 8003f4a:	f00b fff7 	bl	800ff3c <siprintf>
	      "%d|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.1f|%.1f|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%d",
		  startProgramTime, ax, ay, az, gx, gy, gz, pressure, humidity, temperature, absoluteAltitude, relativeAltitude, pitch, roll, yaw, photoResistorValue
	  );
	  // calculate crc16
	  uint16_t crc = crc16(SDmessage);
 8003f4e:	4852      	ldr	r0, [pc, #328]	; (8004098 <main+0x928>)
 8003f50:	f7ff fb26 	bl	80035a0 <crc16>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  //
	  SDmessageWidth = sprintf(SDmessage, "%s|%04X\r\n", (char*)SDmessage, crc);
 8003f5a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f5e:	4a4e      	ldr	r2, [pc, #312]	; (8004098 <main+0x928>)
 8003f60:	495d      	ldr	r1, [pc, #372]	; (80040d8 <main+0x968>)
 8003f62:	484d      	ldr	r0, [pc, #308]	; (8004098 <main+0x928>)
 8003f64:	f00b ffea 	bl	800ff3c <siprintf>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	4b49      	ldr	r3, [pc, #292]	; (8004094 <main+0x924>)
 8003f6e:	701a      	strb	r2, [r3, #0]
	  writeToSD("Data.txt", SDmessage, SDmessageWidth);
 8003f70:	4b48      	ldr	r3, [pc, #288]	; (8004094 <main+0x924>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	4948      	ldr	r1, [pc, #288]	; (8004098 <main+0x928>)
 8003f78:	4858      	ldr	r0, [pc, #352]	; (80040dc <main+0x96c>)
 8003f7a:	f7ff fad1 	bl	8003520 <writeToSD>

	  /*** ** LoRa ** ***/
	  memset(LoRaMessage, 0, LoRaMessageWidth);
 8003f7e:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <main+0x970>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	2100      	movs	r1, #0
 8003f86:	4857      	ldr	r0, [pc, #348]	; (80040e4 <main+0x974>)
 8003f88:	f00b f950 	bl	800f22c <memset>
	  // T+,Ax,y,z,Gx,y,z,Pres,Temp,AltiRel,Light,**GPS_STRING**
	  sprintf(LoRaMessage, "%d|%.2f|%.2f|%.2f|%.2f|%.2f|%.2f|%.1f|%.2f|%.2f|%.2f|%d",
 8003f8c:	4b3e      	ldr	r3, [pc, #248]	; (8004088 <main+0x918>)
 8003f8e:	681e      	ldr	r6, [r3, #0]
 8003f90:	4b42      	ldr	r3, [pc, #264]	; (800409c <main+0x92c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc fad7 	bl	8000548 <__aeabi_f2d>
 8003f9a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8003f9e:	4b40      	ldr	r3, [pc, #256]	; (80040a0 <main+0x930>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc fad0 	bl	8000548 <__aeabi_f2d>
 8003fa8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8003fac:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <main+0x934>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fac9 	bl	8000548 <__aeabi_f2d>
 8003fb6:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <main+0x938>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fac2 	bl	8000548 <__aeabi_f2d>
 8003fc4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8003fc8:	4b38      	ldr	r3, [pc, #224]	; (80040ac <main+0x93c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fabb 	bl	8000548 <__aeabi_f2d>
 8003fd2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8003fd6:	4b36      	ldr	r3, [pc, #216]	; (80040b0 <main+0x940>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fab4 	bl	8000548 <__aeabi_f2d>
 8003fe0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003fe4:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <main+0x944>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc faad 	bl	8000548 <__aeabi_f2d>
 8003fee:	4682      	mov	sl, r0
 8003ff0:	468b      	mov	fp, r1
 8003ff2:	4b32      	ldr	r3, [pc, #200]	; (80040bc <main+0x94c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc faa6 	bl	8000548 <__aeabi_f2d>
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	4689      	mov	r9, r1
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <main+0x954>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f7fc fa9f 	bl	8000548 <__aeabi_f2d>
 800400a:	4604      	mov	r4, r0
 800400c:	460d      	mov	r5, r1
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <main+0x950>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fa98 	bl	8000548 <__aeabi_f2d>
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <main+0x914>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	9314      	str	r3, [sp, #80]	; 0x50
 800401e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004022:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8004026:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800402a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800402e:	ed97 7b08 	vldr	d7, [r7, #32]
 8004032:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004036:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800403a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800403e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004042:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004046:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800404a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800404e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004052:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004056:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800405a:	ed8d 7b00 	vstr	d7, [sp]
 800405e:	4632      	mov	r2, r6
 8004060:	4921      	ldr	r1, [pc, #132]	; (80040e8 <main+0x978>)
 8004062:	4820      	ldr	r0, [pc, #128]	; (80040e4 <main+0x974>)
 8004064:	f00b ff6a 	bl	800ff3c <siprintf>
	      startProgramTime, ax, ay, az, gx, gy, gz, pressure, temperature, relativeAltitude, absoluteAltitude, photoResistorValue
	  );
	  // calculate crc16
	  uint16_t crcLoRa = crc16(LoRaMessage);
 8004068:	481e      	ldr	r0, [pc, #120]	; (80040e4 <main+0x974>)
 800406a:	f7ff fa99 	bl	80035a0 <crc16>
 800406e:	4603      	mov	r3, r0
 8004070:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  //

	  LoRaMessageWidth = sprintf(LoRaMessage, "%s|%04X|%s\r\n", (char*)LoRaMessage, crcLoRa, (char*)gnrmcString);
 8004074:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004078:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <main+0x97c>)
 800407a:	9200      	str	r2, [sp, #0]
 800407c:	e038      	b.n	80040f0 <main+0x980>
 800407e:	bf00      	nop
 8004080:	2000049c 	.word	0x2000049c
 8004084:	2000024c 	.word	0x2000024c
 8004088:	200005e0 	.word	0x200005e0
 800408c:	20000040 	.word	0x20000040
 8004090:	40020800 	.word	0x40020800
 8004094:	20001624 	.word	0x20001624
 8004098:	2000177c 	.word	0x2000177c
 800409c:	2000161c 	.word	0x2000161c
 80040a0:	20001778 	.word	0x20001778
 80040a4:	200005d8 	.word	0x200005d8
 80040a8:	20001770 	.word	0x20001770
 80040ac:	200005d4 	.word	0x200005d4
 80040b0:	20001684 	.word	0x20001684
 80040b4:	200005e8 	.word	0x200005e8
 80040b8:	20001620 	.word	0x20001620
 80040bc:	200005dc 	.word	0x200005dc
 80040c0:	200005e4 	.word	0x200005e4
 80040c4:	2000167c 	.word	0x2000167c
 80040c8:	200016e8 	.word	0x200016e8
 80040cc:	200016ec 	.word	0x200016ec
 80040d0:	200016a8 	.word	0x200016a8
 80040d4:	08014ab4 	.word	0x08014ab4
 80040d8:	08014aa8 	.word	0x08014aa8
 80040dc:	080149f4 	.word	0x080149f4
 80040e0:	20001688 	.word	0x20001688
 80040e4:	200028b8 	.word	0x200028b8
 80040e8:	08014b00 	.word	0x08014b00
 80040ec:	20000000 	.word	0x20000000
 80040f0:	4a2e      	ldr	r2, [pc, #184]	; (80041ac <main+0xa3c>)
 80040f2:	492f      	ldr	r1, [pc, #188]	; (80041b0 <main+0xa40>)
 80040f4:	482d      	ldr	r0, [pc, #180]	; (80041ac <main+0xa3c>)
 80040f6:	f00b ff21 	bl	800ff3c <siprintf>
 80040fa:	4603      	mov	r3, r0
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	4b2d      	ldr	r3, [pc, #180]	; (80041b4 <main+0xa44>)
 8004100:	701a      	strb	r2, [r3, #0]
	  //lora__send_STATUS = lora_send_packet_blocking(&lora, LoRaMessage, LoRaMessageWidth, 250);
	  memset(gnrmcString, 0, 64);
 8004102:	2240      	movs	r2, #64	; 0x40
 8004104:	2100      	movs	r1, #0
 8004106:	482c      	ldr	r0, [pc, #176]	; (80041b8 <main+0xa48>)
 8004108:	f00b f890 	bl	800f22c <memset>
	  /*** ** ==== ** ***/

	  // start Echo repeater
	  if(markCountDelayTime == true && markProcessDelayTime == true) {
 800410c:	4b2b      	ldr	r3, [pc, #172]	; (80041bc <main+0xa4c>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d011      	beq.n	8004138 <main+0x9c8>
 8004114:	4b2a      	ldr	r3, [pc, #168]	; (80041c0 <main+0xa50>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <main+0x9c8>
		  if(echoRepeaterStartTime == 0) {
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <main+0xa54>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <main+0x9c8>
			  startPostEchoDelayTime();
 8004124:	f7ff f884 	bl	8003230 <startPostEchoDelayTime>

			  echoRepeaterStartTime = HAL_GetTick();
 8004128:	f000 ff9e 	bl	8005068 <HAL_GetTick>
 800412c:	4603      	mov	r3, r0
 800412e:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <main+0xa54>)
 8004130:	6013      	str	r3, [r2, #0]

			  markCountDelayTime = false;
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <main+0xa4c>)
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(markProcessDelayTime == true) {
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <main+0xa50>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <main+0x9fc>
		  if(HAL_GetTick() - echoRepeaterStartTime >= echoRepeaterDelayTime * 66/*2*/) {
 8004140:	f000 ff92 	bl	8005068 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <main+0xa54>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1ad1      	subs	r1, r2, r3
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <main+0xa58>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	015b      	lsls	r3, r3, #5
 8004154:	4413      	add	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4299      	cmp	r1, r3
 800415a:	d307      	bcc.n	800416c <main+0x9fc>
			  endEchoDelayTime();
 800415c:	f7ff f898 	bl	8003290 <endEchoDelayTime>

			  echoRepeaterStartTime = 0;
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <main+0xa54>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]

			  markProcessDelayTime = false;
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <main+0xa50>)
 8004168:	2200      	movs	r2, #0
 800416a:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(markCountDelayTime == true) {
 800416c:	4b13      	ldr	r3, [pc, #76]	; (80041bc <main+0xa4c>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <main+0xa16>
		  increaseEchoDelayTime( HAL_GetTick() - startProgramTime );
 8004174:	f000 ff78 	bl	8005068 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <main+0xa5c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff f811 	bl	80031a8 <increaseEchoDelayTime>
		  // repeatable event while mark is true
	  }
	  // end Echo repeater

	  //// ==== ////
	  uint32_t loopTime = HAL_GetTick() - startProgramTime;
 8004186:	f000 ff6f 	bl	8005068 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <main+0xa5c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
	  if(loopTime < 250) HAL_Delay(250 - 1 - loopTime);
 8004194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004196:	2bf9      	cmp	r3, #249	; 0xf9
 8004198:	f63f ab54 	bhi.w	8003844 <main+0xd4>
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 ff6c 	bl	8005080 <HAL_Delay>
  {
 80041a8:	f7ff bb4c 	b.w	8003844 <main+0xd4>
 80041ac:	200028b8 	.word	0x200028b8
 80041b0:	08014b38 	.word	0x08014b38
 80041b4:	20001688 	.word	0x20001688
 80041b8:	20000000 	.word	0x20000000
 80041bc:	20000258 	.word	0x20000258
 80041c0:	20000259 	.word	0x20000259
 80041c4:	20000254 	.word	0x20000254
 80041c8:	20000250 	.word	0x20000250
 80041cc:	200005e0 	.word	0x200005e0

080041d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b098      	sub	sp, #96	; 0x60
 80041d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041da:	2230      	movs	r2, #48	; 0x30
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f00b f824 	bl	800f22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
 80041f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041f4:	f107 030c 	add.w	r3, r7, #12
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	609a      	str	r2, [r3, #8]
 8004200:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	4b31      	ldr	r3, [pc, #196]	; (80042cc <SystemClock_Config+0xfc>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	4a30      	ldr	r2, [pc, #192]	; (80042cc <SystemClock_Config+0xfc>)
 800420c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004210:	6413      	str	r3, [r2, #64]	; 0x40
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <SystemClock_Config+0xfc>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <SystemClock_Config+0x100>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a2a      	ldr	r2, [pc, #168]	; (80042d0 <SystemClock_Config+0x100>)
 8004228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	4b28      	ldr	r3, [pc, #160]	; (80042d0 <SystemClock_Config+0x100>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800423a:	230a      	movs	r3, #10
 800423c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800423e:	2301      	movs	r3, #1
 8004240:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004242:	2310      	movs	r3, #16
 8004244:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004246:	2301      	movs	r3, #1
 8004248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800424a:	2302      	movs	r3, #2
 800424c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800424e:	2300      	movs	r3, #0
 8004250:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004252:	2310      	movs	r3, #16
 8004254:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004256:	23c0      	movs	r3, #192	; 0xc0
 8004258:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800425a:	2302      	movs	r3, #2
 800425c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800425e:	2304      	movs	r3, #4
 8004260:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004266:	4618      	mov	r0, r3
 8004268:	f002 fe78 	bl	8006f5c <HAL_RCC_OscConfig>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004272:	f000 f82f 	bl	80042d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004276:	230f      	movs	r3, #15
 8004278:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800427a:	2302      	movs	r3, #2
 800427c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004282:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004288:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800428e:	f107 031c 	add.w	r3, r7, #28
 8004292:	2103      	movs	r1, #3
 8004294:	4618      	mov	r0, r3
 8004296:	f003 f8d9 	bl	800744c <HAL_RCC_ClockConfig>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80042a0:	f000 f818 	bl	80042d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042a4:	2302      	movs	r3, #2
 80042a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80042a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ac:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	4618      	mov	r0, r3
 80042b4:	f003 fa9a 	bl	80077ec <HAL_RCCEx_PeriphCLKConfig>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80042be:	f000 f809 	bl	80042d4 <Error_Handler>
  }
}
 80042c2:	bf00      	nop
 80042c4:	3760      	adds	r7, #96	; 0x60
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	40007000 	.word	0x40007000

080042d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80042d8:	b672      	cpsid	i
}
 80042da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042dc:	e7fe      	b.n	80042dc <Error_Handler+0x8>
	...

080042e0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <MX_RTC_Init+0xac>)
 80042fa:	4a25      	ldr	r2, [pc, #148]	; (8004390 <MX_RTC_Init+0xb0>)
 80042fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042fe:	4b23      	ldr	r3, [pc, #140]	; (800438c <MX_RTC_Init+0xac>)
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004304:	4b21      	ldr	r3, [pc, #132]	; (800438c <MX_RTC_Init+0xac>)
 8004306:	227f      	movs	r2, #127	; 0x7f
 8004308:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <MX_RTC_Init+0xac>)
 800430c:	22f9      	movs	r2, #249	; 0xf9
 800430e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <MX_RTC_Init+0xac>)
 8004312:	2200      	movs	r2, #0
 8004314:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004316:	4b1d      	ldr	r3, [pc, #116]	; (800438c <MX_RTC_Init+0xac>)
 8004318:	2200      	movs	r2, #0
 800431a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800431c:	4b1b      	ldr	r3, [pc, #108]	; (800438c <MX_RTC_Init+0xac>)
 800431e:	2200      	movs	r2, #0
 8004320:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004322:	481a      	ldr	r0, [pc, #104]	; (800438c <MX_RTC_Init+0xac>)
 8004324:	f003 fb44 	bl	80079b0 <HAL_RTC_Init>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800432e:	f7ff ffd1 	bl	80042d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 8004332:	2310      	movs	r3, #16
 8004334:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 44;
 8004336:	232c      	movs	r3, #44	; 0x2c
 8004338:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004346:	1d3b      	adds	r3, r7, #4
 8004348:	2200      	movs	r2, #0
 800434a:	4619      	mov	r1, r3
 800434c:	480f      	ldr	r0, [pc, #60]	; (800438c <MX_RTC_Init+0xac>)
 800434e:	f003 fbc0 	bl	8007ad2 <HAL_RTC_SetTime>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004358:	f7ff ffbc 	bl	80042d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800435c:	2304      	movs	r3, #4
 800435e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8004360:	2307      	movs	r3, #7
 8004362:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8004364:	2301      	movs	r3, #1
 8004366:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8004368:	2315      	movs	r3, #21
 800436a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800436c:	463b      	mov	r3, r7
 800436e:	2200      	movs	r2, #0
 8004370:	4619      	mov	r1, r3
 8004372:	4806      	ldr	r0, [pc, #24]	; (800438c <MX_RTC_Init+0xac>)
 8004374:	f003 fc6a 	bl	8007c4c <HAL_RTC_SetDate>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800437e:	f7ff ffa9 	bl	80042d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004382:	bf00      	nop
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20002938 	.word	0x20002938
 8004390:	40002800 	.word	0x40002800

08004394 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <HAL_RTC_MspInit+0x24>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d102      	bne.n	80043ac <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RTC_MspInit+0x28>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40002800 	.word	0x40002800
 80043bc:	42470e3c 	.word	0x42470e3c

080043c0 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <MX_SDIO_SD_Init+0x38>)
 80043c6:	4a0d      	ldr	r2, [pc, #52]	; (80043fc <MX_SDIO_SD_Init+0x3c>)
 80043c8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80043ca:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <MX_SDIO_SD_Init+0x38>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <MX_SDIO_SD_Init+0x38>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043d6:	4b08      	ldr	r3, [pc, #32]	; (80043f8 <MX_SDIO_SD_Init+0x38>)
 80043d8:	2200      	movs	r2, #0
 80043da:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <MX_SDIO_SD_Init+0x38>)
 80043de:	2200      	movs	r2, #0
 80043e0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <MX_SDIO_SD_Init+0x38>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <MX_SDIO_SD_Init+0x38>)
 80043ea:	2208      	movs	r2, #8
 80043ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20002958 	.word	0x20002958
 80043fc:	40012c00 	.word	0x40012c00

08004400 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	; 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a31      	ldr	r2, [pc, #196]	; (80044e4 <HAL_SD_MspInit+0xe4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d15b      	bne.n	80044da <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 8004428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442a:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 800442c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004430:	6453      	str	r3, [r2, #68]	; 0x44
 8004432:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 8004434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	4a28      	ldr	r2, [pc, #160]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	6313      	str	r3, [r2, #48]	; 0x30
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	4b22      	ldr	r3, [pc, #136]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	6313      	str	r3, [r2, #48]	; 0x30
 800446a:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <HAL_SD_MspInit+0xe8>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	60bb      	str	r3, [r7, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004476:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800447a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	2302      	movs	r3, #2
 800447e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004480:	2301      	movs	r3, #1
 8004482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004484:	2303      	movs	r3, #3
 8004486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004488:	230c      	movs	r3, #12
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	4619      	mov	r1, r3
 8004492:	4816      	ldr	r0, [pc, #88]	; (80044ec <HAL_SD_MspInit+0xec>)
 8004494:	f001 fbbc 	bl	8005c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800449c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449e:	2302      	movs	r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a6:	2303      	movs	r3, #3
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80044aa:	230c      	movs	r3, #12
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	4619      	mov	r1, r3
 80044b4:	480d      	ldr	r0, [pc, #52]	; (80044ec <HAL_SD_MspInit+0xec>)
 80044b6:	f001 fbab 	bl	8005c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044ba:	2304      	movs	r3, #4
 80044bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044be:	2302      	movs	r3, #2
 80044c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044c2:	2301      	movs	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c6:	2303      	movs	r3, #3
 80044c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80044ca:	230c      	movs	r3, #12
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ce:	f107 0314 	add.w	r3, r7, #20
 80044d2:	4619      	mov	r1, r3
 80044d4:	4806      	ldr	r0, [pc, #24]	; (80044f0 <HAL_SD_MspInit+0xf0>)
 80044d6:	f001 fb9b 	bl	8005c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80044da:	bf00      	nop
 80044dc:	3728      	adds	r7, #40	; 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40012c00 	.word	0x40012c00
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40020800 	.word	0x40020800
 80044f0:	40020c00 	.word	0x40020c00

080044f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80044f8:	4b17      	ldr	r3, [pc, #92]	; (8004558 <MX_SPI1_Init+0x64>)
 80044fa:	4a18      	ldr	r2, [pc, #96]	; (800455c <MX_SPI1_Init+0x68>)
 80044fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044fe:	4b16      	ldr	r3, [pc, #88]	; (8004558 <MX_SPI1_Init+0x64>)
 8004500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004504:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004506:	4b14      	ldr	r3, [pc, #80]	; (8004558 <MX_SPI1_Init+0x64>)
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800450c:	4b12      	ldr	r3, [pc, #72]	; (8004558 <MX_SPI1_Init+0x64>)
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004512:	4b11      	ldr	r3, [pc, #68]	; (8004558 <MX_SPI1_Init+0x64>)
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004518:	4b0f      	ldr	r3, [pc, #60]	; (8004558 <MX_SPI1_Init+0x64>)
 800451a:	2200      	movs	r2, #0
 800451c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800451e:	4b0e      	ldr	r3, [pc, #56]	; (8004558 <MX_SPI1_Init+0x64>)
 8004520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004524:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <MX_SPI1_Init+0x64>)
 8004528:	2200      	movs	r2, #0
 800452a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <MX_SPI1_Init+0x64>)
 800452e:	2200      	movs	r2, #0
 8004530:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <MX_SPI1_Init+0x64>)
 8004534:	2200      	movs	r2, #0
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004538:	4b07      	ldr	r3, [pc, #28]	; (8004558 <MX_SPI1_Init+0x64>)
 800453a:	2200      	movs	r2, #0
 800453c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <MX_SPI1_Init+0x64>)
 8004540:	220a      	movs	r2, #10
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004544:	4804      	ldr	r0, [pc, #16]	; (8004558 <MX_SPI1_Init+0x64>)
 8004546:	f004 fe22 	bl	800918e <HAL_SPI_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004550:	f7ff fec0 	bl	80042d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004554:	bf00      	nop
 8004556:	bd80      	pop	{r7, pc}
 8004558:	200029dc 	.word	0x200029dc
 800455c:	40013000 	.word	0x40013000

08004560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <HAL_SPI_MspInit+0x84>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d12b      	bne.n	80045da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 800458c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004590:	6453      	str	r3, [r2, #68]	; 0x44
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	6313      	str	r3, [r2, #48]	; 0x30
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_SPI_MspInit+0x88>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045ba:	23e0      	movs	r3, #224	; 0xe0
 80045bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045be:	2302      	movs	r3, #2
 80045c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c6:	2303      	movs	r3, #3
 80045c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045ca:	2305      	movs	r3, #5
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ce:	f107 0314 	add.w	r3, r7, #20
 80045d2:	4619      	mov	r1, r3
 80045d4:	4805      	ldr	r0, [pc, #20]	; (80045ec <HAL_SPI_MspInit+0x8c>)
 80045d6:	f001 fb1b 	bl	8005c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80045da:	bf00      	nop
 80045dc:	3728      	adds	r7, #40	; 0x28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40013000 	.word	0x40013000
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40020000 	.word	0x40020000

080045f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_MspInit+0x4c>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	4a0f      	ldr	r2, [pc, #60]	; (800463c <HAL_MspInit+0x4c>)
 8004600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004604:	6453      	str	r3, [r2, #68]	; 0x44
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_MspInit+0x4c>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_MspInit+0x4c>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a08      	ldr	r2, [pc, #32]	; (800463c <HAL_MspInit+0x4c>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_MspInit+0x4c>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800462e:	bf00      	nop
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40023800 	.word	0x40023800

08004640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004644:	e7fe      	b.n	8004644 <NMI_Handler+0x4>

08004646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004646:	b480      	push	{r7}
 8004648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800464a:	e7fe      	b.n	800464a <HardFault_Handler+0x4>

0800464c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004650:	e7fe      	b.n	8004650 <MemManage_Handler+0x4>

08004652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004656:	e7fe      	b.n	8004656 <BusFault_Handler+0x4>

08004658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800465c:	e7fe      	b.n	800465c <UsageFault_Handler+0x4>

0800465e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800468c:	f000 fcd8 	bl	8005040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004690:	bf00      	nop
 8004692:	bd80      	pop	{r7, pc}

08004694 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004698:	2001      	movs	r0, #1
 800469a:	f001 fc87 	bl	8005fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80046aa:	f005 fbd9 	bl	8009e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20002a34 	.word	0x20002a34

080046b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <UART4_IRQHandler+0x10>)
 80046be:	f006 f80b 	bl	800a6d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20002a7c 	.word	0x20002a7c

080046cc <read_register>:

// SPI helpers //

// Reads single register
/*static*/ uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6858      	ldr	r0, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	891b      	ldrh	r3, [r3, #8]
 80046ee:	2200      	movs	r2, #0
 80046f0:	4619      	mov	r1, r3
 80046f2:	f001 fc41 	bl	8005f78 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	1cf9      	adds	r1, r7, #3
 8004700:	2201      	movs	r2, #1
 8004702:	f004 fdcd 	bl	80092a0 <HAL_SPI_Transmit>
 8004706:	4603      	mov	r3, r0
 8004708:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f107 010f 	add.w	r1, r7, #15
 8004716:	2201      	movs	r2, #1
 8004718:	f004 fefe 	bl	8009518 <HAL_SPI_Receive>
 800471c:	4603      	mov	r3, r0
 800471e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6858      	ldr	r0, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	891b      	ldrh	r3, [r3, #8]
 8004728:	2201      	movs	r2, #1
 800472a:	4619      	mov	r1, r3
 800472c:	f001 fc24 	bl	8005f78 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8004730:	7bfb      	ldrb	r3, [r7, #15]
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <write_register>:

// Writes single register
/*static*/ void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
 8004746:	4613      	mov	r3, r2
 8004748:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004750:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8004752:	78bb      	ldrb	r3, [r7, #2]
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	b21a      	sxth	r2, r3
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	b21b      	sxth	r3, r3
 800475c:	4313      	orrs	r3, r2
 800475e:	b21b      	sxth	r3, r3
 8004760:	b29b      	uxth	r3, r3
 8004762:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6858      	ldr	r0, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	891b      	ldrh	r3, [r3, #8]
 800476c:	2200      	movs	r2, #0
 800476e:	4619      	mov	r1, r3
 8004770:	f001 fc02 	bl	8005f78 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f107 010a 	add.w	r1, r7, #10
 8004780:	2202      	movs	r2, #2
 8004782:	f004 fd8d 	bl	80092a0 <HAL_SPI_Transmit>
 8004786:	4603      	mov	r3, r0
 8004788:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6858      	ldr	r0, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	891b      	ldrh	r3, [r3, #8]
 8004792:	2201      	movs	r2, #1
 8004794:	4619      	mov	r1, r3
 8004796:	f001 fbef 	bl	8005f78 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	2101      	movs	r1, #1
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff ffbd 	bl	800473a <write_register>
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	2b2c      	cmp	r3, #44	; 0x2c
 80047d8:	d801      	bhi.n	80047de <set_OCP+0x16>
    imax = 45;
 80047da:	232d      	movs	r3, #45	; 0x2d
 80047dc:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	2bf0      	cmp	r3, #240	; 0xf0
 80047e2:	d901      	bls.n	80047e8 <set_OCP+0x20>
    imax = 240;
 80047e4:	23f0      	movs	r3, #240	; 0xf0
 80047e6:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	2b81      	cmp	r3, #129	; 0x81
 80047ec:	d809      	bhi.n	8004802 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 80047ee:	78fb      	ldrb	r3, [r7, #3]
 80047f0:	3b2d      	subs	r3, #45	; 0x2d
 80047f2:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <set_OCP+0x68>)
 80047f4:	fb82 1203 	smull	r1, r2, r2, r3
 80047f8:	1052      	asrs	r2, r2, #1
 80047fa:	17db      	asrs	r3, r3, #31
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e008      	b.n	8004814 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	331e      	adds	r3, #30
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <set_OCP+0x68>)
 8004808:	fb82 1203 	smull	r1, r2, r2, r3
 800480c:	1092      	asrs	r2, r2, #2
 800480e:	17db      	asrs	r3, r3, #31
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	210b      	movs	r1, #11
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff8a 	bl	800473a <write_register>
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	66666667 	.word	0x66666667

08004834 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800483c:	211d      	movs	r1, #29
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff44 	bl	80046cc <read_register>
 8004844:	4603      	mov	r3, r0
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	b2db      	uxtb	r3, r3
 800484a:	b2da      	uxtb	r2, r3
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8004854:	211e      	movs	r1, #30
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ff38 	bl	80046cc <read_register>
 800485c:	4603      	mov	r3, r0
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8004862:	2304      	movs	r3, #4
 8004864:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	2b0a      	cmp	r3, #10
 800486a:	d909      	bls.n	8004880 <set_low_data_rate_optimization+0x4c>
 800486c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	bf08      	it	eq
 8004874:	2a07      	cmpeq	r2, #7
 8004876:	d103      	bne.n	8004880 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	f043 0308 	orr.w	r3, r3, #8
 800487e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8004880:	7ffb      	ldrb	r3, [r7, #31]
 8004882:	461a      	mov	r2, r3
 8004884:	2126      	movs	r1, #38	; 0x26
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff57 	bl	800473a <write_register>
}
 800488c:	bf00      	nop
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 800489c:	2100      	movs	r1, #0
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff7f 	bl	80047a2 <set_mode>
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 80048b4:	2101      	movs	r1, #1
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff ff73 	bl	80047a2 <set_mode>
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 80048cc:	211d      	movs	r1, #29
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fefc 	bl	80046cc <read_register>
 80048d4:	4603      	mov	r3, r0
 80048d6:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	461a      	mov	r2, r3
 80048e4:	211d      	movs	r1, #29
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ff27 	bl	800473a <write_register>
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10e      	bne.n	8004926 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	2b0f      	cmp	r3, #15
 800490c:	d901      	bls.n	8004912 <lora_set_tx_power+0x1e>
      level = 15;
 800490e:	230f      	movs	r3, #15
 8004910:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	2109      	movs	r1, #9
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff ff0b 	bl	800473a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8004924:	e02e      	b.n	8004984 <lora_set_tx_power+0x90>
    if (level > 20) {
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	2b14      	cmp	r3, #20
 800492a:	d901      	bls.n	8004930 <lora_set_tx_power+0x3c>
      level = 20;
 800492c:	2314      	movs	r3, #20
 800492e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d801      	bhi.n	800493a <lora_set_tx_power+0x46>
      level = 2;
 8004936:	2302      	movs	r3, #2
 8004938:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	2b11      	cmp	r3, #17
 800493e:	d90c      	bls.n	800495a <lora_set_tx_power+0x66>
      level -= 3;
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	3b03      	subs	r3, #3
 8004944:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8004946:	2287      	movs	r2, #135	; 0x87
 8004948:	214d      	movs	r1, #77	; 0x4d
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7ff fef5 	bl	800473a <write_register>
      set_OCP(lora, 140);
 8004950:	218c      	movs	r1, #140	; 0x8c
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ff38 	bl	80047c8 <set_OCP>
 8004958:	e008      	b.n	800496c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 800495a:	2284      	movs	r2, #132	; 0x84
 800495c:	214d      	movs	r1, #77	; 0x4d
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff feeb 	bl	800473a <write_register>
      set_OCP(lora, 97);
 8004964:	2161      	movs	r1, #97	; 0x61
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ff2e 	bl	80047c8 <set_OCP>
    level -= 2;
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	3b02      	subs	r3, #2
 8004970:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	2109      	movs	r1, #9
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fedb 	bl	800473a <write_register>
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8004998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800499c:	f04f 0000 	mov.w	r0, #0
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	04d9      	lsls	r1, r3, #19
 80049a6:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80049aa:	04d0      	lsls	r0, r2, #19
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <lora_set_frequency+0x88>)
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	f7fc f9b9 	bl	8000d28 <__aeabi_uldivmod>
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 80049be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	0c02      	lsrs	r2, r0, #16
 80049cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80049d0:	0c0b      	lsrs	r3, r1, #16
 80049d2:	b2d3      	uxtb	r3, r2
 80049d4:	461a      	mov	r2, r3
 80049d6:	2106      	movs	r1, #6
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7ff feae 	bl	800473a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 80049de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	0a02      	lsrs	r2, r0, #8
 80049ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80049f0:	0a0b      	lsrs	r3, r1, #8
 80049f2:	b2d3      	uxtb	r3, r2
 80049f4:	461a      	mov	r2, r3
 80049f6:	2107      	movs	r1, #7
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fe9e 	bl	800473a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 80049fe:	7c3b      	ldrb	r3, [r7, #16]
 8004a00:	461a      	mov	r2, r3
 8004a02:	2108      	movs	r1, #8
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fe98 	bl	800473a <write_register>
}
 8004a0a:	bf00      	nop
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	01e84800 	.word	0x01e84800

08004a18 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	460b      	mov	r3, r1
 8004a22:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b05      	cmp	r3, #5
 8004a28:	d802      	bhi.n	8004a30 <lora_set_spreading_factor+0x18>
    sf = 6;
 8004a2a:	2306      	movs	r3, #6
 8004a2c:	70fb      	strb	r3, [r7, #3]
 8004a2e:	e004      	b.n	8004a3a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d901      	bls.n	8004a3a <lora_set_spreading_factor+0x22>
    sf = 12;
 8004a36:	230c      	movs	r3, #12
 8004a38:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d10a      	bne.n	8004a56 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8004a40:	22c5      	movs	r2, #197	; 0xc5
 8004a42:	2131      	movs	r1, #49	; 0x31
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fe78 	bl	800473a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	2137      	movs	r1, #55	; 0x37
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff fe73 	bl	800473a <write_register>
 8004a54:	e009      	b.n	8004a6a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8004a56:	22c3      	movs	r2, #195	; 0xc3
 8004a58:	2131      	movs	r1, #49	; 0x31
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fe6d 	bl	800473a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8004a60:	220a      	movs	r2, #10
 8004a62:	2137      	movs	r1, #55	; 0x37
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff fe68 	bl	800473a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8004a6a:	211e      	movs	r1, #30
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fe2d 	bl	80046cc <read_register>
 8004a72:	4603      	mov	r3, r0
 8004a74:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	b25a      	sxtb	r2, r3
 8004a7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	211e      	movs	r1, #30
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff fe54 	bl	800473a <write_register>

  set_low_data_rate_optimization(lora);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fece 	bl	8004834 <set_low_data_rate_optimization>
}
 8004a98:	bf00      	nop
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8004aac:	887b      	ldrh	r3, [r7, #2]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fe3e 	bl	800473a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8004abe:	887b      	ldrh	r3, [r7, #2]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2121      	movs	r1, #33	; 0x21
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff fe34 	bl	800473a <write_register>
}
 8004ad2:	bf00      	nop
 8004ad4:	3708      	adds	r7, #8
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b082      	sub	sp, #8
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8004ae2:	2142      	movs	r1, #66	; 0x42
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fdf1 	bl	80046cc <read_register>
 8004aea:	4603      	mov	r3, r0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <lora_init>:
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	887a      	ldrh	r2, [r7, #2]
 8004b12:	811a      	strh	r2, [r3, #8]
  lora->frequency = freq;
 8004b14:	6a3a      	ldr	r2, [r7, #32]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	611a      	str	r2, [r3, #16]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	615a      	str	r2, [r3, #20]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	761a      	strb	r2, [r3, #24]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	765a      	strb	r2, [r3, #25]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b32:	60da      	str	r2, [r3, #12]

  // Check version
  uint8_t ver = lora_version(lora);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ffd0 	bl	8004ada <lora_version>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b12      	cmp	r3, #18
 8004b42:	d001      	beq.n	8004b48 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8004b44:	2304      	movs	r3, #4
 8004b46:	e031      	b.n	8004bac <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff fea3 	bl	8004894 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f7ff fea0 	bl	8004894 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8004b54:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff ff17 	bl	800498c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8004b5e:	2107      	movs	r1, #7
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff ff59 	bl	8004a18 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8004b66:	210a      	movs	r1, #10
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff ff99 	bl	8004aa0 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fea8 	bl	80048c4 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8004b74:	210c      	movs	r1, #12
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f7ff fda8 	bl	80046cc <read_register>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8004b80:	7dbb      	ldrb	r3, [r7, #22]
 8004b82:	f043 0303 	orr.w	r3, r3, #3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	210c      	movs	r1, #12
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff fdd4 	bl	800473a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8004b92:	2204      	movs	r2, #4
 8004b94:	2126      	movs	r1, #38	; 0x26
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fdcf 	bl	800473a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8004b9c:	2111      	movs	r1, #17
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f7ff fea8 	bl	80048f4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fe81 	bl	80048ac <lora_mode_standby>

  return LORA_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
	return 1;
 8004bb8:	2301      	movs	r3, #1
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <_kill>:

int _kill(int pid, int sig)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004bce:	f00a fb03 	bl	800f1d8 <__errno>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2216      	movs	r2, #22
 8004bd6:	601a      	str	r2, [r3, #0]
	return -1;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <_exit>:

void _exit (int status)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004bec:	f04f 31ff 	mov.w	r1, #4294967295
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ffe7 	bl	8004bc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004bf6:	e7fe      	b.n	8004bf6 <_exit+0x12>

08004bf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	e00a      	b.n	8004c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c0a:	f3af 8000 	nop.w
 8004c0e:	4601      	mov	r1, r0
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	60ba      	str	r2, [r7, #8]
 8004c16:	b2ca      	uxtb	r2, r1
 8004c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	dbf0      	blt.n	8004c0a <_read+0x12>
	}

return len;
 8004c28:	687b      	ldr	r3, [r7, #4]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b086      	sub	sp, #24
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	e009      	b.n	8004c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	60ba      	str	r2, [r7, #8]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	3301      	adds	r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	dbf1      	blt.n	8004c44 <_write+0x12>
	}
	return len;
 8004c60:	687b      	ldr	r3, [r7, #4]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <_close>:

int _close(int file)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
	return -1;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c92:	605a      	str	r2, [r3, #4]
	return 0;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <_isatty>:

int _isatty(int file)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
	return 1;
 8004caa:	2301      	movs	r3, #1
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
	return 0;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <_sbrk+0x5c>)
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <_sbrk+0x60>)
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <_sbrk+0x64>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cf0:	4b11      	ldr	r3, [pc, #68]	; (8004d38 <_sbrk+0x64>)
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <_sbrk+0x68>)
 8004cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <_sbrk+0x64>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d207      	bcs.n	8004d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d04:	f00a fa68 	bl	800f1d8 <__errno>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d12:	e009      	b.n	8004d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <_sbrk+0x64>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <_sbrk+0x64>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4413      	add	r3, r2
 8004d22:	4a05      	ldr	r2, [pc, #20]	; (8004d38 <_sbrk+0x64>)
 8004d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d26:	68fb      	ldr	r3, [r7, #12]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3718      	adds	r7, #24
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20020000 	.word	0x20020000
 8004d34:	00000400 	.word	0x00000400
 8004d38:	2000025c 	.word	0x2000025c
 8004d3c:	20004b48 	.word	0x20004b48

08004d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <SystemInit+0x20>)
 8004d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4a:	4a05      	ldr	r2, [pc, #20]	; (8004d60 <SystemInit+0x20>)
 8004d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	e000ed00 	.word	0xe000ed00

08004d64 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]
 8004d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d78:	463b      	mov	r3, r7
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d80:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004d82:	4a1f      	ldr	r2, [pc, #124]	; (8004e00 <MX_TIM1_Init+0x9c>)
 8004d84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004d88:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8004d8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004d96:	22f9      	movs	r2, #249	; 0xf9
 8004d98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004da0:	4b16      	ldr	r3, [pc, #88]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004dac:	4813      	ldr	r0, [pc, #76]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004dae:	f004 ff97 	bl	8009ce0 <HAL_TIM_Base_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004db8:	f7ff fa8c 	bl	80042d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004dc2:	f107 0308 	add.w	r3, r7, #8
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	480c      	ldr	r0, [pc, #48]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004dca:	f005 f951 	bl	800a070 <HAL_TIM_ConfigClockSource>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004dd4:	f7ff fa7e 	bl	80042d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004de0:	463b      	mov	r3, r7
 8004de2:	4619      	mov	r1, r3
 8004de4:	4805      	ldr	r0, [pc, #20]	; (8004dfc <MX_TIM1_Init+0x98>)
 8004de6:	f005 fb69 	bl	800a4bc <HAL_TIMEx_MasterConfigSynchronization>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004df0:	f7ff fa70 	bl	80042d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004df4:	bf00      	nop
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	20002a34 	.word	0x20002a34
 8004e00:	40010000 	.word	0x40010000

08004e04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <HAL_TIM_Base_MspInit+0x48>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d115      	bne.n	8004e42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <HAL_TIM_Base_MspInit+0x4c>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <HAL_TIM_Base_MspInit+0x4c>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6453      	str	r3, [r2, #68]	; 0x44
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <HAL_TIM_Base_MspInit+0x4c>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2100      	movs	r1, #0
 8004e36:	2019      	movs	r0, #25
 8004e38:	f000 fe21 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e3c:	2019      	movs	r0, #25
 8004e3e:	f000 fe3a 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40023800 	.word	0x40023800

08004e54 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004e58:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e5a:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <MX_UART4_Init+0x50>)
 8004e5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8004e5e:	4b10      	ldr	r3, [pc, #64]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004e64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004e66:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e74:	2200      	movs	r2, #0
 8004e76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e7a:	220c      	movs	r2, #12
 8004e7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004e8a:	4805      	ldr	r0, [pc, #20]	; (8004ea0 <MX_UART4_Init+0x4c>)
 8004e8c:	f005 fba6 	bl	800a5dc <HAL_UART_Init>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004e96:	f7ff fa1d 	bl	80042d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20002a7c 	.word	0x20002a7c
 8004ea4:	40004c00 	.word	0x40004c00

08004ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08a      	sub	sp, #40	; 0x28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eb0:	f107 0314 	add.w	r3, r7, #20
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	609a      	str	r2, [r3, #8]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a1d      	ldr	r2, [pc, #116]	; (8004f3c <HAL_UART_MspInit+0x94>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d133      	bne.n	8004f32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004eca:	2300      	movs	r3, #0
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <HAL_UART_MspInit+0x98>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <HAL_UART_MspInit+0x98>)
 8004ed4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eda:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_UART_MspInit+0x98>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <HAL_UART_MspInit+0x98>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <HAL_UART_MspInit+0x98>)
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <HAL_UART_MspInit+0x98>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004f02:	2303      	movs	r3, #3
 8004f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f06:	2302      	movs	r3, #2
 8004f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004f12:	2308      	movs	r3, #8
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4809      	ldr	r0, [pc, #36]	; (8004f44 <HAL_UART_MspInit+0x9c>)
 8004f1e:	f000 fe77 	bl	8005c10 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	2034      	movs	r0, #52	; 0x34
 8004f28:	f000 fda9 	bl	8005a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004f2c:	2034      	movs	r0, #52	; 0x34
 8004f2e:	f000 fdc2 	bl	8005ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8004f32:	bf00      	nop
 8004f34:	3728      	adds	r7, #40	; 0x28
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40004c00 	.word	0x40004c00
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40020000 	.word	0x40020000

08004f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f4c:	480d      	ldr	r0, [pc, #52]	; (8004f84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f4e:	490e      	ldr	r1, [pc, #56]	; (8004f88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f50:	4a0e      	ldr	r2, [pc, #56]	; (8004f8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f54:	e002      	b.n	8004f5c <LoopCopyDataInit>

08004f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f5a:	3304      	adds	r3, #4

08004f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f60:	d3f9      	bcc.n	8004f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f62:	4a0b      	ldr	r2, [pc, #44]	; (8004f90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f64:	4c0b      	ldr	r4, [pc, #44]	; (8004f94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f68:	e001      	b.n	8004f6e <LoopFillZerobss>

08004f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f6c:	3204      	adds	r2, #4

08004f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f70:	d3fb      	bcc.n	8004f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f72:	f7ff fee5 	bl	8004d40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f76:	f00a f935 	bl	800f1e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f7a:	f7fe fbf9 	bl	8003770 <main>
  bx  lr    
 8004f7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f88:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004f8c:	08015558 	.word	0x08015558
  ldr r2, =_sbss
 8004f90:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004f94:	20004b44 	.word	0x20004b44

08004f98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f98:	e7fe      	b.n	8004f98 <ADC_IRQHandler>
	...

08004f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fa0:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <HAL_Init+0x40>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <HAL_Init+0x40>)
 8004fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <HAL_Init+0x40>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <HAL_Init+0x40>)
 8004fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fb8:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <HAL_Init+0x40>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a07      	ldr	r2, [pc, #28]	; (8004fdc <HAL_Init+0x40>)
 8004fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fc4:	2003      	movs	r0, #3
 8004fc6:	f000 fd4f 	bl	8005a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f000 f808 	bl	8004fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fd0:	f7ff fb0e 	bl	80045f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023c00 	.word	0x40023c00

08004fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fe8:	4b12      	ldr	r3, [pc, #72]	; (8005034 <HAL_InitTick+0x54>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	4b12      	ldr	r3, [pc, #72]	; (8005038 <HAL_InitTick+0x58>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fd67 	bl	8005ad2 <HAL_SYSTICK_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e00e      	b.n	800502c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b0f      	cmp	r3, #15
 8005012:	d80a      	bhi.n	800502a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005014:	2200      	movs	r2, #0
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	f000 fd2f 	bl	8005a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005020:	4a06      	ldr	r2, [pc, #24]	; (800503c <HAL_InitTick+0x5c>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e000      	b.n	800502c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	2000004c 	.word	0x2000004c
 8005038:	20000054 	.word	0x20000054
 800503c:	20000050 	.word	0x20000050

08005040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <HAL_IncTick+0x20>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_IncTick+0x24>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4413      	add	r3, r2
 8005050:	4a04      	ldr	r2, [pc, #16]	; (8005064 <HAL_IncTick+0x24>)
 8005052:	6013      	str	r3, [r2, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000054 	.word	0x20000054
 8005064:	20002ac0 	.word	0x20002ac0

08005068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return uwTick;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_GetTick+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20002ac0 	.word	0x20002ac0

08005080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005088:	f7ff ffee 	bl	8005068 <HAL_GetTick>
 800508c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005098:	d005      	beq.n	80050a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800509a:	4b0a      	ldr	r3, [pc, #40]	; (80050c4 <HAL_Delay+0x44>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050a6:	bf00      	nop
 80050a8:	f7ff ffde 	bl	8005068 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d8f7      	bhi.n	80050a8 <HAL_Delay+0x28>
  {
  }
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000054 	.word	0x20000054

080050c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e033      	b.n	8005146 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fc f822 	bl	8001130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d118      	bne.n	8005138 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800510e:	f023 0302 	bic.w	r3, r3, #2
 8005112:	f043 0202 	orr.w	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fad8 	bl	80056d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	f043 0201 	orr.w	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
 8005136:	e001      	b.n	800513c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d101      	bne.n	800516a <HAL_ADC_Start+0x1a>
 8005166:	2302      	movs	r3, #2
 8005168:	e0b2      	b.n	80052d0 <HAL_ADC_Start+0x180>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d018      	beq.n	80051b2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005190:	4b52      	ldr	r3, [pc, #328]	; (80052dc <HAL_ADC_Start+0x18c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a52      	ldr	r2, [pc, #328]	; (80052e0 <HAL_ADC_Start+0x190>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0c9a      	lsrs	r2, r3, #18
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80051a4:	e002      	b.n	80051ac <HAL_ADC_Start+0x5c>
    {
      counter--;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f9      	bne.n	80051a6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d17a      	bne.n	80052b6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	d106      	bne.n	800520e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005204:	f023 0206 	bic.w	r2, r3, #6
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	645a      	str	r2, [r3, #68]	; 0x44
 800520c:	e002      	b.n	8005214 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800521c:	4b31      	ldr	r3, [pc, #196]	; (80052e4 <HAL_ADC_Start+0x194>)
 800521e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005228:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 031f 	and.w	r3, r3, #31
 8005232:	2b00      	cmp	r3, #0
 8005234:	d12a      	bne.n	800528c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HAL_ADC_Start+0x198>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d015      	beq.n	800526c <HAL_ADC_Start+0x11c>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a29      	ldr	r2, [pc, #164]	; (80052ec <HAL_ADC_Start+0x19c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d105      	bne.n	8005256 <HAL_ADC_Start+0x106>
 800524a:	4b26      	ldr	r3, [pc, #152]	; (80052e4 <HAL_ADC_Start+0x194>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f003 031f 	and.w	r3, r3, #31
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <HAL_ADC_Start+0x1a0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d136      	bne.n	80052ce <HAL_ADC_Start+0x17e>
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_ADC_Start+0x194>)
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d130      	bne.n	80052ce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d129      	bne.n	80052ce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005288:	609a      	str	r2, [r3, #8]
 800528a:	e020      	b.n	80052ce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <HAL_ADC_Start+0x198>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d11b      	bne.n	80052ce <HAL_ADC_Start+0x17e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d114      	bne.n	80052ce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	e00b      	b.n	80052ce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0210 	orr.w	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	2000004c 	.word	0x2000004c
 80052e0:	431bde83 	.word	0x431bde83
 80052e4:	40012300 	.word	0x40012300
 80052e8:	40012000 	.word	0x40012000
 80052ec:	40012100 	.word	0x40012100
 80052f0:	40012200 	.word	0x40012200

080052f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_ADC_Stop+0x16>
 8005306:	2302      	movs	r3, #2
 8005308:	e021      	b.n	800534e <HAL_ADC_Stop+0x5a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d109      	bne.n	8005344 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	f043 0201 	orr.w	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d113      	bne.n	80053a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d10b      	bne.n	80053a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e063      	b.n	8005468 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80053a0:	f7ff fe62 	bl	8005068 <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053a6:	e021      	b.n	80053ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d01d      	beq.n	80053ec <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_ADC_PollForConversion+0x6c>
 80053b6:	f7ff fe57 	bl	8005068 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d212      	bcs.n	80053ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d00b      	beq.n	80053ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f043 0204 	orr.w	r2, r3, #4
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e03d      	b.n	8005468 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d1d6      	bne.n	80053a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f06f 0212 	mvn.w	r2, #18
 8005402:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d123      	bne.n	8005466 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005422:	2b00      	cmp	r3, #0
 8005424:	d11f      	bne.n	8005466 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800543e:	2b00      	cmp	r3, #0
 8005440:	d111      	bne.n	8005466 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d105      	bne.n	8005466 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	f043 0201 	orr.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <HAL_ADC_ConfigChannel+0x1c>
 80054a4:	2302      	movs	r3, #2
 80054a6:	e105      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x228>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b09      	cmp	r3, #9
 80054b6:	d925      	bls.n	8005504 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68d9      	ldr	r1, [r3, #12]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	4613      	mov	r3, r2
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	4413      	add	r3, r2
 80054cc:	3b1e      	subs	r3, #30
 80054ce:	2207      	movs	r2, #7
 80054d0:	fa02 f303 	lsl.w	r3, r2, r3
 80054d4:	43da      	mvns	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	400a      	ands	r2, r1
 80054dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68d9      	ldr	r1, [r3, #12]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4618      	mov	r0, r3
 80054f0:	4603      	mov	r3, r0
 80054f2:	005b      	lsls	r3, r3, #1
 80054f4:	4403      	add	r3, r0
 80054f6:	3b1e      	subs	r3, #30
 80054f8:	409a      	lsls	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	e022      	b.n	800554a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6919      	ldr	r1, [r3, #16]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	4613      	mov	r3, r2
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	4413      	add	r3, r2
 8005518:	2207      	movs	r2, #7
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	43da      	mvns	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	400a      	ands	r2, r1
 8005526:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6919      	ldr	r1, [r3, #16]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689a      	ldr	r2, [r3, #8]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	b29b      	uxth	r3, r3
 8005538:	4618      	mov	r0, r3
 800553a:	4603      	mov	r3, r0
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	4403      	add	r3, r0
 8005540:	409a      	lsls	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d824      	bhi.n	800559c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	3b05      	subs	r3, #5
 8005564:	221f      	movs	r2, #31
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43da      	mvns	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	400a      	ands	r2, r1
 8005572:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	4618      	mov	r0, r3
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	3b05      	subs	r3, #5
 800558e:	fa00 f203 	lsl.w	r2, r0, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	635a      	str	r2, [r3, #52]	; 0x34
 800559a:	e04c      	b.n	8005636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	d824      	bhi.n	80055ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	3b23      	subs	r3, #35	; 0x23
 80055b6:	221f      	movs	r2, #31
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43da      	mvns	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	400a      	ands	r2, r1
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	4618      	mov	r0, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	3b23      	subs	r3, #35	; 0x23
 80055e0:	fa00 f203 	lsl.w	r2, r0, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
 80055ec:	e023      	b.n	8005636 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	3b41      	subs	r3, #65	; 0x41
 8005600:	221f      	movs	r2, #31
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	43da      	mvns	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	400a      	ands	r2, r1
 800560e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	4618      	mov	r0, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	3b41      	subs	r3, #65	; 0x41
 800562a:	fa00 f203 	lsl.w	r2, r0, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005636:	4b22      	ldr	r3, [pc, #136]	; (80056c0 <HAL_ADC_ConfigChannel+0x234>)
 8005638:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_ADC_ConfigChannel+0x238>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d109      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x1cc>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b12      	cmp	r3, #18
 800564a:	d105      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_ADC_ConfigChannel+0x238>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d123      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x21e>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b10      	cmp	r3, #16
 8005668:	d003      	beq.n	8005672 <HAL_ADC_ConfigChannel+0x1e6>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b11      	cmp	r3, #17
 8005670:	d11b      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b10      	cmp	r3, #16
 8005684:	d111      	bne.n	80056aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005686:	4b10      	ldr	r3, [pc, #64]	; (80056c8 <HAL_ADC_ConfigChannel+0x23c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a10      	ldr	r2, [pc, #64]	; (80056cc <HAL_ADC_ConfigChannel+0x240>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	0c9a      	lsrs	r2, r3, #18
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800569c:	e002      	b.n	80056a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f9      	bne.n	800569e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	40012300 	.word	0x40012300
 80056c4:	40012000 	.word	0x40012000
 80056c8:	2000004c 	.word	0x2000004c
 80056cc:	431bde83 	.word	0x431bde83

080056d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056d8:	4b79      	ldr	r3, [pc, #484]	; (80058c0 <ADC_Init+0x1f0>)
 80056da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	021a      	lsls	r2, r3, #8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005728:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800574a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6899      	ldr	r1, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	4a58      	ldr	r2, [pc, #352]	; (80058c4 <ADC_Init+0x1f4>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d022      	beq.n	80057ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005776:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6899      	ldr	r1, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6899      	ldr	r1, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	e00f      	b.n	80057ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0202 	bic.w	r2, r2, #2
 80057dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6899      	ldr	r1, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	7e1b      	ldrb	r3, [r3, #24]
 80057e8:	005a      	lsls	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01b      	beq.n	8005834 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800580a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800581a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6859      	ldr	r1, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	3b01      	subs	r3, #1
 8005828:	035a      	lsls	r2, r3, #13
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	e007      	b.n	8005844 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005842:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	3b01      	subs	r3, #1
 8005860:	051a      	lsls	r2, r3, #20
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005878:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005886:	025a      	lsls	r2, r3, #9
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6899      	ldr	r1, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	029a      	lsls	r2, r3, #10
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40012300 	.word	0x40012300
 80058c4:	0f000001 	.word	0x0f000001

080058c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f003 0307 	and.w	r3, r3, #7
 80058d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <__NVIC_SetPriorityGrouping+0x44>)
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058e4:	4013      	ands	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058fa:	4a04      	ldr	r2, [pc, #16]	; (800590c <__NVIC_SetPriorityGrouping+0x44>)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	60d3      	str	r3, [r2, #12]
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	e000ed00 	.word	0xe000ed00

08005910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <__NVIC_GetPriorityGrouping+0x18>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	0a1b      	lsrs	r3, r3, #8
 800591a:	f003 0307 	and.w	r3, r3, #7
}
 800591e:	4618      	mov	r0, r3
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	e000ed00 	.word	0xe000ed00

0800592c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593a:	2b00      	cmp	r3, #0
 800593c:	db0b      	blt.n	8005956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	f003 021f 	and.w	r2, r3, #31
 8005944:	4907      	ldr	r1, [pc, #28]	; (8005964 <__NVIC_EnableIRQ+0x38>)
 8005946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	2001      	movs	r0, #1
 800594e:	fa00 f202 	lsl.w	r2, r0, r2
 8005952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	e000e100 	.word	0xe000e100

08005968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	6039      	str	r1, [r7, #0]
 8005972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005978:	2b00      	cmp	r3, #0
 800597a:	db0a      	blt.n	8005992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	b2da      	uxtb	r2, r3
 8005980:	490c      	ldr	r1, [pc, #48]	; (80059b4 <__NVIC_SetPriority+0x4c>)
 8005982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005986:	0112      	lsls	r2, r2, #4
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	440b      	add	r3, r1
 800598c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005990:	e00a      	b.n	80059a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4908      	ldr	r1, [pc, #32]	; (80059b8 <__NVIC_SetPriority+0x50>)
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	3b04      	subs	r3, #4
 80059a0:	0112      	lsls	r2, r2, #4
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	440b      	add	r3, r1
 80059a6:	761a      	strb	r2, [r3, #24]
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	e000e100 	.word	0xe000e100
 80059b8:	e000ed00 	.word	0xe000ed00

080059bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f1c3 0307 	rsb	r3, r3, #7
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	bf28      	it	cs
 80059da:	2304      	movcs	r3, #4
 80059dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3304      	adds	r3, #4
 80059e2:	2b06      	cmp	r3, #6
 80059e4:	d902      	bls.n	80059ec <NVIC_EncodePriority+0x30>
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3b03      	subs	r3, #3
 80059ea:	e000      	b.n	80059ee <NVIC_EncodePriority+0x32>
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	fa02 f303 	lsl.w	r3, r2, r3
 80059fa:	43da      	mvns	r2, r3
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	401a      	ands	r2, r3
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a04:	f04f 31ff 	mov.w	r1, #4294967295
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0e:	43d9      	mvns	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a14:	4313      	orrs	r3, r2
         );
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3724      	adds	r7, #36	; 0x24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a34:	d301      	bcc.n	8005a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a36:	2301      	movs	r3, #1
 8005a38:	e00f      	b.n	8005a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <SysTick_Config+0x40>)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a42:	210f      	movs	r1, #15
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	f7ff ff8e 	bl	8005968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <SysTick_Config+0x40>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a52:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <SysTick_Config+0x40>)
 8005a54:	2207      	movs	r2, #7
 8005a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	e000e010 	.word	0xe000e010

08005a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff ff29 	bl	80058c8 <__NVIC_SetPriorityGrouping>
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b086      	sub	sp, #24
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	4603      	mov	r3, r0
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a90:	f7ff ff3e 	bl	8005910 <__NVIC_GetPriorityGrouping>
 8005a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7ff ff8e 	bl	80059bc <NVIC_EncodePriority>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ff5d 	bl	8005968 <__NVIC_SetPriority>
}
 8005aae:	bf00      	nop
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff ff31 	bl	800592c <__NVIC_EnableIRQ>
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff ffa2 	bl	8005a24 <SysTick_Config>
 8005ae0:	4603      	mov	r3, r0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005af8:	f7ff fab6 	bl	8005068 <HAL_GetTick>
 8005afc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d008      	beq.n	8005b1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2280      	movs	r2, #128	; 0x80
 8005b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e052      	b.n	8005bc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0216 	bic.w	r2, r2, #22
 8005b2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <HAL_DMA_Abort+0x62>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0208 	bic.w	r2, r2, #8
 8005b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0201 	bic.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b6c:	e013      	b.n	8005b96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b6e:	f7ff fa7b 	bl	8005068 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b05      	cmp	r3, #5
 8005b7a:	d90c      	bls.n	8005b96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e015      	b.n	8005bc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e4      	bne.n	8005b6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba8:	223f      	movs	r2, #63	; 0x3f
 8005baa:	409a      	lsls	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d004      	beq.n	8005be8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2280      	movs	r2, #128	; 0x80
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e00c      	b.n	8005c02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2205      	movs	r2, #5
 8005bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
	...

08005c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b089      	sub	sp, #36	; 0x24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
 8005c2a:	e16b      	b.n	8005f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	f040 815a 	bne.w	8005efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 0303 	and.w	r3, r3, #3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d005      	beq.n	8005c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d130      	bne.n	8005cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c98:	2201      	movs	r2, #1
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 0201 	and.w	r2, r3, #1
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d017      	beq.n	8005d00 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	2203      	movs	r2, #3
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43db      	mvns	r3, r3
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d123      	bne.n	8005d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	08da      	lsrs	r2, r3, #3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	3208      	adds	r2, #8
 8005d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	220f      	movs	r2, #15
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	691a      	ldr	r2, [r3, #16]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	08da      	lsrs	r2, r3, #3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	69b9      	ldr	r1, [r7, #24]
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	2203      	movs	r2, #3
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 0203 	and.w	r2, r3, #3
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80b4 	beq.w	8005efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	4b60      	ldr	r3, [pc, #384]	; (8005f1c <HAL_GPIO_Init+0x30c>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	4a5f      	ldr	r2, [pc, #380]	; (8005f1c <HAL_GPIO_Init+0x30c>)
 8005da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005da4:	6453      	str	r3, [r2, #68]	; 0x44
 8005da6:	4b5d      	ldr	r3, [pc, #372]	; (8005f1c <HAL_GPIO_Init+0x30c>)
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005db2:	4a5b      	ldr	r2, [pc, #364]	; (8005f20 <HAL_GPIO_Init+0x310>)
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	3302      	adds	r3, #2
 8005dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	220f      	movs	r2, #15
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a52      	ldr	r2, [pc, #328]	; (8005f24 <HAL_GPIO_Init+0x314>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d02b      	beq.n	8005e36 <HAL_GPIO_Init+0x226>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a51      	ldr	r2, [pc, #324]	; (8005f28 <HAL_GPIO_Init+0x318>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d025      	beq.n	8005e32 <HAL_GPIO_Init+0x222>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a50      	ldr	r2, [pc, #320]	; (8005f2c <HAL_GPIO_Init+0x31c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01f      	beq.n	8005e2e <HAL_GPIO_Init+0x21e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a4f      	ldr	r2, [pc, #316]	; (8005f30 <HAL_GPIO_Init+0x320>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d019      	beq.n	8005e2a <HAL_GPIO_Init+0x21a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a4e      	ldr	r2, [pc, #312]	; (8005f34 <HAL_GPIO_Init+0x324>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <HAL_GPIO_Init+0x216>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a4d      	ldr	r2, [pc, #308]	; (8005f38 <HAL_GPIO_Init+0x328>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00d      	beq.n	8005e22 <HAL_GPIO_Init+0x212>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a4c      	ldr	r2, [pc, #304]	; (8005f3c <HAL_GPIO_Init+0x32c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <HAL_GPIO_Init+0x20e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a4b      	ldr	r2, [pc, #300]	; (8005f40 <HAL_GPIO_Init+0x330>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d101      	bne.n	8005e1a <HAL_GPIO_Init+0x20a>
 8005e16:	2307      	movs	r3, #7
 8005e18:	e00e      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	e00c      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e1e:	2306      	movs	r3, #6
 8005e20:	e00a      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e22:	2305      	movs	r3, #5
 8005e24:	e008      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e26:	2304      	movs	r3, #4
 8005e28:	e006      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e004      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e002      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <HAL_GPIO_Init+0x228>
 8005e36:	2300      	movs	r3, #0
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	f002 0203 	and.w	r2, r2, #3
 8005e3e:	0092      	lsls	r2, r2, #2
 8005e40:	4093      	lsls	r3, r2
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e48:	4935      	ldr	r1, [pc, #212]	; (8005f20 <HAL_GPIO_Init+0x310>)
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	089b      	lsrs	r3, r3, #2
 8005e4e:	3302      	adds	r3, #2
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e56:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e7a:	4a32      	ldr	r2, [pc, #200]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e80:	4b30      	ldr	r3, [pc, #192]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ea4:	4a27      	ldr	r2, [pc, #156]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005eaa:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ece:	4a1d      	ldr	r2, [pc, #116]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	43db      	mvns	r3, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ef8:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <HAL_GPIO_Init+0x334>)
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3301      	adds	r3, #1
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b0f      	cmp	r3, #15
 8005f08:	f67f ae90 	bls.w	8005c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	3724      	adds	r7, #36	; 0x24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40023800 	.word	0x40023800
 8005f20:	40013800 	.word	0x40013800
 8005f24:	40020000 	.word	0x40020000
 8005f28:	40020400 	.word	0x40020400
 8005f2c:	40020800 	.word	0x40020800
 8005f30:	40020c00 	.word	0x40020c00
 8005f34:	40021000 	.word	0x40021000
 8005f38:	40021400 	.word	0x40021400
 8005f3c:	40021800 	.word	0x40021800
 8005f40:	40021c00 	.word	0x40021c00
 8005f44:	40013c00 	.word	0x40013c00

08005f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	887b      	ldrh	r3, [r7, #2]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e001      	b.n	8005f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	807b      	strh	r3, [r7, #2]
 8005f84:	4613      	mov	r3, r2
 8005f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f88:	787b      	ldrb	r3, [r7, #1]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f8e:	887a      	ldrh	r2, [r7, #2]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f94:	e003      	b.n	8005f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	041a      	lsls	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	619a      	str	r2, [r3, #24]
}
 8005f9e:	bf00      	nop
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d006      	beq.n	8005fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005fc2:	4a05      	ldr	r2, [pc, #20]	; (8005fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fd f994 	bl	80032f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	40013c00 	.word	0x40013c00

08005fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e12b      	b.n	8006246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d106      	bne.n	8006008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fc fff6 	bl	8002ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2224      	movs	r2, #36	; 0x24
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800602e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800603e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006040:	f001 fbac 	bl	800779c <HAL_RCC_GetPCLK1Freq>
 8006044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	4a81      	ldr	r2, [pc, #516]	; (8006250 <HAL_I2C_Init+0x274>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d807      	bhi.n	8006060 <HAL_I2C_Init+0x84>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4a80      	ldr	r2, [pc, #512]	; (8006254 <HAL_I2C_Init+0x278>)
 8006054:	4293      	cmp	r3, r2
 8006056:	bf94      	ite	ls
 8006058:	2301      	movls	r3, #1
 800605a:	2300      	movhi	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e006      	b.n	800606e <HAL_I2C_Init+0x92>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a7d      	ldr	r2, [pc, #500]	; (8006258 <HAL_I2C_Init+0x27c>)
 8006064:	4293      	cmp	r3, r2
 8006066:	bf94      	ite	ls
 8006068:	2301      	movls	r3, #1
 800606a:	2300      	movhi	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e0e7      	b.n	8006246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a78      	ldr	r2, [pc, #480]	; (800625c <HAL_I2C_Init+0x280>)
 800607a:	fba2 2303 	umull	r2, r3, r2, r3
 800607e:	0c9b      	lsrs	r3, r3, #18
 8006080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4a6a      	ldr	r2, [pc, #424]	; (8006250 <HAL_I2C_Init+0x274>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d802      	bhi.n	80060b0 <HAL_I2C_Init+0xd4>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	3301      	adds	r3, #1
 80060ae:	e009      	b.n	80060c4 <HAL_I2C_Init+0xe8>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	4a69      	ldr	r2, [pc, #420]	; (8006260 <HAL_I2C_Init+0x284>)
 80060bc:	fba2 2303 	umull	r2, r3, r2, r3
 80060c0:	099b      	lsrs	r3, r3, #6
 80060c2:	3301      	adds	r3, #1
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80060d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	495c      	ldr	r1, [pc, #368]	; (8006250 <HAL_I2C_Init+0x274>)
 80060e0:	428b      	cmp	r3, r1
 80060e2:	d819      	bhi.n	8006118 <HAL_I2C_Init+0x13c>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1e59      	subs	r1, r3, #1
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80060f2:	1c59      	adds	r1, r3, #1
 80060f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80060f8:	400b      	ands	r3, r1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_I2C_Init+0x138>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1e59      	subs	r1, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	fbb1 f3f3 	udiv	r3, r1, r3
 800610c:	3301      	adds	r3, #1
 800610e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006112:	e051      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006114:	2304      	movs	r3, #4
 8006116:	e04f      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d111      	bne.n	8006144 <HAL_I2C_Init+0x168>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	1e58      	subs	r0, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6859      	ldr	r1, [r3, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	440b      	add	r3, r1
 800612e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006132:	3301      	adds	r3, #1
 8006134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf0c      	ite	eq
 800613c:	2301      	moveq	r3, #1
 800613e:	2300      	movne	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e012      	b.n	800616a <HAL_I2C_Init+0x18e>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1e58      	subs	r0, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6859      	ldr	r1, [r3, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	0099      	lsls	r1, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	fbb0 f3f3 	udiv	r3, r0, r3
 800615a:	3301      	adds	r3, #1
 800615c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006160:	2b00      	cmp	r3, #0
 8006162:	bf0c      	ite	eq
 8006164:	2301      	moveq	r3, #1
 8006166:	2300      	movne	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_I2C_Init+0x196>
 800616e:	2301      	movs	r3, #1
 8006170:	e022      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10e      	bne.n	8006198 <HAL_I2C_Init+0x1bc>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1e58      	subs	r0, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6859      	ldr	r1, [r3, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	440b      	add	r3, r1
 8006188:	fbb0 f3f3 	udiv	r3, r0, r3
 800618c:	3301      	adds	r3, #1
 800618e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006196:	e00f      	b.n	80061b8 <HAL_I2C_Init+0x1dc>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1e58      	subs	r0, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	0099      	lsls	r1, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ae:	3301      	adds	r3, #1
 80061b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	6809      	ldr	r1, [r1, #0]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	69da      	ldr	r2, [r3, #28]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80061e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6911      	ldr	r1, [r2, #16]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	68d2      	ldr	r2, [r2, #12]
 80061f2:	4311      	orrs	r1, r2
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	430b      	orrs	r3, r1
 80061fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2220      	movs	r2, #32
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	000186a0 	.word	0x000186a0
 8006254:	001e847f 	.word	0x001e847f
 8006258:	003d08ff 	.word	0x003d08ff
 800625c:	431bde83 	.word	0x431bde83
 8006260:	10624dd3 	.word	0x10624dd3

08006264 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af02      	add	r7, sp, #8
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	4608      	mov	r0, r1
 800626e:	4611      	mov	r1, r2
 8006270:	461a      	mov	r2, r3
 8006272:	4603      	mov	r3, r0
 8006274:	817b      	strh	r3, [r7, #10]
 8006276:	460b      	mov	r3, r1
 8006278:	813b      	strh	r3, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800627e:	f7fe fef3 	bl	8005068 <HAL_GetTick>
 8006282:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b20      	cmp	r3, #32
 800628e:	f040 80d9 	bne.w	8006444 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	2319      	movs	r3, #25
 8006298:	2201      	movs	r2, #1
 800629a:	496d      	ldr	r1, [pc, #436]	; (8006450 <HAL_I2C_Mem_Write+0x1ec>)
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 fc7f 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
 80062aa:	e0cc      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_I2C_Mem_Write+0x56>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e0c5      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d007      	beq.n	80062e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2221      	movs	r2, #33	; 0x21
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2240      	movs	r2, #64	; 0x40
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a3a      	ldr	r2, [r7, #32]
 800630a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29a      	uxth	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a4d      	ldr	r2, [pc, #308]	; (8006454 <HAL_I2C_Mem_Write+0x1f0>)
 8006320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006322:	88f8      	ldrh	r0, [r7, #6]
 8006324:	893a      	ldrh	r2, [r7, #8]
 8006326:	8979      	ldrh	r1, [r7, #10]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4603      	mov	r3, r0
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fab6 	bl	80068a4 <I2C_RequestMemoryWrite>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d052      	beq.n	80063e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e081      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fd00 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00d      	beq.n	800636e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	2b04      	cmp	r3, #4
 8006358:	d107      	bne.n	800636a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006368:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e06b      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	781a      	ldrb	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d11b      	bne.n	80063e4 <HAL_I2C_Mem_Write+0x180>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d017      	beq.n	80063e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	781a      	ldrb	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1aa      	bne.n	8006342 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fcec 	bl	8006dce <I2C_WaitOnBTFFlagUntilTimeout>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00d      	beq.n	8006418 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	2b04      	cmp	r3, #4
 8006402:	d107      	bne.n	8006414 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006412:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e016      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006440:	2300      	movs	r3, #0
 8006442:	e000      	b.n	8006446 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006444:	2302      	movs	r3, #2
  }
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	00100002 	.word	0x00100002
 8006454:	ffff0000 	.word	0xffff0000

08006458 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08c      	sub	sp, #48	; 0x30
 800645c:	af02      	add	r7, sp, #8
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	461a      	mov	r2, r3
 8006466:	4603      	mov	r3, r0
 8006468:	817b      	strh	r3, [r7, #10]
 800646a:	460b      	mov	r3, r1
 800646c:	813b      	strh	r3, [r7, #8]
 800646e:	4613      	mov	r3, r2
 8006470:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006472:	f7fe fdf9 	bl	8005068 <HAL_GetTick>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b20      	cmp	r3, #32
 8006482:	f040 8208 	bne.w	8006896 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2319      	movs	r3, #25
 800648c:	2201      	movs	r2, #1
 800648e:	497b      	ldr	r1, [pc, #492]	; (800667c <HAL_I2C_Mem_Read+0x224>)
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 fb85 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800649c:	2302      	movs	r3, #2
 800649e:	e1fb      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d101      	bne.n	80064ae <HAL_I2C_Mem_Read+0x56>
 80064aa:	2302      	movs	r3, #2
 80064ac:	e1f4      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d007      	beq.n	80064d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f042 0201 	orr.w	r2, r2, #1
 80064d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2222      	movs	r2, #34	; 0x22
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2240      	movs	r2, #64	; 0x40
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006504:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29a      	uxth	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4a5b      	ldr	r2, [pc, #364]	; (8006680 <HAL_I2C_Mem_Read+0x228>)
 8006514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006516:	88f8      	ldrh	r0, [r7, #6]
 8006518:	893a      	ldrh	r2, [r7, #8]
 800651a:	8979      	ldrh	r1, [r7, #10]
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4603      	mov	r3, r0
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fa52 	bl	80069d0 <I2C_RequestMemoryRead>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e1b0      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800653a:	2b00      	cmp	r3, #0
 800653c:	d113      	bne.n	8006566 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800653e:	2300      	movs	r3, #0
 8006540:	623b      	str	r3, [r7, #32]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	623b      	str	r3, [r7, #32]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e184      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656a:	2b01      	cmp	r3, #1
 800656c:	d11b      	bne.n	80065a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e164      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d11b      	bne.n	80065e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ce:	2300      	movs	r3, #0
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	61bb      	str	r3, [r7, #24]
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	e144      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80065fc:	e138      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	2b03      	cmp	r3, #3
 8006604:	f200 80f1 	bhi.w	80067ea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660c:	2b01      	cmp	r3, #1
 800660e:	d123      	bne.n	8006658 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 fc1b 	bl	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e139      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006656:	e10b      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	2b02      	cmp	r3, #2
 800665e:	d14e      	bne.n	80066fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006666:	2200      	movs	r2, #0
 8006668:	4906      	ldr	r1, [pc, #24]	; (8006684 <HAL_I2C_Mem_Read+0x22c>)
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 fa98 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e10e      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
 800667a:	bf00      	nop
 800667c:	00100002 	.word	0x00100002
 8006680:	ffff0000 	.word	0xffff0000
 8006684:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80066fc:	e0b8      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	2200      	movs	r2, #0
 8006706:	4966      	ldr	r1, [pc, #408]	; (80068a0 <HAL_I2C_Mem_Read+0x448>)
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fa49 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e0bf      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	2200      	movs	r2, #0
 8006762:	494f      	ldr	r1, [pc, #316]	; (80068a0 <HAL_I2C_Mem_Read+0x448>)
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fa1b 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e091      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006782:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a0:	3b01      	subs	r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e8:	e042      	b.n	8006870 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 fb2e 	bl	8006e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e04c      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	1c5a      	adds	r2, r3, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b04      	cmp	r3, #4
 800683c:	d118      	bne.n	8006870 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	b2d2      	uxtb	r2, r2
 800684a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	2b00      	cmp	r3, #0
 8006876:	f47f aec2 	bne.w	80065fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	e000      	b.n	8006898 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006896:	2302      	movs	r3, #2
  }
}
 8006898:	4618      	mov	r0, r3
 800689a:	3728      	adds	r7, #40	; 0x28
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	00010004 	.word	0x00010004

080068a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	461a      	mov	r2, r3
 80068b2:	4603      	mov	r3, r0
 80068b4:	817b      	strh	r3, [r7, #10]
 80068b6:	460b      	mov	r3, r1
 80068b8:	813b      	strh	r3, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f960 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00d      	beq.n	8006902 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f4:	d103      	bne.n	80068fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e05f      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006902:	897b      	ldrh	r3, [r7, #10]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006910:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	6a3a      	ldr	r2, [r7, #32]
 8006916:	492d      	ldr	r1, [pc, #180]	; (80069cc <I2C_RequestMemoryWrite+0x128>)
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 f998 	bl	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e04c      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006940:	6a39      	ldr	r1, [r7, #32]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa02 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00d      	beq.n	800696a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	2b04      	cmp	r3, #4
 8006954:	d107      	bne.n	8006966 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006964:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e02b      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d105      	bne.n	800697c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006970:	893b      	ldrh	r3, [r7, #8]
 8006972:	b2da      	uxtb	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	611a      	str	r2, [r3, #16]
 800697a:	e021      	b.n	80069c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800697c:	893b      	ldrh	r3, [r7, #8]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	b29b      	uxth	r3, r3
 8006982:	b2da      	uxtb	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800698a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698c:	6a39      	ldr	r1, [r7, #32]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f9dc 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d107      	bne.n	80069b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e005      	b.n	80069c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069b6:	893b      	ldrh	r3, [r7, #8]
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	00010002 	.word	0x00010002

080069d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	4608      	mov	r0, r1
 80069da:	4611      	mov	r1, r2
 80069dc:	461a      	mov	r2, r3
 80069de:	4603      	mov	r3, r0
 80069e0:	817b      	strh	r3, [r7, #10]
 80069e2:	460b      	mov	r3, r1
 80069e4:	813b      	strh	r3, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80069f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f8c2 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00d      	beq.n	8006a3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a30:	d103      	bne.n	8006a3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e0aa      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a3e:	897b      	ldrh	r3, [r7, #10]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	4952      	ldr	r1, [pc, #328]	; (8006b9c <I2C_RequestMemoryRead+0x1cc>)
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f8fa 	bl	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e097      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7c:	6a39      	ldr	r1, [r7, #32]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f964 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00d      	beq.n	8006aa6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d107      	bne.n	8006aa2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e076      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006aa6:	88fb      	ldrh	r3, [r7, #6]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d105      	bne.n	8006ab8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006aac:	893b      	ldrh	r3, [r7, #8]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	611a      	str	r2, [r3, #16]
 8006ab6:	e021      	b.n	8006afc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac8:	6a39      	ldr	r1, [r7, #32]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f93e 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d107      	bne.n	8006aee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e050      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006af2:	893b      	ldrh	r3, [r7, #8]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afe:	6a39      	ldr	r1, [r7, #32]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f923 	bl	8006d4c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00d      	beq.n	8006b28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d107      	bne.n	8006b24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e035      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f82b 	bl	8006ba0 <I2C_WaitOnFlagUntilTimeout>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00d      	beq.n	8006b6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b5e:	d103      	bne.n	8006b68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e013      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006b6c:	897b      	ldrh	r3, [r7, #10]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	6a3a      	ldr	r2, [r7, #32]
 8006b80:	4906      	ldr	r1, [pc, #24]	; (8006b9c <I2C_RequestMemoryRead+0x1cc>)
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 f863 	bl	8006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	00010002 	.word	0x00010002

08006ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	603b      	str	r3, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb0:	e025      	b.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d021      	beq.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bba:	f7fe fa55 	bl	8005068 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d302      	bcc.n	8006bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d116      	bne.n	8006bfe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e023      	b.n	8006c46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	0c1b      	lsrs	r3, r3, #16
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d10d      	bne.n	8006c24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	43da      	mvns	r2, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4013      	ands	r3, r2
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	bf0c      	ite	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	2300      	movne	r3, #0
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	461a      	mov	r2, r3
 8006c22:	e00c      	b.n	8006c3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	43da      	mvns	r2, r3
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	bf0c      	ite	eq
 8006c36:	2301      	moveq	r3, #1
 8006c38:	2300      	movne	r3, #0
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d0b6      	beq.n	8006bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	60f8      	str	r0, [r7, #12]
 8006c56:	60b9      	str	r1, [r7, #8]
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c5c:	e051      	b.n	8006d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d123      	bne.n	8006cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f043 0204 	orr.w	r2, r3, #4
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e046      	b.n	8006d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cbc:	d021      	beq.n	8006d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cbe:	f7fe f9d3 	bl	8005068 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d302      	bcc.n	8006cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d116      	bne.n	8006d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	f043 0220 	orr.w	r2, r3, #32
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e020      	b.n	8006d44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10c      	bne.n	8006d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	43da      	mvns	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4013      	ands	r3, r2
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	e00b      	b.n	8006d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	43da      	mvns	r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d18d      	bne.n	8006c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d58:	e02d      	b.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f8ce 	bl	8006efc <I2C_IsAcknowledgeFailed>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e02d      	b.n	8006dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d70:	d021      	beq.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fe f979 	bl	8005068 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d116      	bne.n	8006db6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f043 0220 	orr.w	r2, r3, #32
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e007      	b.n	8006dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc0:	2b80      	cmp	r3, #128	; 0x80
 8006dc2:	d1ca      	bne.n	8006d5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dda:	e02d      	b.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f000 f88d 	bl	8006efc <I2C_IsAcknowledgeFailed>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e02d      	b.n	8006e48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d021      	beq.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df4:	f7fe f938 	bl	8005068 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d302      	bcc.n	8006e0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d116      	bne.n	8006e38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e24:	f043 0220 	orr.w	r2, r3, #32
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e007      	b.n	8006e48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d1ca      	bne.n	8006ddc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e5c:	e042      	b.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0310 	and.w	r3, r3, #16
 8006e68:	2b10      	cmp	r3, #16
 8006e6a:	d119      	bne.n	8006ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0210 	mvn.w	r2, #16
 8006e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e029      	b.n	8006ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea0:	f7fe f8e2 	bl	8005068 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d302      	bcc.n	8006eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d116      	bne.n	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e007      	b.n	8006ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d1b5      	bne.n	8006e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f12:	d11b      	bne.n	8006f4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	f043 0204 	orr.w	r2, r3, #4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	370c      	adds	r7, #12
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e264      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d075      	beq.n	8007066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f7a:	4ba3      	ldr	r3, [pc, #652]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d00c      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f86:	4ba0      	ldr	r3, [pc, #640]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d112      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f92:	4b9d      	ldr	r3, [pc, #628]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f9e:	d10b      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa0:	4b99      	ldr	r3, [pc, #612]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d05b      	beq.n	8007064 <HAL_RCC_OscConfig+0x108>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d157      	bne.n	8007064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e23f      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d106      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x74>
 8006fc2:	4b91      	ldr	r3, [pc, #580]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a90      	ldr	r2, [pc, #576]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e01d      	b.n	800700c <HAL_RCC_OscConfig+0xb0>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd8:	d10c      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x98>
 8006fda:	4b8b      	ldr	r3, [pc, #556]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a8a      	ldr	r2, [pc, #552]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	4b88      	ldr	r3, [pc, #544]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a87      	ldr	r2, [pc, #540]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	e00b      	b.n	800700c <HAL_RCC_OscConfig+0xb0>
 8006ff4:	4b84      	ldr	r3, [pc, #528]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a83      	ldr	r2, [pc, #524]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8006ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	4b81      	ldr	r3, [pc, #516]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a80      	ldr	r2, [pc, #512]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800700a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d013      	beq.n	800703c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007014:	f7fe f828 	bl	8005068 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701a:	e008      	b.n	800702e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800701c:	f7fe f824 	bl	8005068 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	2b64      	cmp	r3, #100	; 0x64
 8007028:	d901      	bls.n	800702e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e204      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702e:	4b76      	ldr	r3, [pc, #472]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d0f0      	beq.n	800701c <HAL_RCC_OscConfig+0xc0>
 800703a:	e014      	b.n	8007066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800703c:	f7fe f814 	bl	8005068 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007044:	f7fe f810 	bl	8005068 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b64      	cmp	r3, #100	; 0x64
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e1f0      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007056:	4b6c      	ldr	r3, [pc, #432]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0xe8>
 8007062:	e000      	b.n	8007066 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d063      	beq.n	800713a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007072:	4b65      	ldr	r3, [pc, #404]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 030c 	and.w	r3, r3, #12
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800707e:	4b62      	ldr	r3, [pc, #392]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007086:	2b08      	cmp	r3, #8
 8007088:	d11c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708a:	4b5f      	ldr	r3, [pc, #380]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d116      	bne.n	80070c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007096:	4b5c      	ldr	r3, [pc, #368]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <HAL_RCC_OscConfig+0x152>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d001      	beq.n	80070ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e1c4      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ae:	4b56      	ldr	r3, [pc, #344]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4952      	ldr	r1, [pc, #328]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070c2:	e03a      	b.n	800713a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d020      	beq.n	800710e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070cc:	4b4f      	ldr	r3, [pc, #316]	; (800720c <HAL_RCC_OscConfig+0x2b0>)
 80070ce:	2201      	movs	r2, #1
 80070d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070d2:	f7fd ffc9 	bl	8005068 <HAL_GetTick>
 80070d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d8:	e008      	b.n	80070ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070da:	f7fd ffc5 	bl	8005068 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d901      	bls.n	80070ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e1a5      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ec:	4b46      	ldr	r3, [pc, #280]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0f0      	beq.n	80070da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f8:	4b43      	ldr	r3, [pc, #268]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	4940      	ldr	r1, [pc, #256]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007108:	4313      	orrs	r3, r2
 800710a:	600b      	str	r3, [r1, #0]
 800710c:	e015      	b.n	800713a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800710e:	4b3f      	ldr	r3, [pc, #252]	; (800720c <HAL_RCC_OscConfig+0x2b0>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fd ffa8 	bl	8005068 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800711c:	f7fd ffa4 	bl	8005068 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e184      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800712e:	4b36      	ldr	r3, [pc, #216]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1f0      	bne.n	800711c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d030      	beq.n	80071a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d016      	beq.n	800717c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714e:	4b30      	ldr	r3, [pc, #192]	; (8007210 <HAL_RCC_OscConfig+0x2b4>)
 8007150:	2201      	movs	r2, #1
 8007152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007154:	f7fd ff88 	bl	8005068 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800715c:	f7fd ff84 	bl	8005068 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e164      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800716e:	4b26      	ldr	r3, [pc, #152]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 8007170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x200>
 800717a:	e015      	b.n	80071a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800717c:	4b24      	ldr	r3, [pc, #144]	; (8007210 <HAL_RCC_OscConfig+0x2b4>)
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007182:	f7fd ff71 	bl	8005068 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800718a:	f7fd ff6d 	bl	8005068 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e14d      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800719c:	4b1a      	ldr	r3, [pc, #104]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 800719e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f0      	bne.n	800718a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80a0 	beq.w	80072f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071b6:	2300      	movs	r3, #0
 80071b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ba:	4b13      	ldr	r3, [pc, #76]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10f      	bne.n	80071e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	4a0e      	ldr	r2, [pc, #56]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80071d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d4:	6413      	str	r3, [r2, #64]	; 0x40
 80071d6:	4b0c      	ldr	r3, [pc, #48]	; (8007208 <HAL_RCC_OscConfig+0x2ac>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <HAL_RCC_OscConfig+0x2b8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d121      	bne.n	8007236 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071f2:	4b08      	ldr	r3, [pc, #32]	; (8007214 <HAL_RCC_OscConfig+0x2b8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a07      	ldr	r2, [pc, #28]	; (8007214 <HAL_RCC_OscConfig+0x2b8>)
 80071f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071fe:	f7fd ff33 	bl	8005068 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007204:	e011      	b.n	800722a <HAL_RCC_OscConfig+0x2ce>
 8007206:	bf00      	nop
 8007208:	40023800 	.word	0x40023800
 800720c:	42470000 	.word	0x42470000
 8007210:	42470e80 	.word	0x42470e80
 8007214:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007218:	f7fd ff26 	bl	8005068 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e106      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800722a:	4b85      	ldr	r3, [pc, #532]	; (8007440 <HAL_RCC_OscConfig+0x4e4>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007232:	2b00      	cmp	r3, #0
 8007234:	d0f0      	beq.n	8007218 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d106      	bne.n	800724c <HAL_RCC_OscConfig+0x2f0>
 800723e:	4b81      	ldr	r3, [pc, #516]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a80      	ldr	r2, [pc, #512]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
 800724a:	e01c      	b.n	8007286 <HAL_RCC_OscConfig+0x32a>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b05      	cmp	r3, #5
 8007252:	d10c      	bne.n	800726e <HAL_RCC_OscConfig+0x312>
 8007254:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	4a7a      	ldr	r2, [pc, #488]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 800725a:	f043 0304 	orr.w	r3, r3, #4
 800725e:	6713      	str	r3, [r2, #112]	; 0x70
 8007260:	4b78      	ldr	r3, [pc, #480]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	4a77      	ldr	r2, [pc, #476]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	6713      	str	r3, [r2, #112]	; 0x70
 800726c:	e00b      	b.n	8007286 <HAL_RCC_OscConfig+0x32a>
 800726e:	4b75      	ldr	r3, [pc, #468]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4a74      	ldr	r2, [pc, #464]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	6713      	str	r3, [r2, #112]	; 0x70
 800727a:	4b72      	ldr	r3, [pc, #456]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	4a71      	ldr	r2, [pc, #452]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007280:	f023 0304 	bic.w	r3, r3, #4
 8007284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d015      	beq.n	80072ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800728e:	f7fd feeb 	bl	8005068 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007294:	e00a      	b.n	80072ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007296:	f7fd fee7 	bl	8005068 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e0c5      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ac:	4b65      	ldr	r3, [pc, #404]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0ee      	beq.n	8007296 <HAL_RCC_OscConfig+0x33a>
 80072b8:	e014      	b.n	80072e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ba:	f7fd fed5 	bl	8005068 <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7fd fed1 	bl	8005068 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e0af      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072d8:	4b5a      	ldr	r3, [pc, #360]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1ee      	bne.n	80072c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d105      	bne.n	80072f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ea:	4b56      	ldr	r3, [pc, #344]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	4a55      	ldr	r2, [pc, #340]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 80072f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 809b 	beq.w	8007436 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007300:	4b50      	ldr	r3, [pc, #320]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b08      	cmp	r3, #8
 800730a:	d05c      	beq.n	80073c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d141      	bne.n	8007398 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007314:	4b4c      	ldr	r3, [pc, #304]	; (8007448 <HAL_RCC_OscConfig+0x4ec>)
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800731a:	f7fd fea5 	bl	8005068 <HAL_GetTick>
 800731e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007320:	e008      	b.n	8007334 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007322:	f7fd fea1 	bl	8005068 <HAL_GetTick>
 8007326:	4602      	mov	r2, r0
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d901      	bls.n	8007334 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e081      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007334:	4b43      	ldr	r3, [pc, #268]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1f0      	bne.n	8007322 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	019b      	lsls	r3, r3, #6
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	085b      	lsrs	r3, r3, #1
 8007358:	3b01      	subs	r3, #1
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	061b      	lsls	r3, r3, #24
 8007364:	4937      	ldr	r1, [pc, #220]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 8007366:	4313      	orrs	r3, r2
 8007368:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800736a:	4b37      	ldr	r3, [pc, #220]	; (8007448 <HAL_RCC_OscConfig+0x4ec>)
 800736c:	2201      	movs	r2, #1
 800736e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007370:	f7fd fe7a 	bl	8005068 <HAL_GetTick>
 8007374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007378:	f7fd fe76 	bl	8005068 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e056      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800738a:	4b2e      	ldr	r3, [pc, #184]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0f0      	beq.n	8007378 <HAL_RCC_OscConfig+0x41c>
 8007396:	e04e      	b.n	8007436 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007398:	4b2b      	ldr	r3, [pc, #172]	; (8007448 <HAL_RCC_OscConfig+0x4ec>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800739e:	f7fd fe63 	bl	8005068 <HAL_GetTick>
 80073a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a4:	e008      	b.n	80073b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a6:	f7fd fe5f 	bl	8005068 <HAL_GetTick>
 80073aa:	4602      	mov	r2, r0
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e03f      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b8:	4b22      	ldr	r3, [pc, #136]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1f0      	bne.n	80073a6 <HAL_RCC_OscConfig+0x44a>
 80073c4:	e037      	b.n	8007436 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d101      	bne.n	80073d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e032      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073d2:	4b1c      	ldr	r3, [pc, #112]	; (8007444 <HAL_RCC_OscConfig+0x4e8>)
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d028      	beq.n	8007432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d121      	bne.n	8007432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d11a      	bne.n	8007432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007402:	4013      	ands	r3, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007408:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800740a:	4293      	cmp	r3, r2
 800740c:	d111      	bne.n	8007432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	3b01      	subs	r3, #1
 800741c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800741e:	429a      	cmp	r2, r3
 8007420:	d107      	bne.n	8007432 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800742e:	429a      	cmp	r2, r3
 8007430:	d001      	beq.n	8007436 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40007000 	.word	0x40007000
 8007444:	40023800 	.word	0x40023800
 8007448:	42470060 	.word	0x42470060

0800744c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e0cc      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007460:	4b68      	ldr	r3, [pc, #416]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0307 	and.w	r3, r3, #7
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d90c      	bls.n	8007488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746e:	4b65      	ldr	r3, [pc, #404]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007476:	4b63      	ldr	r3, [pc, #396]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d001      	beq.n	8007488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e0b8      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d020      	beq.n	80074d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074a0:	4b59      	ldr	r3, [pc, #356]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	4a58      	ldr	r2, [pc, #352]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074b8:	4b53      	ldr	r3, [pc, #332]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4a52      	ldr	r2, [pc, #328]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074c4:	4b50      	ldr	r3, [pc, #320]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	494d      	ldr	r1, [pc, #308]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d044      	beq.n	800756c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d107      	bne.n	80074fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ea:	4b47      	ldr	r3, [pc, #284]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d119      	bne.n	800752a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e07f      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d003      	beq.n	800750a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007506:	2b03      	cmp	r3, #3
 8007508:	d107      	bne.n	800751a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800750a:	4b3f      	ldr	r3, [pc, #252]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e06f      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800751a:	4b3b      	ldr	r3, [pc, #236]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e067      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800752a:	4b37      	ldr	r3, [pc, #220]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f023 0203 	bic.w	r2, r3, #3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	4934      	ldr	r1, [pc, #208]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	4313      	orrs	r3, r2
 800753a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800753c:	f7fd fd94 	bl	8005068 <HAL_GetTick>
 8007540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007542:	e00a      	b.n	800755a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007544:	f7fd fd90 	bl	8005068 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007552:	4293      	cmp	r3, r2
 8007554:	d901      	bls.n	800755a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e04f      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800755a:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 020c 	and.w	r2, r3, #12
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	429a      	cmp	r2, r3
 800756a:	d1eb      	bne.n	8007544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800756c:	4b25      	ldr	r3, [pc, #148]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d20c      	bcs.n	8007594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800757a:	4b22      	ldr	r3, [pc, #136]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	4b20      	ldr	r3, [pc, #128]	; (8007604 <HAL_RCC_ClockConfig+0x1b8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d001      	beq.n	8007594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e032      	b.n	80075fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	4916      	ldr	r1, [pc, #88]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	490e      	ldr	r1, [pc, #56]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075d2:	f000 f821 	bl	8007618 <HAL_RCC_GetSysClockFreq>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	490a      	ldr	r1, [pc, #40]	; (800760c <HAL_RCC_ClockConfig+0x1c0>)
 80075e4:	5ccb      	ldrb	r3, [r1, r3]
 80075e6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ea:	4a09      	ldr	r2, [pc, #36]	; (8007610 <HAL_RCC_ClockConfig+0x1c4>)
 80075ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <HAL_RCC_ClockConfig+0x1c8>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fd fcf4 	bl	8004fe0 <HAL_InitTick>

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	40023c00 	.word	0x40023c00
 8007608:	40023800 	.word	0x40023800
 800760c:	08014b90 	.word	0x08014b90
 8007610:	2000004c 	.word	0x2000004c
 8007614:	20000050 	.word	0x20000050

08007618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007618:	b5b0      	push	{r4, r5, r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800761e:	2100      	movs	r1, #0
 8007620:	6079      	str	r1, [r7, #4]
 8007622:	2100      	movs	r1, #0
 8007624:	60f9      	str	r1, [r7, #12]
 8007626:	2100      	movs	r1, #0
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800762a:	2100      	movs	r1, #0
 800762c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800762e:	4952      	ldr	r1, [pc, #328]	; (8007778 <HAL_RCC_GetSysClockFreq+0x160>)
 8007630:	6889      	ldr	r1, [r1, #8]
 8007632:	f001 010c 	and.w	r1, r1, #12
 8007636:	2908      	cmp	r1, #8
 8007638:	d00d      	beq.n	8007656 <HAL_RCC_GetSysClockFreq+0x3e>
 800763a:	2908      	cmp	r1, #8
 800763c:	f200 8094 	bhi.w	8007768 <HAL_RCC_GetSysClockFreq+0x150>
 8007640:	2900      	cmp	r1, #0
 8007642:	d002      	beq.n	800764a <HAL_RCC_GetSysClockFreq+0x32>
 8007644:	2904      	cmp	r1, #4
 8007646:	d003      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0x38>
 8007648:	e08e      	b.n	8007768 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800764a:	4b4c      	ldr	r3, [pc, #304]	; (800777c <HAL_RCC_GetSysClockFreq+0x164>)
 800764c:	60bb      	str	r3, [r7, #8]
       break;
 800764e:	e08e      	b.n	800776e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007650:	4b4b      	ldr	r3, [pc, #300]	; (8007780 <HAL_RCC_GetSysClockFreq+0x168>)
 8007652:	60bb      	str	r3, [r7, #8]
      break;
 8007654:	e08b      	b.n	800776e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007656:	4948      	ldr	r1, [pc, #288]	; (8007778 <HAL_RCC_GetSysClockFreq+0x160>)
 8007658:	6849      	ldr	r1, [r1, #4]
 800765a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800765e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007660:	4945      	ldr	r1, [pc, #276]	; (8007778 <HAL_RCC_GetSysClockFreq+0x160>)
 8007662:	6849      	ldr	r1, [r1, #4]
 8007664:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007668:	2900      	cmp	r1, #0
 800766a:	d024      	beq.n	80076b6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800766c:	4942      	ldr	r1, [pc, #264]	; (8007778 <HAL_RCC_GetSysClockFreq+0x160>)
 800766e:	6849      	ldr	r1, [r1, #4]
 8007670:	0989      	lsrs	r1, r1, #6
 8007672:	4608      	mov	r0, r1
 8007674:	f04f 0100 	mov.w	r1, #0
 8007678:	f240 14ff 	movw	r4, #511	; 0x1ff
 800767c:	f04f 0500 	mov.w	r5, #0
 8007680:	ea00 0204 	and.w	r2, r0, r4
 8007684:	ea01 0305 	and.w	r3, r1, r5
 8007688:	493d      	ldr	r1, [pc, #244]	; (8007780 <HAL_RCC_GetSysClockFreq+0x168>)
 800768a:	fb01 f003 	mul.w	r0, r1, r3
 800768e:	2100      	movs	r1, #0
 8007690:	fb01 f102 	mul.w	r1, r1, r2
 8007694:	1844      	adds	r4, r0, r1
 8007696:	493a      	ldr	r1, [pc, #232]	; (8007780 <HAL_RCC_GetSysClockFreq+0x168>)
 8007698:	fba2 0101 	umull	r0, r1, r2, r1
 800769c:	1863      	adds	r3, r4, r1
 800769e:	4619      	mov	r1, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	461a      	mov	r2, r3
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	f7f9 fb3e 	bl	8000d28 <__aeabi_uldivmod>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4613      	mov	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e04a      	b.n	800774c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076b6:	4b30      	ldr	r3, [pc, #192]	; (8007778 <HAL_RCC_GetSysClockFreq+0x160>)
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	099b      	lsrs	r3, r3, #6
 80076bc:	461a      	mov	r2, r3
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80076c6:	f04f 0100 	mov.w	r1, #0
 80076ca:	ea02 0400 	and.w	r4, r2, r0
 80076ce:	ea03 0501 	and.w	r5, r3, r1
 80076d2:	4620      	mov	r0, r4
 80076d4:	4629      	mov	r1, r5
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	f04f 0300 	mov.w	r3, #0
 80076de:	014b      	lsls	r3, r1, #5
 80076e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80076e4:	0142      	lsls	r2, r0, #5
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	1b00      	subs	r0, r0, r4
 80076ec:	eb61 0105 	sbc.w	r1, r1, r5
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	018b      	lsls	r3, r1, #6
 80076fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80076fe:	0182      	lsls	r2, r0, #6
 8007700:	1a12      	subs	r2, r2, r0
 8007702:	eb63 0301 	sbc.w	r3, r3, r1
 8007706:	f04f 0000 	mov.w	r0, #0
 800770a:	f04f 0100 	mov.w	r1, #0
 800770e:	00d9      	lsls	r1, r3, #3
 8007710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007714:	00d0      	lsls	r0, r2, #3
 8007716:	4602      	mov	r2, r0
 8007718:	460b      	mov	r3, r1
 800771a:	1912      	adds	r2, r2, r4
 800771c:	eb45 0303 	adc.w	r3, r5, r3
 8007720:	f04f 0000 	mov.w	r0, #0
 8007724:	f04f 0100 	mov.w	r1, #0
 8007728:	0299      	lsls	r1, r3, #10
 800772a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800772e:	0290      	lsls	r0, r2, #10
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4610      	mov	r0, r2
 8007736:	4619      	mov	r1, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	461a      	mov	r2, r3
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	f7f9 faf2 	bl	8000d28 <__aeabi_uldivmod>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4613      	mov	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <HAL_RCC_GetSysClockFreq+0x160>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	0c1b      	lsrs	r3, r3, #16
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	3301      	adds	r3, #1
 8007758:	005b      	lsls	r3, r3, #1
 800775a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	60bb      	str	r3, [r7, #8]
      break;
 8007766:	e002      	b.n	800776e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007768:	4b04      	ldr	r3, [pc, #16]	; (800777c <HAL_RCC_GetSysClockFreq+0x164>)
 800776a:	60bb      	str	r3, [r7, #8]
      break;
 800776c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800776e:	68bb      	ldr	r3, [r7, #8]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bdb0      	pop	{r4, r5, r7, pc}
 8007778:	40023800 	.word	0x40023800
 800777c:	00f42400 	.word	0x00f42400
 8007780:	017d7840 	.word	0x017d7840

08007784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007788:	4b03      	ldr	r3, [pc, #12]	; (8007798 <HAL_RCC_GetHCLKFreq+0x14>)
 800778a:	681b      	ldr	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	2000004c 	.word	0x2000004c

0800779c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077a0:	f7ff fff0 	bl	8007784 <HAL_RCC_GetHCLKFreq>
 80077a4:	4602      	mov	r2, r0
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	0a9b      	lsrs	r3, r3, #10
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	4903      	ldr	r1, [pc, #12]	; (80077c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b2:	5ccb      	ldrb	r3, [r1, r3]
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40023800 	.word	0x40023800
 80077c0:	08014ba0 	.word	0x08014ba0

080077c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077c8:	f7ff ffdc 	bl	8007784 <HAL_RCC_GetHCLKFreq>
 80077cc:	4602      	mov	r2, r0
 80077ce:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	0b5b      	lsrs	r3, r3, #13
 80077d4:	f003 0307 	and.w	r3, r3, #7
 80077d8:	4903      	ldr	r1, [pc, #12]	; (80077e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077da:	5ccb      	ldrb	r3, [r1, r3]
 80077dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40023800 	.word	0x40023800
 80077e8:	08014ba0 	.word	0x08014ba0

080077ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d105      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007810:	2b00      	cmp	r3, #0
 8007812:	d035      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007814:	4b62      	ldr	r3, [pc, #392]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800781a:	f7fd fc25 	bl	8005068 <HAL_GetTick>
 800781e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007820:	e008      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007822:	f7fd fc21 	bl	8005068 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e0b0      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007834:	4b5b      	ldr	r3, [pc, #364]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f0      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	019a      	lsls	r2, r3, #6
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	071b      	lsls	r3, r3, #28
 800784c:	4955      	ldr	r1, [pc, #340]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007854:	4b52      	ldr	r3, [pc, #328]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007856:	2201      	movs	r2, #1
 8007858:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800785a:	f7fd fc05 	bl	8005068 <HAL_GetTick>
 800785e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007860:	e008      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007862:	f7fd fc01 	bl	8005068 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e090      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007874:	4b4b      	ldr	r3, [pc, #300]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8083 	beq.w	8007994 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	4b44      	ldr	r3, [pc, #272]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	4a43      	ldr	r2, [pc, #268]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789c:	6413      	str	r3, [r2, #64]	; 0x40
 800789e:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80078aa:	4b3f      	ldr	r3, [pc, #252]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a3e      	ldr	r2, [pc, #248]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078b6:	f7fd fbd7 	bl	8005068 <HAL_GetTick>
 80078ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078bc:	e008      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80078be:	f7fd fbd3 	bl	8005068 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e062      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078d0:	4b35      	ldr	r3, [pc, #212]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0f0      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078dc:	4b31      	ldr	r3, [pc, #196]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d02f      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d028      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078fa:	4b2a      	ldr	r3, [pc, #168]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007902:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007904:	4b29      	ldr	r3, [pc, #164]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007906:	2201      	movs	r2, #1
 8007908:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800790a:	4b28      	ldr	r3, [pc, #160]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007910:	4a24      	ldr	r2, [pc, #144]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007916:	4b23      	ldr	r3, [pc, #140]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b01      	cmp	r3, #1
 8007920:	d114      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007922:	f7fd fba1 	bl	8005068 <HAL_GetTick>
 8007926:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007928:	e00a      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800792a:	f7fd fb9d 	bl	8005068 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e02a      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007940:	4b18      	ldr	r3, [pc, #96]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0ee      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007958:	d10d      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800796a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796e:	490d      	ldr	r1, [pc, #52]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007970:	4313      	orrs	r3, r2
 8007972:	608b      	str	r3, [r1, #8]
 8007974:	e005      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800797c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007980:	6093      	str	r3, [r2, #8]
 8007982:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800798e:	4905      	ldr	r1, [pc, #20]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007990:	4313      	orrs	r3, r2
 8007992:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3718      	adds	r7, #24
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	42470068 	.word	0x42470068
 80079a4:	40023800 	.word	0x40023800
 80079a8:	40007000 	.word	0x40007000
 80079ac:	42470e40 	.word	0x42470e40

080079b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e083      	b.n	8007aca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	7f5b      	ldrb	r3, [r3, #29]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d105      	bne.n	80079d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fc fcde 	bl	8004394 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	22ca      	movs	r2, #202	; 0xca
 80079e4:	625a      	str	r2, [r3, #36]	; 0x24
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2253      	movs	r2, #83	; 0x53
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f9fb 	bl	8007dea <RTC_EnterInitMode>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d008      	beq.n	8007a0c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	22ff      	movs	r2, #255	; 0xff
 8007a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2204      	movs	r2, #4
 8007a06:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e05e      	b.n	8007aca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6899      	ldr	r1, [r3, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685a      	ldr	r2, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	68d2      	ldr	r2, [r2, #12]
 8007a46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6919      	ldr	r1, [r3, #16]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	041a      	lsls	r2, r3, #16
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10e      	bne.n	8007a98 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f98d 	bl	8007d9a <HAL_RTC_WaitForSynchro>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	22ff      	movs	r2, #255	; 0xff
 8007a8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2204      	movs	r2, #4
 8007a92:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e018      	b.n	8007aca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007aa6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699a      	ldr	r2, [r3, #24]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	22ff      	movs	r2, #255	; 0xff
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
  }
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ad2:	b590      	push	{r4, r7, lr}
 8007ad4:	b087      	sub	sp, #28
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	7f1b      	ldrb	r3, [r3, #28]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <HAL_RTC_SetTime+0x1c>
 8007aea:	2302      	movs	r3, #2
 8007aec:	e0aa      	b.n	8007c44 <HAL_RTC_SetTime+0x172>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2202      	movs	r2, #2
 8007af8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d126      	bne.n	8007b4e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f992 	bl	8007e42 <RTC_ByteToBcd2>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	785b      	ldrb	r3, [r3, #1]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f98b 	bl	8007e42 <RTC_ByteToBcd2>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b30:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	789b      	ldrb	r3, [r3, #2]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f983 	bl	8007e42 <RTC_ByteToBcd2>
 8007b3c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007b3e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	78db      	ldrb	r3, [r3, #3]
 8007b46:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	e018      	b.n	8007b80 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d102      	bne.n	8007b62 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007b6e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007b74:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	78db      	ldrb	r3, [r3, #3]
 8007b7a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	22ca      	movs	r2, #202	; 0xca
 8007b86:	625a      	str	r2, [r3, #36]	; 0x24
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2253      	movs	r2, #83	; 0x53
 8007b8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f92a 	bl	8007dea <RTC_EnterInitMode>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	22ff      	movs	r2, #255	; 0xff
 8007ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2204      	movs	r2, #4
 8007ba8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e047      	b.n	8007c44 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007bbe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007bc2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bd2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6899      	ldr	r1, [r3, #8]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68da      	ldr	r2, [r3, #12]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bfa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d111      	bne.n	8007c2e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f000 f8c5 	bl	8007d9a <HAL_RTC_WaitForSynchro>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00b      	beq.n	8007c2e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	22ff      	movs	r2, #255	; 0xff
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2204      	movs	r2, #4
 8007c22:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e00a      	b.n	8007c44 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	22ff      	movs	r2, #255	; 0xff
 8007c34:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007c42:	2300      	movs	r3, #0
  }
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd90      	pop	{r4, r7, pc}

08007c4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c4c:	b590      	push	{r4, r7, lr}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	7f1b      	ldrb	r3, [r3, #28]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d101      	bne.n	8007c68 <HAL_RTC_SetDate+0x1c>
 8007c64:	2302      	movs	r3, #2
 8007c66:	e094      	b.n	8007d92 <HAL_RTC_SetDate+0x146>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2202      	movs	r2, #2
 8007c72:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10e      	bne.n	8007c98 <HAL_RTC_SetDate+0x4c>
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	785b      	ldrb	r3, [r3, #1]
 8007c7e:	f003 0310 	and.w	r3, r3, #16
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d008      	beq.n	8007c98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	785b      	ldrb	r3, [r3, #1]
 8007c8a:	f023 0310 	bic.w	r3, r3, #16
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	330a      	adds	r3, #10
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d11c      	bne.n	8007cd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	78db      	ldrb	r3, [r3, #3]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f8cd 	bl	8007e42 <RTC_ByteToBcd2>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 f8c6 	bl	8007e42 <RTC_ByteToBcd2>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007cba:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	789b      	ldrb	r3, [r3, #2]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f8be 	bl	8007e42 <RTC_ByteToBcd2>
 8007cc6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007cc8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	e00e      	b.n	8007cf6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	78db      	ldrb	r3, [r3, #3]
 8007cdc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	785b      	ldrb	r3, [r3, #1]
 8007ce2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007ce4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007cea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	22ca      	movs	r2, #202	; 0xca
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2253      	movs	r2, #83	; 0x53
 8007d04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 f86f 	bl	8007dea <RTC_EnterInitMode>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	22ff      	movs	r2, #255	; 0xff
 8007d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2204      	movs	r2, #4
 8007d1e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e033      	b.n	8007d92 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d38:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d48:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f003 0320 	and.w	r3, r3, #32
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d111      	bne.n	8007d7c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 f81e 	bl	8007d9a <HAL_RTC_WaitForSynchro>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	22ff      	movs	r2, #255	; 0xff
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2204      	movs	r2, #4
 8007d70:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e00a      	b.n	8007d92 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2201      	movs	r2, #1
 8007d88:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007d90:	2300      	movs	r3, #0
  }
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	371c      	adds	r7, #28
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd90      	pop	{r4, r7, pc}

08007d9a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007db4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007db6:	f7fd f957 	bl	8005068 <HAL_GetTick>
 8007dba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007dbc:	e009      	b.n	8007dd2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007dbe:	f7fd f953 	bl	8005068 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e007      	b.n	8007de2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0ee      	beq.n	8007dbe <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d119      	bne.n	8007e38 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e0e:	f7fd f92b 	bl	8005068 <HAL_GetTick>
 8007e12:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e14:	e009      	b.n	8007e2a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e16:	f7fd f927 	bl	8005068 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e24:	d901      	bls.n	8007e2a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e007      	b.n	8007e3a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0ee      	beq.n	8007e16 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007e50:	e005      	b.n	8007e5e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3301      	adds	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007e58:	79fb      	ldrb	r3, [r7, #7]
 8007e5a:	3b0a      	subs	r3, #10
 8007e5c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	2b09      	cmp	r3, #9
 8007e62:	d8f6      	bhi.n	8007e52 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	b2db      	uxtb	r3, r3
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e022      	b.n	8007ed6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fc faac 	bl	8004400 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f815 	bl	8007ee0 <HAL_SD_InitCard>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e00a      	b.n	8007ed6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ee0:	b5b0      	push	{r4, r5, r7, lr}
 8007ee2:	b08e      	sub	sp, #56	; 0x38
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007efc:	2376      	movs	r3, #118	; 0x76
 8007efe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681d      	ldr	r5, [r3, #0]
 8007f04:	466c      	mov	r4, sp
 8007f06:	f107 0314 	add.w	r3, r7, #20
 8007f0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f12:	f107 0308 	add.w	r3, r7, #8
 8007f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f003 f8eb 	bl	800b0f4 <SDIO_Init>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e04c      	b.n	8007fca <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007f30:	4b28      	ldr	r3, [pc, #160]	; (8007fd4 <HAL_SD_InitCard+0xf4>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f003 f923 	bl	800b186 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007f40:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <HAL_SD_InitCard+0xf4>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 ff02 	bl	8008d50 <SD_PowerON>
 8007f4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00b      	beq.n	8007f6c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f60:	6a3b      	ldr	r3, [r7, #32]
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e02e      	b.n	8007fca <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fe23 	bl	8008bb8 <SD_InitCard>
 8007f72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00b      	beq.n	8007f92 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e01b      	b.n	8007fca <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f003 f986 	bl	800b2ac <SDMMC_CmdBlockLength>
 8007fa0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00f      	beq.n	8007fc8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <HAL_SD_InitCard+0xf8>)
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3728      	adds	r7, #40	; 0x28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	422580a0 	.word	0x422580a0
 8007fd8:	004005ff 	.word	0x004005ff

08007fdc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b092      	sub	sp, #72	; 0x48
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fea:	f7fd f83d 	bl	8005068 <HAL_GetTick>
 8007fee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d107      	bne.n	800800e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	e1bd      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b01      	cmp	r3, #1
 8008018:	f040 81b0 	bne.w	800837c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	441a      	add	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	429a      	cmp	r2, r3
 800802e:	d907      	bls.n	8008040 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008034:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e1a4      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2203      	movs	r2, #3
 8008044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2200      	movs	r2, #0
 800804e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008054:	2b01      	cmp	r3, #1
 8008056:	d002      	beq.n	800805e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	025b      	lsls	r3, r3, #9
 800805c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800805e:	f04f 33ff 	mov.w	r3, #4294967295
 8008062:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	025b      	lsls	r3, r3, #9
 8008068:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800806a:	2390      	movs	r3, #144	; 0x90
 800806c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800806e:	2302      	movs	r3, #2
 8008070:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008072:	2300      	movs	r3, #0
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008076:	2301      	movs	r3, #1
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f107 0214 	add.w	r2, r7, #20
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f003 f8e5 	bl	800b254 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d90a      	bls.n	80080a6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2202      	movs	r2, #2
 8008094:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800809c:	4618      	mov	r0, r3
 800809e:	f003 f949 	bl	800b334 <SDMMC_CmdReadMultiBlock>
 80080a2:	6478      	str	r0, [r7, #68]	; 0x44
 80080a4:	e009      	b.n	80080ba <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080b2:	4618      	mov	r0, r3
 80080b4:	f003 f91c 	bl	800b2f0 <SDMMC_CmdReadSingleBlock>
 80080b8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d012      	beq.n	80080e6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a7a      	ldr	r2, [pc, #488]	; (80082b0 <HAL_SD_ReadBlocks+0x2d4>)
 80080c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ce:	431a      	orrs	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e151      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80080ea:	e061      	b.n	80081b0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d03c      	beq.n	8008174 <HAL_SD_ReadBlocks+0x198>
 80080fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d039      	beq.n	8008174 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008100:	2300      	movs	r3, #0
 8008102:	643b      	str	r3, [r7, #64]	; 0x40
 8008104:	e033      	b.n	800816e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4618      	mov	r0, r3
 800810c:	f003 f81d 	bl	800b14a <SDIO_ReadFIFO>
 8008110:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008114:	b2da      	uxtb	r2, r3
 8008116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008118:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800811a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800811c:	3301      	adds	r3, #1
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008122:	3b01      	subs	r3, #1
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	0a1b      	lsrs	r3, r3, #8
 800812a:	b2da      	uxtb	r2, r3
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008132:	3301      	adds	r3, #1
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008138:	3b01      	subs	r3, #1
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813e:	0c1b      	lsrs	r3, r3, #16
 8008140:	b2da      	uxtb	r2, r3
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008148:	3301      	adds	r3, #1
 800814a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800814c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814e:	3b01      	subs	r3, #1
 8008150:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	0e1b      	lsrs	r3, r3, #24
 8008156:	b2da      	uxtb	r2, r3
 8008158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815e:	3301      	adds	r3, #1
 8008160:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008164:	3b01      	subs	r3, #1
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800816a:	3301      	adds	r3, #1
 800816c:	643b      	str	r3, [r7, #64]	; 0x40
 800816e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008170:	2b07      	cmp	r3, #7
 8008172:	d9c8      	bls.n	8008106 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008174:	f7fc ff78 	bl	8005068 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008180:	429a      	cmp	r2, r3
 8008182:	d902      	bls.n	800818a <HAL_SD_ReadBlocks+0x1ae>
 8008184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008186:	2b00      	cmp	r3, #0
 8008188:	d112      	bne.n	80081b0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a48      	ldr	r2, [pc, #288]	; (80082b0 <HAL_SD_ReadBlocks+0x2d4>)
 8008190:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008196:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e0ec      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081b6:	f240 332a 	movw	r3, #810	; 0x32a
 80081ba:	4013      	ands	r3, r2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d095      	beq.n	80080ec <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d022      	beq.n	8008214 <HAL_SD_ReadBlocks+0x238>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d91f      	bls.n	8008214 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d8:	2b03      	cmp	r3, #3
 80081da:	d01b      	beq.n	8008214 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f003 f90d 	bl	800b400 <SDMMC_CmdStopTransfer>
 80081e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80081e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d012      	beq.n	8008214 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a2f      	ldr	r2, [pc, #188]	; (80082b0 <HAL_SD_ReadBlocks+0x2d4>)
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081fc:	431a      	orrs	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e0ba      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821a:	f003 0308 	and.w	r3, r3, #8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d012      	beq.n	8008248 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a22      	ldr	r2, [pc, #136]	; (80082b0 <HAL_SD_ReadBlocks+0x2d4>)
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	f043 0208 	orr.w	r2, r3, #8
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	e0a0      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b00      	cmp	r3, #0
 8008254:	d012      	beq.n	800827c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a15      	ldr	r2, [pc, #84]	; (80082b0 <HAL_SD_ReadBlocks+0x2d4>)
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	f043 0202 	orr.w	r2, r3, #2
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e086      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d063      	beq.n	8008352 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a08      	ldr	r2, [pc, #32]	; (80082b0 <HAL_SD_ReadBlocks+0x2d4>)
 8008290:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008296:	f043 0220 	orr.w	r2, r3, #32
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e06c      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
 80082b0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f002 ff46 	bl	800b14a <SDIO_ReadFIFO>
 80082be:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082c6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80082c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ca:	3301      	adds	r3, #1
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	3b01      	subs	r3, #1
 80082d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80082d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d6:	0a1b      	lsrs	r3, r3, #8
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082dc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80082de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e0:	3301      	adds	r3, #1
 80082e2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80082e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e6:	3b01      	subs	r3, #1
 80082e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	0c1b      	lsrs	r3, r3, #16
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80082f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f6:	3301      	adds	r3, #1
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80082fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fc:	3b01      	subs	r3, #1
 80082fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	0e1b      	lsrs	r3, r3, #24
 8008304:	b2da      	uxtb	r2, r3
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800830a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800830c:	3301      	adds	r3, #1
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008312:	3b01      	subs	r3, #1
 8008314:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008316:	f7fc fea7 	bl	8005068 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008322:	429a      	cmp	r2, r3
 8008324:	d902      	bls.n	800832c <HAL_SD_ReadBlocks+0x350>
 8008326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008328:	2b00      	cmp	r3, #0
 800832a:	d112      	bne.n	8008352 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a18      	ldr	r2, [pc, #96]	; (8008394 <HAL_SD_ReadBlocks+0x3b8>)
 8008332:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e01b      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_SD_ReadBlocks+0x38a>
 8008360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1a6      	bne.n	80082b4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f240 523a 	movw	r2, #1338	; 0x53a
 800836e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	e006      	b.n	800838a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008380:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
  }
}
 800838a:	4618      	mov	r0, r3
 800838c:	3748      	adds	r7, #72	; 0x48
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	004005ff 	.word	0x004005ff

08008398 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b092      	sub	sp, #72	; 0x48
 800839c:	af00      	add	r7, sp, #0
 800839e:	60f8      	str	r0, [r7, #12]
 80083a0:	60b9      	str	r1, [r7, #8]
 80083a2:	607a      	str	r2, [r7, #4]
 80083a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083a6:	f7fc fe5f 	bl	8005068 <HAL_GetTick>
 80083aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d107      	bne.n	80083ca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e166      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	f040 8159 	bne.w	800868a <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	441a      	add	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d907      	bls.n	80083fc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e14d      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2203      	movs	r2, #3
 8008400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008410:	2b01      	cmp	r3, #1
 8008412:	d002      	beq.n	800841a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008416:	025b      	lsls	r3, r3, #9
 8008418:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800841a:	f04f 33ff 	mov.w	r3, #4294967295
 800841e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	025b      	lsls	r3, r3, #9
 8008424:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008426:	2390      	movs	r3, #144	; 0x90
 8008428:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800842e:	2300      	movs	r3, #0
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008432:	2301      	movs	r3, #1
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f107 0218 	add.w	r2, r7, #24
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f002 ff07 	bl	800b254 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d90a      	bls.n	8008462 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008458:	4618      	mov	r0, r3
 800845a:	f002 ffaf 	bl	800b3bc <SDMMC_CmdWriteMultiBlock>
 800845e:	6478      	str	r0, [r7, #68]	; 0x44
 8008460:	e009      	b.n	8008476 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2210      	movs	r2, #16
 8008466:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800846e:	4618      	mov	r0, r3
 8008470:	f002 ff82 	bl	800b378 <SDMMC_CmdWriteSingleBlock>
 8008474:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008478:	2b00      	cmp	r3, #0
 800847a:	d012      	beq.n	80084a2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a87      	ldr	r2, [pc, #540]	; (80086a0 <HAL_SD_WriteBlocks+0x308>)
 8008482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800848a:	431a      	orrs	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e0fa      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80084a6:	e065      	b.n	8008574 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d040      	beq.n	8008538 <HAL_SD_WriteBlocks+0x1a0>
 80084b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d03d      	beq.n	8008538 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80084bc:	2300      	movs	r3, #0
 80084be:	643b      	str	r3, [r7, #64]	; 0x40
 80084c0:	e037      	b.n	8008532 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80084c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80084c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ca:	3301      	adds	r3, #1
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80084ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d0:	3b01      	subs	r3, #1
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	021a      	lsls	r2, r3, #8
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	3301      	adds	r3, #1
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e8:	3b01      	subs	r3, #1
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	041a      	lsls	r2, r3, #16
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80084f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fa:	3301      	adds	r3, #1
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	3b01      	subs	r3, #1
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	061a      	lsls	r2, r3, #24
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	3301      	adds	r3, #1
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008518:	3b01      	subs	r3, #1
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f107 0214 	add.w	r2, r7, #20
 8008524:	4611      	mov	r1, r2
 8008526:	4618      	mov	r0, r3
 8008528:	f002 fe1c 	bl	800b164 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800852c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800852e:	3301      	adds	r3, #1
 8008530:	643b      	str	r3, [r7, #64]	; 0x40
 8008532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008534:	2b07      	cmp	r3, #7
 8008536:	d9c4      	bls.n	80084c2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008538:	f7fc fd96 	bl	8005068 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008544:	429a      	cmp	r2, r3
 8008546:	d902      	bls.n	800854e <HAL_SD_WriteBlocks+0x1b6>
 8008548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800854a:	2b00      	cmp	r3, #0
 800854c:	d112      	bne.n	8008574 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a53      	ldr	r2, [pc, #332]	; (80086a0 <HAL_SD_WriteBlocks+0x308>)
 8008554:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800855a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800855c:	431a      	orrs	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e091      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800857a:	f240 331a 	movw	r3, #794	; 0x31a
 800857e:	4013      	ands	r3, r2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d091      	beq.n	80084a8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800858e:	2b00      	cmp	r3, #0
 8008590:	d022      	beq.n	80085d8 <HAL_SD_WriteBlocks+0x240>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d91f      	bls.n	80085d8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859c:	2b03      	cmp	r3, #3
 800859e:	d01b      	beq.n	80085d8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f002 ff2b 	bl	800b400 <SDMMC_CmdStopTransfer>
 80085aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80085ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d012      	beq.n	80085d8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a3a      	ldr	r2, [pc, #232]	; (80086a0 <HAL_SD_WriteBlocks+0x308>)
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c0:	431a      	orrs	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e05f      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	f003 0308 	and.w	r3, r3, #8
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d012      	beq.n	800860c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a2d      	ldr	r2, [pc, #180]	; (80086a0 <HAL_SD_WriteBlocks+0x308>)
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	f043 0208 	orr.w	r2, r3, #8
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e045      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d012      	beq.n	8008640 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a20      	ldr	r2, [pc, #128]	; (80086a0 <HAL_SD_WriteBlocks+0x308>)
 8008620:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	f043 0202 	orr.w	r2, r3, #2
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e02b      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	2b00      	cmp	r3, #0
 800864c:	d012      	beq.n	8008674 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <HAL_SD_WriteBlocks+0x308>)
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	f043 0210 	orr.w	r2, r3, #16
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e011      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f240 523a 	movw	r2, #1338	; 0x53a
 800867c:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	e006      	b.n	8008698 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
  }
}
 8008698:	4618      	mov	r0, r3
 800869a:	3748      	adds	r7, #72	; 0x48
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	004005ff 	.word	0x004005ff

080086a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b2:	0f9b      	lsrs	r3, r3, #30
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086be:	0e9b      	lsrs	r3, r3, #26
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d0:	0e1b      	lsrs	r3, r3, #24
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e2:	0c1b      	lsrs	r3, r3, #16
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ee:	0a1b      	lsrs	r3, r3, #8
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008704:	0d1b      	lsrs	r3, r3, #20
 8008706:	b29a      	uxth	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008710:	0c1b      	lsrs	r3, r3, #16
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 030f 	and.w	r3, r3, #15
 8008718:	b2da      	uxtb	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008722:	0bdb      	lsrs	r3, r3, #15
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	b2da      	uxtb	r2, r3
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008734:	0b9b      	lsrs	r3, r3, #14
 8008736:	b2db      	uxtb	r3, r3
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	b2da      	uxtb	r2, r3
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008746:	0b5b      	lsrs	r3, r3, #13
 8008748:	b2db      	uxtb	r3, r3
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	b2da      	uxtb	r2, r3
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008758:	0b1b      	lsrs	r3, r3, #12
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	b2da      	uxtb	r2, r3
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2200      	movs	r2, #0
 800876a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008770:	2b00      	cmp	r3, #0
 8008772:	d163      	bne.n	800883c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008778:	009a      	lsls	r2, r3, #2
 800877a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800877e:	4013      	ands	r3, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008784:	0f92      	lsrs	r2, r2, #30
 8008786:	431a      	orrs	r2, r3
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008790:	0edb      	lsrs	r3, r3, #27
 8008792:	b2db      	uxtb	r3, r3
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	b2da      	uxtb	r2, r3
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a2:	0e1b      	lsrs	r3, r3, #24
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b4:	0d5b      	lsrs	r3, r3, #21
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 0307 	and.w	r3, r3, #7
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c6:	0c9b      	lsrs	r3, r3, #18
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d8:	0bdb      	lsrs	r3, r3, #15
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	f003 0307 	and.w	r3, r3, #7
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	7e1b      	ldrb	r3, [r3, #24]
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	3302      	adds	r3, #2
 80087fc:	2201      	movs	r2, #1
 80087fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008806:	fb02 f203 	mul.w	r2, r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	7a1b      	ldrb	r3, [r3, #8]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	2201      	movs	r2, #1
 800881a:	409a      	lsls	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008824:	687a      	ldr	r2, [r7, #4]
 8008826:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008828:	0a52      	lsrs	r2, r2, #9
 800882a:	fb02 f203 	mul.w	r2, r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008838:	661a      	str	r2, [r3, #96]	; 0x60
 800883a:	e031      	b.n	80088a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008840:	2b01      	cmp	r3, #1
 8008842:	d11d      	bne.n	8008880 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008848:	041b      	lsls	r3, r3, #16
 800884a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008852:	0c1b      	lsrs	r3, r3, #16
 8008854:	431a      	orrs	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	3301      	adds	r3, #1
 8008860:	029a      	lsls	r2, r3, #10
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008874:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	661a      	str	r2, [r3, #96]	; 0x60
 800887e:	e00f      	b.n	80088a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a58      	ldr	r2, [pc, #352]	; (80089e8 <HAL_SD_GetCardCSD+0x344>)
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e09d      	b.n	80089dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a4:	0b9b      	lsrs	r3, r3, #14
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b6:	09db      	lsrs	r3, r3, #7
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d8:	0fdb      	lsrs	r3, r3, #31
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e4:	0f5b      	lsrs	r3, r3, #29
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 0303 	and.w	r3, r3, #3
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f6:	0e9b      	lsrs	r3, r3, #26
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008908:	0d9b      	lsrs	r3, r3, #22
 800890a:	b2db      	uxtb	r3, r3
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	b2da      	uxtb	r2, r3
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891a:	0d5b      	lsrs	r3, r3, #21
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008936:	0c1b      	lsrs	r3, r3, #16
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	0bdb      	lsrs	r3, r3, #15
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	b2da      	uxtb	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895e:	0b9b      	lsrs	r3, r3, #14
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008972:	0b5b      	lsrs	r3, r3, #13
 8008974:	b2db      	uxtb	r3, r3
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	b2da      	uxtb	r2, r3
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	0b1b      	lsrs	r3, r3, #12
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	0a9b      	lsrs	r3, r3, #10
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	085b      	lsrs	r3, r3, #1
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	004005ff 	.word	0x004005ff

080089ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008a44:	b5b0      	push	{r4, r5, r7, lr}
 8008a46:	b08e      	sub	sp, #56	; 0x38
 8008a48:	af04      	add	r7, sp, #16
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2203      	movs	r2, #3
 8008a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a60:	2b03      	cmp	r3, #3
 8008a62:	d02e      	beq.n	8008ac2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a6a:	d106      	bne.n	8008a7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38
 8008a78:	e029      	b.n	8008ace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a80:	d10a      	bne.n	8008a98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fa1a 	bl	8008ebc <SD_WideBus_Enable>
 8008a88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	431a      	orrs	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	639a      	str	r2, [r3, #56]	; 0x38
 8008a96:	e01a      	b.n	8008ace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fa57 	bl	8008f52 <SD_WideBus_Disable>
 8008aa4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	431a      	orrs	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8008ab2:	e00c      	b.n	8008ace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	639a      	str	r2, [r3, #56]	; 0x38
 8008ac0:	e005      	b.n	8008ace <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00b      	beq.n	8008aee <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a26      	ldr	r2, [pc, #152]	; (8008b74 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008adc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008aec:	e01f      	b.n	8008b2e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681d      	ldr	r5, [r3, #0]
 8008b14:	466c      	mov	r4, sp
 8008b16:	f107 0314 	add.w	r3, r7, #20
 8008b1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b22:	f107 0308 	add.w	r3, r7, #8
 8008b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f002 fae3 	bl	800b0f4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b36:	4618      	mov	r0, r3
 8008b38:	f002 fbb8 	bl	800b2ac <SDMMC_CmdBlockLength>
 8008b3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a0a      	ldr	r2, [pc, #40]	; (8008b74 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3728      	adds	r7, #40	; 0x28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bdb0      	pop	{r4, r5, r7, pc}
 8008b72:	bf00      	nop
 8008b74:	004005ff 	.word	0x004005ff

08008b78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008b84:	f107 030c 	add.w	r3, r7, #12
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f96e 	bl	8008e6c <SD_SendStatus>
 8008b90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	431a      	orrs	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	0a5b      	lsrs	r3, r3, #9
 8008ba8:	f003 030f 	and.w	r3, r3, #15
 8008bac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008bae:	693b      	ldr	r3, [r7, #16]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bb8:	b5b0      	push	{r4, r5, r7, lr}
 8008bba:	b094      	sub	sp, #80	; 0x50
 8008bbc:	af04      	add	r7, sp, #16
 8008bbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f002 faeb 	bl	800b1a4 <SDIO_GetPowerState>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008bd8:	e0b6      	b.n	8008d48 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bde:	2b03      	cmp	r3, #3
 8008be0:	d02f      	beq.n	8008c42 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f002 fd14 	bl	800b614 <SDMMC_CmdSendCID>
 8008bec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d001      	beq.n	8008bf8 <SD_InitCard+0x40>
    {
      return errorstate;
 8008bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf6:	e0a7      	b.n	8008d48 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f002 fb15 	bl	800b22e <SDIO_GetResponse>
 8008c04:	4602      	mov	r2, r0
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2104      	movs	r1, #4
 8008c10:	4618      	mov	r0, r3
 8008c12:	f002 fb0c 	bl	800b22e <SDIO_GetResponse>
 8008c16:	4602      	mov	r2, r0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2108      	movs	r1, #8
 8008c22:	4618      	mov	r0, r3
 8008c24:	f002 fb03 	bl	800b22e <SDIO_GetResponse>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	210c      	movs	r1, #12
 8008c34:	4618      	mov	r0, r3
 8008c36:	f002 fafa 	bl	800b22e <SDIO_GetResponse>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c46:	2b03      	cmp	r3, #3
 8008c48:	d00d      	beq.n	8008c66 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f107 020e 	add.w	r2, r7, #14
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f002 fd1a 	bl	800b68e <SDMMC_CmdSetRelAdd>
 8008c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <SD_InitCard+0xae>
    {
      return errorstate;
 8008c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c64:	e070      	b.n	8008d48 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d036      	beq.n	8008cdc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008c6e:	89fb      	ldrh	r3, [r7, #14]
 8008c70:	461a      	mov	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	4619      	mov	r1, r3
 8008c82:	4610      	mov	r0, r2
 8008c84:	f002 fce4 	bl	800b650 <SDMMC_CmdSendCSD>
 8008c88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c92:	e059      	b.n	8008d48 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2100      	movs	r1, #0
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f002 fac7 	bl	800b22e <SDIO_GetResponse>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2104      	movs	r1, #4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f002 fabe 	bl	800b22e <SDIO_GetResponse>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2108      	movs	r1, #8
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f002 fab5 	bl	800b22e <SDIO_GetResponse>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	210c      	movs	r1, #12
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f002 faac 	bl	800b22e <SDIO_GetResponse>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	2104      	movs	r1, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f002 faa3 	bl	800b22e <SDIO_GetResponse>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	0d1a      	lsrs	r2, r3, #20
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008cf0:	f107 0310 	add.w	r3, r7, #16
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7ff fcd4 	bl	80086a4 <HAL_SD_GetCardCSD>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d06:	e01f      	b.n	8008d48 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6819      	ldr	r1, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d10:	041b      	lsls	r3, r3, #16
 8008d12:	461a      	mov	r2, r3
 8008d14:	f04f 0300 	mov.w	r3, #0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	f002 fb93 	bl	800b444 <SDMMC_CmdSelDesel>
 8008d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <SD_InitCard+0x172>
  {
    return errorstate;
 8008d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d28:	e00e      	b.n	8008d48 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681d      	ldr	r5, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	466c      	mov	r4, sp
 8008d32:	f103 0210 	add.w	r2, r3, #16
 8008d36:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d40:	4628      	mov	r0, r5
 8008d42:	f002 f9d7 	bl	800b0f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3740      	adds	r7, #64	; 0x40
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bdb0      	pop	{r4, r5, r7, pc}

08008d50 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	2300      	movs	r3, #0
 8008d62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f002 fb8e 	bl	800b48a <SDMMC_CmdGoIdleState>
 8008d6e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	e072      	b.n	8008e60 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f002 fba1 	bl	800b4c6 <SDMMC_CmdOperCond>
 8008d84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00d      	beq.n	8008da8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f002 fb77 	bl	800b48a <SDMMC_CmdGoIdleState>
 8008d9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d004      	beq.n	8008dae <SD_PowerON+0x5e>
    {
      return errorstate;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	e05b      	b.n	8008e60 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d137      	bne.n	8008e26 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f002 fba1 	bl	800b504 <SDMMC_CmdAppCommand>
 8008dc2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d02d      	beq.n	8008e26 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dce:	e047      	b.n	8008e60 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f002 fb94 	bl	800b504 <SDMMC_CmdAppCommand>
 8008ddc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <SD_PowerON+0x98>
    {
      return errorstate;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	e03b      	b.n	8008e60 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	491e      	ldr	r1, [pc, #120]	; (8008e68 <SD_PowerON+0x118>)
 8008dee:	4618      	mov	r0, r3
 8008df0:	f002 fbaa 	bl	800b548 <SDMMC_CmdAppOperCommand>
 8008df4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e00:	e02e      	b.n	8008e60 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2100      	movs	r1, #0
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f002 fa10 	bl	800b22e <SDIO_GetResponse>
 8008e0e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	0fdb      	lsrs	r3, r3, #31
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d101      	bne.n	8008e1c <SD_PowerON+0xcc>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e000      	b.n	8008e1e <SD_PowerON+0xce>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	613b      	str	r3, [r7, #16]

    count++;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d802      	bhi.n	8008e36 <SD_PowerON+0xe6>
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d0cc      	beq.n	8008dd0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d902      	bls.n	8008e46 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e44:	e00c      	b.n	8008e60 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d003      	beq.n	8008e58 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	645a      	str	r2, [r3, #68]	; 0x44
 8008e56:	e002      	b.n	8008e5e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3718      	adds	r7, #24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	c1100000 	.word	0xc1100000

08008e6c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d102      	bne.n	8008e82 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e80:	e018      	b.n	8008eb4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8a:	041b      	lsls	r3, r3, #16
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f002 fc1e 	bl	800b6d0 <SDMMC_CmdSendStatus>
 8008e94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	e009      	b.n	8008eb4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f002 f9c1 	bl	800b22e <SDIO_GetResponse>
 8008eac:	4602      	mov	r2, r0
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	2300      	movs	r3, #0
 8008eca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f002 f9ab 	bl	800b22e <SDIO_GetResponse>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ee2:	d102      	bne.n	8008eea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ee8:	e02f      	b.n	8008f4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008eea:	f107 030c 	add.w	r3, r7, #12
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f879 	bl	8008fe8 <SD_FindSCR>
 8008ef6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d001      	beq.n	8008f02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	e023      	b.n	8008f4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01c      	beq.n	8008f46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f002 faf3 	bl	800b504 <SDMMC_CmdAppCommand>
 8008f1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	e00f      	b.n	8008f4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2102      	movs	r1, #2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f002 fb2c 	bl	800b58e <SDMMC_CmdBusWidth>
 8008f36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	e003      	b.n	8008f4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	e001      	b.n	8008f4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b086      	sub	sp, #24
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
 8008f5e:	2300      	movs	r3, #0
 8008f60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f002 f960 	bl	800b22e <SDIO_GetResponse>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f78:	d102      	bne.n	8008f80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f7e:	e02f      	b.n	8008fe0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f80:	f107 030c 	add.w	r3, r7, #12
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f82e 	bl	8008fe8 <SD_FindSCR>
 8008f8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	e023      	b.n	8008fe0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01c      	beq.n	8008fdc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008faa:	041b      	lsls	r3, r3, #16
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f002 faa8 	bl	800b504 <SDMMC_CmdAppCommand>
 8008fb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	e00f      	b.n	8008fe0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f002 fae1 	bl	800b58e <SDMMC_CmdBusWidth>
 8008fcc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	e003      	b.n	8008fe0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e001      	b.n	8008fe0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b08f      	sub	sp, #60	; 0x3c
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ff2:	f7fc f839 	bl	8005068 <HAL_GetTick>
 8008ff6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60bb      	str	r3, [r7, #8]
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2108      	movs	r1, #8
 800900e:	4618      	mov	r0, r3
 8009010:	f002 f94c 	bl	800b2ac <SDMMC_CmdBlockLength>
 8009014:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <SD_FindSCR+0x38>
  {
    return errorstate;
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	e0b2      	b.n	8009186 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009028:	041b      	lsls	r3, r3, #16
 800902a:	4619      	mov	r1, r3
 800902c:	4610      	mov	r0, r2
 800902e:	f002 fa69 	bl	800b504 <SDMMC_CmdAppCommand>
 8009032:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <SD_FindSCR+0x56>
  {
    return errorstate;
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	e0a3      	b.n	8009186 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800903e:	f04f 33ff 	mov.w	r3, #4294967295
 8009042:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009044:	2308      	movs	r3, #8
 8009046:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009048:	2330      	movs	r3, #48	; 0x30
 800904a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800904c:	2302      	movs	r3, #2
 800904e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009050:	2300      	movs	r3, #0
 8009052:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009054:	2301      	movs	r3, #1
 8009056:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f107 0210 	add.w	r2, r7, #16
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f002 f8f6 	bl	800b254 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f002 fab0 	bl	800b5d2 <SDMMC_CmdSendSCR>
 8009072:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	d02a      	beq.n	80090d0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	e083      	b.n	8009186 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00f      	beq.n	80090ac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6819      	ldr	r1, [r3, #0]
 8009090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	f107 0208 	add.w	r2, r7, #8
 8009098:	18d4      	adds	r4, r2, r3
 800909a:	4608      	mov	r0, r1
 800909c:	f002 f855 	bl	800b14a <SDIO_ReadFIFO>
 80090a0:	4603      	mov	r3, r0
 80090a2:	6023      	str	r3, [r4, #0]
      index++;
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	3301      	adds	r3, #1
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
 80090aa:	e006      	b.n	80090ba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d012      	beq.n	80090e0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80090ba:	f7fb ffd5 	bl	8005068 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d102      	bne.n	80090d0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80090ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090ce:	e05a      	b.n	8009186 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d0cf      	beq.n	800907e <SD_FindSCR+0x96>
 80090de:	e000      	b.n	80090e2 <SD_FindSCR+0xfa>
      break;
 80090e0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e8:	f003 0308 	and.w	r3, r3, #8
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2208      	movs	r2, #8
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80090f8:	2308      	movs	r3, #8
 80090fa:	e044      	b.n	8009186 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2202      	movs	r2, #2
 8009110:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009112:	2302      	movs	r3, #2
 8009114:	e037      	b.n	8009186 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911c:	f003 0320 	and.w	r3, r3, #32
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2220      	movs	r2, #32
 800912a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800912c:	2320      	movs	r3, #32
 800912e:	e02a      	b.n	8009186 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f240 523a 	movw	r2, #1338	; 0x53a
 8009138:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	061a      	lsls	r2, r3, #24
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009146:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	0a1b      	lsrs	r3, r3, #8
 800914c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009150:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	0e1b      	lsrs	r3, r3, #24
 8009156:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	601a      	str	r2, [r3, #0]
    scr++;
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	3304      	adds	r3, #4
 8009160:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	061a      	lsls	r2, r3, #24
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	021b      	lsls	r3, r3, #8
 800916a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800916e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	0a1b      	lsrs	r3, r3, #8
 8009174:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009178:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	0e1b      	lsrs	r3, r3, #24
 800917e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	373c      	adds	r7, #60	; 0x3c
 800918a:	46bd      	mov	sp, r7
 800918c:	bd90      	pop	{r4, r7, pc}

0800918e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e07b      	b.n	8009298 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d108      	bne.n	80091ba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091b0:	d009      	beq.n	80091c6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	61da      	str	r2, [r3, #28]
 80091b8:	e005      	b.n	80091c6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d106      	bne.n	80091e6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f7fb f9bd 	bl	8004560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2202      	movs	r2, #2
 80091ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800920e:	431a      	orrs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009218:	431a      	orrs	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009236:	431a      	orrs	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924a:	ea42 0103 	orr.w	r1, r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	430a      	orrs	r2, r1
 800925c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	0c1b      	lsrs	r3, r3, #16
 8009264:	f003 0104 	and.w	r1, r3, #4
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	f003 0210 	and.w	r2, r3, #16
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	69da      	ldr	r2, [r3, #28]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009286:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	603b      	str	r3, [r7, #0]
 80092ac:	4613      	mov	r3, r2
 80092ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d101      	bne.n	80092c2 <HAL_SPI_Transmit+0x22>
 80092be:	2302      	movs	r3, #2
 80092c0:	e126      	b.n	8009510 <HAL_SPI_Transmit+0x270>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092ca:	f7fb fecd 	bl	8005068 <HAL_GetTick>
 80092ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80092d0:	88fb      	ldrh	r3, [r7, #6]
 80092d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d002      	beq.n	80092e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80092e0:	2302      	movs	r3, #2
 80092e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092e4:	e10b      	b.n	80094fe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <HAL_SPI_Transmit+0x52>
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d102      	bne.n	80092f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092f6:	e102      	b.n	80094fe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2203      	movs	r2, #3
 80092fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	88fa      	ldrh	r2, [r7, #6]
 8009310:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	88fa      	ldrh	r2, [r7, #6]
 8009316:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2200      	movs	r2, #0
 800932e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800933e:	d10f      	bne.n	8009360 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800934e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800935e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b40      	cmp	r3, #64	; 0x40
 800936c:	d007      	beq.n	800937e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800937c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009386:	d14b      	bne.n	8009420 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <HAL_SPI_Transmit+0xf6>
 8009390:	8afb      	ldrh	r3, [r7, #22]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d13e      	bne.n	8009414 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939a:	881a      	ldrh	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a6:	1c9a      	adds	r2, r3, #2
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80093ba:	e02b      	b.n	8009414 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d112      	bne.n	80093f0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	881a      	ldrh	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093da:	1c9a      	adds	r2, r3, #2
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	3b01      	subs	r3, #1
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80093ee:	e011      	b.n	8009414 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093f0:	f7fb fe3a 	bl	8005068 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	683a      	ldr	r2, [r7, #0]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d803      	bhi.n	8009408 <HAL_SPI_Transmit+0x168>
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d102      	bne.n	800940e <HAL_SPI_Transmit+0x16e>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d102      	bne.n	8009414 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800940e:	2303      	movs	r3, #3
 8009410:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009412:	e074      	b.n	80094fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1ce      	bne.n	80093bc <HAL_SPI_Transmit+0x11c>
 800941e:	e04c      	b.n	80094ba <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_SPI_Transmit+0x18e>
 8009428:	8afb      	ldrh	r3, [r7, #22]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d140      	bne.n	80094b0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	330c      	adds	r3, #12
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800944a:	b29b      	uxth	r3, r3
 800944c:	3b01      	subs	r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009454:	e02c      	b.n	80094b0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 0302 	and.w	r3, r3, #2
 8009460:	2b02      	cmp	r3, #2
 8009462:	d113      	bne.n	800948c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	330c      	adds	r3, #12
 800946e:	7812      	ldrb	r2, [r2, #0]
 8009470:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009480:	b29b      	uxth	r3, r3
 8009482:	3b01      	subs	r3, #1
 8009484:	b29a      	uxth	r2, r3
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	86da      	strh	r2, [r3, #54]	; 0x36
 800948a:	e011      	b.n	80094b0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800948c:	f7fb fdec 	bl	8005068 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d803      	bhi.n	80094a4 <HAL_SPI_Transmit+0x204>
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a2:	d102      	bne.n	80094aa <HAL_SPI_Transmit+0x20a>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094ae:	e026      	b.n	80094fe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1cd      	bne.n	8009456 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fbcc 	bl	8009c5c <SPI_EndRxTxTransaction>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2220      	movs	r2, #32
 80094ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10a      	bne.n	80094ee <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094d8:	2300      	movs	r3, #0
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	613b      	str	r3, [r7, #16]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	613b      	str	r3, [r7, #16]
 80094ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	77fb      	strb	r3, [r7, #31]
 80094fa:	e000      	b.n	80094fe <HAL_SPI_Transmit+0x25e>
  }

error:
 80094fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800950e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3720      	adds	r7, #32
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	4613      	mov	r3, r2
 8009526:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009534:	d112      	bne.n	800955c <HAL_SPI_Receive+0x44>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10e      	bne.n	800955c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2204      	movs	r2, #4
 8009542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009546:	88fa      	ldrh	r2, [r7, #6]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 f8f1 	bl	800973a <HAL_SPI_TransmitReceive>
 8009558:	4603      	mov	r3, r0
 800955a:	e0ea      	b.n	8009732 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009562:	2b01      	cmp	r3, #1
 8009564:	d101      	bne.n	800956a <HAL_SPI_Receive+0x52>
 8009566:	2302      	movs	r3, #2
 8009568:	e0e3      	b.n	8009732 <HAL_SPI_Receive+0x21a>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009572:	f7fb fd79 	bl	8005068 <HAL_GetTick>
 8009576:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b01      	cmp	r3, #1
 8009582:	d002      	beq.n	800958a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009584:	2302      	movs	r3, #2
 8009586:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009588:	e0ca      	b.n	8009720 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <HAL_SPI_Receive+0x7e>
 8009590:	88fb      	ldrh	r3, [r7, #6]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800959a:	e0c1      	b.n	8009720 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2204      	movs	r2, #4
 80095a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	88fa      	ldrh	r2, [r7, #6]
 80095b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	88fa      	ldrh	r2, [r7, #6]
 80095ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095e2:	d10f      	bne.n	8009604 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009602:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d007      	beq.n	8009622 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009620:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d162      	bne.n	80096f0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800962a:	e02e      	b.n	800968a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b01      	cmp	r3, #1
 8009638:	d115      	bne.n	8009666 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f103 020c 	add.w	r2, r3, #12
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009646:	7812      	ldrb	r2, [r2, #0]
 8009648:	b2d2      	uxtb	r2, r2
 800964a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	1c5a      	adds	r2, r3, #1
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009664:	e011      	b.n	800968a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009666:	f7fb fcff 	bl	8005068 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d803      	bhi.n	800967e <HAL_SPI_Receive+0x166>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967c:	d102      	bne.n	8009684 <HAL_SPI_Receive+0x16c>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d102      	bne.n	800968a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009688:	e04a      	b.n	8009720 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800968e:	b29b      	uxth	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1cb      	bne.n	800962c <HAL_SPI_Receive+0x114>
 8009694:	e031      	b.n	80096fa <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f003 0301 	and.w	r3, r3, #1
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d113      	bne.n	80096cc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ae:	b292      	uxth	r2, r2
 80096b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	1c9a      	adds	r2, r3, #2
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096ca:	e011      	b.n	80096f0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096cc:	f7fb fccc 	bl	8005068 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d803      	bhi.n	80096e4 <HAL_SPI_Receive+0x1cc>
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d102      	bne.n	80096ea <HAL_SPI_Receive+0x1d2>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d102      	bne.n	80096f0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80096ee:	e017      	b.n	8009720 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d1cd      	bne.n	8009696 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096fa:	693a      	ldr	r2, [r7, #16]
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 fa46 	bl	8009b90 <SPI_EndRxTransaction>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	75fb      	strb	r3, [r7, #23]
 800971c:	e000      	b.n	8009720 <HAL_SPI_Receive+0x208>
  }

error :
 800971e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b08c      	sub	sp, #48	; 0x30
 800973e:	af00      	add	r7, sp, #0
 8009740:	60f8      	str	r0, [r7, #12]
 8009742:	60b9      	str	r1, [r7, #8]
 8009744:	607a      	str	r2, [r7, #4]
 8009746:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009748:	2301      	movs	r3, #1
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_SPI_TransmitReceive+0x26>
 800975c:	2302      	movs	r3, #2
 800975e:	e18a      	b.n	8009a76 <HAL_SPI_TransmitReceive+0x33c>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009768:	f7fb fc7e 	bl	8005068 <HAL_GetTick>
 800976c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800977e:	887b      	ldrh	r3, [r7, #2]
 8009780:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009786:	2b01      	cmp	r3, #1
 8009788:	d00f      	beq.n	80097aa <HAL_SPI_TransmitReceive+0x70>
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009790:	d107      	bne.n	80097a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d103      	bne.n	80097a2 <HAL_SPI_TransmitReceive+0x68>
 800979a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d003      	beq.n	80097aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80097a2:	2302      	movs	r3, #2
 80097a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80097a8:	e15b      	b.n	8009a62 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <HAL_SPI_TransmitReceive+0x82>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d002      	beq.n	80097bc <HAL_SPI_TransmitReceive+0x82>
 80097b6:	887b      	ldrh	r3, [r7, #2]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d103      	bne.n	80097c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80097c2:	e14e      	b.n	8009a62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b04      	cmp	r3, #4
 80097ce:	d003      	beq.n	80097d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2205      	movs	r2, #5
 80097d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	887a      	ldrh	r2, [r7, #2]
 80097e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	887a      	ldrh	r2, [r7, #2]
 80097ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	887a      	ldrh	r2, [r7, #2]
 80097fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	887a      	ldrh	r2, [r7, #2]
 8009800:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009818:	2b40      	cmp	r3, #64	; 0x40
 800981a:	d007      	beq.n	800982c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800982a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009834:	d178      	bne.n	8009928 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_SPI_TransmitReceive+0x10a>
 800983e:	8b7b      	ldrh	r3, [r7, #26]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d166      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009848:	881a      	ldrh	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	1c9a      	adds	r2, r3, #2
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800985e:	b29b      	uxth	r3, r3
 8009860:	3b01      	subs	r3, #1
 8009862:	b29a      	uxth	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009868:	e053      	b.n	8009912 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b02      	cmp	r3, #2
 8009876:	d11b      	bne.n	80098b0 <HAL_SPI_TransmitReceive+0x176>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d016      	beq.n	80098b0 <HAL_SPI_TransmitReceive+0x176>
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	2b01      	cmp	r3, #1
 8009886:	d113      	bne.n	80098b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009898:	1c9a      	adds	r2, r3, #2
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d119      	bne.n	80098f2 <HAL_SPI_TransmitReceive+0x1b8>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d014      	beq.n	80098f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d2:	b292      	uxth	r2, r2
 80098d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098da:	1c9a      	adds	r2, r3, #2
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	3b01      	subs	r3, #1
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098ee:	2301      	movs	r3, #1
 80098f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098f2:	f7fb fbb9 	bl	8005068 <HAL_GetTick>
 80098f6:	4602      	mov	r2, r0
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098fe:	429a      	cmp	r2, r3
 8009900:	d807      	bhi.n	8009912 <HAL_SPI_TransmitReceive+0x1d8>
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009908:	d003      	beq.n	8009912 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009910:	e0a7      	b.n	8009a62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009916:	b29b      	uxth	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1a6      	bne.n	800986a <HAL_SPI_TransmitReceive+0x130>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009920:	b29b      	uxth	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1a1      	bne.n	800986a <HAL_SPI_TransmitReceive+0x130>
 8009926:	e07c      	b.n	8009a22 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <HAL_SPI_TransmitReceive+0x1fc>
 8009930:	8b7b      	ldrh	r3, [r7, #26]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d16b      	bne.n	8009a0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	330c      	adds	r3, #12
 8009940:	7812      	ldrb	r2, [r2, #0]
 8009942:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009952:	b29b      	uxth	r3, r3
 8009954:	3b01      	subs	r3, #1
 8009956:	b29a      	uxth	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800995c:	e057      	b.n	8009a0e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	f003 0302 	and.w	r3, r3, #2
 8009968:	2b02      	cmp	r3, #2
 800996a:	d11c      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x26c>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009970:	b29b      	uxth	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d017      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x26c>
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	2b01      	cmp	r3, #1
 800997a:	d114      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	330c      	adds	r3, #12
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d119      	bne.n	80099e8 <HAL_SPI_TransmitReceive+0x2ae>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d014      	beq.n	80099e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68da      	ldr	r2, [r3, #12]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	1c5a      	adds	r2, r3, #1
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3b01      	subs	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099e4:	2301      	movs	r3, #1
 80099e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80099e8:	f7fb fb3e 	bl	8005068 <HAL_GetTick>
 80099ec:	4602      	mov	r2, r0
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d803      	bhi.n	8009a00 <HAL_SPI_TransmitReceive+0x2c6>
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099fe:	d102      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x2cc>
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d103      	bne.n	8009a0e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009a0c:	e029      	b.n	8009a62 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1a2      	bne.n	800995e <HAL_SPI_TransmitReceive+0x224>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d19d      	bne.n	800995e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 f918 	bl	8009c5c <SPI_EndRxTxTransaction>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d006      	beq.n	8009a40 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009a3e:	e010      	b.n	8009a62 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10b      	bne.n	8009a60 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	e000      	b.n	8009a62 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009a60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3730      	adds	r7, #48	; 0x30
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
	...

08009a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a90:	f7fb faea 	bl	8005068 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009aa0:	f7fb fae2 	bl	8005068 <HAL_GetTick>
 8009aa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009aa6:	4b39      	ldr	r3, [pc, #228]	; (8009b8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	015b      	lsls	r3, r3, #5
 8009aac:	0d1b      	lsrs	r3, r3, #20
 8009aae:	69fa      	ldr	r2, [r7, #28]
 8009ab0:	fb02 f303 	mul.w	r3, r2, r3
 8009ab4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ab6:	e054      	b.n	8009b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abe:	d050      	beq.n	8009b62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009ac0:	f7fb fad2 	bl	8005068 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d902      	bls.n	8009ad6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d13d      	bne.n	8009b52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ae4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009aee:	d111      	bne.n	8009b14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009af8:	d004      	beq.n	8009b04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b02:	d107      	bne.n	8009b14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b1c:	d10f      	bne.n	8009b3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b2c:	601a      	str	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e017      	b.n	8009b82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	bf0c      	ite	eq
 8009b72:	2301      	moveq	r3, #1
 8009b74:	2300      	movne	r3, #0
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d19b      	bne.n	8009ab8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3720      	adds	r7, #32
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	2000004c 	.word	0x2000004c

08009b90 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ba4:	d111      	bne.n	8009bca <SPI_EndRxTransaction+0x3a>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bae:	d004      	beq.n	8009bba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb8:	d107      	bne.n	8009bca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bc8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bd2:	d12a      	bne.n	8009c2a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bdc:	d012      	beq.n	8009c04 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2200      	movs	r2, #0
 8009be6:	2180      	movs	r1, #128	; 0x80
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f7ff ff49 	bl	8009a80 <SPI_WaitFlagStateUntilTimeout>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d02d      	beq.n	8009c50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf8:	f043 0220 	orr.w	r2, r3, #32
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e026      	b.n	8009c52 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff ff36 	bl	8009a80 <SPI_WaitFlagStateUntilTimeout>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d01a      	beq.n	8009c50 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1e:	f043 0220 	orr.w	r2, r3, #32
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e013      	b.n	8009c52 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2200      	movs	r2, #0
 8009c32:	2101      	movs	r1, #1
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff ff23 	bl	8009a80 <SPI_WaitFlagStateUntilTimeout>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d007      	beq.n	8009c50 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c44:	f043 0220 	orr.w	r2, r3, #32
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e000      	b.n	8009c52 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009c50:	2300      	movs	r3, #0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af02      	add	r7, sp, #8
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c68:	4b1b      	ldr	r3, [pc, #108]	; (8009cd8 <SPI_EndRxTxTransaction+0x7c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <SPI_EndRxTxTransaction+0x80>)
 8009c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c72:	0d5b      	lsrs	r3, r3, #21
 8009c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c78:	fb02 f303 	mul.w	r3, r2, r3
 8009c7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c86:	d112      	bne.n	8009cae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2180      	movs	r1, #128	; 0x80
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff fef4 	bl	8009a80 <SPI_WaitFlagStateUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d016      	beq.n	8009ccc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f043 0220 	orr.w	r2, r3, #32
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e00f      	b.n	8009cce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00a      	beq.n	8009cca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc4:	2b80      	cmp	r3, #128	; 0x80
 8009cc6:	d0f2      	beq.n	8009cae <SPI_EndRxTxTransaction+0x52>
 8009cc8:	e000      	b.n	8009ccc <SPI_EndRxTxTransaction+0x70>
        break;
 8009cca:	bf00      	nop
  }

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3718      	adds	r7, #24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	2000004c 	.word	0x2000004c
 8009cdc:	165e9f81 	.word	0x165e9f81

08009ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d101      	bne.n	8009cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e041      	b.n	8009d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d106      	bne.n	8009d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7fb f87c 	bl	8004e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f000 fa92 	bl	800a248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2201      	movs	r2, #1
 8009d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d001      	beq.n	8009d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e04e      	b.n	8009e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f042 0201 	orr.w	r2, r2, #1
 8009dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a23      	ldr	r2, [pc, #140]	; (8009e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d022      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x80>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc2:	d01d      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x80>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a1f      	ldr	r2, [pc, #124]	; (8009e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d018      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x80>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a1e      	ldr	r2, [pc, #120]	; (8009e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d013      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x80>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a1c      	ldr	r2, [pc, #112]	; (8009e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00e      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x80>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a1b      	ldr	r2, [pc, #108]	; (8009e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d009      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x80>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a19      	ldr	r2, [pc, #100]	; (8009e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d004      	beq.n	8009e00 <HAL_TIM_Base_Start_IT+0x80>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a18      	ldr	r2, [pc, #96]	; (8009e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d111      	bne.n	8009e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b06      	cmp	r3, #6
 8009e10:	d010      	beq.n	8009e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0201 	orr.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e22:	e007      	b.n	8009e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f042 0201 	orr.w	r2, r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	40010000 	.word	0x40010000
 8009e48:	40000400 	.word	0x40000400
 8009e4c:	40000800 	.word	0x40000800
 8009e50:	40000c00 	.word	0x40000c00
 8009e54:	40010400 	.word	0x40010400
 8009e58:	40014000 	.word	0x40014000
 8009e5c:	40001800 	.word	0x40001800

08009e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	f003 0302 	and.w	r3, r3, #2
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d122      	bne.n	8009ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	f003 0302 	and.w	r3, r3, #2
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d11b      	bne.n	8009ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f06f 0202 	mvn.w	r2, #2
 8009e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	f003 0303 	and.w	r3, r3, #3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d003      	beq.n	8009eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f9b2 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009ea8:	e005      	b.n	8009eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f9a4 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f9b5 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	f003 0304 	and.w	r3, r3, #4
 8009ec6:	2b04      	cmp	r3, #4
 8009ec8:	d122      	bne.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0304 	and.w	r3, r3, #4
 8009ed4:	2b04      	cmp	r3, #4
 8009ed6:	d11b      	bne.n	8009f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f06f 0204 	mvn.w	r2, #4
 8009ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f000 f988 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009efc:	e005      	b.n	8009f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f97a 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f98b 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	f003 0308 	and.w	r3, r3, #8
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d122      	bne.n	8009f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	f003 0308 	and.w	r3, r3, #8
 8009f28:	2b08      	cmp	r3, #8
 8009f2a:	d11b      	bne.n	8009f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f06f 0208 	mvn.w	r2, #8
 8009f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2204      	movs	r2, #4
 8009f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	f003 0303 	and.w	r3, r3, #3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f95e 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009f50:	e005      	b.n	8009f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f950 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f961 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	f003 0310 	and.w	r3, r3, #16
 8009f6e:	2b10      	cmp	r3, #16
 8009f70:	d122      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b10      	cmp	r3, #16
 8009f7e:	d11b      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f06f 0210 	mvn.w	r2, #16
 8009f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2208      	movs	r2, #8
 8009f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f934 	bl	800a20c <HAL_TIM_IC_CaptureCallback>
 8009fa4:	e005      	b.n	8009fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f926 	bl	800a1f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f937 	bl	800a220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d10e      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d107      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0201 	mvn.w	r2, #1
 8009fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7f9 f9d0 	bl	8003384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fee:	2b80      	cmp	r3, #128	; 0x80
 8009ff0:	d10e      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d107      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fadc 	bl	800a5c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01a:	2b40      	cmp	r3, #64	; 0x40
 800a01c:	d10e      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a028:	2b40      	cmp	r3, #64	; 0x40
 800a02a:	d107      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 f8fc 	bl	800a234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	f003 0320 	and.w	r3, r3, #32
 800a046:	2b20      	cmp	r3, #32
 800a048:	d10e      	bne.n	800a068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	f003 0320 	and.w	r3, r3, #32
 800a054:	2b20      	cmp	r3, #32
 800a056:	d107      	bne.n	800a068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f06f 0220 	mvn.w	r2, #32
 800a060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 faa6 	bl	800a5b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_TIM_ConfigClockSource+0x18>
 800a084:	2302      	movs	r3, #2
 800a086:	e0b3      	b.n	800a1f0 <HAL_TIM_ConfigClockSource+0x180>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c0:	d03e      	beq.n	800a140 <HAL_TIM_ConfigClockSource+0xd0>
 800a0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0c6:	f200 8087 	bhi.w	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a0ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ce:	f000 8085 	beq.w	800a1dc <HAL_TIM_ConfigClockSource+0x16c>
 800a0d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d6:	d87f      	bhi.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a0d8:	2b70      	cmp	r3, #112	; 0x70
 800a0da:	d01a      	beq.n	800a112 <HAL_TIM_ConfigClockSource+0xa2>
 800a0dc:	2b70      	cmp	r3, #112	; 0x70
 800a0de:	d87b      	bhi.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a0e0:	2b60      	cmp	r3, #96	; 0x60
 800a0e2:	d050      	beq.n	800a186 <HAL_TIM_ConfigClockSource+0x116>
 800a0e4:	2b60      	cmp	r3, #96	; 0x60
 800a0e6:	d877      	bhi.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a0e8:	2b50      	cmp	r3, #80	; 0x50
 800a0ea:	d03c      	beq.n	800a166 <HAL_TIM_ConfigClockSource+0xf6>
 800a0ec:	2b50      	cmp	r3, #80	; 0x50
 800a0ee:	d873      	bhi.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a0f0:	2b40      	cmp	r3, #64	; 0x40
 800a0f2:	d058      	beq.n	800a1a6 <HAL_TIM_ConfigClockSource+0x136>
 800a0f4:	2b40      	cmp	r3, #64	; 0x40
 800a0f6:	d86f      	bhi.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a0f8:	2b30      	cmp	r3, #48	; 0x30
 800a0fa:	d064      	beq.n	800a1c6 <HAL_TIM_ConfigClockSource+0x156>
 800a0fc:	2b30      	cmp	r3, #48	; 0x30
 800a0fe:	d86b      	bhi.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a100:	2b20      	cmp	r3, #32
 800a102:	d060      	beq.n	800a1c6 <HAL_TIM_ConfigClockSource+0x156>
 800a104:	2b20      	cmp	r3, #32
 800a106:	d867      	bhi.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d05c      	beq.n	800a1c6 <HAL_TIM_ConfigClockSource+0x156>
 800a10c:	2b10      	cmp	r3, #16
 800a10e:	d05a      	beq.n	800a1c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a110:	e062      	b.n	800a1d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	6899      	ldr	r1, [r3, #8]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	f000 f9ab 	bl	800a47c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a134:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	609a      	str	r2, [r3, #8]
      break;
 800a13e:	e04e      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6818      	ldr	r0, [r3, #0]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	6899      	ldr	r1, [r3, #8]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	f000 f994 	bl	800a47c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a162:	609a      	str	r2, [r3, #8]
      break;
 800a164:	e03b      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6818      	ldr	r0, [r3, #0]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	6859      	ldr	r1, [r3, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	461a      	mov	r2, r3
 800a174:	f000 f908 	bl	800a388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2150      	movs	r1, #80	; 0x50
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f961 	bl	800a446 <TIM_ITRx_SetConfig>
      break;
 800a184:	e02b      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	6859      	ldr	r1, [r3, #4]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	461a      	mov	r2, r3
 800a194:	f000 f927 	bl	800a3e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2160      	movs	r1, #96	; 0x60
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 f951 	bl	800a446 <TIM_ITRx_SetConfig>
      break;
 800a1a4:	e01b      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	6859      	ldr	r1, [r3, #4]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f000 f8e8 	bl	800a388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2140      	movs	r1, #64	; 0x40
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f941 	bl	800a446 <TIM_ITRx_SetConfig>
      break;
 800a1c4:	e00b      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	f000 f938 	bl	800a446 <TIM_ITRx_SetConfig>
        break;
 800a1d6:	e002      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a1d8:	bf00      	nop
 800a1da:	e000      	b.n	800a1de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a1dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a40      	ldr	r2, [pc, #256]	; (800a35c <TIM_Base_SetConfig+0x114>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d013      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a266:	d00f      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a3d      	ldr	r2, [pc, #244]	; (800a360 <TIM_Base_SetConfig+0x118>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d00b      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	4a3c      	ldr	r2, [pc, #240]	; (800a364 <TIM_Base_SetConfig+0x11c>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d007      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	4a3b      	ldr	r2, [pc, #236]	; (800a368 <TIM_Base_SetConfig+0x120>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d003      	beq.n	800a288 <TIM_Base_SetConfig+0x40>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	4a3a      	ldr	r2, [pc, #232]	; (800a36c <TIM_Base_SetConfig+0x124>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d108      	bne.n	800a29a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a2f      	ldr	r2, [pc, #188]	; (800a35c <TIM_Base_SetConfig+0x114>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d02b      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a8:	d027      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a2c      	ldr	r2, [pc, #176]	; (800a360 <TIM_Base_SetConfig+0x118>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d023      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a2b      	ldr	r2, [pc, #172]	; (800a364 <TIM_Base_SetConfig+0x11c>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d01f      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a2a      	ldr	r2, [pc, #168]	; (800a368 <TIM_Base_SetConfig+0x120>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d01b      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a29      	ldr	r2, [pc, #164]	; (800a36c <TIM_Base_SetConfig+0x124>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d017      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a28      	ldr	r2, [pc, #160]	; (800a370 <TIM_Base_SetConfig+0x128>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d013      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a27      	ldr	r2, [pc, #156]	; (800a374 <TIM_Base_SetConfig+0x12c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d00f      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a26      	ldr	r2, [pc, #152]	; (800a378 <TIM_Base_SetConfig+0x130>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d00b      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a25      	ldr	r2, [pc, #148]	; (800a37c <TIM_Base_SetConfig+0x134>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d007      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a24      	ldr	r2, [pc, #144]	; (800a380 <TIM_Base_SetConfig+0x138>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d003      	beq.n	800a2fa <TIM_Base_SetConfig+0xb2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a23      	ldr	r2, [pc, #140]	; (800a384 <TIM_Base_SetConfig+0x13c>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d108      	bne.n	800a30c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	4313      	orrs	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	689a      	ldr	r2, [r3, #8]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a0a      	ldr	r2, [pc, #40]	; (800a35c <TIM_Base_SetConfig+0x114>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d003      	beq.n	800a340 <TIM_Base_SetConfig+0xf8>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a0c      	ldr	r2, [pc, #48]	; (800a36c <TIM_Base_SetConfig+0x124>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d103      	bne.n	800a348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	615a      	str	r2, [r3, #20]
}
 800a34e:	bf00      	nop
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	40010000 	.word	0x40010000
 800a360:	40000400 	.word	0x40000400
 800a364:	40000800 	.word	0x40000800
 800a368:	40000c00 	.word	0x40000c00
 800a36c:	40010400 	.word	0x40010400
 800a370:	40014000 	.word	0x40014000
 800a374:	40014400 	.word	0x40014400
 800a378:	40014800 	.word	0x40014800
 800a37c:	40001800 	.word	0x40001800
 800a380:	40001c00 	.word	0x40001c00
 800a384:	40002000 	.word	0x40002000

0800a388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	6a1b      	ldr	r3, [r3, #32]
 800a398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	f023 0201 	bic.w	r2, r3, #1
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	011b      	lsls	r3, r3, #4
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f023 030a 	bic.w	r3, r3, #10
 800a3c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	621a      	str	r2, [r3, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b087      	sub	sp, #28
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f023 0210 	bic.w	r2, r3, #16
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	031b      	lsls	r3, r3, #12
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4313      	orrs	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a422:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	011b      	lsls	r3, r3, #4
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	621a      	str	r2, [r3, #32]
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a446:	b480      	push	{r7}
 800a448:	b085      	sub	sp, #20
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a45c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4313      	orrs	r3, r2
 800a464:	f043 0307 	orr.w	r3, r3, #7
 800a468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	609a      	str	r2, [r3, #8]
}
 800a470:	bf00      	nop
 800a472:	3714      	adds	r7, #20
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	607a      	str	r2, [r7, #4]
 800a488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	021a      	lsls	r2, r3, #8
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	697a      	ldr	r2, [r7, #20]
 800a4ae:	609a      	str	r2, [r3, #8]
}
 800a4b0:	bf00      	nop
 800a4b2:	371c      	adds	r7, #28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d101      	bne.n	800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e05a      	b.n	800a58a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	4313      	orrs	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a21      	ldr	r2, [pc, #132]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d022      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a520:	d01d      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a1d      	ldr	r2, [pc, #116]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d018      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a1b      	ldr	r2, [pc, #108]	; (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d013      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a1a      	ldr	r2, [pc, #104]	; (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d00e      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a18      	ldr	r2, [pc, #96]	; (800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d009      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a17      	ldr	r2, [pc, #92]	; (800a5ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d004      	beq.n	800a55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d10c      	bne.n	800a578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	40010000 	.word	0x40010000
 800a59c:	40000400 	.word	0x40000400
 800a5a0:	40000800 	.word	0x40000800
 800a5a4:	40000c00 	.word	0x40000c00
 800a5a8:	40010400 	.word	0x40010400
 800a5ac:	40014000 	.word	0x40014000
 800a5b0:	40001800 	.word	0x40001800

0800a5b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e03f      	b.n	800a66e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d106      	bne.n	800a608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7fa fc50 	bl	8004ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2224      	movs	r2, #36	; 0x24
 800a60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a61e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fb9f 	bl	800ad64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	695a      	ldr	r2, [r3, #20]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2220      	movs	r2, #32
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2220      	movs	r2, #32
 800a668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b084      	sub	sp, #16
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	60f8      	str	r0, [r7, #12]
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	4613      	mov	r3, r2
 800a682:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b20      	cmp	r3, #32
 800a68e:	d11d      	bne.n	800a6cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <HAL_UART_Receive_IT+0x26>
 800a696:	88fb      	ldrh	r3, [r7, #6]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d101      	bne.n	800a6a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e016      	b.n	800a6ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d101      	bne.n	800a6ae <HAL_UART_Receive_IT+0x38>
 800a6aa:	2302      	movs	r3, #2
 800a6ac:	e00f      	b.n	800a6ce <HAL_UART_Receive_IT+0x58>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a6bc:	88fb      	ldrh	r3, [r7, #6]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	68b9      	ldr	r1, [r7, #8]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 f9d4 	bl	800aa70 <UART_Start_Receive_IT>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	e000      	b.n	800a6ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a6cc:	2302      	movs	r3, #2
  }
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08a      	sub	sp, #40	; 0x28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	f003 030f 	and.w	r3, r3, #15
 800a706:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10d      	bne.n	800a72a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	f003 0320 	and.w	r3, r3, #32
 800a714:	2b00      	cmp	r3, #0
 800a716:	d008      	beq.n	800a72a <HAL_UART_IRQHandler+0x52>
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	f003 0320 	and.w	r3, r3, #32
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fa87 	bl	800ac36 <UART_Receive_IT>
      return;
 800a728:	e17c      	b.n	800aa24 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 80b1 	beq.w	800a894 <HAL_UART_IRQHandler+0x1bc>
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	f003 0301 	and.w	r3, r3, #1
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d105      	bne.n	800a748 <HAL_UART_IRQHandler+0x70>
 800a73c:	6a3b      	ldr	r3, [r7, #32]
 800a73e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 80a6 	beq.w	800a894 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00a      	beq.n	800a768 <HAL_UART_IRQHandler+0x90>
 800a752:	6a3b      	ldr	r3, [r7, #32]
 800a754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a760:	f043 0201 	orr.w	r2, r3, #1
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <HAL_UART_IRQHandler+0xb0>
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a780:	f043 0202 	orr.w	r2, r3, #2
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <HAL_UART_IRQHandler+0xd0>
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a0:	f043 0204 	orr.w	r2, r3, #4
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00f      	beq.n	800a7d2 <HAL_UART_IRQHandler+0xfa>
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d104      	bne.n	800a7c6 <HAL_UART_IRQHandler+0xee>
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d005      	beq.n	800a7d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ca:	f043 0208 	orr.w	r2, r3, #8
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f000 811f 	beq.w	800aa1a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7de:	f003 0320 	and.w	r3, r3, #32
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d007      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x11e>
 800a7e6:	6a3b      	ldr	r3, [r7, #32]
 800a7e8:	f003 0320 	and.w	r3, r3, #32
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fa20 	bl	800ac36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a800:	2b40      	cmp	r3, #64	; 0x40
 800a802:	bf0c      	ite	eq
 800a804:	2301      	moveq	r3, #1
 800a806:	2300      	movne	r3, #0
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a810:	f003 0308 	and.w	r3, r3, #8
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <HAL_UART_IRQHandler+0x146>
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d031      	beq.n	800a882 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f960 	bl	800aae4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82e:	2b40      	cmp	r3, #64	; 0x40
 800a830:	d123      	bne.n	800a87a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	695a      	ldr	r2, [r3, #20]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a840:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	2b00      	cmp	r3, #0
 800a848:	d013      	beq.n	800a872 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	4a77      	ldr	r2, [pc, #476]	; (800aa2c <HAL_UART_IRQHandler+0x354>)
 800a850:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	4618      	mov	r0, r3
 800a858:	f7fb f9b7 	bl	8005bca <HAL_DMA_Abort_IT>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d016      	beq.n	800a890 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a86c:	4610      	mov	r0, r2
 800a86e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a870:	e00e      	b.n	800a890 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f8e6 	bl	800aa44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a878:	e00a      	b.n	800a890 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f8e2 	bl	800aa44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a880:	e006      	b.n	800a890 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f8de 	bl	800aa44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a88e:	e0c4      	b.n	800aa1a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	bf00      	nop
    return;
 800a892:	e0c2      	b.n	800aa1a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a898:	2b01      	cmp	r3, #1
 800a89a:	f040 80a2 	bne.w	800a9e2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	f003 0310 	and.w	r3, r3, #16
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 809c 	beq.w	800a9e2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	f003 0310 	and.w	r3, r3, #16
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 8096 	beq.w	800a9e2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	695b      	ldr	r3, [r3, #20]
 800a8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d6:	2b40      	cmp	r3, #64	; 0x40
 800a8d8:	d14f      	bne.n	800a97a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a8e4:	8a3b      	ldrh	r3, [r7, #16]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 8099 	beq.w	800aa1e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8f0:	8a3a      	ldrh	r2, [r7, #16]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	f080 8093 	bcs.w	800aa1e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	8a3a      	ldrh	r2, [r7, #16]
 800a8fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a908:	d02b      	beq.n	800a962 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68da      	ldr	r2, [r3, #12]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a918:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	695a      	ldr	r2, [r3, #20]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f022 0201 	bic.w	r2, r2, #1
 800a928:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	695a      	ldr	r2, [r3, #20]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a938:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2220      	movs	r2, #32
 800a93e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68da      	ldr	r2, [r3, #12]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f022 0210 	bic.w	r2, r2, #16
 800a956:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fb f8c4 	bl	8005aea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	b29b      	uxth	r3, r3
 800a970:	4619      	mov	r1, r3
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f870 	bl	800aa58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a978:	e051      	b.n	800aa1e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a982:	b29b      	uxth	r3, r3
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d047      	beq.n	800aa22 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800a992:	8a7b      	ldrh	r3, [r7, #18]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d044      	beq.n	800aa22 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68da      	ldr	r2, [r3, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a9a6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	695a      	ldr	r2, [r3, #20]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f022 0201 	bic.w	r2, r2, #1
 800a9b6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f022 0210 	bic.w	r2, r2, #16
 800a9d4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9d6:	8a7b      	ldrh	r3, [r7, #18]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f83c 	bl	800aa58 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a9e0:	e01f      	b.n	800aa22 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d008      	beq.n	800a9fe <HAL_UART_IRQHandler+0x326>
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d003      	beq.n	800a9fe <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f8b5 	bl	800ab66 <UART_Transmit_IT>
    return;
 800a9fc:	e012      	b.n	800aa24 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00d      	beq.n	800aa24 <HAL_UART_IRQHandler+0x34c>
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d008      	beq.n	800aa24 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f8f7 	bl	800ac06 <UART_EndTransmit_IT>
    return;
 800aa18:	e004      	b.n	800aa24 <HAL_UART_IRQHandler+0x34c>
    return;
 800aa1a:	bf00      	nop
 800aa1c:	e002      	b.n	800aa24 <HAL_UART_IRQHandler+0x34c>
      return;
 800aa1e:	bf00      	nop
 800aa20:	e000      	b.n	800aa24 <HAL_UART_IRQHandler+0x34c>
      return;
 800aa22:	bf00      	nop
  }
}
 800aa24:	3728      	adds	r7, #40	; 0x28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	0800ab3f 	.word	0x0800ab3f

0800aa30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	88fa      	ldrh	r2, [r7, #6]
 800aa88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	88fa      	ldrh	r2, [r7, #6]
 800aa8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2200      	movs	r2, #0
 800aa94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2222      	movs	r2, #34	; 0x22
 800aa9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68da      	ldr	r2, [r3, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aab4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	695a      	ldr	r2, [r3, #20]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f042 0201 	orr.w	r2, r2, #1
 800aac4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	68da      	ldr	r2, [r3, #12]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0220 	orr.w	r2, r2, #32
 800aad4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aad6:	2300      	movs	r3, #0
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	68da      	ldr	r2, [r3, #12]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aafa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	695a      	ldr	r2, [r3, #20]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 0201 	bic.w	r2, r2, #1
 800ab0a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d107      	bne.n	800ab24 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f022 0210 	bic.w	r2, r2, #16
 800ab22:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f7ff ff73 	bl	800aa44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b085      	sub	sp, #20
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b21      	cmp	r3, #33	; 0x21
 800ab78:	d13e      	bne.n	800abf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab82:	d114      	bne.n	800abae <UART_Transmit_IT+0x48>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d110      	bne.n	800abae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6a1b      	ldr	r3, [r3, #32]
 800ab90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aba0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	1c9a      	adds	r2, r3, #2
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	621a      	str	r2, [r3, #32]
 800abac:	e008      	b.n	800abc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a1b      	ldr	r3, [r3, #32]
 800abb2:	1c59      	adds	r1, r3, #1
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	6211      	str	r1, [r2, #32]
 800abb8:	781a      	ldrb	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	3b01      	subs	r3, #1
 800abc8:	b29b      	uxth	r3, r3
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	4619      	mov	r1, r3
 800abce:	84d1      	strh	r1, [r2, #38]	; 0x26
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10f      	bne.n	800abf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	68da      	ldr	r2, [r3, #12]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abe2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	e000      	b.n	800abfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800abf8:	2302      	movs	r3, #2
  }
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68da      	ldr	r2, [r3, #12]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff ff02 	bl	800aa30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3708      	adds	r7, #8
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b22      	cmp	r3, #34	; 0x22
 800ac48:	f040 8087 	bne.w	800ad5a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac54:	d117      	bne.n	800ac86 <UART_Receive_IT+0x50>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d113      	bne.n	800ac86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac66:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac74:	b29a      	uxth	r2, r3
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7e:	1c9a      	adds	r2, r3, #2
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	629a      	str	r2, [r3, #40]	; 0x28
 800ac84:	e026      	b.n	800acd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac8a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac98:	d007      	beq.n	800acaa <UART_Receive_IT+0x74>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <UART_Receive_IT+0x82>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d106      	bne.n	800acb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	701a      	strb	r2, [r3, #0]
 800acb6:	e008      	b.n	800acca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800acd8:	b29b      	uxth	r3, r3
 800acda:	3b01      	subs	r3, #1
 800acdc:	b29b      	uxth	r3, r3
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	4619      	mov	r1, r3
 800ace2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d136      	bne.n	800ad56 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68da      	ldr	r2, [r3, #12]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0220 	bic.w	r2, r2, #32
 800acf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ad06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	695a      	ldr	r2, [r3, #20]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 0201 	bic.w	r2, r2, #1
 800ad16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2220      	movs	r2, #32
 800ad1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d10e      	bne.n	800ad46 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68da      	ldr	r2, [r3, #12]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f022 0210 	bic.w	r2, r2, #16
 800ad36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff fe8a 	bl	800aa58 <HAL_UARTEx_RxEventCallback>
 800ad44:	e002      	b.n	800ad4c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7f8 fa00 	bl	800314c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e002      	b.n	800ad5c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800ad56:	2300      	movs	r3, #0
 800ad58:	e000      	b.n	800ad5c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ad5a:	2302      	movs	r3, #2
  }
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	b09f      	sub	sp, #124	; 0x7c
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ad78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7a:	68d9      	ldr	r1, [r3, #12]
 800ad7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	ea40 0301 	orr.w	r3, r0, r1
 800ad84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ad86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad88:	689a      	ldr	r2, [r3, #8]
 800ad8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	431a      	orrs	r2, r3
 800ad96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ad9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ada8:	f021 010c 	bic.w	r1, r1, #12
 800adac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adb2:	430b      	orrs	r3, r1
 800adb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800adb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800adc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc2:	6999      	ldr	r1, [r3, #24]
 800adc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	ea40 0301 	orr.w	r3, r0, r1
 800adcc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800adce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	4bc5      	ldr	r3, [pc, #788]	; (800b0e8 <UART_SetConfig+0x384>)
 800add4:	429a      	cmp	r2, r3
 800add6:	d004      	beq.n	800ade2 <UART_SetConfig+0x7e>
 800add8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	4bc3      	ldr	r3, [pc, #780]	; (800b0ec <UART_SetConfig+0x388>)
 800adde:	429a      	cmp	r2, r3
 800ade0:	d103      	bne.n	800adea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ade2:	f7fc fcef 	bl	80077c4 <HAL_RCC_GetPCLK2Freq>
 800ade6:	6778      	str	r0, [r7, #116]	; 0x74
 800ade8:	e002      	b.n	800adf0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800adea:	f7fc fcd7 	bl	800779c <HAL_RCC_GetPCLK1Freq>
 800adee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adf8:	f040 80b6 	bne.w	800af68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800adfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adfe:	461c      	mov	r4, r3
 800ae00:	f04f 0500 	mov.w	r5, #0
 800ae04:	4622      	mov	r2, r4
 800ae06:	462b      	mov	r3, r5
 800ae08:	1891      	adds	r1, r2, r2
 800ae0a:	6439      	str	r1, [r7, #64]	; 0x40
 800ae0c:	415b      	adcs	r3, r3
 800ae0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ae10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ae14:	1912      	adds	r2, r2, r4
 800ae16:	eb45 0303 	adc.w	r3, r5, r3
 800ae1a:	f04f 0000 	mov.w	r0, #0
 800ae1e:	f04f 0100 	mov.w	r1, #0
 800ae22:	00d9      	lsls	r1, r3, #3
 800ae24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae28:	00d0      	lsls	r0, r2, #3
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	1911      	adds	r1, r2, r4
 800ae30:	6639      	str	r1, [r7, #96]	; 0x60
 800ae32:	416b      	adcs	r3, r5
 800ae34:	667b      	str	r3, [r7, #100]	; 0x64
 800ae36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f04f 0300 	mov.w	r3, #0
 800ae40:	1891      	adds	r1, r2, r2
 800ae42:	63b9      	str	r1, [r7, #56]	; 0x38
 800ae44:	415b      	adcs	r3, r3
 800ae46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ae4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ae50:	f7f5 ff6a 	bl	8000d28 <__aeabi_uldivmod>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4ba5      	ldr	r3, [pc, #660]	; (800b0f0 <UART_SetConfig+0x38c>)
 800ae5a:	fba3 2302 	umull	r2, r3, r3, r2
 800ae5e:	095b      	lsrs	r3, r3, #5
 800ae60:	011e      	lsls	r6, r3, #4
 800ae62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae64:	461c      	mov	r4, r3
 800ae66:	f04f 0500 	mov.w	r5, #0
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	1891      	adds	r1, r2, r2
 800ae70:	6339      	str	r1, [r7, #48]	; 0x30
 800ae72:	415b      	adcs	r3, r3
 800ae74:	637b      	str	r3, [r7, #52]	; 0x34
 800ae76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ae7a:	1912      	adds	r2, r2, r4
 800ae7c:	eb45 0303 	adc.w	r3, r5, r3
 800ae80:	f04f 0000 	mov.w	r0, #0
 800ae84:	f04f 0100 	mov.w	r1, #0
 800ae88:	00d9      	lsls	r1, r3, #3
 800ae8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae8e:	00d0      	lsls	r0, r2, #3
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	1911      	adds	r1, r2, r4
 800ae96:	65b9      	str	r1, [r7, #88]	; 0x58
 800ae98:	416b      	adcs	r3, r5
 800ae9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	461a      	mov	r2, r3
 800aea2:	f04f 0300 	mov.w	r3, #0
 800aea6:	1891      	adds	r1, r2, r2
 800aea8:	62b9      	str	r1, [r7, #40]	; 0x28
 800aeaa:	415b      	adcs	r3, r3
 800aeac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aeb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800aeb6:	f7f5 ff37 	bl	8000d28 <__aeabi_uldivmod>
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	4b8c      	ldr	r3, [pc, #560]	; (800b0f0 <UART_SetConfig+0x38c>)
 800aec0:	fba3 1302 	umull	r1, r3, r3, r2
 800aec4:	095b      	lsrs	r3, r3, #5
 800aec6:	2164      	movs	r1, #100	; 0x64
 800aec8:	fb01 f303 	mul.w	r3, r1, r3
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	3332      	adds	r3, #50	; 0x32
 800aed2:	4a87      	ldr	r2, [pc, #540]	; (800b0f0 <UART_SetConfig+0x38c>)
 800aed4:	fba2 2303 	umull	r2, r3, r2, r3
 800aed8:	095b      	lsrs	r3, r3, #5
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aee0:	441e      	add	r6, r3
 800aee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aee4:	4618      	mov	r0, r3
 800aee6:	f04f 0100 	mov.w	r1, #0
 800aeea:	4602      	mov	r2, r0
 800aeec:	460b      	mov	r3, r1
 800aeee:	1894      	adds	r4, r2, r2
 800aef0:	623c      	str	r4, [r7, #32]
 800aef2:	415b      	adcs	r3, r3
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
 800aef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aefa:	1812      	adds	r2, r2, r0
 800aefc:	eb41 0303 	adc.w	r3, r1, r3
 800af00:	f04f 0400 	mov.w	r4, #0
 800af04:	f04f 0500 	mov.w	r5, #0
 800af08:	00dd      	lsls	r5, r3, #3
 800af0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800af0e:	00d4      	lsls	r4, r2, #3
 800af10:	4622      	mov	r2, r4
 800af12:	462b      	mov	r3, r5
 800af14:	1814      	adds	r4, r2, r0
 800af16:	653c      	str	r4, [r7, #80]	; 0x50
 800af18:	414b      	adcs	r3, r1
 800af1a:	657b      	str	r3, [r7, #84]	; 0x54
 800af1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	461a      	mov	r2, r3
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	1891      	adds	r1, r2, r2
 800af28:	61b9      	str	r1, [r7, #24]
 800af2a:	415b      	adcs	r3, r3
 800af2c:	61fb      	str	r3, [r7, #28]
 800af2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800af36:	f7f5 fef7 	bl	8000d28 <__aeabi_uldivmod>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	4b6c      	ldr	r3, [pc, #432]	; (800b0f0 <UART_SetConfig+0x38c>)
 800af40:	fba3 1302 	umull	r1, r3, r3, r2
 800af44:	095b      	lsrs	r3, r3, #5
 800af46:	2164      	movs	r1, #100	; 0x64
 800af48:	fb01 f303 	mul.w	r3, r1, r3
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	00db      	lsls	r3, r3, #3
 800af50:	3332      	adds	r3, #50	; 0x32
 800af52:	4a67      	ldr	r2, [pc, #412]	; (800b0f0 <UART_SetConfig+0x38c>)
 800af54:	fba2 2303 	umull	r2, r3, r2, r3
 800af58:	095b      	lsrs	r3, r3, #5
 800af5a:	f003 0207 	and.w	r2, r3, #7
 800af5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4432      	add	r2, r6
 800af64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800af66:	e0b9      	b.n	800b0dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af6a:	461c      	mov	r4, r3
 800af6c:	f04f 0500 	mov.w	r5, #0
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	1891      	adds	r1, r2, r2
 800af76:	6139      	str	r1, [r7, #16]
 800af78:	415b      	adcs	r3, r3
 800af7a:	617b      	str	r3, [r7, #20]
 800af7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800af80:	1912      	adds	r2, r2, r4
 800af82:	eb45 0303 	adc.w	r3, r5, r3
 800af86:	f04f 0000 	mov.w	r0, #0
 800af8a:	f04f 0100 	mov.w	r1, #0
 800af8e:	00d9      	lsls	r1, r3, #3
 800af90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800af94:	00d0      	lsls	r0, r2, #3
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	eb12 0804 	adds.w	r8, r2, r4
 800af9e:	eb43 0905 	adc.w	r9, r3, r5
 800afa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	4618      	mov	r0, r3
 800afa8:	f04f 0100 	mov.w	r1, #0
 800afac:	f04f 0200 	mov.w	r2, #0
 800afb0:	f04f 0300 	mov.w	r3, #0
 800afb4:	008b      	lsls	r3, r1, #2
 800afb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800afba:	0082      	lsls	r2, r0, #2
 800afbc:	4640      	mov	r0, r8
 800afbe:	4649      	mov	r1, r9
 800afc0:	f7f5 feb2 	bl	8000d28 <__aeabi_uldivmod>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4b49      	ldr	r3, [pc, #292]	; (800b0f0 <UART_SetConfig+0x38c>)
 800afca:	fba3 2302 	umull	r2, r3, r3, r2
 800afce:	095b      	lsrs	r3, r3, #5
 800afd0:	011e      	lsls	r6, r3, #4
 800afd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afd4:	4618      	mov	r0, r3
 800afd6:	f04f 0100 	mov.w	r1, #0
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	1894      	adds	r4, r2, r2
 800afe0:	60bc      	str	r4, [r7, #8]
 800afe2:	415b      	adcs	r3, r3
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afea:	1812      	adds	r2, r2, r0
 800afec:	eb41 0303 	adc.w	r3, r1, r3
 800aff0:	f04f 0400 	mov.w	r4, #0
 800aff4:	f04f 0500 	mov.w	r5, #0
 800aff8:	00dd      	lsls	r5, r3, #3
 800affa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800affe:	00d4      	lsls	r4, r2, #3
 800b000:	4622      	mov	r2, r4
 800b002:	462b      	mov	r3, r5
 800b004:	1814      	adds	r4, r2, r0
 800b006:	64bc      	str	r4, [r7, #72]	; 0x48
 800b008:	414b      	adcs	r3, r1
 800b00a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b00c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	f04f 0100 	mov.w	r1, #0
 800b016:	f04f 0200 	mov.w	r2, #0
 800b01a:	f04f 0300 	mov.w	r3, #0
 800b01e:	008b      	lsls	r3, r1, #2
 800b020:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b024:	0082      	lsls	r2, r0, #2
 800b026:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b02a:	f7f5 fe7d 	bl	8000d28 <__aeabi_uldivmod>
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4b2f      	ldr	r3, [pc, #188]	; (800b0f0 <UART_SetConfig+0x38c>)
 800b034:	fba3 1302 	umull	r1, r3, r3, r2
 800b038:	095b      	lsrs	r3, r3, #5
 800b03a:	2164      	movs	r1, #100	; 0x64
 800b03c:	fb01 f303 	mul.w	r3, r1, r3
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	011b      	lsls	r3, r3, #4
 800b044:	3332      	adds	r3, #50	; 0x32
 800b046:	4a2a      	ldr	r2, [pc, #168]	; (800b0f0 <UART_SetConfig+0x38c>)
 800b048:	fba2 2303 	umull	r2, r3, r2, r3
 800b04c:	095b      	lsrs	r3, r3, #5
 800b04e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b052:	441e      	add	r6, r3
 800b054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b056:	4618      	mov	r0, r3
 800b058:	f04f 0100 	mov.w	r1, #0
 800b05c:	4602      	mov	r2, r0
 800b05e:	460b      	mov	r3, r1
 800b060:	1894      	adds	r4, r2, r2
 800b062:	603c      	str	r4, [r7, #0]
 800b064:	415b      	adcs	r3, r3
 800b066:	607b      	str	r3, [r7, #4]
 800b068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b06c:	1812      	adds	r2, r2, r0
 800b06e:	eb41 0303 	adc.w	r3, r1, r3
 800b072:	f04f 0400 	mov.w	r4, #0
 800b076:	f04f 0500 	mov.w	r5, #0
 800b07a:	00dd      	lsls	r5, r3, #3
 800b07c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b080:	00d4      	lsls	r4, r2, #3
 800b082:	4622      	mov	r2, r4
 800b084:	462b      	mov	r3, r5
 800b086:	eb12 0a00 	adds.w	sl, r2, r0
 800b08a:	eb43 0b01 	adc.w	fp, r3, r1
 800b08e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	f04f 0100 	mov.w	r1, #0
 800b098:	f04f 0200 	mov.w	r2, #0
 800b09c:	f04f 0300 	mov.w	r3, #0
 800b0a0:	008b      	lsls	r3, r1, #2
 800b0a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b0a6:	0082      	lsls	r2, r0, #2
 800b0a8:	4650      	mov	r0, sl
 800b0aa:	4659      	mov	r1, fp
 800b0ac:	f7f5 fe3c 	bl	8000d28 <__aeabi_uldivmod>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <UART_SetConfig+0x38c>)
 800b0b6:	fba3 1302 	umull	r1, r3, r3, r2
 800b0ba:	095b      	lsrs	r3, r3, #5
 800b0bc:	2164      	movs	r1, #100	; 0x64
 800b0be:	fb01 f303 	mul.w	r3, r1, r3
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	011b      	lsls	r3, r3, #4
 800b0c6:	3332      	adds	r3, #50	; 0x32
 800b0c8:	4a09      	ldr	r2, [pc, #36]	; (800b0f0 <UART_SetConfig+0x38c>)
 800b0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ce:	095b      	lsrs	r3, r3, #5
 800b0d0:	f003 020f 	and.w	r2, r3, #15
 800b0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4432      	add	r2, r6
 800b0da:	609a      	str	r2, [r3, #8]
}
 800b0dc:	bf00      	nop
 800b0de:	377c      	adds	r7, #124	; 0x7c
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e6:	bf00      	nop
 800b0e8:	40011000 	.word	0x40011000
 800b0ec:	40011400 	.word	0x40011400
 800b0f0:	51eb851f 	.word	0x51eb851f

0800b0f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	b480      	push	{r7}
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	f107 001c 	add.w	r0, r7, #28
 800b102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b10a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b10c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b10e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b112:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b116:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b11a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b11e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4313      	orrs	r3, r2
 800b124:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b12e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b132:	68fa      	ldr	r2, [r7, #12]
 800b134:	431a      	orrs	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	b004      	add	sp, #16
 800b148:	4770      	bx	lr

0800b14a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b158:	4618      	mov	r0, r3
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b186:	b580      	push	{r7, lr}
 800b188:	b082      	sub	sp, #8
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2203      	movs	r2, #3
 800b192:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b194:	2002      	movs	r0, #2
 800b196:	f7f9 ff73 	bl	8005080 <HAL_Delay>
  
  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f003 0303 	and.w	r3, r3, #3
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b1e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b1ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b1fa:	f023 030f 	bic.w	r3, r3, #15
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	b2db      	uxtb	r3, r3
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3314      	adds	r3, #20
 800b23c:	461a      	mov	r2, r3
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	4413      	add	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
}  
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b25e:	2300      	movs	r3, #0
 800b260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b27a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b280:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b286:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b292:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	431a      	orrs	r2, r3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b29e:	2300      	movs	r3, #0

}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
 800b2b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b2ba:	2310      	movs	r3, #16
 800b2bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2be:	2340      	movs	r3, #64	; 0x40
 800b2c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2cc:	f107 0308 	add.w	r3, r7, #8
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7ff ff74 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b2d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2dc:	2110      	movs	r1, #16
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fa44 	bl	800b76c <SDMMC_GetCmdResp1>
 800b2e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2e6:	69fb      	ldr	r3, [r7, #28]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3720      	adds	r7, #32
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b2fe:	2311      	movs	r3, #17
 800b300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b302:	2340      	movs	r3, #64	; 0x40
 800b304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b306:	2300      	movs	r3, #0
 800b308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b30e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b310:	f107 0308 	add.w	r3, r7, #8
 800b314:	4619      	mov	r1, r3
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7ff ff52 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	2111      	movs	r1, #17
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f000 fa22 	bl	800b76c <SDMMC_GetCmdResp1>
 800b328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b32a:	69fb      	ldr	r3, [r7, #28]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3720      	adds	r7, #32
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b088      	sub	sp, #32
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b342:	2312      	movs	r3, #18
 800b344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b346:	2340      	movs	r3, #64	; 0x40
 800b348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b34a:	2300      	movs	r3, #0
 800b34c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b34e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b354:	f107 0308 	add.w	r3, r7, #8
 800b358:	4619      	mov	r1, r3
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f7ff ff30 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b360:	f241 3288 	movw	r2, #5000	; 0x1388
 800b364:	2112      	movs	r1, #18
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 fa00 	bl	800b76c <SDMMC_GetCmdResp1>
 800b36c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b36e:	69fb      	ldr	r3, [r7, #28]
}
 800b370:	4618      	mov	r0, r3
 800b372:	3720      	adds	r7, #32
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b386:	2318      	movs	r3, #24
 800b388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b38a:	2340      	movs	r3, #64	; 0x40
 800b38c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b38e:	2300      	movs	r3, #0
 800b390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b398:	f107 0308 	add.w	r3, r7, #8
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7ff ff0e 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a8:	2118      	movs	r1, #24
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f9de 	bl	800b76c <SDMMC_GetCmdResp1>
 800b3b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3b2:	69fb      	ldr	r3, [r7, #28]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3720      	adds	r7, #32
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b088      	sub	sp, #32
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b3ca:	2319      	movs	r3, #25
 800b3cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3ce:	2340      	movs	r3, #64	; 0x40
 800b3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3dc:	f107 0308 	add.w	r3, r7, #8
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7ff feec 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ec:	2119      	movs	r1, #25
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f9bc 	bl	800b76c <SDMMC_GetCmdResp1>
 800b3f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3f6:	69fb      	ldr	r3, [r7, #28]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3720      	adds	r7, #32
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b408:	2300      	movs	r3, #0
 800b40a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b40c:	230c      	movs	r3, #12
 800b40e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b410:	2340      	movs	r3, #64	; 0x40
 800b412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b41c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b41e:	f107 0308 	add.w	r3, r7, #8
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7ff fecb 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b42a:	4a05      	ldr	r2, [pc, #20]	; (800b440 <SDMMC_CmdStopTransfer+0x40>)
 800b42c:	210c      	movs	r1, #12
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f99c 	bl	800b76c <SDMMC_GetCmdResp1>
 800b434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b436:	69fb      	ldr	r3, [r7, #28]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3720      	adds	r7, #32
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	05f5e100 	.word	0x05f5e100

0800b444 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08a      	sub	sp, #40	; 0x28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b454:	2307      	movs	r3, #7
 800b456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b458:	2340      	movs	r3, #64	; 0x40
 800b45a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b45c:	2300      	movs	r3, #0
 800b45e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b464:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b466:	f107 0310 	add.w	r3, r7, #16
 800b46a:	4619      	mov	r1, r3
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7ff fea7 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b472:	f241 3288 	movw	r2, #5000	; 0x1388
 800b476:	2107      	movs	r1, #7
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f977 	bl	800b76c <SDMMC_GetCmdResp1>
 800b47e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b482:	4618      	mov	r0, r3
 800b484:	3728      	adds	r7, #40	; 0x28
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b088      	sub	sp, #32
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b492:	2300      	movs	r3, #0
 800b494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b49a:	2300      	movs	r3, #0
 800b49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4a8:	f107 0308 	add.w	r3, r7, #8
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7ff fe86 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f92d 	bl	800b714 <SDMMC_GetCmdError>
 800b4ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b088      	sub	sp, #32
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b4ce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b4d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b4d4:	2308      	movs	r3, #8
 800b4d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4d8:	2340      	movs	r3, #64	; 0x40
 800b4da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4e6:	f107 0308 	add.w	r3, r7, #8
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7ff fe67 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fb24 	bl	800bb40 <SDMMC_GetCmdResp7>
 800b4f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3720      	adds	r7, #32
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b512:	2337      	movs	r3, #55	; 0x37
 800b514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b516:	2340      	movs	r3, #64	; 0x40
 800b518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b51a:	2300      	movs	r3, #0
 800b51c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b51e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b522:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b524:	f107 0308 	add.w	r3, r7, #8
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff fe48 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b530:	f241 3288 	movw	r2, #5000	; 0x1388
 800b534:	2137      	movs	r1, #55	; 0x37
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f918 	bl	800b76c <SDMMC_GetCmdResp1>
 800b53c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b53e:	69fb      	ldr	r3, [r7, #28]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3720      	adds	r7, #32
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b55c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b55e:	2329      	movs	r3, #41	; 0x29
 800b560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b562:	2340      	movs	r3, #64	; 0x40
 800b564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b566:	2300      	movs	r3, #0
 800b568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b56a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b56e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b570:	f107 0308 	add.w	r3, r7, #8
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7ff fe22 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 fa2b 	bl	800b9d8 <SDMMC_GetCmdResp3>
 800b582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b584:	69fb      	ldr	r3, [r7, #28]
}
 800b586:	4618      	mov	r0, r3
 800b588:	3720      	adds	r7, #32
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b088      	sub	sp, #32
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b59c:	2306      	movs	r3, #6
 800b59e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5a0:	2340      	movs	r3, #64	; 0x40
 800b5a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5ae:	f107 0308 	add.w	r3, r7, #8
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f7ff fe03 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b5ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5be:	2106      	movs	r1, #6
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 f8d3 	bl	800b76c <SDMMC_GetCmdResp1>
 800b5c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5c8:	69fb      	ldr	r3, [r7, #28]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}

0800b5d2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b088      	sub	sp, #32
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b5de:	2333      	movs	r3, #51	; 0x33
 800b5e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5e2:	2340      	movs	r3, #64	; 0x40
 800b5e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5f0:	f107 0308 	add.w	r3, r7, #8
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f7ff fde2 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b600:	2133      	movs	r1, #51	; 0x33
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f8b2 	bl	800b76c <SDMMC_GetCmdResp1>
 800b608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b60a:	69fb      	ldr	r3, [r7, #28]
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3720      	adds	r7, #32
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b620:	2302      	movs	r3, #2
 800b622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b624:	23c0      	movs	r3, #192	; 0xc0
 800b626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b628:	2300      	movs	r3, #0
 800b62a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b632:	f107 0308 	add.w	r3, r7, #8
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff fdc1 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f982 	bl	800b948 <SDMMC_GetCmdResp2>
 800b644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b646:	69fb      	ldr	r3, [r7, #28]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3720      	adds	r7, #32
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b088      	sub	sp, #32
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b65e:	2309      	movs	r3, #9
 800b660:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b662:	23c0      	movs	r3, #192	; 0xc0
 800b664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b66e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b670:	f107 0308 	add.w	r3, r7, #8
 800b674:	4619      	mov	r1, r3
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7ff fda2 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f963 	bl	800b948 <SDMMC_GetCmdResp2>
 800b682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b684:	69fb      	ldr	r3, [r7, #28]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b088      	sub	sp, #32
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b69c:	2303      	movs	r3, #3
 800b69e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6a0:	2340      	movs	r3, #64	; 0x40
 800b6a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6ae:	f107 0308 	add.w	r3, r7, #8
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff fd83 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	2103      	movs	r1, #3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f9c8 	bl	800ba54 <SDMMC_GetCmdResp6>
 800b6c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3720      	adds	r7, #32
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b6de:	230d      	movs	r3, #13
 800b6e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6e2:	2340      	movs	r3, #64	; 0x40
 800b6e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6f0:	f107 0308 	add.w	r3, r7, #8
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7ff fd62 	bl	800b1c0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b6fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b700:	210d      	movs	r1, #13
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f832 	bl	800b76c <SDMMC_GetCmdResp1>
 800b708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b70a:	69fb      	ldr	r3, [r7, #28]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3720      	adds	r7, #32
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b71c:	4b11      	ldr	r3, [pc, #68]	; (800b764 <SDMMC_GetCmdError+0x50>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a11      	ldr	r2, [pc, #68]	; (800b768 <SDMMC_GetCmdError+0x54>)
 800b722:	fba2 2303 	umull	r2, r3, r2, r3
 800b726:	0a5b      	lsrs	r3, r3, #9
 800b728:	f241 3288 	movw	r2, #5000	; 0x1388
 800b72c:	fb02 f303 	mul.w	r3, r2, r3
 800b730:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	1e5a      	subs	r2, r3, #1
 800b736:	60fa      	str	r2, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d102      	bne.n	800b742 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b73c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b740:	e009      	b.n	800b756 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0f1      	beq.n	800b732 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	22c5      	movs	r2, #197	; 0xc5
 800b752:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	2000004c 	.word	0x2000004c
 800b768:	10624dd3 	.word	0x10624dd3

0800b76c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	460b      	mov	r3, r1
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b77a:	4b70      	ldr	r3, [pc, #448]	; (800b93c <SDMMC_GetCmdResp1+0x1d0>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a70      	ldr	r2, [pc, #448]	; (800b940 <SDMMC_GetCmdResp1+0x1d4>)
 800b780:	fba2 2303 	umull	r2, r3, r2, r3
 800b784:	0a5a      	lsrs	r2, r3, #9
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	fb02 f303 	mul.w	r3, r2, r3
 800b78c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	1e5a      	subs	r2, r3, #1
 800b792:	61fa      	str	r2, [r7, #28]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b79c:	e0c9      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d0ef      	beq.n	800b78e <SDMMC_GetCmdResp1+0x22>
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1ea      	bne.n	800b78e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7bc:	f003 0304 	and.w	r3, r3, #4
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d004      	beq.n	800b7ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2204      	movs	r2, #4
 800b7c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7ca:	2304      	movs	r3, #4
 800b7cc:	e0b1      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d004      	beq.n	800b7e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e0a6      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	22c5      	movs	r2, #197	; 0xc5
 800b7e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f7ff fd12 	bl	800b214 <SDIO_GetCommandResponse>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	7afb      	ldrb	r3, [r7, #11]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d001      	beq.n	800b7fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e099      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b7fe:	2100      	movs	r1, #0
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f7ff fd14 	bl	800b22e <SDIO_GetResponse>
 800b806:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	4b4e      	ldr	r3, [pc, #312]	; (800b944 <SDMMC_GetCmdResp1+0x1d8>)
 800b80c:	4013      	ands	r3, r2
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b812:	2300      	movs	r3, #0
 800b814:	e08d      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	da02      	bge.n	800b822 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b81c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b820:	e087      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b82c:	2340      	movs	r3, #64	; 0x40
 800b82e:	e080      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b83a:	2380      	movs	r3, #128	; 0x80
 800b83c:	e079      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b844:	2b00      	cmp	r3, #0
 800b846:	d002      	beq.n	800b84e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b84c:	e071      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d002      	beq.n	800b85e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b85c:	e069      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b86c:	e061      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d002      	beq.n	800b87e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b87c:	e059      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b88c:	e051      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b89c:	e049      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b8a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8ac:	e041      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b8b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8bc:	e039      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b8c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b8cc:	e031      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b8d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b8dc:	e029      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b8e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8ec:	e021      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b8f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b8fc:	e019      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b908:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b90c:	e011      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b918:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b91c:	e009      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f003 0308 	and.w	r3, r3, #8
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b928:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b92c:	e001      	b.n	800b932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b92e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b932:	4618      	mov	r0, r3
 800b934:	3720      	adds	r7, #32
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	2000004c 	.word	0x2000004c
 800b940:	10624dd3 	.word	0x10624dd3
 800b944:	fdffe008 	.word	0xfdffe008

0800b948 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b950:	4b1f      	ldr	r3, [pc, #124]	; (800b9d0 <SDMMC_GetCmdResp2+0x88>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a1f      	ldr	r2, [pc, #124]	; (800b9d4 <SDMMC_GetCmdResp2+0x8c>)
 800b956:	fba2 2303 	umull	r2, r3, r2, r3
 800b95a:	0a5b      	lsrs	r3, r3, #9
 800b95c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b960:	fb02 f303 	mul.w	r3, r2, r3
 800b964:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	1e5a      	subs	r2, r3, #1
 800b96a:	60fa      	str	r2, [r7, #12]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d102      	bne.n	800b976 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b970:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b974:	e026      	b.n	800b9c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b982:	2b00      	cmp	r3, #0
 800b984:	d0ef      	beq.n	800b966 <SDMMC_GetCmdResp2+0x1e>
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1ea      	bne.n	800b966 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d004      	beq.n	800b9a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2204      	movs	r2, #4
 800b9a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9a2:	2304      	movs	r3, #4
 800b9a4:	e00e      	b.n	800b9c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d004      	beq.n	800b9bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e003      	b.n	800b9c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	22c5      	movs	r2, #197	; 0xc5
 800b9c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9c2:	2300      	movs	r3, #0
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3714      	adds	r7, #20
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	2000004c 	.word	0x2000004c
 800b9d4:	10624dd3 	.word	0x10624dd3

0800b9d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9e0:	4b1a      	ldr	r3, [pc, #104]	; (800ba4c <SDMMC_GetCmdResp3+0x74>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a1a      	ldr	r2, [pc, #104]	; (800ba50 <SDMMC_GetCmdResp3+0x78>)
 800b9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ea:	0a5b      	lsrs	r3, r3, #9
 800b9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f0:	fb02 f303 	mul.w	r3, r2, r3
 800b9f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	1e5a      	subs	r2, r3, #1
 800b9fa:	60fa      	str	r2, [r7, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d102      	bne.n	800ba06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba04:	e01b      	b.n	800ba3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0ef      	beq.n	800b9f6 <SDMMC_GetCmdResp3+0x1e>
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1ea      	bne.n	800b9f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2204      	movs	r2, #4
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba32:	2304      	movs	r3, #4
 800ba34:	e003      	b.n	800ba3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	22c5      	movs	r2, #197	; 0xc5
 800ba3a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3714      	adds	r7, #20
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
 800ba4a:	bf00      	nop
 800ba4c:	2000004c 	.word	0x2000004c
 800ba50:	10624dd3 	.word	0x10624dd3

0800ba54 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba62:	4b35      	ldr	r3, [pc, #212]	; (800bb38 <SDMMC_GetCmdResp6+0xe4>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a35      	ldr	r2, [pc, #212]	; (800bb3c <SDMMC_GetCmdResp6+0xe8>)
 800ba68:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6c:	0a5b      	lsrs	r3, r3, #9
 800ba6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba72:	fb02 f303 	mul.w	r3, r2, r3
 800ba76:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	1e5a      	subs	r2, r3, #1
 800ba7c:	61fa      	str	r2, [r7, #28]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d102      	bne.n	800ba88 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba86:	e052      	b.n	800bb2e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d0ef      	beq.n	800ba78 <SDMMC_GetCmdResp6+0x24>
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1ea      	bne.n	800ba78 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baa6:	f003 0304 	and.w	r3, r3, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d004      	beq.n	800bab8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2204      	movs	r2, #4
 800bab2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bab4:	2304      	movs	r3, #4
 800bab6:	e03a      	b.n	800bb2e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babc:	f003 0301 	and.w	r3, r3, #1
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2201      	movs	r2, #1
 800bac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baca:	2301      	movs	r3, #1
 800bacc:	e02f      	b.n	800bb2e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f7ff fba0 	bl	800b214 <SDIO_GetCommandResponse>
 800bad4:	4603      	mov	r3, r0
 800bad6:	461a      	mov	r2, r3
 800bad8:	7afb      	ldrb	r3, [r7, #11]
 800bada:	4293      	cmp	r3, r2
 800badc:	d001      	beq.n	800bae2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bade:	2301      	movs	r3, #1
 800bae0:	e025      	b.n	800bb2e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	22c5      	movs	r2, #197	; 0xc5
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bae8:	2100      	movs	r1, #0
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff fb9f 	bl	800b22e <SDIO_GetResponse>
 800baf0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d106      	bne.n	800bb0a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	0c1b      	lsrs	r3, r3, #16
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bb06:	2300      	movs	r3, #0
 800bb08:	e011      	b.n	800bb2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb18:	e009      	b.n	800bb2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d002      	beq.n	800bb2a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb28:	e001      	b.n	800bb2e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3720      	adds	r7, #32
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	2000004c 	.word	0x2000004c
 800bb3c:	10624dd3 	.word	0x10624dd3

0800bb40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb48:	4b22      	ldr	r3, [pc, #136]	; (800bbd4 <SDMMC_GetCmdResp7+0x94>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a22      	ldr	r2, [pc, #136]	; (800bbd8 <SDMMC_GetCmdResp7+0x98>)
 800bb4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb52:	0a5b      	lsrs	r3, r3, #9
 800bb54:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb58:	fb02 f303 	mul.w	r3, r2, r3
 800bb5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	1e5a      	subs	r2, r3, #1
 800bb62:	60fa      	str	r2, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d102      	bne.n	800bb6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb6c:	e02c      	b.n	800bbc8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d0ef      	beq.n	800bb5e <SDMMC_GetCmdResp7+0x1e>
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d1ea      	bne.n	800bb5e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8c:	f003 0304 	and.w	r3, r3, #4
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d004      	beq.n	800bb9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2204      	movs	r2, #4
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb9a:	2304      	movs	r3, #4
 800bb9c:	e014      	b.n	800bbc8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba2:	f003 0301 	and.w	r3, r3, #1
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d004      	beq.n	800bbb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e009      	b.n	800bbc8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2240      	movs	r2, #64	; 0x40
 800bbc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bbc6:	2300      	movs	r3, #0
  
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	2000004c 	.word	0x2000004c
 800bbd8:	10624dd3 	.word	0x10624dd3

0800bbdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bbe0:	4904      	ldr	r1, [pc, #16]	; (800bbf4 <MX_FATFS_Init+0x18>)
 800bbe2:	4805      	ldr	r0, [pc, #20]	; (800bbf8 <MX_FATFS_Init+0x1c>)
 800bbe4:	f003 fa22 	bl	800f02c <FATFS_LinkDriver>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	461a      	mov	r2, r3
 800bbec:	4b03      	ldr	r3, [pc, #12]	; (800bbfc <MX_FATFS_Init+0x20>)
 800bbee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bbf0:	bf00      	nop
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	20002ac8 	.word	0x20002ac8
 800bbf8:	08014ba8 	.word	0x08014ba8
 800bbfc:	20002ac4 	.word	0x20002ac4

0800bc00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bc00:	b480      	push	{r7}
 800bc02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bc04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bc1a:	f000 f879 	bl	800bd10 <BSP_SD_IsDetected>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d001      	beq.n	800bc28 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e012      	b.n	800bc4e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bc28:	480b      	ldr	r0, [pc, #44]	; (800bc58 <BSP_SD_Init+0x48>)
 800bc2a:	f7fc f928 	bl	8007e7e <HAL_SD_Init>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d109      	bne.n	800bc4c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bc38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bc3c:	4806      	ldr	r0, [pc, #24]	; (800bc58 <BSP_SD_Init+0x48>)
 800bc3e:	f7fc ff01 	bl	8008a44 <HAL_SD_ConfigWideBusOperation>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d001      	beq.n	800bc4c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20002958 	.word	0x20002958

0800bc5c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b088      	sub	sp, #32
 800bc60:	af02      	add	r7, sp, #8
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	607a      	str	r2, [r7, #4]
 800bc68:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	68f9      	ldr	r1, [r7, #12]
 800bc78:	4806      	ldr	r0, [pc, #24]	; (800bc94 <BSP_SD_ReadBlocks+0x38>)
 800bc7a:	f7fc f9af 	bl	8007fdc <HAL_SD_ReadBlocks>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20002958 	.word	0x20002958

0800bc98 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	68ba      	ldr	r2, [r7, #8]
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	4806      	ldr	r0, [pc, #24]	; (800bcd0 <BSP_SD_WriteBlocks+0x38>)
 800bcb6:	f7fc fb6f 	bl	8008398 <HAL_SD_WriteBlocks>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20002958 	.word	0x20002958

0800bcd4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bcd8:	4805      	ldr	r0, [pc, #20]	; (800bcf0 <BSP_SD_GetCardState+0x1c>)
 800bcda:	f7fc ff4d 	bl	8008b78 <HAL_SD_GetCardState>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	bf14      	ite	ne
 800bce4:	2301      	movne	r3, #1
 800bce6:	2300      	moveq	r3, #0
 800bce8:	b2db      	uxtb	r3, r3
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20002958 	.word	0x20002958

0800bcf4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bcfc:	6879      	ldr	r1, [r7, #4]
 800bcfe:	4803      	ldr	r0, [pc, #12]	; (800bd0c <BSP_SD_GetCardInfo+0x18>)
 800bd00:	f7fc fe74 	bl	80089ec <HAL_SD_GetCardInfo>
}
 800bd04:	bf00      	nop
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	20002958 	.word	0x20002958

0800bd10 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bd16:	2301      	movs	r3, #1
 800bd18:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	b2db      	uxtb	r3, r3
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
	...

0800bd2c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	4603      	mov	r3, r0
 800bd34:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <SD_CheckStatus+0x38>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bd3c:	f7ff ffca 	bl	800bcd4 <BSP_SD_GetCardState>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d107      	bne.n	800bd56 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bd46:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <SD_CheckStatus+0x38>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	f023 0301 	bic.w	r3, r3, #1
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	4b04      	ldr	r3, [pc, #16]	; (800bd64 <SD_CheckStatus+0x38>)
 800bd54:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bd56:	4b03      	ldr	r3, [pc, #12]	; (800bd64 <SD_CheckStatus+0x38>)
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	b2db      	uxtb	r3, r3
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	20000055 	.word	0x20000055

0800bd68 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bd72:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <SD_initialize+0x38>)
 800bd74:	2201      	movs	r2, #1
 800bd76:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bd78:	f7ff ff4a 	bl	800bc10 <BSP_SD_Init>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d107      	bne.n	800bd92 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bd82:	79fb      	ldrb	r3, [r7, #7]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff ffd1 	bl	800bd2c <SD_CheckStatus>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <SD_initialize+0x38>)
 800bd90:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bd92:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <SD_initialize+0x38>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	b2db      	uxtb	r3, r3
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	20000055 	.word	0x20000055

0800bda4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff ffbb 	bl	800bd2c <SD_CheckStatus>
 800bdb6:	4603      	mov	r3, r0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60b9      	str	r1, [r7, #8]
 800bdc8:	607a      	str	r2, [r7, #4]
 800bdca:	603b      	str	r3, [r7, #0]
 800bdcc:	4603      	mov	r3, r0
 800bdce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd8:	683a      	ldr	r2, [r7, #0]
 800bdda:	6879      	ldr	r1, [r7, #4]
 800bddc:	68b8      	ldr	r0, [r7, #8]
 800bdde:	f7ff ff3d 	bl	800bc5c <BSP_SD_ReadBlocks>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d107      	bne.n	800bdf8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bde8:	bf00      	nop
 800bdea:	f7ff ff73 	bl	800bcd4 <BSP_SD_GetCardState>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1fa      	bne.n	800bdea <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3718      	adds	r7, #24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b086      	sub	sp, #24
 800be06:	af00      	add	r7, sp, #0
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800be16:	f04f 33ff 	mov.w	r3, #4294967295
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	68b8      	ldr	r0, [r7, #8]
 800be20:	f7ff ff3a 	bl	800bc98 <BSP_SD_WriteBlocks>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d107      	bne.n	800be3a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800be2a:	bf00      	nop
 800be2c:	f7ff ff52 	bl	800bcd4 <BSP_SD_GetCardState>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d1fa      	bne.n	800be2c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3718      	adds	r7, #24
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b08c      	sub	sp, #48	; 0x30
 800be48:	af00      	add	r7, sp, #0
 800be4a:	4603      	mov	r3, r0
 800be4c:	603a      	str	r2, [r7, #0]
 800be4e:	71fb      	strb	r3, [r7, #7]
 800be50:	460b      	mov	r3, r1
 800be52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be5a:	4b25      	ldr	r3, [pc, #148]	; (800bef0 <SD_ioctl+0xac>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	f003 0301 	and.w	r3, r3, #1
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <SD_ioctl+0x28>
 800be68:	2303      	movs	r3, #3
 800be6a:	e03c      	b.n	800bee6 <SD_ioctl+0xa2>

  switch (cmd)
 800be6c:	79bb      	ldrb	r3, [r7, #6]
 800be6e:	2b03      	cmp	r3, #3
 800be70:	d834      	bhi.n	800bedc <SD_ioctl+0x98>
 800be72:	a201      	add	r2, pc, #4	; (adr r2, 800be78 <SD_ioctl+0x34>)
 800be74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be78:	0800be89 	.word	0x0800be89
 800be7c:	0800be91 	.word	0x0800be91
 800be80:	0800bea9 	.word	0x0800bea9
 800be84:	0800bec3 	.word	0x0800bec3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be8e:	e028      	b.n	800bee2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800be90:	f107 030c 	add.w	r3, r7, #12
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff ff2d 	bl	800bcf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800be9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bea0:	2300      	movs	r3, #0
 800bea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bea6:	e01c      	b.n	800bee2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bea8:	f107 030c 	add.w	r3, r7, #12
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff ff21 	bl	800bcf4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800beb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bec0:	e00f      	b.n	800bee2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bec2:	f107 030c 	add.w	r3, r7, #12
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7ff ff14 	bl	800bcf4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	0a5a      	lsrs	r2, r3, #9
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beda:	e002      	b.n	800bee2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bedc:	2304      	movs	r3, #4
 800bede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3730      	adds	r7, #48	; 0x30
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20000055 	.word	0x20000055

0800bef4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	4603      	mov	r3, r0
 800befc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800befe:	79fb      	ldrb	r3, [r7, #7]
 800bf00:	4a08      	ldr	r2, [pc, #32]	; (800bf24 <disk_status+0x30>)
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	4413      	add	r3, r2
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	79fa      	ldrb	r2, [r7, #7]
 800bf0c:	4905      	ldr	r1, [pc, #20]	; (800bf24 <disk_status+0x30>)
 800bf0e:	440a      	add	r2, r1
 800bf10:	7a12      	ldrb	r2, [r2, #8]
 800bf12:	4610      	mov	r0, r2
 800bf14:	4798      	blx	r3
 800bf16:	4603      	mov	r3, r0
 800bf18:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	20000488 	.word	0x20000488

0800bf28 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	4603      	mov	r3, r0
 800bf30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bf36:	79fb      	ldrb	r3, [r7, #7]
 800bf38:	4a0d      	ldr	r2, [pc, #52]	; (800bf70 <disk_initialize+0x48>)
 800bf3a:	5cd3      	ldrb	r3, [r2, r3]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d111      	bne.n	800bf64 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bf40:	79fb      	ldrb	r3, [r7, #7]
 800bf42:	4a0b      	ldr	r2, [pc, #44]	; (800bf70 <disk_initialize+0x48>)
 800bf44:	2101      	movs	r1, #1
 800bf46:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bf48:	79fb      	ldrb	r3, [r7, #7]
 800bf4a:	4a09      	ldr	r2, [pc, #36]	; (800bf70 <disk_initialize+0x48>)
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	4413      	add	r3, r2
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	79fa      	ldrb	r2, [r7, #7]
 800bf56:	4906      	ldr	r1, [pc, #24]	; (800bf70 <disk_initialize+0x48>)
 800bf58:	440a      	add	r2, r1
 800bf5a:	7a12      	ldrb	r2, [r2, #8]
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	4603      	mov	r3, r0
 800bf62:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3710      	adds	r7, #16
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	20000488 	.word	0x20000488

0800bf74 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf74:	b590      	push	{r4, r7, lr}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	607a      	str	r2, [r7, #4]
 800bf7e:	603b      	str	r3, [r7, #0]
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	4a0a      	ldr	r2, [pc, #40]	; (800bfb0 <disk_read+0x3c>)
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	4413      	add	r3, r2
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	689c      	ldr	r4, [r3, #8]
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	4a07      	ldr	r2, [pc, #28]	; (800bfb0 <disk_read+0x3c>)
 800bf94:	4413      	add	r3, r2
 800bf96:	7a18      	ldrb	r0, [r3, #8]
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	68b9      	ldr	r1, [r7, #8]
 800bf9e:	47a0      	blx	r4
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	371c      	adds	r7, #28
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd90      	pop	{r4, r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	20000488 	.word	0x20000488

0800bfb4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bfb4:	b590      	push	{r4, r7, lr}
 800bfb6:	b087      	sub	sp, #28
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60b9      	str	r1, [r7, #8]
 800bfbc:	607a      	str	r2, [r7, #4]
 800bfbe:	603b      	str	r3, [r7, #0]
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
 800bfc6:	4a0a      	ldr	r2, [pc, #40]	; (800bff0 <disk_write+0x3c>)
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	68dc      	ldr	r4, [r3, #12]
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	4a07      	ldr	r2, [pc, #28]	; (800bff0 <disk_write+0x3c>)
 800bfd4:	4413      	add	r3, r2
 800bfd6:	7a18      	ldrb	r0, [r3, #8]
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	47a0      	blx	r4
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bfe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	371c      	adds	r7, #28
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd90      	pop	{r4, r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20000488 	.word	0x20000488

0800bff4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	4603      	mov	r3, r0
 800bffc:	603a      	str	r2, [r7, #0]
 800bffe:	71fb      	strb	r3, [r7, #7]
 800c000:	460b      	mov	r3, r1
 800c002:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c004:	79fb      	ldrb	r3, [r7, #7]
 800c006:	4a09      	ldr	r2, [pc, #36]	; (800c02c <disk_ioctl+0x38>)
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	79fa      	ldrb	r2, [r7, #7]
 800c012:	4906      	ldr	r1, [pc, #24]	; (800c02c <disk_ioctl+0x38>)
 800c014:	440a      	add	r2, r1
 800c016:	7a10      	ldrb	r0, [r2, #8]
 800c018:	79b9      	ldrb	r1, [r7, #6]
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	4798      	blx	r3
 800c01e:	4603      	mov	r3, r0
 800c020:	73fb      	strb	r3, [r7, #15]
  return res;
 800c022:	7bfb      	ldrb	r3, [r7, #15]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	20000488 	.word	0x20000488

0800c030 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3301      	adds	r3, #1
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c040:	89fb      	ldrh	r3, [r7, #14]
 800c042:	021b      	lsls	r3, r3, #8
 800c044:	b21a      	sxth	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	b21b      	sxth	r3, r3
 800c04c:	4313      	orrs	r3, r2
 800c04e:	b21b      	sxth	r3, r3
 800c050:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c052:	89fb      	ldrh	r3, [r7, #14]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3303      	adds	r3, #3
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	021b      	lsls	r3, r3, #8
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	3202      	adds	r2, #2
 800c078:	7812      	ldrb	r2, [r2, #0]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	021b      	lsls	r3, r3, #8
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	3201      	adds	r2, #1
 800c086:	7812      	ldrb	r2, [r2, #0]
 800c088:	4313      	orrs	r3, r2
 800c08a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	7812      	ldrb	r2, [r2, #0]
 800c094:	4313      	orrs	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
	return rv;
 800c098:	68fb      	ldr	r3, [r7, #12]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3714      	adds	r7, #20
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	1c5a      	adds	r2, r3, #1
 800c0b6:	607a      	str	r2, [r7, #4]
 800c0b8:	887a      	ldrh	r2, [r7, #2]
 800c0ba:	b2d2      	uxtb	r2, r2
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	887b      	ldrh	r3, [r7, #2]
 800c0c0:	0a1b      	lsrs	r3, r3, #8
 800c0c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	1c5a      	adds	r2, r3, #1
 800c0c8:	607a      	str	r2, [r7, #4]
 800c0ca:	887a      	ldrh	r2, [r7, #2]
 800c0cc:	b2d2      	uxtb	r2, r2
 800c0ce:	701a      	strb	r2, [r3, #0]
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	1c5a      	adds	r2, r3, #1
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	b2d2      	uxtb	r2, r2
 800c0f0:	701a      	strb	r2, [r3, #0]
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	0a1b      	lsrs	r3, r3, #8
 800c0f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	1c5a      	adds	r2, r3, #1
 800c0fc:	607a      	str	r2, [r7, #4]
 800c0fe:	683a      	ldr	r2, [r7, #0]
 800c100:	b2d2      	uxtb	r2, r2
 800c102:	701a      	strb	r2, [r3, #0]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	0a1b      	lsrs	r3, r3, #8
 800c108:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	683a      	ldr	r2, [r7, #0]
 800c112:	b2d2      	uxtb	r2, r2
 800c114:	701a      	strb	r2, [r3, #0]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	0a1b      	lsrs	r3, r3, #8
 800c11a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	607a      	str	r2, [r7, #4]
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	b2d2      	uxtb	r2, r2
 800c126:	701a      	strb	r2, [r3, #0]
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00d      	beq.n	800c16a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	1c53      	adds	r3, r2, #1
 800c152:	613b      	str	r3, [r7, #16]
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	1c59      	adds	r1, r3, #1
 800c158:	6179      	str	r1, [r7, #20]
 800c15a:	7812      	ldrb	r2, [r2, #0]
 800c15c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3b01      	subs	r3, #1
 800c162:	607b      	str	r3, [r7, #4]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1f1      	bne.n	800c14e <mem_cpy+0x1a>
	}
}
 800c16a:	bf00      	nop
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c176:	b480      	push	{r7}
 800c178:	b087      	sub	sp, #28
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	1c5a      	adds	r2, r3, #1
 800c18a:	617a      	str	r2, [r7, #20]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	b2d2      	uxtb	r2, r2
 800c190:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	3b01      	subs	r3, #1
 800c196:	607b      	str	r3, [r7, #4]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1f3      	bne.n	800c186 <mem_set+0x10>
}
 800c19e:	bf00      	nop
 800c1a0:	bf00      	nop
 800c1a2:	371c      	adds	r7, #28
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c1ac:	b480      	push	{r7}
 800c1ae:	b089      	sub	sp, #36	; 0x24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	61fb      	str	r3, [r7, #28]
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	61fa      	str	r2, [r7, #28]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	4619      	mov	r1, r3
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	61ba      	str	r2, [r7, #24]
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	1acb      	subs	r3, r1, r3
 800c1d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	607b      	str	r3, [r7, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <mem_cmp+0x40>
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d0eb      	beq.n	800c1c4 <mem_cmp+0x18>

	return r;
 800c1ec:	697b      	ldr	r3, [r7, #20]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3724      	adds	r7, #36	; 0x24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr

0800c1fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c1fa:	b480      	push	{r7}
 800c1fc:	b083      	sub	sp, #12
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c204:	e002      	b.n	800c20c <chk_chr+0x12>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3301      	adds	r3, #1
 800c20a:	607b      	str	r3, [r7, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d005      	beq.n	800c220 <chk_chr+0x26>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	461a      	mov	r2, r3
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d1f2      	bne.n	800c206 <chk_chr+0xc>
	return *str;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	781b      	ldrb	r3, [r3, #0]
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c23a:	2300      	movs	r3, #0
 800c23c:	60bb      	str	r3, [r7, #8]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	e029      	b.n	800c298 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c244:	4a27      	ldr	r2, [pc, #156]	; (800c2e4 <chk_lock+0xb4>)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	011b      	lsls	r3, r3, #4
 800c24a:	4413      	add	r3, r2
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d01d      	beq.n	800c28e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c252:	4a24      	ldr	r2, [pc, #144]	; (800c2e4 <chk_lock+0xb4>)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	011b      	lsls	r3, r3, #4
 800c258:	4413      	add	r3, r2
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	d116      	bne.n	800c292 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c264:	4a1f      	ldr	r2, [pc, #124]	; (800c2e4 <chk_lock+0xb4>)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	011b      	lsls	r3, r3, #4
 800c26a:	4413      	add	r3, r2
 800c26c:	3304      	adds	r3, #4
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c274:	429a      	cmp	r2, r3
 800c276:	d10c      	bne.n	800c292 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c278:	4a1a      	ldr	r2, [pc, #104]	; (800c2e4 <chk_lock+0xb4>)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	011b      	lsls	r3, r3, #4
 800c27e:	4413      	add	r3, r2
 800c280:	3308      	adds	r3, #8
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c288:	429a      	cmp	r2, r3
 800c28a:	d102      	bne.n	800c292 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c28c:	e007      	b.n	800c29e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c28e:	2301      	movs	r3, #1
 800c290:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	3301      	adds	r3, #1
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d9d2      	bls.n	800c244 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d109      	bne.n	800c2b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d102      	bne.n	800c2b0 <chk_lock+0x80>
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b02      	cmp	r3, #2
 800c2ae:	d101      	bne.n	800c2b4 <chk_lock+0x84>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	e010      	b.n	800c2d6 <chk_lock+0xa6>
 800c2b4:	2312      	movs	r3, #18
 800c2b6:	e00e      	b.n	800c2d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d108      	bne.n	800c2d0 <chk_lock+0xa0>
 800c2be:	4a09      	ldr	r2, [pc, #36]	; (800c2e4 <chk_lock+0xb4>)
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	4413      	add	r3, r2
 800c2c6:	330c      	adds	r3, #12
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2ce:	d101      	bne.n	800c2d4 <chk_lock+0xa4>
 800c2d0:	2310      	movs	r3, #16
 800c2d2:	e000      	b.n	800c2d6 <chk_lock+0xa6>
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	20000268 	.word	0x20000268

0800c2e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	607b      	str	r3, [r7, #4]
 800c2f2:	e002      	b.n	800c2fa <enq_lock+0x12>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	607b      	str	r3, [r7, #4]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d806      	bhi.n	800c30e <enq_lock+0x26>
 800c300:	4a09      	ldr	r2, [pc, #36]	; (800c328 <enq_lock+0x40>)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	011b      	lsls	r3, r3, #4
 800c306:	4413      	add	r3, r2
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1f2      	bne.n	800c2f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2b02      	cmp	r3, #2
 800c312:	bf14      	ite	ne
 800c314:	2301      	movne	r3, #1
 800c316:	2300      	moveq	r3, #0
 800c318:	b2db      	uxtb	r3, r3
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	370c      	adds	r7, #12
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	20000268 	.word	0x20000268

0800c32c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c336:	2300      	movs	r3, #0
 800c338:	60fb      	str	r3, [r7, #12]
 800c33a:	e01f      	b.n	800c37c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c33c:	4a41      	ldr	r2, [pc, #260]	; (800c444 <inc_lock+0x118>)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	011b      	lsls	r3, r3, #4
 800c342:	4413      	add	r3, r2
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d113      	bne.n	800c376 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c34e:	4a3d      	ldr	r2, [pc, #244]	; (800c444 <inc_lock+0x118>)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	011b      	lsls	r3, r3, #4
 800c354:	4413      	add	r3, r2
 800c356:	3304      	adds	r3, #4
 800c358:	681a      	ldr	r2, [r3, #0]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c35e:	429a      	cmp	r2, r3
 800c360:	d109      	bne.n	800c376 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c362:	4a38      	ldr	r2, [pc, #224]	; (800c444 <inc_lock+0x118>)
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	011b      	lsls	r3, r3, #4
 800c368:	4413      	add	r3, r2
 800c36a:	3308      	adds	r3, #8
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c372:	429a      	cmp	r2, r3
 800c374:	d006      	beq.n	800c384 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	3301      	adds	r3, #1
 800c37a:	60fb      	str	r3, [r7, #12]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d9dc      	bls.n	800c33c <inc_lock+0x10>
 800c382:	e000      	b.n	800c386 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c384:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d132      	bne.n	800c3f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c38c:	2300      	movs	r3, #0
 800c38e:	60fb      	str	r3, [r7, #12]
 800c390:	e002      	b.n	800c398 <inc_lock+0x6c>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3301      	adds	r3, #1
 800c396:	60fb      	str	r3, [r7, #12]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d806      	bhi.n	800c3ac <inc_lock+0x80>
 800c39e:	4a29      	ldr	r2, [pc, #164]	; (800c444 <inc_lock+0x118>)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	4413      	add	r3, r2
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1f2      	bne.n	800c392 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	d101      	bne.n	800c3b6 <inc_lock+0x8a>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	e040      	b.n	800c438 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	4922      	ldr	r1, [pc, #136]	; (800c444 <inc_lock+0x118>)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	011b      	lsls	r3, r3, #4
 800c3c0:	440b      	add	r3, r1
 800c3c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	689a      	ldr	r2, [r3, #8]
 800c3c8:	491e      	ldr	r1, [pc, #120]	; (800c444 <inc_lock+0x118>)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	011b      	lsls	r3, r3, #4
 800c3ce:	440b      	add	r3, r1
 800c3d0:	3304      	adds	r3, #4
 800c3d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	695a      	ldr	r2, [r3, #20]
 800c3d8:	491a      	ldr	r1, [pc, #104]	; (800c444 <inc_lock+0x118>)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	011b      	lsls	r3, r3, #4
 800c3de:	440b      	add	r3, r1
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c3e4:	4a17      	ldr	r2, [pc, #92]	; (800c444 <inc_lock+0x118>)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	011b      	lsls	r3, r3, #4
 800c3ea:	4413      	add	r3, r2
 800c3ec:	330c      	adds	r3, #12
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d009      	beq.n	800c40c <inc_lock+0xe0>
 800c3f8:	4a12      	ldr	r2, [pc, #72]	; (800c444 <inc_lock+0x118>)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	011b      	lsls	r3, r3, #4
 800c3fe:	4413      	add	r3, r2
 800c400:	330c      	adds	r3, #12
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <inc_lock+0xe0>
 800c408:	2300      	movs	r3, #0
 800c40a:	e015      	b.n	800c438 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d108      	bne.n	800c424 <inc_lock+0xf8>
 800c412:	4a0c      	ldr	r2, [pc, #48]	; (800c444 <inc_lock+0x118>)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	4413      	add	r3, r2
 800c41a:	330c      	adds	r3, #12
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	3301      	adds	r3, #1
 800c420:	b29a      	uxth	r2, r3
 800c422:	e001      	b.n	800c428 <inc_lock+0xfc>
 800c424:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c428:	4906      	ldr	r1, [pc, #24]	; (800c444 <inc_lock+0x118>)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	011b      	lsls	r3, r3, #4
 800c42e:	440b      	add	r3, r1
 800c430:	330c      	adds	r3, #12
 800c432:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	3301      	adds	r3, #1
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3714      	adds	r7, #20
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr
 800c444:	20000268 	.word	0x20000268

0800c448 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	3b01      	subs	r3, #1
 800c454:	607b      	str	r3, [r7, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d825      	bhi.n	800c4a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800c45c:	4a17      	ldr	r2, [pc, #92]	; (800c4bc <dec_lock+0x74>)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	011b      	lsls	r3, r3, #4
 800c462:	4413      	add	r3, r2
 800c464:	330c      	adds	r3, #12
 800c466:	881b      	ldrh	r3, [r3, #0]
 800c468:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c46a:	89fb      	ldrh	r3, [r7, #14]
 800c46c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c470:	d101      	bne.n	800c476 <dec_lock+0x2e>
 800c472:	2300      	movs	r3, #0
 800c474:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c476:	89fb      	ldrh	r3, [r7, #14]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <dec_lock+0x3a>
 800c47c:	89fb      	ldrh	r3, [r7, #14]
 800c47e:	3b01      	subs	r3, #1
 800c480:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c482:	4a0e      	ldr	r2, [pc, #56]	; (800c4bc <dec_lock+0x74>)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	011b      	lsls	r3, r3, #4
 800c488:	4413      	add	r3, r2
 800c48a:	330c      	adds	r3, #12
 800c48c:	89fa      	ldrh	r2, [r7, #14]
 800c48e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c490:	89fb      	ldrh	r3, [r7, #14]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d105      	bne.n	800c4a2 <dec_lock+0x5a>
 800c496:	4a09      	ldr	r2, [pc, #36]	; (800c4bc <dec_lock+0x74>)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	011b      	lsls	r3, r3, #4
 800c49c:	4413      	add	r3, r2
 800c49e:	2200      	movs	r2, #0
 800c4a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	737b      	strb	r3, [r7, #13]
 800c4a6:	e001      	b.n	800c4ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c4ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3714      	adds	r7, #20
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20000268 	.word	0x20000268

0800c4c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]
 800c4cc:	e010      	b.n	800c4f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c4ce:	4a0d      	ldr	r2, [pc, #52]	; (800c504 <clear_lock+0x44>)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	011b      	lsls	r3, r3, #4
 800c4d4:	4413      	add	r3, r2
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d105      	bne.n	800c4ea <clear_lock+0x2a>
 800c4de:	4a09      	ldr	r2, [pc, #36]	; (800c504 <clear_lock+0x44>)
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	011b      	lsls	r3, r3, #4
 800c4e4:	4413      	add	r3, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	60fb      	str	r3, [r7, #12]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d9eb      	bls.n	800c4ce <clear_lock+0xe>
	}
}
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	20000268 	.word	0x20000268

0800c508 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c510:	2300      	movs	r3, #0
 800c512:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	78db      	ldrb	r3, [r3, #3]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d034      	beq.n	800c586 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c520:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	7858      	ldrb	r0, [r3, #1]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c52c:	2301      	movs	r3, #1
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	f7ff fd40 	bl	800bfb4 <disk_write>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d002      	beq.n	800c540 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	73fb      	strb	r3, [r7, #15]
 800c53e:	e022      	b.n	800c586 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	1ad2      	subs	r2, r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	429a      	cmp	r2, r3
 800c554:	d217      	bcs.n	800c586 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	789b      	ldrb	r3, [r3, #2]
 800c55a:	613b      	str	r3, [r7, #16]
 800c55c:	e010      	b.n	800c580 <sync_window+0x78>
					wsect += fs->fsize;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	4413      	add	r3, r2
 800c566:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7858      	ldrb	r0, [r3, #1]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c572:	2301      	movs	r3, #1
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	f7ff fd1d 	bl	800bfb4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	613b      	str	r3, [r7, #16]
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d8eb      	bhi.n	800c55e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c586:	7bfb      	ldrb	r3, [r7, #15]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3718      	adds	r7, #24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d01b      	beq.n	800c5e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7ff ffad 	bl	800c508 <sync_window>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c5b2:	7bfb      	ldrb	r3, [r7, #15]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d113      	bne.n	800c5e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7858      	ldrb	r0, [r3, #1]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	683a      	ldr	r2, [r7, #0]
 800c5c6:	f7ff fcd5 	bl	800bf74 <disk_read>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d004      	beq.n	800c5da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
	...

0800c5ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff ff87 	bl	800c508 <sync_window>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d159      	bne.n	800c6b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	2b03      	cmp	r3, #3
 800c60a:	d149      	bne.n	800c6a0 <sync_fs+0xb4>
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	791b      	ldrb	r3, [r3, #4]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d145      	bne.n	800c6a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	899b      	ldrh	r3, [r3, #12]
 800c61e:	461a      	mov	r2, r3
 800c620:	2100      	movs	r1, #0
 800c622:	f7ff fda8 	bl	800c176 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	3338      	adds	r3, #56	; 0x38
 800c62a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c62e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff fd37 	bl	800c0a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	3338      	adds	r3, #56	; 0x38
 800c63c:	4921      	ldr	r1, [pc, #132]	; (800c6c4 <sync_fs+0xd8>)
 800c63e:	4618      	mov	r0, r3
 800c640:	f7ff fd4c 	bl	800c0dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3338      	adds	r3, #56	; 0x38
 800c648:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c64c:	491e      	ldr	r1, [pc, #120]	; (800c6c8 <sync_fs+0xdc>)
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff fd44 	bl	800c0dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	3338      	adds	r3, #56	; 0x38
 800c658:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	699b      	ldr	r3, [r3, #24]
 800c660:	4619      	mov	r1, r3
 800c662:	4610      	mov	r0, r2
 800c664:	f7ff fd3a 	bl	800c0dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	3338      	adds	r3, #56	; 0x38
 800c66c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	4619      	mov	r1, r3
 800c676:	4610      	mov	r0, r2
 800c678:	f7ff fd30 	bl	800c0dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c680:	1c5a      	adds	r2, r3, #1
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	7858      	ldrb	r0, [r3, #1]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c694:	2301      	movs	r3, #1
 800c696:	f7ff fc8d 	bl	800bfb4 <disk_write>
			fs->fsi_flag = 0;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	785b      	ldrb	r3, [r3, #1]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7ff fca3 	bl	800bff4 <disk_ioctl>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <sync_fs+0xcc>
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	41615252 	.word	0x41615252
 800c6c8:	61417272 	.word	0x61417272

0800c6cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	3b02      	subs	r3, #2
 800c6da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	3b02      	subs	r3, #2
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d301      	bcc.n	800c6ec <clust2sect+0x20>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	e008      	b.n	800c6fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	895b      	ldrh	r3, [r3, #10]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	fb03 f202 	mul.w	r2, r3, r2
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6fc:	4413      	add	r3, r2
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	370c      	adds	r7, #12
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b086      	sub	sp, #24
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d904      	bls.n	800c72a <get_fat+0x20>
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	69db      	ldr	r3, [r3, #28]
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	429a      	cmp	r2, r3
 800c728:	d302      	bcc.n	800c730 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c72a:	2301      	movs	r3, #1
 800c72c:	617b      	str	r3, [r7, #20]
 800c72e:	e0bb      	b.n	800c8a8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c730:	f04f 33ff 	mov.w	r3, #4294967295
 800c734:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2b03      	cmp	r3, #3
 800c73c:	f000 8083 	beq.w	800c846 <get_fat+0x13c>
 800c740:	2b03      	cmp	r3, #3
 800c742:	f300 80a7 	bgt.w	800c894 <get_fat+0x18a>
 800c746:	2b01      	cmp	r3, #1
 800c748:	d002      	beq.n	800c750 <get_fat+0x46>
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d056      	beq.n	800c7fc <get_fat+0xf2>
 800c74e:	e0a1      	b.n	800c894 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	60fb      	str	r3, [r7, #12]
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	085b      	lsrs	r3, r3, #1
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	4413      	add	r3, r2
 800c75c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	899b      	ldrh	r3, [r3, #12]
 800c766:	4619      	mov	r1, r3
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c76e:	4413      	add	r3, r2
 800c770:	4619      	mov	r1, r3
 800c772:	6938      	ldr	r0, [r7, #16]
 800c774:	f7ff ff0c 	bl	800c590 <move_window>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f040 808d 	bne.w	800c89a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	60fa      	str	r2, [r7, #12]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	8992      	ldrh	r2, [r2, #12]
 800c78a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c78e:	fb02 f201 	mul.w	r2, r2, r1
 800c792:	1a9b      	subs	r3, r3, r2
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	4413      	add	r3, r2
 800c798:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c79c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	899b      	ldrh	r3, [r3, #12]
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	6938      	ldr	r0, [r7, #16]
 800c7b4:	f7ff feec 	bl	800c590 <move_window>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d16f      	bne.n	800c89e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	899b      	ldrh	r3, [r3, #12]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7ca:	fb02 f201 	mul.w	r2, r2, r1
 800c7ce:	1a9b      	subs	r3, r3, r2
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7d8:	021b      	lsls	r3, r3, #8
 800c7da:	461a      	mov	r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	f003 0301 	and.w	r3, r3, #1
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d002      	beq.n	800c7f2 <get_fat+0xe8>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	091b      	lsrs	r3, r3, #4
 800c7f0:	e002      	b.n	800c7f8 <get_fat+0xee>
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7f8:	617b      	str	r3, [r7, #20]
			break;
 800c7fa:	e055      	b.n	800c8a8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	899b      	ldrh	r3, [r3, #12]
 800c804:	085b      	lsrs	r3, r3, #1
 800c806:	b29b      	uxth	r3, r3
 800c808:	4619      	mov	r1, r3
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c810:	4413      	add	r3, r2
 800c812:	4619      	mov	r1, r3
 800c814:	6938      	ldr	r0, [r7, #16]
 800c816:	f7ff febb 	bl	800c590 <move_window>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d140      	bne.n	800c8a2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	005b      	lsls	r3, r3, #1
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	8992      	ldrh	r2, [r2, #12]
 800c82e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c832:	fb02 f200 	mul.w	r2, r2, r0
 800c836:	1a9b      	subs	r3, r3, r2
 800c838:	440b      	add	r3, r1
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff fbf8 	bl	800c030 <ld_word>
 800c840:	4603      	mov	r3, r0
 800c842:	617b      	str	r3, [r7, #20]
			break;
 800c844:	e030      	b.n	800c8a8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	899b      	ldrh	r3, [r3, #12]
 800c84e:	089b      	lsrs	r3, r3, #2
 800c850:	b29b      	uxth	r3, r3
 800c852:	4619      	mov	r1, r3
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	fbb3 f3f1 	udiv	r3, r3, r1
 800c85a:	4413      	add	r3, r2
 800c85c:	4619      	mov	r1, r3
 800c85e:	6938      	ldr	r0, [r7, #16]
 800c860:	f7ff fe96 	bl	800c590 <move_window>
 800c864:	4603      	mov	r3, r0
 800c866:	2b00      	cmp	r3, #0
 800c868:	d11d      	bne.n	800c8a6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	8992      	ldrh	r2, [r2, #12]
 800c878:	fbb3 f0f2 	udiv	r0, r3, r2
 800c87c:	fb02 f200 	mul.w	r2, r2, r0
 800c880:	1a9b      	subs	r3, r3, r2
 800c882:	440b      	add	r3, r1
 800c884:	4618      	mov	r0, r3
 800c886:	f7ff fbeb 	bl	800c060 <ld_dword>
 800c88a:	4603      	mov	r3, r0
 800c88c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c890:	617b      	str	r3, [r7, #20]
			break;
 800c892:	e009      	b.n	800c8a8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c894:	2301      	movs	r3, #1
 800c896:	617b      	str	r3, [r7, #20]
 800c898:	e006      	b.n	800c8a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c89a:	bf00      	nop
 800c89c:	e004      	b.n	800c8a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c89e:	bf00      	nop
 800c8a0:	e002      	b.n	800c8a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c8a2:	bf00      	nop
 800c8a4:	e000      	b.n	800c8a8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c8a6:	bf00      	nop
		}
	}

	return val;
 800c8a8:	697b      	ldr	r3, [r7, #20]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3718      	adds	r7, #24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}

0800c8b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c8b2:	b590      	push	{r4, r7, lr}
 800c8b4:	b089      	sub	sp, #36	; 0x24
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	60f8      	str	r0, [r7, #12]
 800c8ba:	60b9      	str	r1, [r7, #8]
 800c8bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c8be:	2302      	movs	r3, #2
 800c8c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	f240 8102 	bls.w	800cace <put_fat+0x21c>
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	69db      	ldr	r3, [r3, #28]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	f080 80fc 	bcs.w	800cace <put_fat+0x21c>
		switch (fs->fs_type) {
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	f000 80b6 	beq.w	800ca4c <put_fat+0x19a>
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	f300 80fd 	bgt.w	800cae0 <put_fat+0x22e>
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d003      	beq.n	800c8f2 <put_fat+0x40>
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	f000 8083 	beq.w	800c9f6 <put_fat+0x144>
 800c8f0:	e0f6      	b.n	800cae0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	61bb      	str	r3, [r7, #24]
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	085b      	lsrs	r3, r3, #1
 800c8fa:	69ba      	ldr	r2, [r7, #24]
 800c8fc:	4413      	add	r3, r2
 800c8fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	899b      	ldrh	r3, [r3, #12]
 800c908:	4619      	mov	r1, r3
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c910:	4413      	add	r3, r2
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff fe3b 	bl	800c590 <move_window>
 800c91a:	4603      	mov	r3, r0
 800c91c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c91e:	7ffb      	ldrb	r3, [r7, #31]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f040 80d6 	bne.w	800cad2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	61ba      	str	r2, [r7, #24]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	8992      	ldrh	r2, [r2, #12]
 800c936:	fbb3 f0f2 	udiv	r0, r3, r2
 800c93a:	fb02 f200 	mul.w	r2, r2, r0
 800c93e:	1a9b      	subs	r3, r3, r2
 800c940:	440b      	add	r3, r1
 800c942:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f003 0301 	and.w	r3, r3, #1
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00d      	beq.n	800c96a <put_fat+0xb8>
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	b25b      	sxtb	r3, r3
 800c954:	f003 030f 	and.w	r3, r3, #15
 800c958:	b25a      	sxtb	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	011b      	lsls	r3, r3, #4
 800c960:	b25b      	sxtb	r3, r3
 800c962:	4313      	orrs	r3, r2
 800c964:	b25b      	sxtb	r3, r3
 800c966:	b2db      	uxtb	r3, r3
 800c968:	e001      	b.n	800c96e <put_fat+0xbc>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	b2db      	uxtb	r3, r3
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2201      	movs	r2, #1
 800c976:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	899b      	ldrh	r3, [r3, #12]
 800c980:	4619      	mov	r1, r3
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	fbb3 f3f1 	udiv	r3, r3, r1
 800c988:	4413      	add	r3, r2
 800c98a:	4619      	mov	r1, r3
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	f7ff fdff 	bl	800c590 <move_window>
 800c992:	4603      	mov	r3, r0
 800c994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c996:	7ffb      	ldrb	r3, [r7, #31]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f040 809c 	bne.w	800cad6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	899b      	ldrh	r3, [r3, #12]
 800c9a8:	461a      	mov	r2, r3
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800c9b0:	fb02 f200 	mul.w	r2, r2, r0
 800c9b4:	1a9b      	subs	r3, r3, r2
 800c9b6:	440b      	add	r3, r1
 800c9b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d003      	beq.n	800c9cc <put_fat+0x11a>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	091b      	lsrs	r3, r3, #4
 800c9c8:	b2db      	uxtb	r3, r3
 800c9ca:	e00e      	b.n	800c9ea <put_fat+0x138>
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	b25b      	sxtb	r3, r3
 800c9d2:	f023 030f 	bic.w	r3, r3, #15
 800c9d6:	b25a      	sxtb	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	0a1b      	lsrs	r3, r3, #8
 800c9dc:	b25b      	sxtb	r3, r3
 800c9de:	f003 030f 	and.w	r3, r3, #15
 800c9e2:	b25b      	sxtb	r3, r3
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	b25b      	sxtb	r3, r3
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	70da      	strb	r2, [r3, #3]
			break;
 800c9f4:	e074      	b.n	800cae0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	899b      	ldrh	r3, [r3, #12]
 800c9fe:	085b      	lsrs	r3, r3, #1
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	4619      	mov	r1, r3
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca0a:	4413      	add	r3, r2
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	f7ff fdbe 	bl	800c590 <move_window>
 800ca14:	4603      	mov	r3, r0
 800ca16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca18:	7ffb      	ldrb	r3, [r7, #31]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d15d      	bne.n	800cada <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	8992      	ldrh	r2, [r2, #12]
 800ca2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca30:	fb02 f200 	mul.w	r2, r2, r0
 800ca34:	1a9b      	subs	r3, r3, r2
 800ca36:	440b      	add	r3, r1
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	b292      	uxth	r2, r2
 800ca3c:	4611      	mov	r1, r2
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7ff fb31 	bl	800c0a6 <st_word>
			fs->wflag = 1;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2201      	movs	r2, #1
 800ca48:	70da      	strb	r2, [r3, #3]
			break;
 800ca4a:	e049      	b.n	800cae0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	899b      	ldrh	r3, [r3, #12]
 800ca54:	089b      	lsrs	r3, r3, #2
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca60:	4413      	add	r3, r2
 800ca62:	4619      	mov	r1, r3
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff fd93 	bl	800c590 <move_window>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca6e:	7ffb      	ldrb	r3, [r7, #31]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d134      	bne.n	800cade <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	8992      	ldrh	r2, [r2, #12]
 800ca88:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca8c:	fb02 f200 	mul.w	r2, r2, r0
 800ca90:	1a9b      	subs	r3, r3, r2
 800ca92:	440b      	add	r3, r1
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7ff fae3 	bl	800c060 <ld_dword>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800caa0:	4323      	orrs	r3, r4
 800caa2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	8992      	ldrh	r2, [r2, #12]
 800cab2:	fbb3 f0f2 	udiv	r0, r3, r2
 800cab6:	fb02 f200 	mul.w	r2, r2, r0
 800caba:	1a9b      	subs	r3, r3, r2
 800cabc:	440b      	add	r3, r1
 800cabe:	6879      	ldr	r1, [r7, #4]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff fb0b 	bl	800c0dc <st_dword>
			fs->wflag = 1;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2201      	movs	r2, #1
 800caca:	70da      	strb	r2, [r3, #3]
			break;
 800cacc:	e008      	b.n	800cae0 <put_fat+0x22e>
		}
	}
 800cace:	bf00      	nop
 800cad0:	e006      	b.n	800cae0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cad2:	bf00      	nop
 800cad4:	e004      	b.n	800cae0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cad6:	bf00      	nop
 800cad8:	e002      	b.n	800cae0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cada:	bf00      	nop
 800cadc:	e000      	b.n	800cae0 <put_fat+0x22e>
			if (res != FR_OK) break;
 800cade:	bf00      	nop
	return res;
 800cae0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3724      	adds	r7, #36	; 0x24
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd90      	pop	{r4, r7, pc}

0800caea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b088      	sub	sp, #32
 800caee:	af00      	add	r7, sp, #0
 800caf0:	60f8      	str	r0, [r7, #12]
 800caf2:	60b9      	str	r1, [r7, #8]
 800caf4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d904      	bls.n	800cb10 <remove_chain+0x26>
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	69db      	ldr	r3, [r3, #28]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d301      	bcc.n	800cb14 <remove_chain+0x2a>
 800cb10:	2302      	movs	r3, #2
 800cb12:	e04b      	b.n	800cbac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00c      	beq.n	800cb34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cb1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	69b8      	ldr	r0, [r7, #24]
 800cb22:	f7ff fec6 	bl	800c8b2 <put_fat>
 800cb26:	4603      	mov	r3, r0
 800cb28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cb2a:	7ffb      	ldrb	r3, [r7, #31]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <remove_chain+0x4a>
 800cb30:	7ffb      	ldrb	r3, [r7, #31]
 800cb32:	e03b      	b.n	800cbac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cb34:	68b9      	ldr	r1, [r7, #8]
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	f7ff fde7 	bl	800c70a <get_fat>
 800cb3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d031      	beq.n	800cba8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d101      	bne.n	800cb4e <remove_chain+0x64>
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	e02e      	b.n	800cbac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb54:	d101      	bne.n	800cb5a <remove_chain+0x70>
 800cb56:	2301      	movs	r3, #1
 800cb58:	e028      	b.n	800cbac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	68b9      	ldr	r1, [r7, #8]
 800cb5e:	69b8      	ldr	r0, [r7, #24]
 800cb60:	f7ff fea7 	bl	800c8b2 <put_fat>
 800cb64:	4603      	mov	r3, r0
 800cb66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cb68:	7ffb      	ldrb	r3, [r7, #31]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <remove_chain+0x88>
 800cb6e:	7ffb      	ldrb	r3, [r7, #31]
 800cb70:	e01c      	b.n	800cbac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb72:	69bb      	ldr	r3, [r7, #24]
 800cb74:	699a      	ldr	r2, [r3, #24]
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	3b02      	subs	r3, #2
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d20b      	bcs.n	800cb98 <remove_chain+0xae>
			fs->free_clst++;
 800cb80:	69bb      	ldr	r3, [r7, #24]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	791b      	ldrb	r3, [r3, #4]
 800cb8e:	f043 0301 	orr.w	r3, r3, #1
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	69bb      	ldr	r3, [r7, #24]
 800cb96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cb9c:	69bb      	ldr	r3, [r7, #24]
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d3c6      	bcc.n	800cb34 <remove_chain+0x4a>
 800cba6:	e000      	b.n	800cbaa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cba8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3720      	adds	r7, #32
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b088      	sub	sp, #32
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10d      	bne.n	800cbe6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d004      	beq.n	800cbe0 <create_chain+0x2c>
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	69db      	ldr	r3, [r3, #28]
 800cbda:	69ba      	ldr	r2, [r7, #24]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d31b      	bcc.n	800cc18 <create_chain+0x64>
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	61bb      	str	r3, [r7, #24]
 800cbe4:	e018      	b.n	800cc18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff fd8e 	bl	800c70a <get_fat>
 800cbee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d801      	bhi.n	800cbfa <create_chain+0x46>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e070      	b.n	800ccdc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc00:	d101      	bne.n	800cc06 <create_chain+0x52>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	e06a      	b.n	800ccdc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	69db      	ldr	r3, [r3, #28]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d201      	bcs.n	800cc14 <create_chain+0x60>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	e063      	b.n	800ccdc <create_chain+0x128>
		scl = clst;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cc18:	69bb      	ldr	r3, [r7, #24]
 800cc1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cc1c:	69fb      	ldr	r3, [r7, #28]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d307      	bcc.n	800cc3c <create_chain+0x88>
				ncl = 2;
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cc30:	69fa      	ldr	r2, [r7, #28]
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	d901      	bls.n	800cc3c <create_chain+0x88>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e04f      	b.n	800ccdc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cc3c:	69f9      	ldr	r1, [r7, #28]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7ff fd63 	bl	800c70a <get_fat>
 800cc44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00e      	beq.n	800cc6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2b01      	cmp	r3, #1
 800cc50:	d003      	beq.n	800cc5a <create_chain+0xa6>
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc58:	d101      	bne.n	800cc5e <create_chain+0xaa>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	e03e      	b.n	800ccdc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cc5e:	69fa      	ldr	r2, [r7, #28]
 800cc60:	69bb      	ldr	r3, [r7, #24]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d1da      	bne.n	800cc1c <create_chain+0x68>
 800cc66:	2300      	movs	r3, #0
 800cc68:	e038      	b.n	800ccdc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cc6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc70:	69f9      	ldr	r1, [r7, #28]
 800cc72:	6938      	ldr	r0, [r7, #16]
 800cc74:	f7ff fe1d 	bl	800c8b2 <put_fat>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d109      	bne.n	800cc96 <create_chain+0xe2>
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d006      	beq.n	800cc96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cc88:	69fa      	ldr	r2, [r7, #28]
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6938      	ldr	r0, [r7, #16]
 800cc8e:	f7ff fe10 	bl	800c8b2 <put_fat>
 800cc92:	4603      	mov	r3, r0
 800cc94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d116      	bne.n	800ccca <create_chain+0x116>
		fs->last_clst = ncl;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	69fa      	ldr	r2, [r7, #28]
 800cca0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	699a      	ldr	r2, [r3, #24]
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	69db      	ldr	r3, [r3, #28]
 800ccaa:	3b02      	subs	r3, #2
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d804      	bhi.n	800ccba <create_chain+0x106>
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	699b      	ldr	r3, [r3, #24]
 800ccb4:	1e5a      	subs	r2, r3, #1
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	791b      	ldrb	r3, [r3, #4]
 800ccbe:	f043 0301 	orr.w	r3, r3, #1
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	711a      	strb	r2, [r3, #4]
 800ccc8:	e007      	b.n	800ccda <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ccca:	7dfb      	ldrb	r3, [r7, #23]
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	d102      	bne.n	800ccd6 <create_chain+0x122>
 800ccd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd4:	e000      	b.n	800ccd8 <create_chain+0x124>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ccda:	69fb      	ldr	r3, [r7, #28]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3720      	adds	r7, #32
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b087      	sub	sp, #28
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	899b      	ldrh	r3, [r3, #12]
 800cd00:	461a      	mov	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd08:	68fa      	ldr	r2, [r7, #12]
 800cd0a:	8952      	ldrh	r2, [r2, #10]
 800cd0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	1d1a      	adds	r2, r3, #4
 800cd16:	613a      	str	r2, [r7, #16]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <clmt_clust+0x42>
 800cd22:	2300      	movs	r3, #0
 800cd24:	e010      	b.n	800cd48 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d307      	bcc.n	800cd3e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	3304      	adds	r3, #4
 800cd3a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cd3c:	e7e9      	b.n	800cd12 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cd3e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	4413      	add	r3, r2
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	371c      	adds	r7, #28
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd6a:	d204      	bcs.n	800cd76 <dir_sdi+0x22>
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	f003 031f 	and.w	r3, r3, #31
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <dir_sdi+0x26>
		return FR_INT_ERR;
 800cd76:	2302      	movs	r3, #2
 800cd78:	e071      	b.n	800ce5e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d106      	bne.n	800cd9a <dir_sdi+0x46>
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d902      	bls.n	800cd9a <dir_sdi+0x46>
		clst = fs->dirbase;
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd98:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10c      	bne.n	800cdba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	095b      	lsrs	r3, r3, #5
 800cda4:	693a      	ldr	r2, [r7, #16]
 800cda6:	8912      	ldrh	r2, [r2, #8]
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d301      	bcc.n	800cdb0 <dir_sdi+0x5c>
 800cdac:	2302      	movs	r3, #2
 800cdae:	e056      	b.n	800ce5e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	61da      	str	r2, [r3, #28]
 800cdb8:	e02d      	b.n	800ce16 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	895b      	ldrh	r3, [r3, #10]
 800cdbe:	461a      	mov	r2, r3
 800cdc0:	693b      	ldr	r3, [r7, #16]
 800cdc2:	899b      	ldrh	r3, [r3, #12]
 800cdc4:	fb03 f302 	mul.w	r3, r3, r2
 800cdc8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cdca:	e019      	b.n	800ce00 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6979      	ldr	r1, [r7, #20]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff fc9a 	bl	800c70a <get_fat>
 800cdd6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdde:	d101      	bne.n	800cde4 <dir_sdi+0x90>
 800cde0:	2301      	movs	r3, #1
 800cde2:	e03c      	b.n	800ce5e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d904      	bls.n	800cdf4 <dir_sdi+0xa0>
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	69db      	ldr	r3, [r3, #28]
 800cdee:	697a      	ldr	r2, [r7, #20]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d301      	bcc.n	800cdf8 <dir_sdi+0xa4>
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	e032      	b.n	800ce5e <dir_sdi+0x10a>
			ofs -= csz;
 800cdf8:	683a      	ldr	r2, [r7, #0]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d2e1      	bcs.n	800cdcc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ce08:	6979      	ldr	r1, [r7, #20]
 800ce0a:	6938      	ldr	r0, [r7, #16]
 800ce0c:	f7ff fc5e 	bl	800c6cc <clust2sect>
 800ce10:	4602      	mov	r2, r0
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	69db      	ldr	r3, [r3, #28]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d101      	bne.n	800ce28 <dir_sdi+0xd4>
 800ce24:	2302      	movs	r3, #2
 800ce26:	e01a      	b.n	800ce5e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	69da      	ldr	r2, [r3, #28]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	899b      	ldrh	r3, [r3, #12]
 800ce30:	4619      	mov	r1, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce38:	441a      	add	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	899b      	ldrh	r3, [r3, #12]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce50:	fb02 f200 	mul.w	r2, r2, r0
 800ce54:	1a9b      	subs	r3, r3, r2
 800ce56:	18ca      	adds	r2, r1, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3718      	adds	r7, #24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b086      	sub	sp, #24
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	3320      	adds	r3, #32
 800ce7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <dir_next+0x28>
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce8c:	d301      	bcc.n	800ce92 <dir_next+0x2c>
 800ce8e:	2304      	movs	r3, #4
 800ce90:	e0bb      	b.n	800d00a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	899b      	ldrh	r3, [r3, #12]
 800ce96:	461a      	mov	r2, r3
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ce9e:	fb02 f201 	mul.w	r2, r2, r1
 800cea2:	1a9b      	subs	r3, r3, r2
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f040 809d 	bne.w	800cfe4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	1c5a      	adds	r2, r3, #1
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	699b      	ldr	r3, [r3, #24]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10b      	bne.n	800ced4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	095b      	lsrs	r3, r3, #5
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	8912      	ldrh	r2, [r2, #8]
 800cec4:	4293      	cmp	r3, r2
 800cec6:	f0c0 808d 	bcc.w	800cfe4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	61da      	str	r2, [r3, #28]
 800ced0:	2304      	movs	r3, #4
 800ced2:	e09a      	b.n	800d00a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	899b      	ldrh	r3, [r3, #12]
 800ced8:	461a      	mov	r2, r3
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	fbb3 f3f2 	udiv	r3, r3, r2
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	8952      	ldrh	r2, [r2, #10]
 800cee4:	3a01      	subs	r2, #1
 800cee6:	4013      	ands	r3, r2
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d17b      	bne.n	800cfe4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	699b      	ldr	r3, [r3, #24]
 800cef2:	4619      	mov	r1, r3
 800cef4:	4610      	mov	r0, r2
 800cef6:	f7ff fc08 	bl	800c70a <get_fat>
 800cefa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d801      	bhi.n	800cf06 <dir_next+0xa0>
 800cf02:	2302      	movs	r3, #2
 800cf04:	e081      	b.n	800d00a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0c:	d101      	bne.n	800cf12 <dir_next+0xac>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e07b      	b.n	800d00a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	69db      	ldr	r3, [r3, #28]
 800cf16:	697a      	ldr	r2, [r7, #20]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d359      	bcc.n	800cfd0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d104      	bne.n	800cf2c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	61da      	str	r2, [r3, #28]
 800cf28:	2304      	movs	r3, #4
 800cf2a:	e06e      	b.n	800d00a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	4619      	mov	r1, r3
 800cf34:	4610      	mov	r0, r2
 800cf36:	f7ff fe3d 	bl	800cbb4 <create_chain>
 800cf3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <dir_next+0xe0>
 800cf42:	2307      	movs	r3, #7
 800cf44:	e061      	b.n	800d00a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	2b01      	cmp	r3, #1
 800cf4a:	d101      	bne.n	800cf50 <dir_next+0xea>
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	e05c      	b.n	800d00a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf56:	d101      	bne.n	800cf5c <dir_next+0xf6>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e056      	b.n	800d00a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f7ff fad3 	bl	800c508 <sync_window>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <dir_next+0x106>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e04e      	b.n	800d00a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	899b      	ldrh	r3, [r3, #12]
 800cf76:	461a      	mov	r2, r3
 800cf78:	2100      	movs	r1, #0
 800cf7a:	f7ff f8fc 	bl	800c176 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf7e:	2300      	movs	r3, #0
 800cf80:	613b      	str	r3, [r7, #16]
 800cf82:	6979      	ldr	r1, [r7, #20]
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f7ff fba1 	bl	800c6cc <clust2sect>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	635a      	str	r2, [r3, #52]	; 0x34
 800cf90:	e012      	b.n	800cfb8 <dir_next+0x152>
						fs->wflag = 1;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2201      	movs	r2, #1
 800cf96:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f7ff fab5 	bl	800c508 <sync_window>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <dir_next+0x142>
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e030      	b.n	800d00a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	3301      	adds	r3, #1
 800cfac:	613b      	str	r3, [r7, #16]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	635a      	str	r2, [r3, #52]	; 0x34
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	895b      	ldrh	r3, [r3, #10]
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d3e6      	bcc.n	800cf92 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	1ad2      	subs	r2, r2, r3
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	697a      	ldr	r2, [r7, #20]
 800cfd4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cfd6:	6979      	ldr	r1, [r7, #20]
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f7ff fb77 	bl	800c6cc <clust2sect>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68ba      	ldr	r2, [r7, #8]
 800cfe8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	899b      	ldrh	r3, [r3, #12]
 800cff4:	461a      	mov	r2, r3
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cffc:	fb02 f200 	mul.w	r2, r2, r0
 800d000:	1a9b      	subs	r3, r3, r2
 800d002:	18ca      	adds	r2, r1, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b086      	sub	sp, #24
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d022:	2100      	movs	r1, #0
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff fe95 	bl	800cd54 <dir_sdi>
 800d02a:	4603      	mov	r3, r0
 800d02c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d02e:	7dfb      	ldrb	r3, [r7, #23]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d12b      	bne.n	800d08c <dir_alloc+0x7a>
		n = 0;
 800d034:	2300      	movs	r3, #0
 800d036:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	4619      	mov	r1, r3
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7ff faa6 	bl	800c590 <move_window>
 800d044:	4603      	mov	r3, r0
 800d046:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d11d      	bne.n	800d08a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2be5      	cmp	r3, #229	; 0xe5
 800d056:	d004      	beq.n	800d062 <dir_alloc+0x50>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a1b      	ldr	r3, [r3, #32]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d107      	bne.n	800d072 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	3301      	adds	r3, #1
 800d066:	613b      	str	r3, [r7, #16]
 800d068:	693a      	ldr	r2, [r7, #16]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d102      	bne.n	800d076 <dir_alloc+0x64>
 800d070:	e00c      	b.n	800d08c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d072:	2300      	movs	r3, #0
 800d074:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d076:	2101      	movs	r1, #1
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7ff fef4 	bl	800ce66 <dir_next>
 800d07e:	4603      	mov	r3, r0
 800d080:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d082:	7dfb      	ldrb	r3, [r7, #23]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0d7      	beq.n	800d038 <dir_alloc+0x26>
 800d088:	e000      	b.n	800d08c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d08a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d08c:	7dfb      	ldrb	r3, [r7, #23]
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d101      	bne.n	800d096 <dir_alloc+0x84>
 800d092:	2307      	movs	r3, #7
 800d094:	75fb      	strb	r3, [r7, #23]
	return res;
 800d096:	7dfb      	ldrb	r3, [r7, #23]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	331a      	adds	r3, #26
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe ffbe 	bl	800c030 <ld_word>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	d109      	bne.n	800d0d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	3314      	adds	r3, #20
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe ffb3 	bl	800c030 <ld_word>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	041b      	lsls	r3, r3, #16
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	4313      	orrs	r3, r2
 800d0d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3710      	adds	r7, #16
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}

0800d0de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d0de:	b580      	push	{r7, lr}
 800d0e0:	b084      	sub	sp, #16
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	331a      	adds	r3, #26
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	b292      	uxth	r2, r2
 800d0f2:	4611      	mov	r1, r2
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fe ffd6 	bl	800c0a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d109      	bne.n	800d116 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	f103 0214 	add.w	r2, r3, #20
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	0c1b      	lsrs	r3, r3, #16
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f7fe ffc8 	bl	800c0a6 <st_word>
	}
}
 800d116:	bf00      	nop
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d120:	b590      	push	{r4, r7, lr}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	331a      	adds	r3, #26
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fe ff7e 	bl	800c030 <ld_word>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d001      	beq.n	800d13e <cmp_lfn+0x1e>
 800d13a:	2300      	movs	r3, #0
 800d13c:	e059      	b.n	800d1f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d146:	1e5a      	subs	r2, r3, #1
 800d148:	4613      	mov	r3, r2
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	4413      	add	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d154:	2301      	movs	r3, #1
 800d156:	81fb      	strh	r3, [r7, #14]
 800d158:	2300      	movs	r3, #0
 800d15a:	613b      	str	r3, [r7, #16]
 800d15c:	e033      	b.n	800d1c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d15e:	4a27      	ldr	r2, [pc, #156]	; (800d1fc <cmp_lfn+0xdc>)
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	4413      	add	r3, r2
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	461a      	mov	r2, r3
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	4413      	add	r3, r2
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fe ff5f 	bl	800c030 <ld_word>
 800d172:	4603      	mov	r3, r0
 800d174:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d176:	89fb      	ldrh	r3, [r7, #14]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d01a      	beq.n	800d1b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2bfe      	cmp	r3, #254	; 0xfe
 800d180:	d812      	bhi.n	800d1a8 <cmp_lfn+0x88>
 800d182:	89bb      	ldrh	r3, [r7, #12]
 800d184:	4618      	mov	r0, r3
 800d186:	f001 ff9d 	bl	800f0c4 <ff_wtoupper>
 800d18a:	4603      	mov	r3, r0
 800d18c:	461c      	mov	r4, r3
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	617a      	str	r2, [r7, #20]
 800d194:	005b      	lsls	r3, r3, #1
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	4413      	add	r3, r2
 800d19a:	881b      	ldrh	r3, [r3, #0]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f001 ff91 	bl	800f0c4 <ff_wtoupper>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	429c      	cmp	r4, r3
 800d1a6:	d001      	beq.n	800d1ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e022      	b.n	800d1f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d1ac:	89bb      	ldrh	r3, [r7, #12]
 800d1ae:	81fb      	strh	r3, [r7, #14]
 800d1b0:	e006      	b.n	800d1c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d1b2:	89bb      	ldrh	r3, [r7, #12]
 800d1b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d001      	beq.n	800d1c0 <cmp_lfn+0xa0>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e018      	b.n	800d1f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	613b      	str	r3, [r7, #16]
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	2b0c      	cmp	r3, #12
 800d1ca:	d9c8      	bls.n	800d15e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d00b      	beq.n	800d1f0 <cmp_lfn+0xd0>
 800d1d8:	89fb      	ldrh	r3, [r7, #14]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d008      	beq.n	800d1f0 <cmp_lfn+0xd0>
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	005b      	lsls	r3, r3, #1
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d001      	beq.n	800d1f0 <cmp_lfn+0xd0>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e000      	b.n	800d1f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d1f0:	2301      	movs	r3, #1
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	371c      	adds	r7, #28
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd90      	pop	{r4, r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	08014c3c 	.word	0x08014c3c

0800d200 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b088      	sub	sp, #32
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	4611      	mov	r1, r2
 800d20c:	461a      	mov	r2, r3
 800d20e:	460b      	mov	r3, r1
 800d210:	71fb      	strb	r3, [r7, #7]
 800d212:	4613      	mov	r3, r2
 800d214:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	330d      	adds	r3, #13
 800d21a:	79ba      	ldrb	r2, [r7, #6]
 800d21c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	330b      	adds	r3, #11
 800d222:	220f      	movs	r2, #15
 800d224:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	330c      	adds	r3, #12
 800d22a:	2200      	movs	r2, #0
 800d22c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	331a      	adds	r3, #26
 800d232:	2100      	movs	r1, #0
 800d234:	4618      	mov	r0, r3
 800d236:	f7fe ff36 	bl	800c0a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	1e5a      	subs	r2, r3, #1
 800d23e:	4613      	mov	r3, r2
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	4413      	add	r3, r2
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4413      	add	r3, r2
 800d248:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	82fb      	strh	r3, [r7, #22]
 800d24e:	2300      	movs	r3, #0
 800d250:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d252:	8afb      	ldrh	r3, [r7, #22]
 800d254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d258:	4293      	cmp	r3, r2
 800d25a:	d007      	beq.n	800d26c <put_lfn+0x6c>
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	61fa      	str	r2, [r7, #28]
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	4413      	add	r3, r2
 800d268:	881b      	ldrh	r3, [r3, #0]
 800d26a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d26c:	4a17      	ldr	r2, [pc, #92]	; (800d2cc <put_lfn+0xcc>)
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	4413      	add	r3, r2
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	461a      	mov	r2, r3
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	4413      	add	r3, r2
 800d27a:	8afa      	ldrh	r2, [r7, #22]
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe ff11 	bl	800c0a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d284:	8afb      	ldrh	r3, [r7, #22]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <put_lfn+0x90>
 800d28a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d28e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d290:	69bb      	ldr	r3, [r7, #24]
 800d292:	3301      	adds	r3, #1
 800d294:	61bb      	str	r3, [r7, #24]
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	2b0c      	cmp	r3, #12
 800d29a:	d9da      	bls.n	800d252 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d29c:	8afb      	ldrh	r3, [r7, #22]
 800d29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d006      	beq.n	800d2b4 <put_lfn+0xb4>
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	005b      	lsls	r3, r3, #1
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	881b      	ldrh	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d103      	bne.n	800d2bc <put_lfn+0xbc>
 800d2b4:	79fb      	ldrb	r3, [r7, #7]
 800d2b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	79fa      	ldrb	r2, [r7, #7]
 800d2c0:	701a      	strb	r2, [r3, #0]
}
 800d2c2:	bf00      	nop
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	08014c3c 	.word	0x08014c3c

0800d2d0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08c      	sub	sp, #48	; 0x30
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	607a      	str	r2, [r7, #4]
 800d2dc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d2de:	220b      	movs	r2, #11
 800d2e0:	68b9      	ldr	r1, [r7, #8]
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f7fe ff26 	bl	800c134 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b05      	cmp	r3, #5
 800d2ec:	d92b      	bls.n	800d346 <gen_numname+0x76>
		sr = seq;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d2f2:	e022      	b.n	800d33a <gen_numname+0x6a>
			wc = *lfn++;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	1c9a      	adds	r2, r3, #2
 800d2f8:	607a      	str	r2, [r7, #4]
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d2fe:	2300      	movs	r3, #0
 800d300:	62bb      	str	r3, [r7, #40]	; 0x28
 800d302:	e017      	b.n	800d334 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	005a      	lsls	r2, r3, #1
 800d308:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	4413      	add	r3, r2
 800d310:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d312:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d314:	085b      	lsrs	r3, r3, #1
 800d316:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d005      	beq.n	800d32e <gen_numname+0x5e>
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d328:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d32c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d330:	3301      	adds	r3, #1
 800d332:	62bb      	str	r3, [r7, #40]	; 0x28
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	2b0f      	cmp	r3, #15
 800d338:	d9e4      	bls.n	800d304 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	881b      	ldrh	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1d8      	bne.n	800d2f4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d346:	2307      	movs	r3, #7
 800d348:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	f003 030f 	and.w	r3, r3, #15
 800d352:	b2db      	uxtb	r3, r3
 800d354:	3330      	adds	r3, #48	; 0x30
 800d356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d35a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d35e:	2b39      	cmp	r3, #57	; 0x39
 800d360:	d904      	bls.n	800d36c <gen_numname+0x9c>
 800d362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d366:	3307      	adds	r3, #7
 800d368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	1e5a      	subs	r2, r3, #1
 800d370:	62ba      	str	r2, [r7, #40]	; 0x28
 800d372:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d376:	4413      	add	r3, r2
 800d378:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d37c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	091b      	lsrs	r3, r3, #4
 800d384:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1de      	bne.n	800d34a <gen_numname+0x7a>
	ns[i] = '~';
 800d38c:	f107 0214 	add.w	r2, r7, #20
 800d390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d392:	4413      	add	r3, r2
 800d394:	227e      	movs	r2, #126	; 0x7e
 800d396:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d398:	2300      	movs	r3, #0
 800d39a:	627b      	str	r3, [r7, #36]	; 0x24
 800d39c:	e002      	b.n	800d3a4 <gen_numname+0xd4>
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800d3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d205      	bcs.n	800d3b8 <gen_numname+0xe8>
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b0:	4413      	add	r3, r2
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b20      	cmp	r3, #32
 800d3b6:	d1f2      	bne.n	800d39e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ba:	2b07      	cmp	r3, #7
 800d3bc:	d808      	bhi.n	800d3d0 <gen_numname+0x100>
 800d3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	62ba      	str	r2, [r7, #40]	; 0x28
 800d3c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3c8:	4413      	add	r3, r2
 800d3ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d3ce:	e000      	b.n	800d3d2 <gen_numname+0x102>
 800d3d0:	2120      	movs	r1, #32
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	627a      	str	r2, [r7, #36]	; 0x24
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	4413      	add	r3, r2
 800d3dc:	460a      	mov	r2, r1
 800d3de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e2:	2b07      	cmp	r3, #7
 800d3e4:	d9e8      	bls.n	800d3b8 <gen_numname+0xe8>
}
 800d3e6:	bf00      	nop
 800d3e8:	bf00      	nop
 800d3ea:	3730      	adds	r7, #48	; 0x30
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b085      	sub	sp, #20
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d3fc:	230b      	movs	r3, #11
 800d3fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	b2da      	uxtb	r2, r3
 800d404:	0852      	lsrs	r2, r2, #1
 800d406:	01db      	lsls	r3, r3, #7
 800d408:	4313      	orrs	r3, r2
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	1c59      	adds	r1, r3, #1
 800d410:	6079      	str	r1, [r7, #4]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	4413      	add	r3, r2
 800d416:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	3b01      	subs	r3, #1
 800d41c:	60bb      	str	r3, [r7, #8]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1ed      	bne.n	800d400 <sum_sfn+0x10>
	return sum;
 800d424:	7bfb      	ldrb	r3, [r7, #15]
}
 800d426:	4618      	mov	r0, r3
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d440:	2100      	movs	r1, #0
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7ff fc86 	bl	800cd54 <dir_sdi>
 800d448:	4603      	mov	r3, r0
 800d44a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d44c:	7dfb      	ldrb	r3, [r7, #23]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <dir_find+0x24>
 800d452:	7dfb      	ldrb	r3, [r7, #23]
 800d454:	e0a9      	b.n	800d5aa <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d456:	23ff      	movs	r3, #255	; 0xff
 800d458:	753b      	strb	r3, [r7, #20]
 800d45a:	7d3b      	ldrb	r3, [r7, #20]
 800d45c:	757b      	strb	r3, [r7, #21]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f04f 32ff 	mov.w	r2, #4294967295
 800d464:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	69db      	ldr	r3, [r3, #28]
 800d46a:	4619      	mov	r1, r3
 800d46c:	6938      	ldr	r0, [r7, #16]
 800d46e:	f7ff f88f 	bl	800c590 <move_window>
 800d472:	4603      	mov	r3, r0
 800d474:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d476:	7dfb      	ldrb	r3, [r7, #23]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f040 8090 	bne.w	800d59e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d486:	7dbb      	ldrb	r3, [r7, #22]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d102      	bne.n	800d492 <dir_find+0x60>
 800d48c:	2304      	movs	r3, #4
 800d48e:	75fb      	strb	r3, [r7, #23]
 800d490:	e08a      	b.n	800d5a8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	330b      	adds	r3, #11
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d49e:	73fb      	strb	r3, [r7, #15]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7bfa      	ldrb	r2, [r7, #15]
 800d4a4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d4a6:	7dbb      	ldrb	r3, [r7, #22]
 800d4a8:	2be5      	cmp	r3, #229	; 0xe5
 800d4aa:	d007      	beq.n	800d4bc <dir_find+0x8a>
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
 800d4ae:	f003 0308 	and.w	r3, r3, #8
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d009      	beq.n	800d4ca <dir_find+0x98>
 800d4b6:	7bfb      	ldrb	r3, [r7, #15]
 800d4b8:	2b0f      	cmp	r3, #15
 800d4ba:	d006      	beq.n	800d4ca <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d4bc:	23ff      	movs	r3, #255	; 0xff
 800d4be:	757b      	strb	r3, [r7, #21]
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c6:	631a      	str	r2, [r3, #48]	; 0x30
 800d4c8:	e05e      	b.n	800d588 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
 800d4cc:	2b0f      	cmp	r3, #15
 800d4ce:	d136      	bne.n	800d53e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d154      	bne.n	800d588 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d4de:	7dbb      	ldrb	r3, [r7, #22]
 800d4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00d      	beq.n	800d504 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	7b5b      	ldrb	r3, [r3, #13]
 800d4ee:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d4f0:	7dbb      	ldrb	r3, [r7, #22]
 800d4f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4f6:	75bb      	strb	r3, [r7, #22]
 800d4f8:	7dbb      	ldrb	r3, [r7, #22]
 800d4fa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	695a      	ldr	r2, [r3, #20]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d504:	7dba      	ldrb	r2, [r7, #22]
 800d506:	7d7b      	ldrb	r3, [r7, #21]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d115      	bne.n	800d538 <dir_find+0x106>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6a1b      	ldr	r3, [r3, #32]
 800d510:	330d      	adds	r3, #13
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	7d3a      	ldrb	r2, [r7, #20]
 800d516:	429a      	cmp	r2, r3
 800d518:	d10e      	bne.n	800d538 <dir_find+0x106>
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	691a      	ldr	r2, [r3, #16]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	4619      	mov	r1, r3
 800d524:	4610      	mov	r0, r2
 800d526:	f7ff fdfb 	bl	800d120 <cmp_lfn>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d003      	beq.n	800d538 <dir_find+0x106>
 800d530:	7d7b      	ldrb	r3, [r7, #21]
 800d532:	3b01      	subs	r3, #1
 800d534:	b2db      	uxtb	r3, r3
 800d536:	e000      	b.n	800d53a <dir_find+0x108>
 800d538:	23ff      	movs	r3, #255	; 0xff
 800d53a:	757b      	strb	r3, [r7, #21]
 800d53c:	e024      	b.n	800d588 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d53e:	7d7b      	ldrb	r3, [r7, #21]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d109      	bne.n	800d558 <dir_find+0x126>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a1b      	ldr	r3, [r3, #32]
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff ff51 	bl	800d3f0 <sum_sfn>
 800d54e:	4603      	mov	r3, r0
 800d550:	461a      	mov	r2, r3
 800d552:	7d3b      	ldrb	r3, [r7, #20]
 800d554:	4293      	cmp	r3, r2
 800d556:	d024      	beq.n	800d5a2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	2b00      	cmp	r3, #0
 800d564:	d10a      	bne.n	800d57c <dir_find+0x14a>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6a18      	ldr	r0, [r3, #32]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	3324      	adds	r3, #36	; 0x24
 800d56e:	220b      	movs	r2, #11
 800d570:	4619      	mov	r1, r3
 800d572:	f7fe fe1b 	bl	800c1ac <mem_cmp>
 800d576:	4603      	mov	r3, r0
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d014      	beq.n	800d5a6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d57c:	23ff      	movs	r3, #255	; 0xff
 800d57e:	757b      	strb	r3, [r7, #21]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f04f 32ff 	mov.w	r2, #4294967295
 800d586:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d588:	2100      	movs	r1, #0
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7ff fc6b 	bl	800ce66 <dir_next>
 800d590:	4603      	mov	r3, r0
 800d592:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d594:	7dfb      	ldrb	r3, [r7, #23]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f43f af65 	beq.w	800d466 <dir_find+0x34>
 800d59c:	e004      	b.n	800d5a8 <dir_find+0x176>
		if (res != FR_OK) break;
 800d59e:	bf00      	nop
 800d5a0:	e002      	b.n	800d5a8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d5a2:	bf00      	nop
 800d5a4:	e000      	b.n	800d5a8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d5a6:	bf00      	nop

	return res;
 800d5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3718      	adds	r7, #24
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
	...

0800d5b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b08c      	sub	sp, #48	; 0x30
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d5c8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d001      	beq.n	800d5d4 <dir_register+0x20>
 800d5d0:	2306      	movs	r3, #6
 800d5d2:	e0e0      	b.n	800d796 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	627b      	str	r3, [r7, #36]	; 0x24
 800d5d8:	e002      	b.n	800d5e0 <dir_register+0x2c>
 800d5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5dc:	3301      	adds	r3, #1
 800d5de:	627b      	str	r3, [r7, #36]	; 0x24
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	691a      	ldr	r2, [r3, #16]
 800d5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e6:	005b      	lsls	r3, r3, #1
 800d5e8:	4413      	add	r3, r2
 800d5ea:	881b      	ldrh	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1f4      	bne.n	800d5da <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d5f6:	f107 030c 	add.w	r3, r7, #12
 800d5fa:	220c      	movs	r2, #12
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe fd99 	bl	800c134 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d602:	7dfb      	ldrb	r3, [r7, #23]
 800d604:	f003 0301 	and.w	r3, r3, #1
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d032      	beq.n	800d672 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2240      	movs	r2, #64	; 0x40
 800d610:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d614:	2301      	movs	r3, #1
 800d616:	62bb      	str	r3, [r7, #40]	; 0x28
 800d618:	e016      	b.n	800d648 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	691a      	ldr	r2, [r3, #16]
 800d624:	f107 010c 	add.w	r1, r7, #12
 800d628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62a:	f7ff fe51 	bl	800d2d0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7ff feff 	bl	800d432 <dir_find>
 800d634:	4603      	mov	r3, r0
 800d636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d63a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d106      	bne.n	800d650 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d644:	3301      	adds	r3, #1
 800d646:	62bb      	str	r3, [r7, #40]	; 0x28
 800d648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64a:	2b63      	cmp	r3, #99	; 0x63
 800d64c:	d9e5      	bls.n	800d61a <dir_register+0x66>
 800d64e:	e000      	b.n	800d652 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d650:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d654:	2b64      	cmp	r3, #100	; 0x64
 800d656:	d101      	bne.n	800d65c <dir_register+0xa8>
 800d658:	2307      	movs	r3, #7
 800d65a:	e09c      	b.n	800d796 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d65c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d660:	2b04      	cmp	r3, #4
 800d662:	d002      	beq.n	800d66a <dir_register+0xb6>
 800d664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d668:	e095      	b.n	800d796 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d66a:	7dfa      	ldrb	r2, [r7, #23]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	f003 0302 	and.w	r3, r3, #2
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d007      	beq.n	800d68c <dir_register+0xd8>
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	330c      	adds	r3, #12
 800d680:	4a47      	ldr	r2, [pc, #284]	; (800d7a0 <dir_register+0x1ec>)
 800d682:	fba2 2303 	umull	r2, r3, r2, r3
 800d686:	089b      	lsrs	r3, r3, #2
 800d688:	3301      	adds	r3, #1
 800d68a:	e000      	b.n	800d68e <dir_register+0xda>
 800d68c:	2301      	movs	r3, #1
 800d68e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d690:	6a39      	ldr	r1, [r7, #32]
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff fcbd 	bl	800d012 <dir_alloc>
 800d698:	4603      	mov	r3, r0
 800d69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d69e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d148      	bne.n	800d738 <dir_register+0x184>
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	623b      	str	r3, [r7, #32]
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d042      	beq.n	800d738 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	695a      	ldr	r2, [r3, #20]
 800d6b6:	6a3b      	ldr	r3, [r7, #32]
 800d6b8:	015b      	lsls	r3, r3, #5
 800d6ba:	1ad3      	subs	r3, r2, r3
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f7ff fb48 	bl	800cd54 <dir_sdi>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d6ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d132      	bne.n	800d738 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3324      	adds	r3, #36	; 0x24
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fe8a 	bl	800d3f0 <sum_sfn>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	69db      	ldr	r3, [r3, #28]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	69f8      	ldr	r0, [r7, #28]
 800d6e8:	f7fe ff52 	bl	800c590 <move_window>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d6f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d11d      	bne.n	800d736 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	6918      	ldr	r0, [r3, #16]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6a19      	ldr	r1, [r3, #32]
 800d702:	6a3b      	ldr	r3, [r7, #32]
 800d704:	b2da      	uxtb	r2, r3
 800d706:	7efb      	ldrb	r3, [r7, #27]
 800d708:	f7ff fd7a 	bl	800d200 <put_lfn>
				fs->wflag = 1;
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	2201      	movs	r2, #1
 800d710:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d712:	2100      	movs	r1, #0
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7ff fba6 	bl	800ce66 <dir_next>
 800d71a:	4603      	mov	r3, r0
 800d71c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d724:	2b00      	cmp	r3, #0
 800d726:	d107      	bne.n	800d738 <dir_register+0x184>
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	623b      	str	r3, [r7, #32]
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1d5      	bne.n	800d6e0 <dir_register+0x12c>
 800d734:	e000      	b.n	800d738 <dir_register+0x184>
				if (res != FR_OK) break;
 800d736:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d738:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d128      	bne.n	800d792 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	69db      	ldr	r3, [r3, #28]
 800d744:	4619      	mov	r1, r3
 800d746:	69f8      	ldr	r0, [r7, #28]
 800d748:	f7fe ff22 	bl	800c590 <move_window>
 800d74c:	4603      	mov	r3, r0
 800d74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d752:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d756:	2b00      	cmp	r3, #0
 800d758:	d11b      	bne.n	800d792 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6a1b      	ldr	r3, [r3, #32]
 800d75e:	2220      	movs	r2, #32
 800d760:	2100      	movs	r1, #0
 800d762:	4618      	mov	r0, r3
 800d764:	f7fe fd07 	bl	800c176 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6a18      	ldr	r0, [r3, #32]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	3324      	adds	r3, #36	; 0x24
 800d770:	220b      	movs	r2, #11
 800d772:	4619      	mov	r1, r3
 800d774:	f7fe fcde 	bl	800c134 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	330c      	adds	r3, #12
 800d784:	f002 0218 	and.w	r2, r2, #24
 800d788:	b2d2      	uxtb	r2, r2
 800d78a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	2201      	movs	r2, #1
 800d790:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d796:	4618      	mov	r0, r3
 800d798:	3730      	adds	r7, #48	; 0x30
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	4ec4ec4f 	.word	0x4ec4ec4f

0800d7a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b08a      	sub	sp, #40	; 0x28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	613b      	str	r3, [r7, #16]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	60fb      	str	r3, [r7, #12]
 800d7bc:	2300      	movs	r3, #0
 800d7be:	617b      	str	r3, [r7, #20]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	1c5a      	adds	r2, r3, #1
 800d7c8:	61ba      	str	r2, [r7, #24]
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	4413      	add	r3, r2
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d7d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7d4:	2b1f      	cmp	r3, #31
 800d7d6:	d940      	bls.n	800d85a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d7d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7da:	2b2f      	cmp	r3, #47	; 0x2f
 800d7dc:	d006      	beq.n	800d7ec <create_name+0x48>
 800d7de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7e0:	2b5c      	cmp	r3, #92	; 0x5c
 800d7e2:	d110      	bne.n	800d806 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d7e4:	e002      	b.n	800d7ec <create_name+0x48>
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	61bb      	str	r3, [r7, #24]
 800d7ec:	693a      	ldr	r2, [r7, #16]
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	2b2f      	cmp	r3, #47	; 0x2f
 800d7f6:	d0f6      	beq.n	800d7e6 <create_name+0x42>
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	2b5c      	cmp	r3, #92	; 0x5c
 800d802:	d0f0      	beq.n	800d7e6 <create_name+0x42>
			break;
 800d804:	e02a      	b.n	800d85c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	2bfe      	cmp	r3, #254	; 0xfe
 800d80a:	d901      	bls.n	800d810 <create_name+0x6c>
 800d80c:	2306      	movs	r3, #6
 800d80e:	e177      	b.n	800db00 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d812:	b2db      	uxtb	r3, r3
 800d814:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d818:	2101      	movs	r1, #1
 800d81a:	4618      	mov	r0, r3
 800d81c:	f001 fc16 	bl	800f04c <ff_convert>
 800d820:	4603      	mov	r3, r0
 800d822:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d826:	2b00      	cmp	r3, #0
 800d828:	d101      	bne.n	800d82e <create_name+0x8a>
 800d82a:	2306      	movs	r3, #6
 800d82c:	e168      	b.n	800db00 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d82e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d830:	2b7f      	cmp	r3, #127	; 0x7f
 800d832:	d809      	bhi.n	800d848 <create_name+0xa4>
 800d834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d836:	4619      	mov	r1, r3
 800d838:	48b3      	ldr	r0, [pc, #716]	; (800db08 <create_name+0x364>)
 800d83a:	f7fe fcde 	bl	800c1fa <chk_chr>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d001      	beq.n	800d848 <create_name+0xa4>
 800d844:	2306      	movs	r3, #6
 800d846:	e15b      	b.n	800db00 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	1c5a      	adds	r2, r3, #1
 800d84c:	617a      	str	r2, [r7, #20]
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	68fa      	ldr	r2, [r7, #12]
 800d852:	4413      	add	r3, r2
 800d854:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d856:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d858:	e7b4      	b.n	800d7c4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d85a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d85c:	693a      	ldr	r2, [r7, #16]
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	441a      	add	r2, r3
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d868:	2b1f      	cmp	r3, #31
 800d86a:	d801      	bhi.n	800d870 <create_name+0xcc>
 800d86c:	2304      	movs	r3, #4
 800d86e:	e000      	b.n	800d872 <create_name+0xce>
 800d870:	2300      	movs	r3, #0
 800d872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d876:	e011      	b.n	800d89c <create_name+0xf8>
		w = lfn[di - 1];
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d87e:	3b01      	subs	r3, #1
 800d880:	005b      	lsls	r3, r3, #1
 800d882:	68fa      	ldr	r2, [r7, #12]
 800d884:	4413      	add	r3, r2
 800d886:	881b      	ldrh	r3, [r3, #0]
 800d888:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d88a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d88c:	2b20      	cmp	r3, #32
 800d88e:	d002      	beq.n	800d896 <create_name+0xf2>
 800d890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d892:	2b2e      	cmp	r3, #46	; 0x2e
 800d894:	d106      	bne.n	800d8a4 <create_name+0x100>
		di--;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	3b01      	subs	r3, #1
 800d89a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1ea      	bne.n	800d878 <create_name+0xd4>
 800d8a2:	e000      	b.n	800d8a6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d8a4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	005b      	lsls	r3, r3, #1
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <create_name+0x118>
 800d8b8:	2306      	movs	r3, #6
 800d8ba:	e121      	b.n	800db00 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	3324      	adds	r3, #36	; 0x24
 800d8c0:	220b      	movs	r2, #11
 800d8c2:	2120      	movs	r1, #32
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe fc56 	bl	800c176 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	61bb      	str	r3, [r7, #24]
 800d8ce:	e002      	b.n	800d8d6 <create_name+0x132>
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	61bb      	str	r3, [r7, #24]
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	4413      	add	r3, r2
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	2b20      	cmp	r3, #32
 800d8e2:	d0f5      	beq.n	800d8d0 <create_name+0x12c>
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	005b      	lsls	r3, r3, #1
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	881b      	ldrh	r3, [r3, #0]
 800d8ee:	2b2e      	cmp	r3, #46	; 0x2e
 800d8f0:	d0ee      	beq.n	800d8d0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d8f2:	69bb      	ldr	r3, [r7, #24]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d009      	beq.n	800d90c <create_name+0x168>
 800d8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8fc:	f043 0303 	orr.w	r3, r3, #3
 800d900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d904:	e002      	b.n	800d90c <create_name+0x168>
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	3b01      	subs	r3, #1
 800d90a:	617b      	str	r3, [r7, #20]
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d009      	beq.n	800d926 <create_name+0x182>
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d918:	3b01      	subs	r3, #1
 800d91a:	005b      	lsls	r3, r3, #1
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	4413      	add	r3, r2
 800d920:	881b      	ldrh	r3, [r3, #0]
 800d922:	2b2e      	cmp	r3, #46	; 0x2e
 800d924:	d1ef      	bne.n	800d906 <create_name+0x162>

	i = b = 0; ni = 8;
 800d926:	2300      	movs	r3, #0
 800d928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d92c:	2300      	movs	r3, #0
 800d92e:	623b      	str	r3, [r7, #32]
 800d930:	2308      	movs	r3, #8
 800d932:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	61ba      	str	r2, [r7, #24]
 800d93a:	005b      	lsls	r3, r3, #1
 800d93c:	68fa      	ldr	r2, [r7, #12]
 800d93e:	4413      	add	r3, r2
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d946:	2b00      	cmp	r3, #0
 800d948:	f000 8090 	beq.w	800da6c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d94c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d94e:	2b20      	cmp	r3, #32
 800d950:	d006      	beq.n	800d960 <create_name+0x1bc>
 800d952:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d954:	2b2e      	cmp	r3, #46	; 0x2e
 800d956:	d10a      	bne.n	800d96e <create_name+0x1ca>
 800d958:	69ba      	ldr	r2, [r7, #24]
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d006      	beq.n	800d96e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d964:	f043 0303 	orr.w	r3, r3, #3
 800d968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d96c:	e07d      	b.n	800da6a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d96e:	6a3a      	ldr	r2, [r7, #32]
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	429a      	cmp	r2, r3
 800d974:	d203      	bcs.n	800d97e <create_name+0x1da>
 800d976:	69ba      	ldr	r2, [r7, #24]
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d123      	bne.n	800d9c6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	2b0b      	cmp	r3, #11
 800d982:	d106      	bne.n	800d992 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d988:	f043 0303 	orr.w	r3, r3, #3
 800d98c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d990:	e06f      	b.n	800da72 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	429a      	cmp	r2, r3
 800d998:	d005      	beq.n	800d9a6 <create_name+0x202>
 800d99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d99e:	f043 0303 	orr.w	r3, r3, #3
 800d9a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d9a6:	69ba      	ldr	r2, [r7, #24]
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d860      	bhi.n	800da70 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	61bb      	str	r3, [r7, #24]
 800d9b2:	2308      	movs	r3, #8
 800d9b4:	623b      	str	r3, [r7, #32]
 800d9b6:	230b      	movs	r3, #11
 800d9b8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d9ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9c4:	e051      	b.n	800da6a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d9c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9c8:	2b7f      	cmp	r3, #127	; 0x7f
 800d9ca:	d914      	bls.n	800d9f6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f001 fb3b 	bl	800f04c <ff_convert>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d004      	beq.n	800d9ea <create_name+0x246>
 800d9e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9e2:	3b80      	subs	r3, #128	; 0x80
 800d9e4:	4a49      	ldr	r2, [pc, #292]	; (800db0c <create_name+0x368>)
 800d9e6:	5cd3      	ldrb	r3, [r2, r3]
 800d9e8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d9ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9ee:	f043 0302 	orr.w	r3, r3, #2
 800d9f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d9f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d007      	beq.n	800da0c <create_name+0x268>
 800d9fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9fe:	4619      	mov	r1, r3
 800da00:	4843      	ldr	r0, [pc, #268]	; (800db10 <create_name+0x36c>)
 800da02:	f7fe fbfa 	bl	800c1fa <chk_chr>
 800da06:	4603      	mov	r3, r0
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d008      	beq.n	800da1e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800da0c:	235f      	movs	r3, #95	; 0x5f
 800da0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800da10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da14:	f043 0303 	orr.w	r3, r3, #3
 800da18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800da1c:	e01b      	b.n	800da56 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800da1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da20:	2b40      	cmp	r3, #64	; 0x40
 800da22:	d909      	bls.n	800da38 <create_name+0x294>
 800da24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da26:	2b5a      	cmp	r3, #90	; 0x5a
 800da28:	d806      	bhi.n	800da38 <create_name+0x294>
					b |= 2;
 800da2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da2e:	f043 0302 	orr.w	r3, r3, #2
 800da32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da36:	e00e      	b.n	800da56 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800da38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da3a:	2b60      	cmp	r3, #96	; 0x60
 800da3c:	d90b      	bls.n	800da56 <create_name+0x2b2>
 800da3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da40:	2b7a      	cmp	r3, #122	; 0x7a
 800da42:	d808      	bhi.n	800da56 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800da44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da48:	f043 0301 	orr.w	r3, r3, #1
 800da4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800da50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da52:	3b20      	subs	r3, #32
 800da54:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	1c5a      	adds	r2, r3, #1
 800da5a:	623a      	str	r2, [r7, #32]
 800da5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da5e:	b2d1      	uxtb	r1, r2
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	4413      	add	r3, r2
 800da64:	460a      	mov	r2, r1
 800da66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800da6a:	e763      	b.n	800d934 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800da6c:	bf00      	nop
 800da6e:	e000      	b.n	800da72 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800da70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800da78:	2be5      	cmp	r3, #229	; 0xe5
 800da7a:	d103      	bne.n	800da84 <create_name+0x2e0>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2205      	movs	r2, #5
 800da80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	2b08      	cmp	r3, #8
 800da88:	d104      	bne.n	800da94 <create_name+0x2f0>
 800da8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800da94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da98:	f003 030c 	and.w	r3, r3, #12
 800da9c:	2b0c      	cmp	r3, #12
 800da9e:	d005      	beq.n	800daac <create_name+0x308>
 800daa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800daa4:	f003 0303 	and.w	r3, r3, #3
 800daa8:	2b03      	cmp	r3, #3
 800daaa:	d105      	bne.n	800dab8 <create_name+0x314>
 800daac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dab0:	f043 0302 	orr.w	r3, r3, #2
 800dab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800dab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d117      	bne.n	800daf4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dac8:	f003 0303 	and.w	r3, r3, #3
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d105      	bne.n	800dadc <create_name+0x338>
 800dad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dad4:	f043 0310 	orr.w	r3, r3, #16
 800dad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800dadc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dae0:	f003 030c 	and.w	r3, r3, #12
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d105      	bne.n	800daf4 <create_name+0x350>
 800dae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800daec:	f043 0308 	orr.w	r3, r3, #8
 800daf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800dafa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800dafe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800db00:	4618      	mov	r0, r3
 800db02:	3728      	adds	r7, #40	; 0x28
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	08014b48 	.word	0x08014b48
 800db0c:	08014bbc 	.word	0x08014bbc
 800db10:	08014b54 	.word	0x08014b54

0800db14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800db28:	e002      	b.n	800db30 <follow_path+0x1c>
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	3301      	adds	r3, #1
 800db2e:	603b      	str	r3, [r7, #0]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b2f      	cmp	r3, #47	; 0x2f
 800db36:	d0f8      	beq.n	800db2a <follow_path+0x16>
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	2b5c      	cmp	r3, #92	; 0x5c
 800db3e:	d0f4      	beq.n	800db2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	2200      	movs	r2, #0
 800db44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	2b1f      	cmp	r3, #31
 800db4c:	d80a      	bhi.n	800db64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2280      	movs	r2, #128	; 0x80
 800db52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800db56:	2100      	movs	r1, #0
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f7ff f8fb 	bl	800cd54 <dir_sdi>
 800db5e:	4603      	mov	r3, r0
 800db60:	75fb      	strb	r3, [r7, #23]
 800db62:	e048      	b.n	800dbf6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db64:	463b      	mov	r3, r7
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff fe1b 	bl	800d7a4 <create_name>
 800db6e:	4603      	mov	r3, r0
 800db70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db72:	7dfb      	ldrb	r3, [r7, #23]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d139      	bne.n	800dbec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f7ff fc5a 	bl	800d432 <dir_find>
 800db7e:	4603      	mov	r3, r0
 800db80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00a      	beq.n	800dba6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db90:	7dfb      	ldrb	r3, [r7, #23]
 800db92:	2b04      	cmp	r3, #4
 800db94:	d12c      	bne.n	800dbf0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800db96:	7afb      	ldrb	r3, [r7, #11]
 800db98:	f003 0304 	and.w	r3, r3, #4
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d127      	bne.n	800dbf0 <follow_path+0xdc>
 800dba0:	2305      	movs	r3, #5
 800dba2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dba4:	e024      	b.n	800dbf0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dba6:	7afb      	ldrb	r3, [r7, #11]
 800dba8:	f003 0304 	and.w	r3, r3, #4
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d121      	bne.n	800dbf4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	799b      	ldrb	r3, [r3, #6]
 800dbb4:	f003 0310 	and.w	r3, r3, #16
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d102      	bne.n	800dbc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dbbc:	2305      	movs	r3, #5
 800dbbe:	75fb      	strb	r3, [r7, #23]
 800dbc0:	e019      	b.n	800dbf6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	695b      	ldr	r3, [r3, #20]
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	8992      	ldrh	r2, [r2, #12]
 800dbd0:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbd4:	fb02 f200 	mul.w	r2, r2, r0
 800dbd8:	1a9b      	subs	r3, r3, r2
 800dbda:	440b      	add	r3, r1
 800dbdc:	4619      	mov	r1, r3
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff fa5e 	bl	800d0a0 <ld_clust>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbea:	e7bb      	b.n	800db64 <follow_path+0x50>
			if (res != FR_OK) break;
 800dbec:	bf00      	nop
 800dbee:	e002      	b.n	800dbf6 <follow_path+0xe2>
				break;
 800dbf0:	bf00      	nop
 800dbf2:	e000      	b.n	800dbf6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbf4:	bf00      	nop
			}
		}
	}

	return res;
 800dbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3718      	adds	r7, #24
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b087      	sub	sp, #28
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dc08:	f04f 33ff 	mov.w	r3, #4294967295
 800dc0c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d031      	beq.n	800dc7a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	e002      	b.n	800dc24 <get_ldnumber+0x24>
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	3301      	adds	r3, #1
 800dc22:	617b      	str	r3, [r7, #20]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	2b1f      	cmp	r3, #31
 800dc2a:	d903      	bls.n	800dc34 <get_ldnumber+0x34>
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	2b3a      	cmp	r3, #58	; 0x3a
 800dc32:	d1f4      	bne.n	800dc1e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b3a      	cmp	r3, #58	; 0x3a
 800dc3a:	d11c      	bne.n	800dc76 <get_ldnumber+0x76>
			tp = *path;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	1c5a      	adds	r2, r3, #1
 800dc46:	60fa      	str	r2, [r7, #12]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	3b30      	subs	r3, #48	; 0x30
 800dc4c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b09      	cmp	r3, #9
 800dc52:	d80e      	bhi.n	800dc72 <get_ldnumber+0x72>
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d10a      	bne.n	800dc72 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d107      	bne.n	800dc72 <get_ldnumber+0x72>
					vol = (int)i;
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	617b      	str	r3, [r7, #20]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	697a      	ldr	r2, [r7, #20]
 800dc70:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	e002      	b.n	800dc7c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dc76:	2300      	movs	r3, #0
 800dc78:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dc7a:	693b      	ldr	r3, [r7, #16]
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	371c      	adds	r7, #28
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2200      	movs	r2, #0
 800dc96:	70da      	strb	r2, [r3, #3]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc9e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7fe fc74 	bl	800c590 <move_window>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <check_fs+0x2a>
 800dcae:	2304      	movs	r3, #4
 800dcb0:	e038      	b.n	800dd24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	3338      	adds	r3, #56	; 0x38
 800dcb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe f9b8 	bl	800c030 <ld_word>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d001      	beq.n	800dcd0 <check_fs+0x48>
 800dccc:	2303      	movs	r3, #3
 800dcce:	e029      	b.n	800dd24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dcd6:	2be9      	cmp	r3, #233	; 0xe9
 800dcd8:	d009      	beq.n	800dcee <check_fs+0x66>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dce0:	2beb      	cmp	r3, #235	; 0xeb
 800dce2:	d11e      	bne.n	800dd22 <check_fs+0x9a>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dcea:	2b90      	cmp	r3, #144	; 0x90
 800dcec:	d119      	bne.n	800dd22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	3338      	adds	r3, #56	; 0x38
 800dcf2:	3336      	adds	r3, #54	; 0x36
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7fe f9b3 	bl	800c060 <ld_dword>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd00:	4a0a      	ldr	r2, [pc, #40]	; (800dd2c <check_fs+0xa4>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d101      	bne.n	800dd0a <check_fs+0x82>
 800dd06:	2300      	movs	r3, #0
 800dd08:	e00c      	b.n	800dd24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	3338      	adds	r3, #56	; 0x38
 800dd0e:	3352      	adds	r3, #82	; 0x52
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe f9a5 	bl	800c060 <ld_dword>
 800dd16:	4603      	mov	r3, r0
 800dd18:	4a05      	ldr	r2, [pc, #20]	; (800dd30 <check_fs+0xa8>)
 800dd1a:	4293      	cmp	r3, r2
 800dd1c:	d101      	bne.n	800dd22 <check_fs+0x9a>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e000      	b.n	800dd24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dd22:	2302      	movs	r3, #2
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3708      	adds	r7, #8
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	00544146 	.word	0x00544146
 800dd30:	33544146 	.word	0x33544146

0800dd34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b096      	sub	sp, #88	; 0x58
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	2200      	movs	r2, #0
 800dd46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7ff ff59 	bl	800dc00 <get_ldnumber>
 800dd4e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	da01      	bge.n	800dd5a <find_volume+0x26>
 800dd56:	230b      	movs	r3, #11
 800dd58:	e268      	b.n	800e22c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dd5a:	4ab0      	ldr	r2, [pc, #704]	; (800e01c <find_volume+0x2e8>)
 800dd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd62:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <find_volume+0x3a>
 800dd6a:	230c      	movs	r3, #12
 800dd6c:	e25e      	b.n	800e22c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	f023 0301 	bic.w	r3, r3, #1
 800dd7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d01a      	beq.n	800ddba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd86:	785b      	ldrb	r3, [r3, #1]
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fe f8b3 	bl	800bef4 <disk_status>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dd94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10c      	bne.n	800ddba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dda0:	79fb      	ldrb	r3, [r7, #7]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d007      	beq.n	800ddb6 <find_volume+0x82>
 800dda6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddaa:	f003 0304 	and.w	r3, r3, #4
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ddb2:	230a      	movs	r3, #10
 800ddb4:	e23a      	b.n	800e22c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	e238      	b.n	800e22c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ddba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ddc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddca:	785b      	ldrb	r3, [r3, #1]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fe f8ab 	bl	800bf28 <disk_initialize>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ddd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dddc:	f003 0301 	and.w	r3, r3, #1
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dde4:	2303      	movs	r3, #3
 800dde6:	e221      	b.n	800e22c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dde8:	79fb      	ldrb	r3, [r7, #7]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d007      	beq.n	800ddfe <find_volume+0xca>
 800ddee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddf2:	f003 0304 	and.w	r3, r3, #4
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ddfa:	230a      	movs	r3, #10
 800ddfc:	e216      	b.n	800e22c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de00:	7858      	ldrb	r0, [r3, #1]
 800de02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de04:	330c      	adds	r3, #12
 800de06:	461a      	mov	r2, r3
 800de08:	2102      	movs	r1, #2
 800de0a:	f7fe f8f3 	bl	800bff4 <disk_ioctl>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d001      	beq.n	800de18 <find_volume+0xe4>
 800de14:	2301      	movs	r3, #1
 800de16:	e209      	b.n	800e22c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800de18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de1a:	899b      	ldrh	r3, [r3, #12]
 800de1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de20:	d80d      	bhi.n	800de3e <find_volume+0x10a>
 800de22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de24:	899b      	ldrh	r3, [r3, #12]
 800de26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de2a:	d308      	bcc.n	800de3e <find_volume+0x10a>
 800de2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2e:	899b      	ldrh	r3, [r3, #12]
 800de30:	461a      	mov	r2, r3
 800de32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de34:	899b      	ldrh	r3, [r3, #12]
 800de36:	3b01      	subs	r3, #1
 800de38:	4013      	ands	r3, r2
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <find_volume+0x10e>
 800de3e:	2301      	movs	r3, #1
 800de40:	e1f4      	b.n	800e22c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800de46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de4a:	f7ff ff1d 	bl	800dc88 <check_fs>
 800de4e:	4603      	mov	r3, r0
 800de50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800de54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de58:	2b02      	cmp	r3, #2
 800de5a:	d14b      	bne.n	800def4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de5c:	2300      	movs	r3, #0
 800de5e:	643b      	str	r3, [r7, #64]	; 0x40
 800de60:	e01f      	b.n	800dea2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800de62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800de68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de6a:	011b      	lsls	r3, r3, #4
 800de6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800de70:	4413      	add	r3, r2
 800de72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800de74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de76:	3304      	adds	r3, #4
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d006      	beq.n	800de8c <find_volume+0x158>
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	3308      	adds	r3, #8
 800de82:	4618      	mov	r0, r3
 800de84:	f7fe f8ec 	bl	800c060 <ld_dword>
 800de88:	4602      	mov	r2, r0
 800de8a:	e000      	b.n	800de8e <find_volume+0x15a>
 800de8c:	2200      	movs	r2, #0
 800de8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800de96:	440b      	add	r3, r1
 800de98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de9e:	3301      	adds	r3, #1
 800dea0:	643b      	str	r3, [r7, #64]	; 0x40
 800dea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dea4:	2b03      	cmp	r3, #3
 800dea6:	d9dc      	bls.n	800de62 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dea8:	2300      	movs	r3, #0
 800deaa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800deac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d002      	beq.n	800deb8 <find_volume+0x184>
 800deb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deb4:	3b01      	subs	r3, #1
 800deb6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800deb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dec0:	4413      	add	r3, r2
 800dec2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dec6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800deca:	2b00      	cmp	r3, #0
 800decc:	d005      	beq.n	800deda <find_volume+0x1a6>
 800dece:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ded0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ded2:	f7ff fed9 	bl	800dc88 <check_fs>
 800ded6:	4603      	mov	r3, r0
 800ded8:	e000      	b.n	800dedc <find_volume+0x1a8>
 800deda:	2303      	movs	r3, #3
 800dedc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d905      	bls.n	800def4 <find_volume+0x1c0>
 800dee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800deea:	3301      	adds	r3, #1
 800deec:	643b      	str	r3, [r7, #64]	; 0x40
 800deee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800def0:	2b03      	cmp	r3, #3
 800def2:	d9e1      	bls.n	800deb8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800def4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800def8:	2b04      	cmp	r3, #4
 800defa:	d101      	bne.n	800df00 <find_volume+0x1cc>
 800defc:	2301      	movs	r3, #1
 800defe:	e195      	b.n	800e22c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800df00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800df04:	2b01      	cmp	r3, #1
 800df06:	d901      	bls.n	800df0c <find_volume+0x1d8>
 800df08:	230d      	movs	r3, #13
 800df0a:	e18f      	b.n	800e22c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800df0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0e:	3338      	adds	r3, #56	; 0x38
 800df10:	330b      	adds	r3, #11
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe f88c 	bl	800c030 <ld_word>
 800df18:	4603      	mov	r3, r0
 800df1a:	461a      	mov	r2, r3
 800df1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1e:	899b      	ldrh	r3, [r3, #12]
 800df20:	429a      	cmp	r2, r3
 800df22:	d001      	beq.n	800df28 <find_volume+0x1f4>
 800df24:	230d      	movs	r3, #13
 800df26:	e181      	b.n	800e22c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	3338      	adds	r3, #56	; 0x38
 800df2c:	3316      	adds	r3, #22
 800df2e:	4618      	mov	r0, r3
 800df30:	f7fe f87e 	bl	800c030 <ld_word>
 800df34:	4603      	mov	r3, r0
 800df36:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d106      	bne.n	800df4c <find_volume+0x218>
 800df3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df40:	3338      	adds	r3, #56	; 0x38
 800df42:	3324      	adds	r3, #36	; 0x24
 800df44:	4618      	mov	r0, r3
 800df46:	f7fe f88b 	bl	800c060 <ld_dword>
 800df4a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df50:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800df52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df54:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800df58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800df5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5e:	789b      	ldrb	r3, [r3, #2]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d005      	beq.n	800df70 <find_volume+0x23c>
 800df64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df66:	789b      	ldrb	r3, [r3, #2]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	d001      	beq.n	800df70 <find_volume+0x23c>
 800df6c:	230d      	movs	r3, #13
 800df6e:	e15d      	b.n	800e22c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	789b      	ldrb	r3, [r3, #2]
 800df74:	461a      	mov	r2, r3
 800df76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df78:	fb02 f303 	mul.w	r3, r2, r3
 800df7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800df7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df84:	b29a      	uxth	r2, r3
 800df86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800df8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8c:	895b      	ldrh	r3, [r3, #10]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d008      	beq.n	800dfa4 <find_volume+0x270>
 800df92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df94:	895b      	ldrh	r3, [r3, #10]
 800df96:	461a      	mov	r2, r3
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	895b      	ldrh	r3, [r3, #10]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	4013      	ands	r3, r2
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <find_volume+0x274>
 800dfa4:	230d      	movs	r3, #13
 800dfa6:	e141      	b.n	800e22c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfaa:	3338      	adds	r3, #56	; 0x38
 800dfac:	3311      	adds	r3, #17
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe f83e 	bl	800c030 <ld_word>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfbe:	891b      	ldrh	r3, [r3, #8]
 800dfc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfc2:	8992      	ldrh	r2, [r2, #12]
 800dfc4:	0952      	lsrs	r2, r2, #5
 800dfc6:	b292      	uxth	r2, r2
 800dfc8:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfcc:	fb02 f201 	mul.w	r2, r2, r1
 800dfd0:	1a9b      	subs	r3, r3, r2
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <find_volume+0x2a8>
 800dfd8:	230d      	movs	r3, #13
 800dfda:	e127      	b.n	800e22c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfde:	3338      	adds	r3, #56	; 0x38
 800dfe0:	3313      	adds	r3, #19
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fe f824 	bl	800c030 <ld_word>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dfec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d106      	bne.n	800e000 <find_volume+0x2cc>
 800dff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff4:	3338      	adds	r3, #56	; 0x38
 800dff6:	3320      	adds	r3, #32
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe f831 	bl	800c060 <ld_dword>
 800dffe:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e002:	3338      	adds	r3, #56	; 0x38
 800e004:	330e      	adds	r3, #14
 800e006:	4618      	mov	r0, r3
 800e008:	f7fe f812 	bl	800c030 <ld_word>
 800e00c:	4603      	mov	r3, r0
 800e00e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e012:	2b00      	cmp	r3, #0
 800e014:	d104      	bne.n	800e020 <find_volume+0x2ec>
 800e016:	230d      	movs	r3, #13
 800e018:	e108      	b.n	800e22c <find_volume+0x4f8>
 800e01a:	bf00      	nop
 800e01c:	20000260 	.word	0x20000260

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e020:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e024:	4413      	add	r3, r2
 800e026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e028:	8911      	ldrh	r1, [r2, #8]
 800e02a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e02c:	8992      	ldrh	r2, [r2, #12]
 800e02e:	0952      	lsrs	r2, r2, #5
 800e030:	b292      	uxth	r2, r2
 800e032:	fbb1 f2f2 	udiv	r2, r1, r2
 800e036:	b292      	uxth	r2, r2
 800e038:	4413      	add	r3, r2
 800e03a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	429a      	cmp	r2, r3
 800e042:	d201      	bcs.n	800e048 <find_volume+0x314>
 800e044:	230d      	movs	r3, #13
 800e046:	e0f1      	b.n	800e22c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	1ad3      	subs	r3, r2, r3
 800e04e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e050:	8952      	ldrh	r2, [r2, #10]
 800e052:	fbb3 f3f2 	udiv	r3, r3, r2
 800e056:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d101      	bne.n	800e062 <find_volume+0x32e>
 800e05e:	230d      	movs	r3, #13
 800e060:	e0e4      	b.n	800e22c <find_volume+0x4f8>
		fmt = FS_FAT32;
 800e062:	2303      	movs	r3, #3
 800e064:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e06e:	4293      	cmp	r3, r2
 800e070:	d802      	bhi.n	800e078 <find_volume+0x344>
 800e072:	2302      	movs	r3, #2
 800e074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e07e:	4293      	cmp	r3, r2
 800e080:	d802      	bhi.n	800e088 <find_volume+0x354>
 800e082:	2301      	movs	r3, #1
 800e084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	1c9a      	adds	r2, r3, #2
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e092:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e094:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e096:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e09a:	441a      	add	r2, r3
 800e09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e0a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a4:	441a      	add	r2, r3
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e0aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d11e      	bne.n	800e0f0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b4:	3338      	adds	r3, #56	; 0x38
 800e0b6:	332a      	adds	r3, #42	; 0x2a
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fd ffb9 	bl	800c030 <ld_word>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d001      	beq.n	800e0c8 <find_volume+0x394>
 800e0c4:	230d      	movs	r3, #13
 800e0c6:	e0b1      	b.n	800e22c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	891b      	ldrh	r3, [r3, #8]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d001      	beq.n	800e0d4 <find_volume+0x3a0>
 800e0d0:	230d      	movs	r3, #13
 800e0d2:	e0ab      	b.n	800e22c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	3338      	adds	r3, #56	; 0x38
 800e0d8:	332c      	adds	r3, #44	; 0x2c
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fd ffc0 	bl	800c060 <ld_dword>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	69db      	ldr	r3, [r3, #28]
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	647b      	str	r3, [r7, #68]	; 0x44
 800e0ee:	e01f      	b.n	800e130 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	891b      	ldrh	r3, [r3, #8]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d101      	bne.n	800e0fc <find_volume+0x3c8>
 800e0f8:	230d      	movs	r3, #13
 800e0fa:	e097      	b.n	800e22c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e102:	441a      	add	r2, r3
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e108:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e10c:	2b02      	cmp	r3, #2
 800e10e:	d103      	bne.n	800e118 <find_volume+0x3e4>
 800e110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e112:	69db      	ldr	r3, [r3, #28]
 800e114:	005b      	lsls	r3, r3, #1
 800e116:	e00a      	b.n	800e12e <find_volume+0x3fa>
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	69da      	ldr	r2, [r3, #28]
 800e11c:	4613      	mov	r3, r2
 800e11e:	005b      	lsls	r3, r3, #1
 800e120:	4413      	add	r3, r2
 800e122:	085a      	lsrs	r2, r3, #1
 800e124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e126:	69db      	ldr	r3, [r3, #28]
 800e128:	f003 0301 	and.w	r3, r3, #1
 800e12c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e12e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e132:	6a1a      	ldr	r2, [r3, #32]
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	899b      	ldrh	r3, [r3, #12]
 800e138:	4619      	mov	r1, r3
 800e13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e13c:	440b      	add	r3, r1
 800e13e:	3b01      	subs	r3, #1
 800e140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e142:	8989      	ldrh	r1, [r1, #12]
 800e144:	fbb3 f3f1 	udiv	r3, r3, r1
 800e148:	429a      	cmp	r2, r3
 800e14a:	d201      	bcs.n	800e150 <find_volume+0x41c>
 800e14c:	230d      	movs	r3, #13
 800e14e:	e06d      	b.n	800e22c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e152:	f04f 32ff 	mov.w	r2, #4294967295
 800e156:	619a      	str	r2, [r3, #24]
 800e158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15a:	699a      	ldr	r2, [r3, #24]
 800e15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e162:	2280      	movs	r2, #128	; 0x80
 800e164:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e166:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e16a:	2b03      	cmp	r3, #3
 800e16c:	d149      	bne.n	800e202 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e170:	3338      	adds	r3, #56	; 0x38
 800e172:	3330      	adds	r3, #48	; 0x30
 800e174:	4618      	mov	r0, r3
 800e176:	f7fd ff5b 	bl	800c030 <ld_word>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d140      	bne.n	800e202 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e182:	3301      	adds	r3, #1
 800e184:	4619      	mov	r1, r3
 800e186:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e188:	f7fe fa02 	bl	800c590 <move_window>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d137      	bne.n	800e202 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800e192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e194:	2200      	movs	r2, #0
 800e196:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	3338      	adds	r3, #56	; 0x38
 800e19c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fd ff45 	bl	800c030 <ld_word>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	461a      	mov	r2, r3
 800e1aa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d127      	bne.n	800e202 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b4:	3338      	adds	r3, #56	; 0x38
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7fd ff52 	bl	800c060 <ld_dword>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	4a1d      	ldr	r2, [pc, #116]	; (800e234 <find_volume+0x500>)
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d11e      	bne.n	800e202 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c6:	3338      	adds	r3, #56	; 0x38
 800e1c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fd ff47 	bl	800c060 <ld_dword>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	4a18      	ldr	r2, [pc, #96]	; (800e238 <find_volume+0x504>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d113      	bne.n	800e202 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1dc:	3338      	adds	r3, #56	; 0x38
 800e1de:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fd ff3c 	bl	800c060 <ld_dword>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ec:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f0:	3338      	adds	r3, #56	; 0x38
 800e1f2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fd ff32 	bl	800c060 <ld_dword>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e200:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e204:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e208:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e20a:	4b0c      	ldr	r3, [pc, #48]	; (800e23c <find_volume+0x508>)
 800e20c:	881b      	ldrh	r3, [r3, #0]
 800e20e:	3301      	adds	r3, #1
 800e210:	b29a      	uxth	r2, r3
 800e212:	4b0a      	ldr	r3, [pc, #40]	; (800e23c <find_volume+0x508>)
 800e214:	801a      	strh	r2, [r3, #0]
 800e216:	4b09      	ldr	r3, [pc, #36]	; (800e23c <find_volume+0x508>)
 800e218:	881a      	ldrh	r2, [r3, #0]
 800e21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e220:	4a07      	ldr	r2, [pc, #28]	; (800e240 <find_volume+0x50c>)
 800e222:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e224:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e226:	f7fe f94b 	bl	800c4c0 <clear_lock>
#endif
	return FR_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3758      	adds	r7, #88	; 0x58
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	41615252 	.word	0x41615252
 800e238:	61417272 	.word	0x61417272
 800e23c:	20000264 	.word	0x20000264
 800e240:	20000288 	.word	0x20000288

0800e244 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e24e:	2309      	movs	r3, #9
 800e250:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d01c      	beq.n	800e292 <validate+0x4e>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d018      	beq.n	800e292 <validate+0x4e>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d013      	beq.n	800e292 <validate+0x4e>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	889a      	ldrh	r2, [r3, #4]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	88db      	ldrh	r3, [r3, #6]
 800e274:	429a      	cmp	r2, r3
 800e276:	d10c      	bne.n	800e292 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	785b      	ldrb	r3, [r3, #1]
 800e27e:	4618      	mov	r0, r3
 800e280:	f7fd fe38 	bl	800bef4 <disk_status>
 800e284:	4603      	mov	r3, r0
 800e286:	f003 0301 	and.w	r3, r3, #1
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <validate+0x4e>
			res = FR_OK;
 800e28e:	2300      	movs	r3, #0
 800e290:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e292:	7bfb      	ldrb	r3, [r7, #15]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <validate+0x5a>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	e000      	b.n	800e2a0 <validate+0x5c>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	6013      	str	r3, [r2, #0]
	return res;
 800e2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e2c2:	f107 0310 	add.w	r3, r7, #16
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7ff fc9a 	bl	800dc00 <get_ldnumber>
 800e2cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	da01      	bge.n	800e2d8 <f_mount+0x28>
 800e2d4:	230b      	movs	r3, #11
 800e2d6:	e02b      	b.n	800e330 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e2d8:	4a17      	ldr	r2, [pc, #92]	; (800e338 <f_mount+0x88>)
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d005      	beq.n	800e2f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e2e8:	69b8      	ldr	r0, [r7, #24]
 800e2ea:	f7fe f8e9 	bl	800c4c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	490d      	ldr	r1, [pc, #52]	; (800e338 <f_mount+0x88>)
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d002      	beq.n	800e316 <f_mount+0x66>
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	2b01      	cmp	r3, #1
 800e314:	d001      	beq.n	800e31a <f_mount+0x6a>
 800e316:	2300      	movs	r3, #0
 800e318:	e00a      	b.n	800e330 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e31a:	f107 010c 	add.w	r1, r7, #12
 800e31e:	f107 0308 	add.w	r3, r7, #8
 800e322:	2200      	movs	r2, #0
 800e324:	4618      	mov	r0, r3
 800e326:	f7ff fd05 	bl	800dd34 <find_volume>
 800e32a:	4603      	mov	r3, r0
 800e32c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e32e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3720      	adds	r7, #32
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20000260 	.word	0x20000260

0800e33c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b09a      	sub	sp, #104	; 0x68
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	4613      	mov	r3, r2
 800e348:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d101      	bne.n	800e354 <f_open+0x18>
 800e350:	2309      	movs	r3, #9
 800e352:	e1bb      	b.n	800e6cc <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e354:	79fb      	ldrb	r3, [r7, #7]
 800e356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e35a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e35c:	79fa      	ldrb	r2, [r7, #7]
 800e35e:	f107 0114 	add.w	r1, r7, #20
 800e362:	f107 0308 	add.w	r3, r7, #8
 800e366:	4618      	mov	r0, r3
 800e368:	f7ff fce4 	bl	800dd34 <find_volume>
 800e36c:	4603      	mov	r3, r0
 800e36e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e372:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e376:	2b00      	cmp	r3, #0
 800e378:	f040 819f 	bne.w	800e6ba <f_open+0x37e>
		dj.obj.fs = fs;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	f107 0318 	add.w	r3, r7, #24
 800e386:	4611      	mov	r1, r2
 800e388:	4618      	mov	r0, r3
 800e38a:	f7ff fbc3 	bl	800db14 <follow_path>
 800e38e:	4603      	mov	r3, r0
 800e390:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d11a      	bne.n	800e3d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e39c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e3a0:	b25b      	sxtb	r3, r3
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da03      	bge.n	800e3ae <f_open+0x72>
				res = FR_INVALID_NAME;
 800e3a6:	2306      	movs	r3, #6
 800e3a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e3ac:	e011      	b.n	800e3d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
 800e3b0:	f023 0301 	bic.w	r3, r3, #1
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	bf14      	ite	ne
 800e3b8:	2301      	movne	r3, #1
 800e3ba:	2300      	moveq	r3, #0
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f107 0318 	add.w	r3, r7, #24
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd ff32 	bl	800c230 <chk_lock>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e3d2:	79fb      	ldrb	r3, [r7, #7]
 800e3d4:	f003 031c 	and.w	r3, r3, #28
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d07f      	beq.n	800e4dc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e3dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d017      	beq.n	800e414 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e3e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e3e8:	2b04      	cmp	r3, #4
 800e3ea:	d10e      	bne.n	800e40a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e3ec:	f7fd ff7c 	bl	800c2e8 <enq_lock>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d006      	beq.n	800e404 <f_open+0xc8>
 800e3f6:	f107 0318 	add.w	r3, r7, #24
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff f8da 	bl	800d5b4 <dir_register>
 800e400:	4603      	mov	r3, r0
 800e402:	e000      	b.n	800e406 <f_open+0xca>
 800e404:	2312      	movs	r3, #18
 800e406:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e40a:	79fb      	ldrb	r3, [r7, #7]
 800e40c:	f043 0308 	orr.w	r3, r3, #8
 800e410:	71fb      	strb	r3, [r7, #7]
 800e412:	e010      	b.n	800e436 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e414:	7fbb      	ldrb	r3, [r7, #30]
 800e416:	f003 0311 	and.w	r3, r3, #17
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d003      	beq.n	800e426 <f_open+0xea>
					res = FR_DENIED;
 800e41e:	2307      	movs	r3, #7
 800e420:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e424:	e007      	b.n	800e436 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e426:	79fb      	ldrb	r3, [r7, #7]
 800e428:	f003 0304 	and.w	r3, r3, #4
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <f_open+0xfa>
 800e430:	2308      	movs	r3, #8
 800e432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d168      	bne.n	800e510 <f_open+0x1d4>
 800e43e:	79fb      	ldrb	r3, [r7, #7]
 800e440:	f003 0308 	and.w	r3, r3, #8
 800e444:	2b00      	cmp	r3, #0
 800e446:	d063      	beq.n	800e510 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e448:	f7fd fbda 	bl	800bc00 <get_fattime>
 800e44c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	330e      	adds	r3, #14
 800e452:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e454:	4618      	mov	r0, r3
 800e456:	f7fd fe41 	bl	800c0dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45c:	3316      	adds	r3, #22
 800e45e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e460:	4618      	mov	r0, r3
 800e462:	f7fd fe3b 	bl	800c0dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	330b      	adds	r3, #11
 800e46a:	2220      	movs	r2, #32
 800e46c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e472:	4611      	mov	r1, r2
 800e474:	4618      	mov	r0, r3
 800e476:	f7fe fe13 	bl	800d0a0 <ld_clust>
 800e47a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e480:	2200      	movs	r2, #0
 800e482:	4618      	mov	r0, r3
 800e484:	f7fe fe2b 	bl	800d0de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48a:	331c      	adds	r3, #28
 800e48c:	2100      	movs	r1, #0
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fd fe24 	bl	800c0dc <st_dword>
					fs->wflag = 1;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	2201      	movs	r2, #1
 800e498:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e49a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d037      	beq.n	800e510 <f_open+0x1d4>
						dw = fs->winsect;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e4a6:	f107 0318 	add.w	r3, r7, #24
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fe fb1b 	bl	800caea <remove_chain>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e4ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d126      	bne.n	800e510 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fe f862 	bl	800c590 <move_window>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4d6:	3a01      	subs	r2, #1
 800e4d8:	615a      	str	r2, [r3, #20]
 800e4da:	e019      	b.n	800e510 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e4dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d115      	bne.n	800e510 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e4e4:	7fbb      	ldrb	r3, [r7, #30]
 800e4e6:	f003 0310 	and.w	r3, r3, #16
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d003      	beq.n	800e4f6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e4ee:	2304      	movs	r3, #4
 800e4f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e4f4:	e00c      	b.n	800e510 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	f003 0302 	and.w	r3, r3, #2
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d007      	beq.n	800e510 <f_open+0x1d4>
 800e500:	7fbb      	ldrb	r3, [r7, #30]
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	d002      	beq.n	800e510 <f_open+0x1d4>
						res = FR_DENIED;
 800e50a:	2307      	movs	r3, #7
 800e50c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e510:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e514:	2b00      	cmp	r3, #0
 800e516:	d128      	bne.n	800e56a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e518:	79fb      	ldrb	r3, [r7, #7]
 800e51a:	f003 0308 	and.w	r3, r3, #8
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d003      	beq.n	800e52a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e522:	79fb      	ldrb	r3, [r7, #7]
 800e524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e528:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	f023 0301 	bic.w	r3, r3, #1
 800e53e:	2b00      	cmp	r3, #0
 800e540:	bf14      	ite	ne
 800e542:	2301      	movne	r3, #1
 800e544:	2300      	moveq	r3, #0
 800e546:	b2db      	uxtb	r3, r3
 800e548:	461a      	mov	r2, r3
 800e54a:	f107 0318 	add.w	r3, r7, #24
 800e54e:	4611      	mov	r1, r2
 800e550:	4618      	mov	r0, r3
 800e552:	f7fd feeb 	bl	800c32c <inc_lock>
 800e556:	4602      	mov	r2, r0
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	691b      	ldr	r3, [r3, #16]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d102      	bne.n	800e56a <f_open+0x22e>
 800e564:	2302      	movs	r3, #2
 800e566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e56a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f040 80a3 	bne.w	800e6ba <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e578:	4611      	mov	r1, r2
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fe fd90 	bl	800d0a0 <ld_clust>
 800e580:	4602      	mov	r2, r0
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e588:	331c      	adds	r3, #28
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fd fd68 	bl	800c060 <ld_dword>
 800e590:	4602      	mov	r2, r0
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	88da      	ldrh	r2, [r3, #6]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	79fa      	ldrb	r2, [r7, #7]
 800e5ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3330      	adds	r3, #48	; 0x30
 800e5c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	f7fd fdd2 	bl	800c176 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	f003 0320 	and.w	r3, r3, #32
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d06e      	beq.n	800e6ba <f_open+0x37e>
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d06a      	beq.n	800e6ba <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	68da      	ldr	r2, [r3, #12]
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	895b      	ldrh	r3, [r3, #10]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	899b      	ldrh	r3, [r3, #12]
 800e5f6:	fb03 f302 	mul.w	r3, r3, r2
 800e5fa:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e608:	e016      	b.n	800e638 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fe f87b 	bl	800c70a <get_fat>
 800e614:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d802      	bhi.n	800e622 <f_open+0x2e6>
 800e61c:	2302      	movs	r3, #2
 800e61e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e624:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e628:	d102      	bne.n	800e630 <f_open+0x2f4>
 800e62a:	2301      	movs	r3, #1
 800e62c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e630:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e638:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d103      	bne.n	800e648 <f_open+0x30c>
 800e640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e644:	429a      	cmp	r2, r3
 800e646:	d8e0      	bhi.n	800e60a <f_open+0x2ce>
				}
				fp->clust = clst;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e64c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e64e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e652:	2b00      	cmp	r3, #0
 800e654:	d131      	bne.n	800e6ba <f_open+0x37e>
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	899b      	ldrh	r3, [r3, #12]
 800e65a:	461a      	mov	r2, r3
 800e65c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e65e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e662:	fb02 f201 	mul.w	r2, r2, r1
 800e666:	1a9b      	subs	r3, r3, r2
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d026      	beq.n	800e6ba <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e670:	4618      	mov	r0, r3
 800e672:	f7fe f82b 	bl	800c6cc <clust2sect>
 800e676:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d103      	bne.n	800e686 <f_open+0x34a>
						res = FR_INT_ERR;
 800e67e:	2302      	movs	r3, #2
 800e680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e684:	e019      	b.n	800e6ba <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	899b      	ldrh	r3, [r3, #12]
 800e68a:	461a      	mov	r2, r3
 800e68c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e68e:	fbb3 f2f2 	udiv	r2, r3, r2
 800e692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e694:	441a      	add	r2, r3
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	7858      	ldrb	r0, [r3, #1]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6a1a      	ldr	r2, [r3, #32]
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	f7fd fc63 	bl	800bf74 <disk_read>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d002      	beq.n	800e6ba <f_open+0x37e>
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e6ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d002      	beq.n	800e6c8 <f_open+0x38c>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e6c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3768      	adds	r7, #104	; 0x68
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}

0800e6d4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08c      	sub	sp, #48	; 0x30
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f107 0210 	add.w	r2, r7, #16
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7ff fda5 	bl	800e244 <validate>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e704:	2b00      	cmp	r3, #0
 800e706:	d107      	bne.n	800e718 <f_write+0x44>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	7d5b      	ldrb	r3, [r3, #21]
 800e70c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e714:	2b00      	cmp	r3, #0
 800e716:	d002      	beq.n	800e71e <f_write+0x4a>
 800e718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e71c:	e16a      	b.n	800e9f4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	7d1b      	ldrb	r3, [r3, #20]
 800e722:	f003 0302 	and.w	r3, r3, #2
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <f_write+0x5a>
 800e72a:	2307      	movs	r3, #7
 800e72c:	e162      	b.n	800e9f4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	699a      	ldr	r2, [r3, #24]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	441a      	add	r2, r3
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	429a      	cmp	r2, r3
 800e73c:	f080 814c 	bcs.w	800e9d8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	43db      	mvns	r3, r3
 800e746:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e748:	e146      	b.n	800e9d8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	693a      	ldr	r2, [r7, #16]
 800e750:	8992      	ldrh	r2, [r2, #12]
 800e752:	fbb3 f1f2 	udiv	r1, r3, r2
 800e756:	fb02 f201 	mul.w	r2, r2, r1
 800e75a:	1a9b      	subs	r3, r3, r2
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	f040 80f1 	bne.w	800e944 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	699b      	ldr	r3, [r3, #24]
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	8992      	ldrh	r2, [r2, #12]
 800e76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	8952      	ldrh	r2, [r2, #10]
 800e772:	3a01      	subs	r2, #1
 800e774:	4013      	ands	r3, r2
 800e776:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e778:	69bb      	ldr	r3, [r7, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d143      	bne.n	800e806 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	699b      	ldr	r3, [r3, #24]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10c      	bne.n	800e7a0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d11a      	bne.n	800e7c8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2100      	movs	r1, #0
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe fa0c 	bl	800cbb4 <create_chain>
 800e79c:	62b8      	str	r0, [r7, #40]	; 0x28
 800e79e:	e013      	b.n	800e7c8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d007      	beq.n	800e7b8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	699b      	ldr	r3, [r3, #24]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	68f8      	ldr	r0, [r7, #12]
 800e7b0:	f7fe fa98 	bl	800cce4 <clmt_clust>
 800e7b4:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7b6:	e007      	b.n	800e7c8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	f7fe f9f7 	bl	800cbb4 <create_chain>
 800e7c6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	f000 8109 	beq.w	800e9e2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d104      	bne.n	800e7e0 <f_write+0x10c>
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2202      	movs	r2, #2
 800e7da:	755a      	strb	r2, [r3, #21]
 800e7dc:	2302      	movs	r3, #2
 800e7de:	e109      	b.n	800e9f4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e6:	d104      	bne.n	800e7f2 <f_write+0x11e>
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	755a      	strb	r2, [r3, #21]
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	e100      	b.n	800e9f4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7f6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	689b      	ldr	r3, [r3, #8]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d102      	bne.n	800e806 <f_write+0x132>
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e804:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	7d1b      	ldrb	r3, [r3, #20]
 800e80a:	b25b      	sxtb	r3, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	da18      	bge.n	800e842 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	7858      	ldrb	r0, [r3, #1]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a1a      	ldr	r2, [r3, #32]
 800e81e:	2301      	movs	r3, #1
 800e820:	f7fd fbc8 	bl	800bfb4 <disk_write>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d004      	beq.n	800e834 <f_write+0x160>
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2201      	movs	r2, #1
 800e82e:	755a      	strb	r2, [r3, #21]
 800e830:	2301      	movs	r3, #1
 800e832:	e0df      	b.n	800e9f4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	7d1b      	ldrb	r3, [r3, #20]
 800e838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e842:	693a      	ldr	r2, [r7, #16]
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	69db      	ldr	r3, [r3, #28]
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f7fd ff3e 	bl	800c6cc <clust2sect>
 800e850:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d104      	bne.n	800e862 <f_write+0x18e>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2202      	movs	r2, #2
 800e85c:	755a      	strb	r2, [r3, #21]
 800e85e:	2302      	movs	r3, #2
 800e860:	e0c8      	b.n	800e9f4 <f_write+0x320>
			sect += csect;
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	69bb      	ldr	r3, [r7, #24]
 800e866:	4413      	add	r3, r2
 800e868:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	899b      	ldrh	r3, [r3, #12]
 800e86e:	461a      	mov	r2, r3
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	fbb3 f3f2 	udiv	r3, r3, r2
 800e876:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e878:	6a3b      	ldr	r3, [r7, #32]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d043      	beq.n	800e906 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e87e:	69ba      	ldr	r2, [r7, #24]
 800e880:	6a3b      	ldr	r3, [r7, #32]
 800e882:	4413      	add	r3, r2
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	8952      	ldrh	r2, [r2, #10]
 800e888:	4293      	cmp	r3, r2
 800e88a:	d905      	bls.n	800e898 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	895b      	ldrh	r3, [r3, #10]
 800e890:	461a      	mov	r2, r3
 800e892:	69bb      	ldr	r3, [r7, #24]
 800e894:	1ad3      	subs	r3, r2, r3
 800e896:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	7858      	ldrb	r0, [r3, #1]
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	697a      	ldr	r2, [r7, #20]
 800e8a0:	69f9      	ldr	r1, [r7, #28]
 800e8a2:	f7fd fb87 	bl	800bfb4 <disk_write>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d004      	beq.n	800e8b6 <f_write+0x1e2>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	755a      	strb	r2, [r3, #21]
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e09e      	b.n	800e9f4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	6a1a      	ldr	r2, [r3, #32]
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	1ad3      	subs	r3, r2, r3
 800e8be:	6a3a      	ldr	r2, [r7, #32]
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d918      	bls.n	800e8f6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	6a1a      	ldr	r2, [r3, #32]
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	693a      	ldr	r2, [r7, #16]
 800e8d4:	8992      	ldrh	r2, [r2, #12]
 800e8d6:	fb02 f303 	mul.w	r3, r2, r3
 800e8da:	69fa      	ldr	r2, [r7, #28]
 800e8dc:	18d1      	adds	r1, r2, r3
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	899b      	ldrh	r3, [r3, #12]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	f7fd fc26 	bl	800c134 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	7d1b      	ldrb	r3, [r3, #20]
 800e8ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8f0:	b2da      	uxtb	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	899b      	ldrh	r3, [r3, #12]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	fb02 f303 	mul.w	r3, r2, r3
 800e902:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e904:	e04b      	b.n	800e99e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	6a1b      	ldr	r3, [r3, #32]
 800e90a:	697a      	ldr	r2, [r7, #20]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d016      	beq.n	800e93e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	699a      	ldr	r2, [r3, #24]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e918:	429a      	cmp	r2, r3
 800e91a:	d210      	bcs.n	800e93e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	7858      	ldrb	r0, [r3, #1]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e926:	2301      	movs	r3, #1
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	f7fd fb23 	bl	800bf74 <disk_read>
 800e92e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2201      	movs	r2, #1
 800e938:	755a      	strb	r2, [r3, #21]
 800e93a:	2301      	movs	r3, #1
 800e93c:	e05a      	b.n	800e9f4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	697a      	ldr	r2, [r7, #20]
 800e942:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	899b      	ldrh	r3, [r3, #12]
 800e948:	4618      	mov	r0, r3
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	699b      	ldr	r3, [r3, #24]
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	8992      	ldrh	r2, [r2, #12]
 800e952:	fbb3 f1f2 	udiv	r1, r3, r2
 800e956:	fb02 f201 	mul.w	r2, r2, r1
 800e95a:	1a9b      	subs	r3, r3, r2
 800e95c:	1ac3      	subs	r3, r0, r3
 800e95e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	429a      	cmp	r2, r3
 800e966:	d901      	bls.n	800e96c <f_write+0x298>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	693a      	ldr	r2, [r7, #16]
 800e978:	8992      	ldrh	r2, [r2, #12]
 800e97a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e97e:	fb02 f200 	mul.w	r2, r2, r0
 800e982:	1a9b      	subs	r3, r3, r2
 800e984:	440b      	add	r3, r1
 800e986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e988:	69f9      	ldr	r1, [r7, #28]
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fd fbd2 	bl	800c134 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	7d1b      	ldrb	r3, [r3, #20]
 800e994:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e99e:	69fa      	ldr	r2, [r7, #28]
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	4413      	add	r3, r2
 800e9a4:	61fb      	str	r3, [r7, #28]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	699a      	ldr	r2, [r3, #24]
 800e9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ac:	441a      	add	r2, r3
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	619a      	str	r2, [r3, #24]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	68da      	ldr	r2, [r3, #12]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	bf38      	it	cc
 800e9be:	461a      	movcc	r2, r3
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	60da      	str	r2, [r3, #12]
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	441a      	add	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	687a      	ldr	r2, [r7, #4]
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f47f aeb5 	bne.w	800e74a <f_write+0x76>
 800e9e0:	e000      	b.n	800e9e4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9e2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	7d1b      	ldrb	r3, [r3, #20]
 800e9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ec:	b2da      	uxtb	r2, r3
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3730      	adds	r7, #48	; 0x30
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f107 0208 	add.w	r2, r7, #8
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff fc19 	bl	800e244 <validate>
 800ea12:	4603      	mov	r3, r0
 800ea14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea16:	7dfb      	ldrb	r3, [r7, #23]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d168      	bne.n	800eaee <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	7d1b      	ldrb	r3, [r3, #20]
 800ea20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d062      	beq.n	800eaee <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	7d1b      	ldrb	r3, [r3, #20]
 800ea2c:	b25b      	sxtb	r3, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	da15      	bge.n	800ea5e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	7858      	ldrb	r0, [r3, #1]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a1a      	ldr	r2, [r3, #32]
 800ea40:	2301      	movs	r3, #1
 800ea42:	f7fd fab7 	bl	800bfb4 <disk_write>
 800ea46:	4603      	mov	r3, r0
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d001      	beq.n	800ea50 <f_sync+0x54>
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	e04f      	b.n	800eaf0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	7d1b      	ldrb	r3, [r3, #20]
 800ea54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea58:	b2da      	uxtb	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea5e:	f7fd f8cf 	bl	800bc00 <get_fattime>
 800ea62:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	f7fd fd8f 	bl	800c590 <move_window>
 800ea72:	4603      	mov	r3, r0
 800ea74:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d138      	bne.n	800eaee <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea80:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	330b      	adds	r3, #11
 800ea86:	781a      	ldrb	r2, [r3, #0]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	330b      	adds	r3, #11
 800ea8c:	f042 0220 	orr.w	r2, r2, #32
 800ea90:	b2d2      	uxtb	r2, r2
 800ea92:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6818      	ldr	r0, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	68f9      	ldr	r1, [r7, #12]
 800eaa0:	f7fe fb1d 	bl	800d0de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f103 021c 	add.w	r2, r3, #28
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	4619      	mov	r1, r3
 800eab0:	4610      	mov	r0, r2
 800eab2:	f7fd fb13 	bl	800c0dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	3316      	adds	r3, #22
 800eaba:	6939      	ldr	r1, [r7, #16]
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fd fb0d 	bl	800c0dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	3312      	adds	r3, #18
 800eac6:	2100      	movs	r1, #0
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7fd faec 	bl	800c0a6 <st_word>
					fs->wflag = 1;
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	2201      	movs	r2, #1
 800ead2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fd fd88 	bl	800c5ec <sync_fs>
 800eadc:	4603      	mov	r3, r0
 800eade:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	7d1b      	ldrb	r3, [r3, #20]
 800eae4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eaee:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3718      	adds	r7, #24
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7ff ff7b 	bl	800e9fc <f_sync>
 800eb06:	4603      	mov	r3, r0
 800eb08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eb0a:	7bfb      	ldrb	r3, [r7, #15]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d118      	bne.n	800eb42 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f107 0208 	add.w	r2, r7, #8
 800eb16:	4611      	mov	r1, r2
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff fb93 	bl	800e244 <validate>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d10c      	bne.n	800eb42 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7fd fc8b 	bl	800c448 <dec_lock>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d102      	bne.n	800eb42 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b090      	sub	sp, #64	; 0x40
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f107 0208 	add.w	r2, r7, #8
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7ff fb70 	bl	800e244 <validate>
 800eb64:	4603      	mov	r3, r0
 800eb66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800eb6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d103      	bne.n	800eb7a <f_lseek+0x2e>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	7d5b      	ldrb	r3, [r3, #21]
 800eb76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800eb7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <f_lseek+0x3c>
 800eb82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb86:	e201      	b.n	800ef8c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f000 80d9 	beq.w	800ed44 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb98:	d15a      	bne.n	800ec50 <f_lseek+0x104>
			tbl = fp->cltbl;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800eba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba2:	1d1a      	adds	r2, r3, #4
 800eba4:	627a      	str	r2, [r7, #36]	; 0x24
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	617b      	str	r3, [r7, #20]
 800ebaa:	2302      	movs	r3, #2
 800ebac:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d03a      	beq.n	800ec30 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	613b      	str	r3, [r7, #16]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	3302      	adds	r3, #2
 800ebc6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	3301      	adds	r3, #1
 800ebd0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fd fd97 	bl	800c70a <get_fat>
 800ebdc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d804      	bhi.n	800ebee <f_lseek+0xa2>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2202      	movs	r2, #2
 800ebe8:	755a      	strb	r2, [r3, #21]
 800ebea:	2302      	movs	r3, #2
 800ebec:	e1ce      	b.n	800ef8c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ebee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf4:	d104      	bne.n	800ec00 <f_lseek+0xb4>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	755a      	strb	r2, [r3, #21]
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	e1c5      	b.n	800ef8c <f_lseek+0x440>
					} while (cl == pcl + 1);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	3301      	adds	r3, #1
 800ec04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d0de      	beq.n	800ebc8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ec0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d809      	bhi.n	800ec26 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ec12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec14:	1d1a      	adds	r2, r3, #4
 800ec16:	627a      	str	r2, [r7, #36]	; 0x24
 800ec18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec1e:	1d1a      	adds	r2, r3, #4
 800ec20:	627a      	str	r2, [r7, #36]	; 0x24
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	69db      	ldr	r3, [r3, #28]
 800ec2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d3c4      	bcc.n	800ebba <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec36:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ec38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d803      	bhi.n	800ec48 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	2200      	movs	r2, #0
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	e19f      	b.n	800ef88 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ec48:	2311      	movs	r3, #17
 800ec4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ec4e:	e19b      	b.n	800ef88 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	683a      	ldr	r2, [r7, #0]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d902      	bls.n	800ec60 <f_lseek+0x114>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	683a      	ldr	r2, [r7, #0]
 800ec64:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f000 818d 	beq.w	800ef88 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	3b01      	subs	r3, #1
 800ec72:	4619      	mov	r1, r3
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7fe f835 	bl	800cce4 <clmt_clust>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ec80:	68ba      	ldr	r2, [r7, #8]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	69db      	ldr	r3, [r3, #28]
 800ec86:	4619      	mov	r1, r3
 800ec88:	4610      	mov	r0, r2
 800ec8a:	f7fd fd1f 	bl	800c6cc <clust2sect>
 800ec8e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ec90:	69bb      	ldr	r3, [r7, #24]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d104      	bne.n	800eca0 <f_lseek+0x154>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2202      	movs	r2, #2
 800ec9a:	755a      	strb	r2, [r3, #21]
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	e175      	b.n	800ef8c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	3b01      	subs	r3, #1
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	8992      	ldrh	r2, [r2, #12]
 800eca8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	8952      	ldrh	r2, [r2, #10]
 800ecb0:	3a01      	subs	r2, #1
 800ecb2:	4013      	ands	r3, r2
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	4413      	add	r3, r2
 800ecb8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	699b      	ldr	r3, [r3, #24]
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	8992      	ldrh	r2, [r2, #12]
 800ecc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecc6:	fb02 f201 	mul.w	r2, r2, r1
 800ecca:	1a9b      	subs	r3, r3, r2
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	f000 815b 	beq.w	800ef88 <f_lseek+0x43c>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a1b      	ldr	r3, [r3, #32]
 800ecd6:	69ba      	ldr	r2, [r7, #24]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	f000 8155 	beq.w	800ef88 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	7d1b      	ldrb	r3, [r3, #20]
 800ece2:	b25b      	sxtb	r3, r3
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	da18      	bge.n	800ed1a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	7858      	ldrb	r0, [r3, #1]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6a1a      	ldr	r2, [r3, #32]
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	f7fd f95c 	bl	800bfb4 <disk_write>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d004      	beq.n	800ed0c <f_lseek+0x1c0>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2201      	movs	r2, #1
 800ed06:	755a      	strb	r2, [r3, #21]
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e13f      	b.n	800ef8c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	7d1b      	ldrb	r3, [r3, #20]
 800ed10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ed1a:	68bb      	ldr	r3, [r7, #8]
 800ed1c:	7858      	ldrb	r0, [r3, #1]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed24:	2301      	movs	r3, #1
 800ed26:	69ba      	ldr	r2, [r7, #24]
 800ed28:	f7fd f924 	bl	800bf74 <disk_read>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d004      	beq.n	800ed3c <f_lseek+0x1f0>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	755a      	strb	r2, [r3, #21]
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e127      	b.n	800ef8c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	69ba      	ldr	r2, [r7, #24]
 800ed40:	621a      	str	r2, [r3, #32]
 800ed42:	e121      	b.n	800ef88 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	683a      	ldr	r2, [r7, #0]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d908      	bls.n	800ed60 <f_lseek+0x214>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	7d1b      	ldrb	r3, [r3, #20]
 800ed52:	f003 0302 	and.w	r3, r3, #2
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d102      	bne.n	800ed60 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	637b      	str	r3, [r7, #52]	; 0x34
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed6e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f000 80b5 	beq.w	800eee2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	895b      	ldrh	r3, [r3, #10]
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	899b      	ldrh	r3, [r3, #12]
 800ed82:	fb03 f302 	mul.w	r3, r3, r2
 800ed86:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ed88:	6a3b      	ldr	r3, [r7, #32]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d01b      	beq.n	800edc6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	1e5a      	subs	r2, r3, #1
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	fbb2 f2f3 	udiv	r2, r2, r3
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	1e59      	subs	r1, r3, #1
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d30f      	bcc.n	800edc6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	1e5a      	subs	r2, r3, #1
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	425b      	negs	r3, r3
 800edae:	401a      	ands	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	683a      	ldr	r2, [r7, #0]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	69db      	ldr	r3, [r3, #28]
 800edc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800edc4:	e022      	b.n	800ee0c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800edcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d119      	bne.n	800ee06 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2100      	movs	r1, #0
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fd feec 	bl	800cbb4 <create_chain>
 800eddc:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800edde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d104      	bne.n	800edee <f_lseek+0x2a2>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2202      	movs	r2, #2
 800ede8:	755a      	strb	r2, [r3, #21]
 800edea:	2302      	movs	r3, #2
 800edec:	e0ce      	b.n	800ef8c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800edee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf4:	d104      	bne.n	800ee00 <f_lseek+0x2b4>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2201      	movs	r2, #1
 800edfa:	755a      	strb	r2, [r3, #21]
 800edfc:	2301      	movs	r3, #1
 800edfe:	e0c5      	b.n	800ef8c <f_lseek+0x440>
					fp->obj.sclust = clst;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee04:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee0a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d067      	beq.n	800eee2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800ee12:	e03a      	b.n	800ee8a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	1ad3      	subs	r3, r2, r3
 800ee1a:	603b      	str	r3, [r7, #0]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	699a      	ldr	r2, [r3, #24]
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	441a      	add	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	7d1b      	ldrb	r3, [r3, #20]
 800ee2c:	f003 0302 	and.w	r3, r3, #2
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00b      	beq.n	800ee4c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fd febb 	bl	800cbb4 <create_chain>
 800ee3e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ee40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d108      	bne.n	800ee58 <f_lseek+0x30c>
							ofs = 0; break;
 800ee46:	2300      	movs	r3, #0
 800ee48:	603b      	str	r3, [r7, #0]
 800ee4a:	e022      	b.n	800ee92 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fd fc5a 	bl	800c70a <get_fat>
 800ee56:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee5e:	d104      	bne.n	800ee6a <f_lseek+0x31e>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	755a      	strb	r2, [r3, #21]
 800ee66:	2301      	movs	r3, #1
 800ee68:	e090      	b.n	800ef8c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d904      	bls.n	800ee7a <f_lseek+0x32e>
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	69db      	ldr	r3, [r3, #28]
 800ee74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d304      	bcc.n	800ee84 <f_lseek+0x338>
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	755a      	strb	r2, [r3, #21]
 800ee80:	2302      	movs	r3, #2
 800ee82:	e083      	b.n	800ef8c <f_lseek+0x440>
					fp->clust = clst;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee88:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d8c0      	bhi.n	800ee14 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	699a      	ldr	r2, [r3, #24]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	441a      	add	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	899b      	ldrh	r3, [r3, #12]
 800eea2:	461a      	mov	r2, r3
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	fbb3 f1f2 	udiv	r1, r3, r2
 800eeaa:	fb02 f201 	mul.w	r2, r2, r1
 800eeae:	1a9b      	subs	r3, r3, r2
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d016      	beq.n	800eee2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7fd fc07 	bl	800c6cc <clust2sect>
 800eebe:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800eec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d104      	bne.n	800eed0 <f_lseek+0x384>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2202      	movs	r2, #2
 800eeca:	755a      	strb	r2, [r3, #21]
 800eecc:	2302      	movs	r3, #2
 800eece:	e05d      	b.n	800ef8c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	899b      	ldrh	r3, [r3, #12]
 800eed4:	461a      	mov	r2, r3
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eedc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eede:	4413      	add	r3, r2
 800eee0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	699a      	ldr	r2, [r3, #24]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d90a      	bls.n	800ef04 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	699a      	ldr	r2, [r3, #24]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	7d1b      	ldrb	r3, [r3, #20]
 800eefa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	699b      	ldr	r3, [r3, #24]
 800ef08:	68ba      	ldr	r2, [r7, #8]
 800ef0a:	8992      	ldrh	r2, [r2, #12]
 800ef0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef10:	fb02 f201 	mul.w	r2, r2, r1
 800ef14:	1a9b      	subs	r3, r3, r2
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d036      	beq.n	800ef88 <f_lseek+0x43c>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a1b      	ldr	r3, [r3, #32]
 800ef1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d031      	beq.n	800ef88 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	7d1b      	ldrb	r3, [r3, #20]
 800ef28:	b25b      	sxtb	r3, r3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	da18      	bge.n	800ef60 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	7858      	ldrb	r0, [r3, #1]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6a1a      	ldr	r2, [r3, #32]
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	f7fd f839 	bl	800bfb4 <disk_write>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d004      	beq.n	800ef52 <f_lseek+0x406>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	755a      	strb	r2, [r3, #21]
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e01c      	b.n	800ef8c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	7d1b      	ldrb	r3, [r3, #20]
 800ef56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	7858      	ldrb	r0, [r3, #1]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef6e:	f7fd f801 	bl	800bf74 <disk_read>
 800ef72:	4603      	mov	r3, r0
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d004      	beq.n	800ef82 <f_lseek+0x436>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	755a      	strb	r2, [r3, #21]
 800ef7e:	2301      	movs	r3, #1
 800ef80:	e004      	b.n	800ef8c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef86:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ef88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3740      	adds	r7, #64	; 0x40
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b087      	sub	sp, #28
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800efa2:	2301      	movs	r3, #1
 800efa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800efaa:	4b1f      	ldr	r3, [pc, #124]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efac:	7a5b      	ldrb	r3, [r3, #9]
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d131      	bne.n	800f018 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800efb4:	4b1c      	ldr	r3, [pc, #112]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efb6:	7a5b      	ldrb	r3, [r3, #9]
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	461a      	mov	r2, r3
 800efbc:	4b1a      	ldr	r3, [pc, #104]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efbe:	2100      	movs	r1, #0
 800efc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800efc2:	4b19      	ldr	r3, [pc, #100]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efc4:	7a5b      	ldrb	r3, [r3, #9]
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	4a17      	ldr	r2, [pc, #92]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	68fa      	ldr	r2, [r7, #12]
 800efd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800efd2:	4b15      	ldr	r3, [pc, #84]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efd4:	7a5b      	ldrb	r3, [r3, #9]
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	461a      	mov	r2, r3
 800efda:	4b13      	ldr	r3, [pc, #76]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efdc:	4413      	add	r3, r2
 800efde:	79fa      	ldrb	r2, [r7, #7]
 800efe0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800efe2:	4b11      	ldr	r3, [pc, #68]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efe4:	7a5b      	ldrb	r3, [r3, #9]
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	b2d1      	uxtb	r1, r2
 800efec:	4a0e      	ldr	r2, [pc, #56]	; (800f028 <FATFS_LinkDriverEx+0x94>)
 800efee:	7251      	strb	r1, [r2, #9]
 800eff0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eff2:	7dbb      	ldrb	r3, [r7, #22]
 800eff4:	3330      	adds	r3, #48	; 0x30
 800eff6:	b2da      	uxtb	r2, r3
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	3301      	adds	r3, #1
 800f000:	223a      	movs	r2, #58	; 0x3a
 800f002:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	3302      	adds	r3, #2
 800f008:	222f      	movs	r2, #47	; 0x2f
 800f00a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	3303      	adds	r3, #3
 800f010:	2200      	movs	r2, #0
 800f012:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f014:	2300      	movs	r3, #0
 800f016:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f018:	7dfb      	ldrb	r3, [r7, #23]
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	371c      	adds	r7, #28
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop
 800f028:	20000488 	.word	0x20000488

0800f02c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f036:	2200      	movs	r2, #0
 800f038:	6839      	ldr	r1, [r7, #0]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7ff ffaa 	bl	800ef94 <FATFS_LinkDriverEx>
 800f040:	4603      	mov	r3, r0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
	...

0800f04c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	4603      	mov	r3, r0
 800f054:	6039      	str	r1, [r7, #0]
 800f056:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f058:	88fb      	ldrh	r3, [r7, #6]
 800f05a:	2b7f      	cmp	r3, #127	; 0x7f
 800f05c:	d802      	bhi.n	800f064 <ff_convert+0x18>
		c = chr;
 800f05e:	88fb      	ldrh	r3, [r7, #6]
 800f060:	81fb      	strh	r3, [r7, #14]
 800f062:	e025      	b.n	800f0b0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00b      	beq.n	800f082 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f06a:	88fb      	ldrh	r3, [r7, #6]
 800f06c:	2bff      	cmp	r3, #255	; 0xff
 800f06e:	d805      	bhi.n	800f07c <ff_convert+0x30>
 800f070:	88fb      	ldrh	r3, [r7, #6]
 800f072:	3b80      	subs	r3, #128	; 0x80
 800f074:	4a12      	ldr	r2, [pc, #72]	; (800f0c0 <ff_convert+0x74>)
 800f076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f07a:	e000      	b.n	800f07e <ff_convert+0x32>
 800f07c:	2300      	movs	r3, #0
 800f07e:	81fb      	strh	r3, [r7, #14]
 800f080:	e016      	b.n	800f0b0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f082:	2300      	movs	r3, #0
 800f084:	81fb      	strh	r3, [r7, #14]
 800f086:	e009      	b.n	800f09c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f088:	89fb      	ldrh	r3, [r7, #14]
 800f08a:	4a0d      	ldr	r2, [pc, #52]	; (800f0c0 <ff_convert+0x74>)
 800f08c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f090:	88fa      	ldrh	r2, [r7, #6]
 800f092:	429a      	cmp	r2, r3
 800f094:	d006      	beq.n	800f0a4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f096:	89fb      	ldrh	r3, [r7, #14]
 800f098:	3301      	adds	r3, #1
 800f09a:	81fb      	strh	r3, [r7, #14]
 800f09c:	89fb      	ldrh	r3, [r7, #14]
 800f09e:	2b7f      	cmp	r3, #127	; 0x7f
 800f0a0:	d9f2      	bls.n	800f088 <ff_convert+0x3c>
 800f0a2:	e000      	b.n	800f0a6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f0a4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f0a6:	89fb      	ldrh	r3, [r7, #14]
 800f0a8:	3380      	adds	r3, #128	; 0x80
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	b2db      	uxtb	r3, r3
 800f0ae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f0b0:	89fb      	ldrh	r3, [r7, #14]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3714      	adds	r7, #20
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	08014c4c 	.word	0x08014c4c

0800f0c4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b087      	sub	sp, #28
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f0ce:	88fb      	ldrh	r3, [r7, #6]
 800f0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0d4:	d201      	bcs.n	800f0da <ff_wtoupper+0x16>
 800f0d6:	4b3e      	ldr	r3, [pc, #248]	; (800f1d0 <ff_wtoupper+0x10c>)
 800f0d8:	e000      	b.n	800f0dc <ff_wtoupper+0x18>
 800f0da:	4b3e      	ldr	r3, [pc, #248]	; (800f1d4 <ff_wtoupper+0x110>)
 800f0dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	1c9a      	adds	r2, r3, #2
 800f0e2:	617a      	str	r2, [r7, #20]
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f0e8:	8a7b      	ldrh	r3, [r7, #18]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d068      	beq.n	800f1c0 <ff_wtoupper+0xfc>
 800f0ee:	88fa      	ldrh	r2, [r7, #6]
 800f0f0:	8a7b      	ldrh	r3, [r7, #18]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d364      	bcc.n	800f1c0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	1c9a      	adds	r2, r3, #2
 800f0fa:	617a      	str	r2, [r7, #20]
 800f0fc:	881b      	ldrh	r3, [r3, #0]
 800f0fe:	823b      	strh	r3, [r7, #16]
 800f100:	8a3b      	ldrh	r3, [r7, #16]
 800f102:	0a1b      	lsrs	r3, r3, #8
 800f104:	81fb      	strh	r3, [r7, #14]
 800f106:	8a3b      	ldrh	r3, [r7, #16]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f10c:	88fa      	ldrh	r2, [r7, #6]
 800f10e:	8a79      	ldrh	r1, [r7, #18]
 800f110:	8a3b      	ldrh	r3, [r7, #16]
 800f112:	440b      	add	r3, r1
 800f114:	429a      	cmp	r2, r3
 800f116:	da49      	bge.n	800f1ac <ff_wtoupper+0xe8>
			switch (cmd) {
 800f118:	89fb      	ldrh	r3, [r7, #14]
 800f11a:	2b08      	cmp	r3, #8
 800f11c:	d84f      	bhi.n	800f1be <ff_wtoupper+0xfa>
 800f11e:	a201      	add	r2, pc, #4	; (adr r2, 800f124 <ff_wtoupper+0x60>)
 800f120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f124:	0800f149 	.word	0x0800f149
 800f128:	0800f15b 	.word	0x0800f15b
 800f12c:	0800f171 	.word	0x0800f171
 800f130:	0800f179 	.word	0x0800f179
 800f134:	0800f181 	.word	0x0800f181
 800f138:	0800f189 	.word	0x0800f189
 800f13c:	0800f191 	.word	0x0800f191
 800f140:	0800f199 	.word	0x0800f199
 800f144:	0800f1a1 	.word	0x0800f1a1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f148:	88fa      	ldrh	r2, [r7, #6]
 800f14a:	8a7b      	ldrh	r3, [r7, #18]
 800f14c:	1ad3      	subs	r3, r2, r3
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	697a      	ldr	r2, [r7, #20]
 800f152:	4413      	add	r3, r2
 800f154:	881b      	ldrh	r3, [r3, #0]
 800f156:	80fb      	strh	r3, [r7, #6]
 800f158:	e027      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f15a:	88fa      	ldrh	r2, [r7, #6]
 800f15c:	8a7b      	ldrh	r3, [r7, #18]
 800f15e:	1ad3      	subs	r3, r2, r3
 800f160:	b29b      	uxth	r3, r3
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	b29b      	uxth	r3, r3
 800f168:	88fa      	ldrh	r2, [r7, #6]
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	80fb      	strh	r3, [r7, #6]
 800f16e:	e01c      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f170:	88fb      	ldrh	r3, [r7, #6]
 800f172:	3b10      	subs	r3, #16
 800f174:	80fb      	strh	r3, [r7, #6]
 800f176:	e018      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f178:	88fb      	ldrh	r3, [r7, #6]
 800f17a:	3b20      	subs	r3, #32
 800f17c:	80fb      	strh	r3, [r7, #6]
 800f17e:	e014      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f180:	88fb      	ldrh	r3, [r7, #6]
 800f182:	3b30      	subs	r3, #48	; 0x30
 800f184:	80fb      	strh	r3, [r7, #6]
 800f186:	e010      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f188:	88fb      	ldrh	r3, [r7, #6]
 800f18a:	3b1a      	subs	r3, #26
 800f18c:	80fb      	strh	r3, [r7, #6]
 800f18e:	e00c      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f190:	88fb      	ldrh	r3, [r7, #6]
 800f192:	3308      	adds	r3, #8
 800f194:	80fb      	strh	r3, [r7, #6]
 800f196:	e008      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f198:	88fb      	ldrh	r3, [r7, #6]
 800f19a:	3b50      	subs	r3, #80	; 0x50
 800f19c:	80fb      	strh	r3, [r7, #6]
 800f19e:	e004      	b.n	800f1aa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f1a0:	88fb      	ldrh	r3, [r7, #6]
 800f1a2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f1a6:	80fb      	strh	r3, [r7, #6]
 800f1a8:	bf00      	nop
			}
			break;
 800f1aa:	e008      	b.n	800f1be <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f1ac:	89fb      	ldrh	r3, [r7, #14]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d195      	bne.n	800f0de <ff_wtoupper+0x1a>
 800f1b2:	8a3b      	ldrh	r3, [r7, #16]
 800f1b4:	005b      	lsls	r3, r3, #1
 800f1b6:	697a      	ldr	r2, [r7, #20]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f1bc:	e78f      	b.n	800f0de <ff_wtoupper+0x1a>
			break;
 800f1be:	bf00      	nop
	}

	return chr;
 800f1c0:	88fb      	ldrh	r3, [r7, #6]
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	371c      	adds	r7, #28
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	08014d4c 	.word	0x08014d4c
 800f1d4:	08014f40 	.word	0x08014f40

0800f1d8 <__errno>:
 800f1d8:	4b01      	ldr	r3, [pc, #4]	; (800f1e0 <__errno+0x8>)
 800f1da:	6818      	ldr	r0, [r3, #0]
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	20000058 	.word	0x20000058

0800f1e4 <__libc_init_array>:
 800f1e4:	b570      	push	{r4, r5, r6, lr}
 800f1e6:	4d0d      	ldr	r5, [pc, #52]	; (800f21c <__libc_init_array+0x38>)
 800f1e8:	4c0d      	ldr	r4, [pc, #52]	; (800f220 <__libc_init_array+0x3c>)
 800f1ea:	1b64      	subs	r4, r4, r5
 800f1ec:	10a4      	asrs	r4, r4, #2
 800f1ee:	2600      	movs	r6, #0
 800f1f0:	42a6      	cmp	r6, r4
 800f1f2:	d109      	bne.n	800f208 <__libc_init_array+0x24>
 800f1f4:	4d0b      	ldr	r5, [pc, #44]	; (800f224 <__libc_init_array+0x40>)
 800f1f6:	4c0c      	ldr	r4, [pc, #48]	; (800f228 <__libc_init_array+0x44>)
 800f1f8:	f005 fbe2 	bl	80149c0 <_init>
 800f1fc:	1b64      	subs	r4, r4, r5
 800f1fe:	10a4      	asrs	r4, r4, #2
 800f200:	2600      	movs	r6, #0
 800f202:	42a6      	cmp	r6, r4
 800f204:	d105      	bne.n	800f212 <__libc_init_array+0x2e>
 800f206:	bd70      	pop	{r4, r5, r6, pc}
 800f208:	f855 3b04 	ldr.w	r3, [r5], #4
 800f20c:	4798      	blx	r3
 800f20e:	3601      	adds	r6, #1
 800f210:	e7ee      	b.n	800f1f0 <__libc_init_array+0xc>
 800f212:	f855 3b04 	ldr.w	r3, [r5], #4
 800f216:	4798      	blx	r3
 800f218:	3601      	adds	r6, #1
 800f21a:	e7f2      	b.n	800f202 <__libc_init_array+0x1e>
 800f21c:	08015550 	.word	0x08015550
 800f220:	08015550 	.word	0x08015550
 800f224:	08015550 	.word	0x08015550
 800f228:	08015554 	.word	0x08015554

0800f22c <memset>:
 800f22c:	4402      	add	r2, r0
 800f22e:	4603      	mov	r3, r0
 800f230:	4293      	cmp	r3, r2
 800f232:	d100      	bne.n	800f236 <memset+0xa>
 800f234:	4770      	bx	lr
 800f236:	f803 1b01 	strb.w	r1, [r3], #1
 800f23a:	e7f9      	b.n	800f230 <memset+0x4>

0800f23c <__cvt>:
 800f23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f240:	ec55 4b10 	vmov	r4, r5, d0
 800f244:	2d00      	cmp	r5, #0
 800f246:	460e      	mov	r6, r1
 800f248:	4619      	mov	r1, r3
 800f24a:	462b      	mov	r3, r5
 800f24c:	bfbb      	ittet	lt
 800f24e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f252:	461d      	movlt	r5, r3
 800f254:	2300      	movge	r3, #0
 800f256:	232d      	movlt	r3, #45	; 0x2d
 800f258:	700b      	strb	r3, [r1, #0]
 800f25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f25c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f260:	4691      	mov	r9, r2
 800f262:	f023 0820 	bic.w	r8, r3, #32
 800f266:	bfbc      	itt	lt
 800f268:	4622      	movlt	r2, r4
 800f26a:	4614      	movlt	r4, r2
 800f26c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f270:	d005      	beq.n	800f27e <__cvt+0x42>
 800f272:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f276:	d100      	bne.n	800f27a <__cvt+0x3e>
 800f278:	3601      	adds	r6, #1
 800f27a:	2102      	movs	r1, #2
 800f27c:	e000      	b.n	800f280 <__cvt+0x44>
 800f27e:	2103      	movs	r1, #3
 800f280:	ab03      	add	r3, sp, #12
 800f282:	9301      	str	r3, [sp, #4]
 800f284:	ab02      	add	r3, sp, #8
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	ec45 4b10 	vmov	d0, r4, r5
 800f28c:	4653      	mov	r3, sl
 800f28e:	4632      	mov	r2, r6
 800f290:	f001 fe2a 	bl	8010ee8 <_dtoa_r>
 800f294:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f298:	4607      	mov	r7, r0
 800f29a:	d102      	bne.n	800f2a2 <__cvt+0x66>
 800f29c:	f019 0f01 	tst.w	r9, #1
 800f2a0:	d022      	beq.n	800f2e8 <__cvt+0xac>
 800f2a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f2a6:	eb07 0906 	add.w	r9, r7, r6
 800f2aa:	d110      	bne.n	800f2ce <__cvt+0x92>
 800f2ac:	783b      	ldrb	r3, [r7, #0]
 800f2ae:	2b30      	cmp	r3, #48	; 0x30
 800f2b0:	d10a      	bne.n	800f2c8 <__cvt+0x8c>
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	4629      	mov	r1, r5
 800f2ba:	f7f1 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2be:	b918      	cbnz	r0, 800f2c8 <__cvt+0x8c>
 800f2c0:	f1c6 0601 	rsb	r6, r6, #1
 800f2c4:	f8ca 6000 	str.w	r6, [sl]
 800f2c8:	f8da 3000 	ldr.w	r3, [sl]
 800f2cc:	4499      	add	r9, r3
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	4629      	mov	r1, r5
 800f2d6:	f7f1 fbf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2da:	b108      	cbz	r0, 800f2e0 <__cvt+0xa4>
 800f2dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800f2e0:	2230      	movs	r2, #48	; 0x30
 800f2e2:	9b03      	ldr	r3, [sp, #12]
 800f2e4:	454b      	cmp	r3, r9
 800f2e6:	d307      	bcc.n	800f2f8 <__cvt+0xbc>
 800f2e8:	9b03      	ldr	r3, [sp, #12]
 800f2ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f2ec:	1bdb      	subs	r3, r3, r7
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	6013      	str	r3, [r2, #0]
 800f2f2:	b004      	add	sp, #16
 800f2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f8:	1c59      	adds	r1, r3, #1
 800f2fa:	9103      	str	r1, [sp, #12]
 800f2fc:	701a      	strb	r2, [r3, #0]
 800f2fe:	e7f0      	b.n	800f2e2 <__cvt+0xa6>

0800f300 <__exponent>:
 800f300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f302:	4603      	mov	r3, r0
 800f304:	2900      	cmp	r1, #0
 800f306:	bfb8      	it	lt
 800f308:	4249      	neglt	r1, r1
 800f30a:	f803 2b02 	strb.w	r2, [r3], #2
 800f30e:	bfb4      	ite	lt
 800f310:	222d      	movlt	r2, #45	; 0x2d
 800f312:	222b      	movge	r2, #43	; 0x2b
 800f314:	2909      	cmp	r1, #9
 800f316:	7042      	strb	r2, [r0, #1]
 800f318:	dd2a      	ble.n	800f370 <__exponent+0x70>
 800f31a:	f10d 0407 	add.w	r4, sp, #7
 800f31e:	46a4      	mov	ip, r4
 800f320:	270a      	movs	r7, #10
 800f322:	46a6      	mov	lr, r4
 800f324:	460a      	mov	r2, r1
 800f326:	fb91 f6f7 	sdiv	r6, r1, r7
 800f32a:	fb07 1516 	mls	r5, r7, r6, r1
 800f32e:	3530      	adds	r5, #48	; 0x30
 800f330:	2a63      	cmp	r2, #99	; 0x63
 800f332:	f104 34ff 	add.w	r4, r4, #4294967295
 800f336:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f33a:	4631      	mov	r1, r6
 800f33c:	dcf1      	bgt.n	800f322 <__exponent+0x22>
 800f33e:	3130      	adds	r1, #48	; 0x30
 800f340:	f1ae 0502 	sub.w	r5, lr, #2
 800f344:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f348:	1c44      	adds	r4, r0, #1
 800f34a:	4629      	mov	r1, r5
 800f34c:	4561      	cmp	r1, ip
 800f34e:	d30a      	bcc.n	800f366 <__exponent+0x66>
 800f350:	f10d 0209 	add.w	r2, sp, #9
 800f354:	eba2 020e 	sub.w	r2, r2, lr
 800f358:	4565      	cmp	r5, ip
 800f35a:	bf88      	it	hi
 800f35c:	2200      	movhi	r2, #0
 800f35e:	4413      	add	r3, r2
 800f360:	1a18      	subs	r0, r3, r0
 800f362:	b003      	add	sp, #12
 800f364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f36a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f36e:	e7ed      	b.n	800f34c <__exponent+0x4c>
 800f370:	2330      	movs	r3, #48	; 0x30
 800f372:	3130      	adds	r1, #48	; 0x30
 800f374:	7083      	strb	r3, [r0, #2]
 800f376:	70c1      	strb	r1, [r0, #3]
 800f378:	1d03      	adds	r3, r0, #4
 800f37a:	e7f1      	b.n	800f360 <__exponent+0x60>

0800f37c <_printf_float>:
 800f37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f380:	ed2d 8b02 	vpush	{d8}
 800f384:	b08d      	sub	sp, #52	; 0x34
 800f386:	460c      	mov	r4, r1
 800f388:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f38c:	4616      	mov	r6, r2
 800f38e:	461f      	mov	r7, r3
 800f390:	4605      	mov	r5, r0
 800f392:	f002 ff05 	bl	80121a0 <_localeconv_r>
 800f396:	f8d0 a000 	ldr.w	sl, [r0]
 800f39a:	4650      	mov	r0, sl
 800f39c:	f7f0 ff18 	bl	80001d0 <strlen>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	930a      	str	r3, [sp, #40]	; 0x28
 800f3a4:	6823      	ldr	r3, [r4, #0]
 800f3a6:	9305      	str	r3, [sp, #20]
 800f3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800f3ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f3b0:	3307      	adds	r3, #7
 800f3b2:	f023 0307 	bic.w	r3, r3, #7
 800f3b6:	f103 0208 	add.w	r2, r3, #8
 800f3ba:	f8c8 2000 	str.w	r2, [r8]
 800f3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f3c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f3ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f3ce:	9307      	str	r3, [sp, #28]
 800f3d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800f3d4:	ee08 0a10 	vmov	s16, r0
 800f3d8:	4b9f      	ldr	r3, [pc, #636]	; (800f658 <_printf_float+0x2dc>)
 800f3da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3de:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e2:	f7f1 fba3 	bl	8000b2c <__aeabi_dcmpun>
 800f3e6:	bb88      	cbnz	r0, 800f44c <_printf_float+0xd0>
 800f3e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f3ec:	4b9a      	ldr	r3, [pc, #616]	; (800f658 <_printf_float+0x2dc>)
 800f3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f3f2:	f7f1 fb7d 	bl	8000af0 <__aeabi_dcmple>
 800f3f6:	bb48      	cbnz	r0, 800f44c <_printf_float+0xd0>
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	4640      	mov	r0, r8
 800f3fe:	4649      	mov	r1, r9
 800f400:	f7f1 fb6c 	bl	8000adc <__aeabi_dcmplt>
 800f404:	b110      	cbz	r0, 800f40c <_printf_float+0x90>
 800f406:	232d      	movs	r3, #45	; 0x2d
 800f408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f40c:	4b93      	ldr	r3, [pc, #588]	; (800f65c <_printf_float+0x2e0>)
 800f40e:	4894      	ldr	r0, [pc, #592]	; (800f660 <_printf_float+0x2e4>)
 800f410:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f414:	bf94      	ite	ls
 800f416:	4698      	movls	r8, r3
 800f418:	4680      	movhi	r8, r0
 800f41a:	2303      	movs	r3, #3
 800f41c:	6123      	str	r3, [r4, #16]
 800f41e:	9b05      	ldr	r3, [sp, #20]
 800f420:	f023 0204 	bic.w	r2, r3, #4
 800f424:	6022      	str	r2, [r4, #0]
 800f426:	f04f 0900 	mov.w	r9, #0
 800f42a:	9700      	str	r7, [sp, #0]
 800f42c:	4633      	mov	r3, r6
 800f42e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f430:	4621      	mov	r1, r4
 800f432:	4628      	mov	r0, r5
 800f434:	f000 f9d8 	bl	800f7e8 <_printf_common>
 800f438:	3001      	adds	r0, #1
 800f43a:	f040 8090 	bne.w	800f55e <_printf_float+0x1e2>
 800f43e:	f04f 30ff 	mov.w	r0, #4294967295
 800f442:	b00d      	add	sp, #52	; 0x34
 800f444:	ecbd 8b02 	vpop	{d8}
 800f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44c:	4642      	mov	r2, r8
 800f44e:	464b      	mov	r3, r9
 800f450:	4640      	mov	r0, r8
 800f452:	4649      	mov	r1, r9
 800f454:	f7f1 fb6a 	bl	8000b2c <__aeabi_dcmpun>
 800f458:	b140      	cbz	r0, 800f46c <_printf_float+0xf0>
 800f45a:	464b      	mov	r3, r9
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	bfbc      	itt	lt
 800f460:	232d      	movlt	r3, #45	; 0x2d
 800f462:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f466:	487f      	ldr	r0, [pc, #508]	; (800f664 <_printf_float+0x2e8>)
 800f468:	4b7f      	ldr	r3, [pc, #508]	; (800f668 <_printf_float+0x2ec>)
 800f46a:	e7d1      	b.n	800f410 <_printf_float+0x94>
 800f46c:	6863      	ldr	r3, [r4, #4]
 800f46e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f472:	9206      	str	r2, [sp, #24]
 800f474:	1c5a      	adds	r2, r3, #1
 800f476:	d13f      	bne.n	800f4f8 <_printf_float+0x17c>
 800f478:	2306      	movs	r3, #6
 800f47a:	6063      	str	r3, [r4, #4]
 800f47c:	9b05      	ldr	r3, [sp, #20]
 800f47e:	6861      	ldr	r1, [r4, #4]
 800f480:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f484:	2300      	movs	r3, #0
 800f486:	9303      	str	r3, [sp, #12]
 800f488:	ab0a      	add	r3, sp, #40	; 0x28
 800f48a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f48e:	ab09      	add	r3, sp, #36	; 0x24
 800f490:	ec49 8b10 	vmov	d0, r8, r9
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	6022      	str	r2, [r4, #0]
 800f498:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f49c:	4628      	mov	r0, r5
 800f49e:	f7ff fecd 	bl	800f23c <__cvt>
 800f4a2:	9b06      	ldr	r3, [sp, #24]
 800f4a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4a6:	2b47      	cmp	r3, #71	; 0x47
 800f4a8:	4680      	mov	r8, r0
 800f4aa:	d108      	bne.n	800f4be <_printf_float+0x142>
 800f4ac:	1cc8      	adds	r0, r1, #3
 800f4ae:	db02      	blt.n	800f4b6 <_printf_float+0x13a>
 800f4b0:	6863      	ldr	r3, [r4, #4]
 800f4b2:	4299      	cmp	r1, r3
 800f4b4:	dd41      	ble.n	800f53a <_printf_float+0x1be>
 800f4b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800f4ba:	fa5f fb8b 	uxtb.w	fp, fp
 800f4be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f4c2:	d820      	bhi.n	800f506 <_printf_float+0x18a>
 800f4c4:	3901      	subs	r1, #1
 800f4c6:	465a      	mov	r2, fp
 800f4c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f4cc:	9109      	str	r1, [sp, #36]	; 0x24
 800f4ce:	f7ff ff17 	bl	800f300 <__exponent>
 800f4d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4d4:	1813      	adds	r3, r2, r0
 800f4d6:	2a01      	cmp	r2, #1
 800f4d8:	4681      	mov	r9, r0
 800f4da:	6123      	str	r3, [r4, #16]
 800f4dc:	dc02      	bgt.n	800f4e4 <_printf_float+0x168>
 800f4de:	6822      	ldr	r2, [r4, #0]
 800f4e0:	07d2      	lsls	r2, r2, #31
 800f4e2:	d501      	bpl.n	800f4e8 <_printf_float+0x16c>
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	6123      	str	r3, [r4, #16]
 800f4e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d09c      	beq.n	800f42a <_printf_float+0xae>
 800f4f0:	232d      	movs	r3, #45	; 0x2d
 800f4f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4f6:	e798      	b.n	800f42a <_printf_float+0xae>
 800f4f8:	9a06      	ldr	r2, [sp, #24]
 800f4fa:	2a47      	cmp	r2, #71	; 0x47
 800f4fc:	d1be      	bne.n	800f47c <_printf_float+0x100>
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1bc      	bne.n	800f47c <_printf_float+0x100>
 800f502:	2301      	movs	r3, #1
 800f504:	e7b9      	b.n	800f47a <_printf_float+0xfe>
 800f506:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f50a:	d118      	bne.n	800f53e <_printf_float+0x1c2>
 800f50c:	2900      	cmp	r1, #0
 800f50e:	6863      	ldr	r3, [r4, #4]
 800f510:	dd0b      	ble.n	800f52a <_printf_float+0x1ae>
 800f512:	6121      	str	r1, [r4, #16]
 800f514:	b913      	cbnz	r3, 800f51c <_printf_float+0x1a0>
 800f516:	6822      	ldr	r2, [r4, #0]
 800f518:	07d0      	lsls	r0, r2, #31
 800f51a:	d502      	bpl.n	800f522 <_printf_float+0x1a6>
 800f51c:	3301      	adds	r3, #1
 800f51e:	440b      	add	r3, r1
 800f520:	6123      	str	r3, [r4, #16]
 800f522:	65a1      	str	r1, [r4, #88]	; 0x58
 800f524:	f04f 0900 	mov.w	r9, #0
 800f528:	e7de      	b.n	800f4e8 <_printf_float+0x16c>
 800f52a:	b913      	cbnz	r3, 800f532 <_printf_float+0x1b6>
 800f52c:	6822      	ldr	r2, [r4, #0]
 800f52e:	07d2      	lsls	r2, r2, #31
 800f530:	d501      	bpl.n	800f536 <_printf_float+0x1ba>
 800f532:	3302      	adds	r3, #2
 800f534:	e7f4      	b.n	800f520 <_printf_float+0x1a4>
 800f536:	2301      	movs	r3, #1
 800f538:	e7f2      	b.n	800f520 <_printf_float+0x1a4>
 800f53a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f540:	4299      	cmp	r1, r3
 800f542:	db05      	blt.n	800f550 <_printf_float+0x1d4>
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	6121      	str	r1, [r4, #16]
 800f548:	07d8      	lsls	r0, r3, #31
 800f54a:	d5ea      	bpl.n	800f522 <_printf_float+0x1a6>
 800f54c:	1c4b      	adds	r3, r1, #1
 800f54e:	e7e7      	b.n	800f520 <_printf_float+0x1a4>
 800f550:	2900      	cmp	r1, #0
 800f552:	bfd4      	ite	le
 800f554:	f1c1 0202 	rsble	r2, r1, #2
 800f558:	2201      	movgt	r2, #1
 800f55a:	4413      	add	r3, r2
 800f55c:	e7e0      	b.n	800f520 <_printf_float+0x1a4>
 800f55e:	6823      	ldr	r3, [r4, #0]
 800f560:	055a      	lsls	r2, r3, #21
 800f562:	d407      	bmi.n	800f574 <_printf_float+0x1f8>
 800f564:	6923      	ldr	r3, [r4, #16]
 800f566:	4642      	mov	r2, r8
 800f568:	4631      	mov	r1, r6
 800f56a:	4628      	mov	r0, r5
 800f56c:	47b8      	blx	r7
 800f56e:	3001      	adds	r0, #1
 800f570:	d12c      	bne.n	800f5cc <_printf_float+0x250>
 800f572:	e764      	b.n	800f43e <_printf_float+0xc2>
 800f574:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f578:	f240 80e0 	bls.w	800f73c <_printf_float+0x3c0>
 800f57c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f580:	2200      	movs	r2, #0
 800f582:	2300      	movs	r3, #0
 800f584:	f7f1 faa0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f588:	2800      	cmp	r0, #0
 800f58a:	d034      	beq.n	800f5f6 <_printf_float+0x27a>
 800f58c:	4a37      	ldr	r2, [pc, #220]	; (800f66c <_printf_float+0x2f0>)
 800f58e:	2301      	movs	r3, #1
 800f590:	4631      	mov	r1, r6
 800f592:	4628      	mov	r0, r5
 800f594:	47b8      	blx	r7
 800f596:	3001      	adds	r0, #1
 800f598:	f43f af51 	beq.w	800f43e <_printf_float+0xc2>
 800f59c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f5a0:	429a      	cmp	r2, r3
 800f5a2:	db02      	blt.n	800f5aa <_printf_float+0x22e>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	07d8      	lsls	r0, r3, #31
 800f5a8:	d510      	bpl.n	800f5cc <_printf_float+0x250>
 800f5aa:	ee18 3a10 	vmov	r3, s16
 800f5ae:	4652      	mov	r2, sl
 800f5b0:	4631      	mov	r1, r6
 800f5b2:	4628      	mov	r0, r5
 800f5b4:	47b8      	blx	r7
 800f5b6:	3001      	adds	r0, #1
 800f5b8:	f43f af41 	beq.w	800f43e <_printf_float+0xc2>
 800f5bc:	f04f 0800 	mov.w	r8, #0
 800f5c0:	f104 091a 	add.w	r9, r4, #26
 800f5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5c6:	3b01      	subs	r3, #1
 800f5c8:	4543      	cmp	r3, r8
 800f5ca:	dc09      	bgt.n	800f5e0 <_printf_float+0x264>
 800f5cc:	6823      	ldr	r3, [r4, #0]
 800f5ce:	079b      	lsls	r3, r3, #30
 800f5d0:	f100 8105 	bmi.w	800f7de <_printf_float+0x462>
 800f5d4:	68e0      	ldr	r0, [r4, #12]
 800f5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5d8:	4298      	cmp	r0, r3
 800f5da:	bfb8      	it	lt
 800f5dc:	4618      	movlt	r0, r3
 800f5de:	e730      	b.n	800f442 <_printf_float+0xc6>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	464a      	mov	r2, r9
 800f5e4:	4631      	mov	r1, r6
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	47b8      	blx	r7
 800f5ea:	3001      	adds	r0, #1
 800f5ec:	f43f af27 	beq.w	800f43e <_printf_float+0xc2>
 800f5f0:	f108 0801 	add.w	r8, r8, #1
 800f5f4:	e7e6      	b.n	800f5c4 <_printf_float+0x248>
 800f5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	dc39      	bgt.n	800f670 <_printf_float+0x2f4>
 800f5fc:	4a1b      	ldr	r2, [pc, #108]	; (800f66c <_printf_float+0x2f0>)
 800f5fe:	2301      	movs	r3, #1
 800f600:	4631      	mov	r1, r6
 800f602:	4628      	mov	r0, r5
 800f604:	47b8      	blx	r7
 800f606:	3001      	adds	r0, #1
 800f608:	f43f af19 	beq.w	800f43e <_printf_float+0xc2>
 800f60c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f610:	4313      	orrs	r3, r2
 800f612:	d102      	bne.n	800f61a <_printf_float+0x29e>
 800f614:	6823      	ldr	r3, [r4, #0]
 800f616:	07d9      	lsls	r1, r3, #31
 800f618:	d5d8      	bpl.n	800f5cc <_printf_float+0x250>
 800f61a:	ee18 3a10 	vmov	r3, s16
 800f61e:	4652      	mov	r2, sl
 800f620:	4631      	mov	r1, r6
 800f622:	4628      	mov	r0, r5
 800f624:	47b8      	blx	r7
 800f626:	3001      	adds	r0, #1
 800f628:	f43f af09 	beq.w	800f43e <_printf_float+0xc2>
 800f62c:	f04f 0900 	mov.w	r9, #0
 800f630:	f104 0a1a 	add.w	sl, r4, #26
 800f634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f636:	425b      	negs	r3, r3
 800f638:	454b      	cmp	r3, r9
 800f63a:	dc01      	bgt.n	800f640 <_printf_float+0x2c4>
 800f63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f63e:	e792      	b.n	800f566 <_printf_float+0x1ea>
 800f640:	2301      	movs	r3, #1
 800f642:	4652      	mov	r2, sl
 800f644:	4631      	mov	r1, r6
 800f646:	4628      	mov	r0, r5
 800f648:	47b8      	blx	r7
 800f64a:	3001      	adds	r0, #1
 800f64c:	f43f aef7 	beq.w	800f43e <_printf_float+0xc2>
 800f650:	f109 0901 	add.w	r9, r9, #1
 800f654:	e7ee      	b.n	800f634 <_printf_float+0x2b8>
 800f656:	bf00      	nop
 800f658:	7fefffff 	.word	0x7fefffff
 800f65c:	08015000 	.word	0x08015000
 800f660:	08015004 	.word	0x08015004
 800f664:	0801500c 	.word	0x0801500c
 800f668:	08015008 	.word	0x08015008
 800f66c:	08015010 	.word	0x08015010
 800f670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f672:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f674:	429a      	cmp	r2, r3
 800f676:	bfa8      	it	ge
 800f678:	461a      	movge	r2, r3
 800f67a:	2a00      	cmp	r2, #0
 800f67c:	4691      	mov	r9, r2
 800f67e:	dc37      	bgt.n	800f6f0 <_printf_float+0x374>
 800f680:	f04f 0b00 	mov.w	fp, #0
 800f684:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f688:	f104 021a 	add.w	r2, r4, #26
 800f68c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f68e:	9305      	str	r3, [sp, #20]
 800f690:	eba3 0309 	sub.w	r3, r3, r9
 800f694:	455b      	cmp	r3, fp
 800f696:	dc33      	bgt.n	800f700 <_printf_float+0x384>
 800f698:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f69c:	429a      	cmp	r2, r3
 800f69e:	db3b      	blt.n	800f718 <_printf_float+0x39c>
 800f6a0:	6823      	ldr	r3, [r4, #0]
 800f6a2:	07da      	lsls	r2, r3, #31
 800f6a4:	d438      	bmi.n	800f718 <_printf_float+0x39c>
 800f6a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6a8:	9b05      	ldr	r3, [sp, #20]
 800f6aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	eba2 0901 	sub.w	r9, r2, r1
 800f6b2:	4599      	cmp	r9, r3
 800f6b4:	bfa8      	it	ge
 800f6b6:	4699      	movge	r9, r3
 800f6b8:	f1b9 0f00 	cmp.w	r9, #0
 800f6bc:	dc35      	bgt.n	800f72a <_printf_float+0x3ae>
 800f6be:	f04f 0800 	mov.w	r8, #0
 800f6c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f6c6:	f104 0a1a 	add.w	sl, r4, #26
 800f6ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f6ce:	1a9b      	subs	r3, r3, r2
 800f6d0:	eba3 0309 	sub.w	r3, r3, r9
 800f6d4:	4543      	cmp	r3, r8
 800f6d6:	f77f af79 	ble.w	800f5cc <_printf_float+0x250>
 800f6da:	2301      	movs	r3, #1
 800f6dc:	4652      	mov	r2, sl
 800f6de:	4631      	mov	r1, r6
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	47b8      	blx	r7
 800f6e4:	3001      	adds	r0, #1
 800f6e6:	f43f aeaa 	beq.w	800f43e <_printf_float+0xc2>
 800f6ea:	f108 0801 	add.w	r8, r8, #1
 800f6ee:	e7ec      	b.n	800f6ca <_printf_float+0x34e>
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	4631      	mov	r1, r6
 800f6f4:	4642      	mov	r2, r8
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	47b8      	blx	r7
 800f6fa:	3001      	adds	r0, #1
 800f6fc:	d1c0      	bne.n	800f680 <_printf_float+0x304>
 800f6fe:	e69e      	b.n	800f43e <_printf_float+0xc2>
 800f700:	2301      	movs	r3, #1
 800f702:	4631      	mov	r1, r6
 800f704:	4628      	mov	r0, r5
 800f706:	9205      	str	r2, [sp, #20]
 800f708:	47b8      	blx	r7
 800f70a:	3001      	adds	r0, #1
 800f70c:	f43f ae97 	beq.w	800f43e <_printf_float+0xc2>
 800f710:	9a05      	ldr	r2, [sp, #20]
 800f712:	f10b 0b01 	add.w	fp, fp, #1
 800f716:	e7b9      	b.n	800f68c <_printf_float+0x310>
 800f718:	ee18 3a10 	vmov	r3, s16
 800f71c:	4652      	mov	r2, sl
 800f71e:	4631      	mov	r1, r6
 800f720:	4628      	mov	r0, r5
 800f722:	47b8      	blx	r7
 800f724:	3001      	adds	r0, #1
 800f726:	d1be      	bne.n	800f6a6 <_printf_float+0x32a>
 800f728:	e689      	b.n	800f43e <_printf_float+0xc2>
 800f72a:	9a05      	ldr	r2, [sp, #20]
 800f72c:	464b      	mov	r3, r9
 800f72e:	4442      	add	r2, r8
 800f730:	4631      	mov	r1, r6
 800f732:	4628      	mov	r0, r5
 800f734:	47b8      	blx	r7
 800f736:	3001      	adds	r0, #1
 800f738:	d1c1      	bne.n	800f6be <_printf_float+0x342>
 800f73a:	e680      	b.n	800f43e <_printf_float+0xc2>
 800f73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f73e:	2a01      	cmp	r2, #1
 800f740:	dc01      	bgt.n	800f746 <_printf_float+0x3ca>
 800f742:	07db      	lsls	r3, r3, #31
 800f744:	d538      	bpl.n	800f7b8 <_printf_float+0x43c>
 800f746:	2301      	movs	r3, #1
 800f748:	4642      	mov	r2, r8
 800f74a:	4631      	mov	r1, r6
 800f74c:	4628      	mov	r0, r5
 800f74e:	47b8      	blx	r7
 800f750:	3001      	adds	r0, #1
 800f752:	f43f ae74 	beq.w	800f43e <_printf_float+0xc2>
 800f756:	ee18 3a10 	vmov	r3, s16
 800f75a:	4652      	mov	r2, sl
 800f75c:	4631      	mov	r1, r6
 800f75e:	4628      	mov	r0, r5
 800f760:	47b8      	blx	r7
 800f762:	3001      	adds	r0, #1
 800f764:	f43f ae6b 	beq.w	800f43e <_printf_float+0xc2>
 800f768:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f76c:	2200      	movs	r2, #0
 800f76e:	2300      	movs	r3, #0
 800f770:	f7f1 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800f774:	b9d8      	cbnz	r0, 800f7ae <_printf_float+0x432>
 800f776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f778:	f108 0201 	add.w	r2, r8, #1
 800f77c:	3b01      	subs	r3, #1
 800f77e:	4631      	mov	r1, r6
 800f780:	4628      	mov	r0, r5
 800f782:	47b8      	blx	r7
 800f784:	3001      	adds	r0, #1
 800f786:	d10e      	bne.n	800f7a6 <_printf_float+0x42a>
 800f788:	e659      	b.n	800f43e <_printf_float+0xc2>
 800f78a:	2301      	movs	r3, #1
 800f78c:	4652      	mov	r2, sl
 800f78e:	4631      	mov	r1, r6
 800f790:	4628      	mov	r0, r5
 800f792:	47b8      	blx	r7
 800f794:	3001      	adds	r0, #1
 800f796:	f43f ae52 	beq.w	800f43e <_printf_float+0xc2>
 800f79a:	f108 0801 	add.w	r8, r8, #1
 800f79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	4543      	cmp	r3, r8
 800f7a4:	dcf1      	bgt.n	800f78a <_printf_float+0x40e>
 800f7a6:	464b      	mov	r3, r9
 800f7a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f7ac:	e6dc      	b.n	800f568 <_printf_float+0x1ec>
 800f7ae:	f04f 0800 	mov.w	r8, #0
 800f7b2:	f104 0a1a 	add.w	sl, r4, #26
 800f7b6:	e7f2      	b.n	800f79e <_printf_float+0x422>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	4642      	mov	r2, r8
 800f7bc:	e7df      	b.n	800f77e <_printf_float+0x402>
 800f7be:	2301      	movs	r3, #1
 800f7c0:	464a      	mov	r2, r9
 800f7c2:	4631      	mov	r1, r6
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	47b8      	blx	r7
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	f43f ae38 	beq.w	800f43e <_printf_float+0xc2>
 800f7ce:	f108 0801 	add.w	r8, r8, #1
 800f7d2:	68e3      	ldr	r3, [r4, #12]
 800f7d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7d6:	1a5b      	subs	r3, r3, r1
 800f7d8:	4543      	cmp	r3, r8
 800f7da:	dcf0      	bgt.n	800f7be <_printf_float+0x442>
 800f7dc:	e6fa      	b.n	800f5d4 <_printf_float+0x258>
 800f7de:	f04f 0800 	mov.w	r8, #0
 800f7e2:	f104 0919 	add.w	r9, r4, #25
 800f7e6:	e7f4      	b.n	800f7d2 <_printf_float+0x456>

0800f7e8 <_printf_common>:
 800f7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ec:	4616      	mov	r6, r2
 800f7ee:	4699      	mov	r9, r3
 800f7f0:	688a      	ldr	r2, [r1, #8]
 800f7f2:	690b      	ldr	r3, [r1, #16]
 800f7f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	bfb8      	it	lt
 800f7fc:	4613      	movlt	r3, r2
 800f7fe:	6033      	str	r3, [r6, #0]
 800f800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f804:	4607      	mov	r7, r0
 800f806:	460c      	mov	r4, r1
 800f808:	b10a      	cbz	r2, 800f80e <_printf_common+0x26>
 800f80a:	3301      	adds	r3, #1
 800f80c:	6033      	str	r3, [r6, #0]
 800f80e:	6823      	ldr	r3, [r4, #0]
 800f810:	0699      	lsls	r1, r3, #26
 800f812:	bf42      	ittt	mi
 800f814:	6833      	ldrmi	r3, [r6, #0]
 800f816:	3302      	addmi	r3, #2
 800f818:	6033      	strmi	r3, [r6, #0]
 800f81a:	6825      	ldr	r5, [r4, #0]
 800f81c:	f015 0506 	ands.w	r5, r5, #6
 800f820:	d106      	bne.n	800f830 <_printf_common+0x48>
 800f822:	f104 0a19 	add.w	sl, r4, #25
 800f826:	68e3      	ldr	r3, [r4, #12]
 800f828:	6832      	ldr	r2, [r6, #0]
 800f82a:	1a9b      	subs	r3, r3, r2
 800f82c:	42ab      	cmp	r3, r5
 800f82e:	dc26      	bgt.n	800f87e <_printf_common+0x96>
 800f830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f834:	1e13      	subs	r3, r2, #0
 800f836:	6822      	ldr	r2, [r4, #0]
 800f838:	bf18      	it	ne
 800f83a:	2301      	movne	r3, #1
 800f83c:	0692      	lsls	r2, r2, #26
 800f83e:	d42b      	bmi.n	800f898 <_printf_common+0xb0>
 800f840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f844:	4649      	mov	r1, r9
 800f846:	4638      	mov	r0, r7
 800f848:	47c0      	blx	r8
 800f84a:	3001      	adds	r0, #1
 800f84c:	d01e      	beq.n	800f88c <_printf_common+0xa4>
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	68e5      	ldr	r5, [r4, #12]
 800f852:	6832      	ldr	r2, [r6, #0]
 800f854:	f003 0306 	and.w	r3, r3, #6
 800f858:	2b04      	cmp	r3, #4
 800f85a:	bf08      	it	eq
 800f85c:	1aad      	subeq	r5, r5, r2
 800f85e:	68a3      	ldr	r3, [r4, #8]
 800f860:	6922      	ldr	r2, [r4, #16]
 800f862:	bf0c      	ite	eq
 800f864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f868:	2500      	movne	r5, #0
 800f86a:	4293      	cmp	r3, r2
 800f86c:	bfc4      	itt	gt
 800f86e:	1a9b      	subgt	r3, r3, r2
 800f870:	18ed      	addgt	r5, r5, r3
 800f872:	2600      	movs	r6, #0
 800f874:	341a      	adds	r4, #26
 800f876:	42b5      	cmp	r5, r6
 800f878:	d11a      	bne.n	800f8b0 <_printf_common+0xc8>
 800f87a:	2000      	movs	r0, #0
 800f87c:	e008      	b.n	800f890 <_printf_common+0xa8>
 800f87e:	2301      	movs	r3, #1
 800f880:	4652      	mov	r2, sl
 800f882:	4649      	mov	r1, r9
 800f884:	4638      	mov	r0, r7
 800f886:	47c0      	blx	r8
 800f888:	3001      	adds	r0, #1
 800f88a:	d103      	bne.n	800f894 <_printf_common+0xac>
 800f88c:	f04f 30ff 	mov.w	r0, #4294967295
 800f890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f894:	3501      	adds	r5, #1
 800f896:	e7c6      	b.n	800f826 <_printf_common+0x3e>
 800f898:	18e1      	adds	r1, r4, r3
 800f89a:	1c5a      	adds	r2, r3, #1
 800f89c:	2030      	movs	r0, #48	; 0x30
 800f89e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8a2:	4422      	add	r2, r4
 800f8a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8ac:	3302      	adds	r3, #2
 800f8ae:	e7c7      	b.n	800f840 <_printf_common+0x58>
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	4622      	mov	r2, r4
 800f8b4:	4649      	mov	r1, r9
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	47c0      	blx	r8
 800f8ba:	3001      	adds	r0, #1
 800f8bc:	d0e6      	beq.n	800f88c <_printf_common+0xa4>
 800f8be:	3601      	adds	r6, #1
 800f8c0:	e7d9      	b.n	800f876 <_printf_common+0x8e>
	...

0800f8c4 <_printf_i>:
 800f8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f8c8:	460c      	mov	r4, r1
 800f8ca:	4691      	mov	r9, r2
 800f8cc:	7e27      	ldrb	r7, [r4, #24]
 800f8ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f8d0:	2f78      	cmp	r7, #120	; 0x78
 800f8d2:	4680      	mov	r8, r0
 800f8d4:	469a      	mov	sl, r3
 800f8d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f8da:	d807      	bhi.n	800f8ec <_printf_i+0x28>
 800f8dc:	2f62      	cmp	r7, #98	; 0x62
 800f8de:	d80a      	bhi.n	800f8f6 <_printf_i+0x32>
 800f8e0:	2f00      	cmp	r7, #0
 800f8e2:	f000 80d8 	beq.w	800fa96 <_printf_i+0x1d2>
 800f8e6:	2f58      	cmp	r7, #88	; 0x58
 800f8e8:	f000 80a3 	beq.w	800fa32 <_printf_i+0x16e>
 800f8ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f8f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f8f4:	e03a      	b.n	800f96c <_printf_i+0xa8>
 800f8f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f8fa:	2b15      	cmp	r3, #21
 800f8fc:	d8f6      	bhi.n	800f8ec <_printf_i+0x28>
 800f8fe:	a001      	add	r0, pc, #4	; (adr r0, 800f904 <_printf_i+0x40>)
 800f900:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f904:	0800f95d 	.word	0x0800f95d
 800f908:	0800f971 	.word	0x0800f971
 800f90c:	0800f8ed 	.word	0x0800f8ed
 800f910:	0800f8ed 	.word	0x0800f8ed
 800f914:	0800f8ed 	.word	0x0800f8ed
 800f918:	0800f8ed 	.word	0x0800f8ed
 800f91c:	0800f971 	.word	0x0800f971
 800f920:	0800f8ed 	.word	0x0800f8ed
 800f924:	0800f8ed 	.word	0x0800f8ed
 800f928:	0800f8ed 	.word	0x0800f8ed
 800f92c:	0800f8ed 	.word	0x0800f8ed
 800f930:	0800fa7d 	.word	0x0800fa7d
 800f934:	0800f9a1 	.word	0x0800f9a1
 800f938:	0800fa5f 	.word	0x0800fa5f
 800f93c:	0800f8ed 	.word	0x0800f8ed
 800f940:	0800f8ed 	.word	0x0800f8ed
 800f944:	0800fa9f 	.word	0x0800fa9f
 800f948:	0800f8ed 	.word	0x0800f8ed
 800f94c:	0800f9a1 	.word	0x0800f9a1
 800f950:	0800f8ed 	.word	0x0800f8ed
 800f954:	0800f8ed 	.word	0x0800f8ed
 800f958:	0800fa67 	.word	0x0800fa67
 800f95c:	680b      	ldr	r3, [r1, #0]
 800f95e:	1d1a      	adds	r2, r3, #4
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	600a      	str	r2, [r1, #0]
 800f964:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f96c:	2301      	movs	r3, #1
 800f96e:	e0a3      	b.n	800fab8 <_printf_i+0x1f4>
 800f970:	6825      	ldr	r5, [r4, #0]
 800f972:	6808      	ldr	r0, [r1, #0]
 800f974:	062e      	lsls	r6, r5, #24
 800f976:	f100 0304 	add.w	r3, r0, #4
 800f97a:	d50a      	bpl.n	800f992 <_printf_i+0xce>
 800f97c:	6805      	ldr	r5, [r0, #0]
 800f97e:	600b      	str	r3, [r1, #0]
 800f980:	2d00      	cmp	r5, #0
 800f982:	da03      	bge.n	800f98c <_printf_i+0xc8>
 800f984:	232d      	movs	r3, #45	; 0x2d
 800f986:	426d      	negs	r5, r5
 800f988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f98c:	485e      	ldr	r0, [pc, #376]	; (800fb08 <_printf_i+0x244>)
 800f98e:	230a      	movs	r3, #10
 800f990:	e019      	b.n	800f9c6 <_printf_i+0x102>
 800f992:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f996:	6805      	ldr	r5, [r0, #0]
 800f998:	600b      	str	r3, [r1, #0]
 800f99a:	bf18      	it	ne
 800f99c:	b22d      	sxthne	r5, r5
 800f99e:	e7ef      	b.n	800f980 <_printf_i+0xbc>
 800f9a0:	680b      	ldr	r3, [r1, #0]
 800f9a2:	6825      	ldr	r5, [r4, #0]
 800f9a4:	1d18      	adds	r0, r3, #4
 800f9a6:	6008      	str	r0, [r1, #0]
 800f9a8:	0628      	lsls	r0, r5, #24
 800f9aa:	d501      	bpl.n	800f9b0 <_printf_i+0xec>
 800f9ac:	681d      	ldr	r5, [r3, #0]
 800f9ae:	e002      	b.n	800f9b6 <_printf_i+0xf2>
 800f9b0:	0669      	lsls	r1, r5, #25
 800f9b2:	d5fb      	bpl.n	800f9ac <_printf_i+0xe8>
 800f9b4:	881d      	ldrh	r5, [r3, #0]
 800f9b6:	4854      	ldr	r0, [pc, #336]	; (800fb08 <_printf_i+0x244>)
 800f9b8:	2f6f      	cmp	r7, #111	; 0x6f
 800f9ba:	bf0c      	ite	eq
 800f9bc:	2308      	moveq	r3, #8
 800f9be:	230a      	movne	r3, #10
 800f9c0:	2100      	movs	r1, #0
 800f9c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9c6:	6866      	ldr	r6, [r4, #4]
 800f9c8:	60a6      	str	r6, [r4, #8]
 800f9ca:	2e00      	cmp	r6, #0
 800f9cc:	bfa2      	ittt	ge
 800f9ce:	6821      	ldrge	r1, [r4, #0]
 800f9d0:	f021 0104 	bicge.w	r1, r1, #4
 800f9d4:	6021      	strge	r1, [r4, #0]
 800f9d6:	b90d      	cbnz	r5, 800f9dc <_printf_i+0x118>
 800f9d8:	2e00      	cmp	r6, #0
 800f9da:	d04d      	beq.n	800fa78 <_printf_i+0x1b4>
 800f9dc:	4616      	mov	r6, r2
 800f9de:	fbb5 f1f3 	udiv	r1, r5, r3
 800f9e2:	fb03 5711 	mls	r7, r3, r1, r5
 800f9e6:	5dc7      	ldrb	r7, [r0, r7]
 800f9e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f9ec:	462f      	mov	r7, r5
 800f9ee:	42bb      	cmp	r3, r7
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	d9f4      	bls.n	800f9de <_printf_i+0x11a>
 800f9f4:	2b08      	cmp	r3, #8
 800f9f6:	d10b      	bne.n	800fa10 <_printf_i+0x14c>
 800f9f8:	6823      	ldr	r3, [r4, #0]
 800f9fa:	07df      	lsls	r7, r3, #31
 800f9fc:	d508      	bpl.n	800fa10 <_printf_i+0x14c>
 800f9fe:	6923      	ldr	r3, [r4, #16]
 800fa00:	6861      	ldr	r1, [r4, #4]
 800fa02:	4299      	cmp	r1, r3
 800fa04:	bfde      	ittt	le
 800fa06:	2330      	movle	r3, #48	; 0x30
 800fa08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fa0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fa10:	1b92      	subs	r2, r2, r6
 800fa12:	6122      	str	r2, [r4, #16]
 800fa14:	f8cd a000 	str.w	sl, [sp]
 800fa18:	464b      	mov	r3, r9
 800fa1a:	aa03      	add	r2, sp, #12
 800fa1c:	4621      	mov	r1, r4
 800fa1e:	4640      	mov	r0, r8
 800fa20:	f7ff fee2 	bl	800f7e8 <_printf_common>
 800fa24:	3001      	adds	r0, #1
 800fa26:	d14c      	bne.n	800fac2 <_printf_i+0x1fe>
 800fa28:	f04f 30ff 	mov.w	r0, #4294967295
 800fa2c:	b004      	add	sp, #16
 800fa2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa32:	4835      	ldr	r0, [pc, #212]	; (800fb08 <_printf_i+0x244>)
 800fa34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fa38:	6823      	ldr	r3, [r4, #0]
 800fa3a:	680e      	ldr	r6, [r1, #0]
 800fa3c:	061f      	lsls	r7, r3, #24
 800fa3e:	f856 5b04 	ldr.w	r5, [r6], #4
 800fa42:	600e      	str	r6, [r1, #0]
 800fa44:	d514      	bpl.n	800fa70 <_printf_i+0x1ac>
 800fa46:	07d9      	lsls	r1, r3, #31
 800fa48:	bf44      	itt	mi
 800fa4a:	f043 0320 	orrmi.w	r3, r3, #32
 800fa4e:	6023      	strmi	r3, [r4, #0]
 800fa50:	b91d      	cbnz	r5, 800fa5a <_printf_i+0x196>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	f023 0320 	bic.w	r3, r3, #32
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	2310      	movs	r3, #16
 800fa5c:	e7b0      	b.n	800f9c0 <_printf_i+0xfc>
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	f043 0320 	orr.w	r3, r3, #32
 800fa64:	6023      	str	r3, [r4, #0]
 800fa66:	2378      	movs	r3, #120	; 0x78
 800fa68:	4828      	ldr	r0, [pc, #160]	; (800fb0c <_printf_i+0x248>)
 800fa6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fa6e:	e7e3      	b.n	800fa38 <_printf_i+0x174>
 800fa70:	065e      	lsls	r6, r3, #25
 800fa72:	bf48      	it	mi
 800fa74:	b2ad      	uxthmi	r5, r5
 800fa76:	e7e6      	b.n	800fa46 <_printf_i+0x182>
 800fa78:	4616      	mov	r6, r2
 800fa7a:	e7bb      	b.n	800f9f4 <_printf_i+0x130>
 800fa7c:	680b      	ldr	r3, [r1, #0]
 800fa7e:	6826      	ldr	r6, [r4, #0]
 800fa80:	6960      	ldr	r0, [r4, #20]
 800fa82:	1d1d      	adds	r5, r3, #4
 800fa84:	600d      	str	r5, [r1, #0]
 800fa86:	0635      	lsls	r5, r6, #24
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	d501      	bpl.n	800fa90 <_printf_i+0x1cc>
 800fa8c:	6018      	str	r0, [r3, #0]
 800fa8e:	e002      	b.n	800fa96 <_printf_i+0x1d2>
 800fa90:	0671      	lsls	r1, r6, #25
 800fa92:	d5fb      	bpl.n	800fa8c <_printf_i+0x1c8>
 800fa94:	8018      	strh	r0, [r3, #0]
 800fa96:	2300      	movs	r3, #0
 800fa98:	6123      	str	r3, [r4, #16]
 800fa9a:	4616      	mov	r6, r2
 800fa9c:	e7ba      	b.n	800fa14 <_printf_i+0x150>
 800fa9e:	680b      	ldr	r3, [r1, #0]
 800faa0:	1d1a      	adds	r2, r3, #4
 800faa2:	600a      	str	r2, [r1, #0]
 800faa4:	681e      	ldr	r6, [r3, #0]
 800faa6:	6862      	ldr	r2, [r4, #4]
 800faa8:	2100      	movs	r1, #0
 800faaa:	4630      	mov	r0, r6
 800faac:	f7f0 fb98 	bl	80001e0 <memchr>
 800fab0:	b108      	cbz	r0, 800fab6 <_printf_i+0x1f2>
 800fab2:	1b80      	subs	r0, r0, r6
 800fab4:	6060      	str	r0, [r4, #4]
 800fab6:	6863      	ldr	r3, [r4, #4]
 800fab8:	6123      	str	r3, [r4, #16]
 800faba:	2300      	movs	r3, #0
 800fabc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fac0:	e7a8      	b.n	800fa14 <_printf_i+0x150>
 800fac2:	6923      	ldr	r3, [r4, #16]
 800fac4:	4632      	mov	r2, r6
 800fac6:	4649      	mov	r1, r9
 800fac8:	4640      	mov	r0, r8
 800faca:	47d0      	blx	sl
 800facc:	3001      	adds	r0, #1
 800face:	d0ab      	beq.n	800fa28 <_printf_i+0x164>
 800fad0:	6823      	ldr	r3, [r4, #0]
 800fad2:	079b      	lsls	r3, r3, #30
 800fad4:	d413      	bmi.n	800fafe <_printf_i+0x23a>
 800fad6:	68e0      	ldr	r0, [r4, #12]
 800fad8:	9b03      	ldr	r3, [sp, #12]
 800fada:	4298      	cmp	r0, r3
 800fadc:	bfb8      	it	lt
 800fade:	4618      	movlt	r0, r3
 800fae0:	e7a4      	b.n	800fa2c <_printf_i+0x168>
 800fae2:	2301      	movs	r3, #1
 800fae4:	4632      	mov	r2, r6
 800fae6:	4649      	mov	r1, r9
 800fae8:	4640      	mov	r0, r8
 800faea:	47d0      	blx	sl
 800faec:	3001      	adds	r0, #1
 800faee:	d09b      	beq.n	800fa28 <_printf_i+0x164>
 800faf0:	3501      	adds	r5, #1
 800faf2:	68e3      	ldr	r3, [r4, #12]
 800faf4:	9903      	ldr	r1, [sp, #12]
 800faf6:	1a5b      	subs	r3, r3, r1
 800faf8:	42ab      	cmp	r3, r5
 800fafa:	dcf2      	bgt.n	800fae2 <_printf_i+0x21e>
 800fafc:	e7eb      	b.n	800fad6 <_printf_i+0x212>
 800fafe:	2500      	movs	r5, #0
 800fb00:	f104 0619 	add.w	r6, r4, #25
 800fb04:	e7f5      	b.n	800faf2 <_printf_i+0x22e>
 800fb06:	bf00      	nop
 800fb08:	08015012 	.word	0x08015012
 800fb0c:	08015023 	.word	0x08015023

0800fb10 <_scanf_float>:
 800fb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb14:	b087      	sub	sp, #28
 800fb16:	4617      	mov	r7, r2
 800fb18:	9303      	str	r3, [sp, #12]
 800fb1a:	688b      	ldr	r3, [r1, #8]
 800fb1c:	1e5a      	subs	r2, r3, #1
 800fb1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fb22:	bf83      	ittte	hi
 800fb24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fb28:	195b      	addhi	r3, r3, r5
 800fb2a:	9302      	strhi	r3, [sp, #8]
 800fb2c:	2300      	movls	r3, #0
 800fb2e:	bf86      	itte	hi
 800fb30:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fb34:	608b      	strhi	r3, [r1, #8]
 800fb36:	9302      	strls	r3, [sp, #8]
 800fb38:	680b      	ldr	r3, [r1, #0]
 800fb3a:	468b      	mov	fp, r1
 800fb3c:	2500      	movs	r5, #0
 800fb3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fb42:	f84b 3b1c 	str.w	r3, [fp], #28
 800fb46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fb4a:	4680      	mov	r8, r0
 800fb4c:	460c      	mov	r4, r1
 800fb4e:	465e      	mov	r6, fp
 800fb50:	46aa      	mov	sl, r5
 800fb52:	46a9      	mov	r9, r5
 800fb54:	9501      	str	r5, [sp, #4]
 800fb56:	68a2      	ldr	r2, [r4, #8]
 800fb58:	b152      	cbz	r2, 800fb70 <_scanf_float+0x60>
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b4e      	cmp	r3, #78	; 0x4e
 800fb60:	d864      	bhi.n	800fc2c <_scanf_float+0x11c>
 800fb62:	2b40      	cmp	r3, #64	; 0x40
 800fb64:	d83c      	bhi.n	800fbe0 <_scanf_float+0xd0>
 800fb66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fb6a:	b2c8      	uxtb	r0, r1
 800fb6c:	280e      	cmp	r0, #14
 800fb6e:	d93a      	bls.n	800fbe6 <_scanf_float+0xd6>
 800fb70:	f1b9 0f00 	cmp.w	r9, #0
 800fb74:	d003      	beq.n	800fb7e <_scanf_float+0x6e>
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb7c:	6023      	str	r3, [r4, #0]
 800fb7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb82:	f1ba 0f01 	cmp.w	sl, #1
 800fb86:	f200 8113 	bhi.w	800fdb0 <_scanf_float+0x2a0>
 800fb8a:	455e      	cmp	r6, fp
 800fb8c:	f200 8105 	bhi.w	800fd9a <_scanf_float+0x28a>
 800fb90:	2501      	movs	r5, #1
 800fb92:	4628      	mov	r0, r5
 800fb94:	b007      	add	sp, #28
 800fb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fb9e:	2a0d      	cmp	r2, #13
 800fba0:	d8e6      	bhi.n	800fb70 <_scanf_float+0x60>
 800fba2:	a101      	add	r1, pc, #4	; (adr r1, 800fba8 <_scanf_float+0x98>)
 800fba4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fba8:	0800fce7 	.word	0x0800fce7
 800fbac:	0800fb71 	.word	0x0800fb71
 800fbb0:	0800fb71 	.word	0x0800fb71
 800fbb4:	0800fb71 	.word	0x0800fb71
 800fbb8:	0800fd47 	.word	0x0800fd47
 800fbbc:	0800fd1f 	.word	0x0800fd1f
 800fbc0:	0800fb71 	.word	0x0800fb71
 800fbc4:	0800fb71 	.word	0x0800fb71
 800fbc8:	0800fcf5 	.word	0x0800fcf5
 800fbcc:	0800fb71 	.word	0x0800fb71
 800fbd0:	0800fb71 	.word	0x0800fb71
 800fbd4:	0800fb71 	.word	0x0800fb71
 800fbd8:	0800fb71 	.word	0x0800fb71
 800fbdc:	0800fcad 	.word	0x0800fcad
 800fbe0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fbe4:	e7db      	b.n	800fb9e <_scanf_float+0x8e>
 800fbe6:	290e      	cmp	r1, #14
 800fbe8:	d8c2      	bhi.n	800fb70 <_scanf_float+0x60>
 800fbea:	a001      	add	r0, pc, #4	; (adr r0, 800fbf0 <_scanf_float+0xe0>)
 800fbec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fbf0:	0800fc9f 	.word	0x0800fc9f
 800fbf4:	0800fb71 	.word	0x0800fb71
 800fbf8:	0800fc9f 	.word	0x0800fc9f
 800fbfc:	0800fd33 	.word	0x0800fd33
 800fc00:	0800fb71 	.word	0x0800fb71
 800fc04:	0800fc4d 	.word	0x0800fc4d
 800fc08:	0800fc89 	.word	0x0800fc89
 800fc0c:	0800fc89 	.word	0x0800fc89
 800fc10:	0800fc89 	.word	0x0800fc89
 800fc14:	0800fc89 	.word	0x0800fc89
 800fc18:	0800fc89 	.word	0x0800fc89
 800fc1c:	0800fc89 	.word	0x0800fc89
 800fc20:	0800fc89 	.word	0x0800fc89
 800fc24:	0800fc89 	.word	0x0800fc89
 800fc28:	0800fc89 	.word	0x0800fc89
 800fc2c:	2b6e      	cmp	r3, #110	; 0x6e
 800fc2e:	d809      	bhi.n	800fc44 <_scanf_float+0x134>
 800fc30:	2b60      	cmp	r3, #96	; 0x60
 800fc32:	d8b2      	bhi.n	800fb9a <_scanf_float+0x8a>
 800fc34:	2b54      	cmp	r3, #84	; 0x54
 800fc36:	d077      	beq.n	800fd28 <_scanf_float+0x218>
 800fc38:	2b59      	cmp	r3, #89	; 0x59
 800fc3a:	d199      	bne.n	800fb70 <_scanf_float+0x60>
 800fc3c:	2d07      	cmp	r5, #7
 800fc3e:	d197      	bne.n	800fb70 <_scanf_float+0x60>
 800fc40:	2508      	movs	r5, #8
 800fc42:	e029      	b.n	800fc98 <_scanf_float+0x188>
 800fc44:	2b74      	cmp	r3, #116	; 0x74
 800fc46:	d06f      	beq.n	800fd28 <_scanf_float+0x218>
 800fc48:	2b79      	cmp	r3, #121	; 0x79
 800fc4a:	e7f6      	b.n	800fc3a <_scanf_float+0x12a>
 800fc4c:	6821      	ldr	r1, [r4, #0]
 800fc4e:	05c8      	lsls	r0, r1, #23
 800fc50:	d51a      	bpl.n	800fc88 <_scanf_float+0x178>
 800fc52:	9b02      	ldr	r3, [sp, #8]
 800fc54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fc58:	6021      	str	r1, [r4, #0]
 800fc5a:	f109 0901 	add.w	r9, r9, #1
 800fc5e:	b11b      	cbz	r3, 800fc68 <_scanf_float+0x158>
 800fc60:	3b01      	subs	r3, #1
 800fc62:	3201      	adds	r2, #1
 800fc64:	9302      	str	r3, [sp, #8]
 800fc66:	60a2      	str	r2, [r4, #8]
 800fc68:	68a3      	ldr	r3, [r4, #8]
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	60a3      	str	r3, [r4, #8]
 800fc6e:	6923      	ldr	r3, [r4, #16]
 800fc70:	3301      	adds	r3, #1
 800fc72:	6123      	str	r3, [r4, #16]
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	3b01      	subs	r3, #1
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	607b      	str	r3, [r7, #4]
 800fc7c:	f340 8084 	ble.w	800fd88 <_scanf_float+0x278>
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	3301      	adds	r3, #1
 800fc84:	603b      	str	r3, [r7, #0]
 800fc86:	e766      	b.n	800fb56 <_scanf_float+0x46>
 800fc88:	eb1a 0f05 	cmn.w	sl, r5
 800fc8c:	f47f af70 	bne.w	800fb70 <_scanf_float+0x60>
 800fc90:	6822      	ldr	r2, [r4, #0]
 800fc92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fc96:	6022      	str	r2, [r4, #0]
 800fc98:	f806 3b01 	strb.w	r3, [r6], #1
 800fc9c:	e7e4      	b.n	800fc68 <_scanf_float+0x158>
 800fc9e:	6822      	ldr	r2, [r4, #0]
 800fca0:	0610      	lsls	r0, r2, #24
 800fca2:	f57f af65 	bpl.w	800fb70 <_scanf_float+0x60>
 800fca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fcaa:	e7f4      	b.n	800fc96 <_scanf_float+0x186>
 800fcac:	f1ba 0f00 	cmp.w	sl, #0
 800fcb0:	d10e      	bne.n	800fcd0 <_scanf_float+0x1c0>
 800fcb2:	f1b9 0f00 	cmp.w	r9, #0
 800fcb6:	d10e      	bne.n	800fcd6 <_scanf_float+0x1c6>
 800fcb8:	6822      	ldr	r2, [r4, #0]
 800fcba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fcbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fcc2:	d108      	bne.n	800fcd6 <_scanf_float+0x1c6>
 800fcc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fcc8:	6022      	str	r2, [r4, #0]
 800fcca:	f04f 0a01 	mov.w	sl, #1
 800fcce:	e7e3      	b.n	800fc98 <_scanf_float+0x188>
 800fcd0:	f1ba 0f02 	cmp.w	sl, #2
 800fcd4:	d055      	beq.n	800fd82 <_scanf_float+0x272>
 800fcd6:	2d01      	cmp	r5, #1
 800fcd8:	d002      	beq.n	800fce0 <_scanf_float+0x1d0>
 800fcda:	2d04      	cmp	r5, #4
 800fcdc:	f47f af48 	bne.w	800fb70 <_scanf_float+0x60>
 800fce0:	3501      	adds	r5, #1
 800fce2:	b2ed      	uxtb	r5, r5
 800fce4:	e7d8      	b.n	800fc98 <_scanf_float+0x188>
 800fce6:	f1ba 0f01 	cmp.w	sl, #1
 800fcea:	f47f af41 	bne.w	800fb70 <_scanf_float+0x60>
 800fcee:	f04f 0a02 	mov.w	sl, #2
 800fcf2:	e7d1      	b.n	800fc98 <_scanf_float+0x188>
 800fcf4:	b97d      	cbnz	r5, 800fd16 <_scanf_float+0x206>
 800fcf6:	f1b9 0f00 	cmp.w	r9, #0
 800fcfa:	f47f af3c 	bne.w	800fb76 <_scanf_float+0x66>
 800fcfe:	6822      	ldr	r2, [r4, #0]
 800fd00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fd04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fd08:	f47f af39 	bne.w	800fb7e <_scanf_float+0x6e>
 800fd0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd10:	6022      	str	r2, [r4, #0]
 800fd12:	2501      	movs	r5, #1
 800fd14:	e7c0      	b.n	800fc98 <_scanf_float+0x188>
 800fd16:	2d03      	cmp	r5, #3
 800fd18:	d0e2      	beq.n	800fce0 <_scanf_float+0x1d0>
 800fd1a:	2d05      	cmp	r5, #5
 800fd1c:	e7de      	b.n	800fcdc <_scanf_float+0x1cc>
 800fd1e:	2d02      	cmp	r5, #2
 800fd20:	f47f af26 	bne.w	800fb70 <_scanf_float+0x60>
 800fd24:	2503      	movs	r5, #3
 800fd26:	e7b7      	b.n	800fc98 <_scanf_float+0x188>
 800fd28:	2d06      	cmp	r5, #6
 800fd2a:	f47f af21 	bne.w	800fb70 <_scanf_float+0x60>
 800fd2e:	2507      	movs	r5, #7
 800fd30:	e7b2      	b.n	800fc98 <_scanf_float+0x188>
 800fd32:	6822      	ldr	r2, [r4, #0]
 800fd34:	0591      	lsls	r1, r2, #22
 800fd36:	f57f af1b 	bpl.w	800fb70 <_scanf_float+0x60>
 800fd3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fd3e:	6022      	str	r2, [r4, #0]
 800fd40:	f8cd 9004 	str.w	r9, [sp, #4]
 800fd44:	e7a8      	b.n	800fc98 <_scanf_float+0x188>
 800fd46:	6822      	ldr	r2, [r4, #0]
 800fd48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fd4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fd50:	d006      	beq.n	800fd60 <_scanf_float+0x250>
 800fd52:	0550      	lsls	r0, r2, #21
 800fd54:	f57f af0c 	bpl.w	800fb70 <_scanf_float+0x60>
 800fd58:	f1b9 0f00 	cmp.w	r9, #0
 800fd5c:	f43f af0f 	beq.w	800fb7e <_scanf_float+0x6e>
 800fd60:	0591      	lsls	r1, r2, #22
 800fd62:	bf58      	it	pl
 800fd64:	9901      	ldrpl	r1, [sp, #4]
 800fd66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fd6a:	bf58      	it	pl
 800fd6c:	eba9 0101 	subpl.w	r1, r9, r1
 800fd70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fd74:	bf58      	it	pl
 800fd76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fd7a:	6022      	str	r2, [r4, #0]
 800fd7c:	f04f 0900 	mov.w	r9, #0
 800fd80:	e78a      	b.n	800fc98 <_scanf_float+0x188>
 800fd82:	f04f 0a03 	mov.w	sl, #3
 800fd86:	e787      	b.n	800fc98 <_scanf_float+0x188>
 800fd88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fd8c:	4639      	mov	r1, r7
 800fd8e:	4640      	mov	r0, r8
 800fd90:	4798      	blx	r3
 800fd92:	2800      	cmp	r0, #0
 800fd94:	f43f aedf 	beq.w	800fb56 <_scanf_float+0x46>
 800fd98:	e6ea      	b.n	800fb70 <_scanf_float+0x60>
 800fd9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fd9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fda2:	463a      	mov	r2, r7
 800fda4:	4640      	mov	r0, r8
 800fda6:	4798      	blx	r3
 800fda8:	6923      	ldr	r3, [r4, #16]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	6123      	str	r3, [r4, #16]
 800fdae:	e6ec      	b.n	800fb8a <_scanf_float+0x7a>
 800fdb0:	1e6b      	subs	r3, r5, #1
 800fdb2:	2b06      	cmp	r3, #6
 800fdb4:	d825      	bhi.n	800fe02 <_scanf_float+0x2f2>
 800fdb6:	2d02      	cmp	r5, #2
 800fdb8:	d836      	bhi.n	800fe28 <_scanf_float+0x318>
 800fdba:	455e      	cmp	r6, fp
 800fdbc:	f67f aee8 	bls.w	800fb90 <_scanf_float+0x80>
 800fdc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fdc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fdc8:	463a      	mov	r2, r7
 800fdca:	4640      	mov	r0, r8
 800fdcc:	4798      	blx	r3
 800fdce:	6923      	ldr	r3, [r4, #16]
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	6123      	str	r3, [r4, #16]
 800fdd4:	e7f1      	b.n	800fdba <_scanf_float+0x2aa>
 800fdd6:	9802      	ldr	r0, [sp, #8]
 800fdd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fddc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800fde0:	9002      	str	r0, [sp, #8]
 800fde2:	463a      	mov	r2, r7
 800fde4:	4640      	mov	r0, r8
 800fde6:	4798      	blx	r3
 800fde8:	6923      	ldr	r3, [r4, #16]
 800fdea:	3b01      	subs	r3, #1
 800fdec:	6123      	str	r3, [r4, #16]
 800fdee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fdf2:	fa5f fa8a 	uxtb.w	sl, sl
 800fdf6:	f1ba 0f02 	cmp.w	sl, #2
 800fdfa:	d1ec      	bne.n	800fdd6 <_scanf_float+0x2c6>
 800fdfc:	3d03      	subs	r5, #3
 800fdfe:	b2ed      	uxtb	r5, r5
 800fe00:	1b76      	subs	r6, r6, r5
 800fe02:	6823      	ldr	r3, [r4, #0]
 800fe04:	05da      	lsls	r2, r3, #23
 800fe06:	d52f      	bpl.n	800fe68 <_scanf_float+0x358>
 800fe08:	055b      	lsls	r3, r3, #21
 800fe0a:	d510      	bpl.n	800fe2e <_scanf_float+0x31e>
 800fe0c:	455e      	cmp	r6, fp
 800fe0e:	f67f aebf 	bls.w	800fb90 <_scanf_float+0x80>
 800fe12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe1a:	463a      	mov	r2, r7
 800fe1c:	4640      	mov	r0, r8
 800fe1e:	4798      	blx	r3
 800fe20:	6923      	ldr	r3, [r4, #16]
 800fe22:	3b01      	subs	r3, #1
 800fe24:	6123      	str	r3, [r4, #16]
 800fe26:	e7f1      	b.n	800fe0c <_scanf_float+0x2fc>
 800fe28:	46aa      	mov	sl, r5
 800fe2a:	9602      	str	r6, [sp, #8]
 800fe2c:	e7df      	b.n	800fdee <_scanf_float+0x2de>
 800fe2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fe32:	6923      	ldr	r3, [r4, #16]
 800fe34:	2965      	cmp	r1, #101	; 0x65
 800fe36:	f103 33ff 	add.w	r3, r3, #4294967295
 800fe3a:	f106 35ff 	add.w	r5, r6, #4294967295
 800fe3e:	6123      	str	r3, [r4, #16]
 800fe40:	d00c      	beq.n	800fe5c <_scanf_float+0x34c>
 800fe42:	2945      	cmp	r1, #69	; 0x45
 800fe44:	d00a      	beq.n	800fe5c <_scanf_float+0x34c>
 800fe46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe4a:	463a      	mov	r2, r7
 800fe4c:	4640      	mov	r0, r8
 800fe4e:	4798      	blx	r3
 800fe50:	6923      	ldr	r3, [r4, #16]
 800fe52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fe56:	3b01      	subs	r3, #1
 800fe58:	1eb5      	subs	r5, r6, #2
 800fe5a:	6123      	str	r3, [r4, #16]
 800fe5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fe60:	463a      	mov	r2, r7
 800fe62:	4640      	mov	r0, r8
 800fe64:	4798      	blx	r3
 800fe66:	462e      	mov	r6, r5
 800fe68:	6825      	ldr	r5, [r4, #0]
 800fe6a:	f015 0510 	ands.w	r5, r5, #16
 800fe6e:	d158      	bne.n	800ff22 <_scanf_float+0x412>
 800fe70:	7035      	strb	r5, [r6, #0]
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800fe78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe7c:	d11c      	bne.n	800feb8 <_scanf_float+0x3a8>
 800fe7e:	9b01      	ldr	r3, [sp, #4]
 800fe80:	454b      	cmp	r3, r9
 800fe82:	eba3 0209 	sub.w	r2, r3, r9
 800fe86:	d124      	bne.n	800fed2 <_scanf_float+0x3c2>
 800fe88:	2200      	movs	r2, #0
 800fe8a:	4659      	mov	r1, fp
 800fe8c:	4640      	mov	r0, r8
 800fe8e:	f000 fef1 	bl	8010c74 <_strtod_r>
 800fe92:	9b03      	ldr	r3, [sp, #12]
 800fe94:	6821      	ldr	r1, [r4, #0]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f011 0f02 	tst.w	r1, #2
 800fe9c:	ec57 6b10 	vmov	r6, r7, d0
 800fea0:	f103 0204 	add.w	r2, r3, #4
 800fea4:	d020      	beq.n	800fee8 <_scanf_float+0x3d8>
 800fea6:	9903      	ldr	r1, [sp, #12]
 800fea8:	600a      	str	r2, [r1, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	e9c3 6700 	strd	r6, r7, [r3]
 800feb0:	68e3      	ldr	r3, [r4, #12]
 800feb2:	3301      	adds	r3, #1
 800feb4:	60e3      	str	r3, [r4, #12]
 800feb6:	e66c      	b.n	800fb92 <_scanf_float+0x82>
 800feb8:	9b04      	ldr	r3, [sp, #16]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d0e4      	beq.n	800fe88 <_scanf_float+0x378>
 800febe:	9905      	ldr	r1, [sp, #20]
 800fec0:	230a      	movs	r3, #10
 800fec2:	462a      	mov	r2, r5
 800fec4:	3101      	adds	r1, #1
 800fec6:	4640      	mov	r0, r8
 800fec8:	f000 ff5e 	bl	8010d88 <_strtol_r>
 800fecc:	9b04      	ldr	r3, [sp, #16]
 800fece:	9e05      	ldr	r6, [sp, #20]
 800fed0:	1ac2      	subs	r2, r0, r3
 800fed2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800fed6:	429e      	cmp	r6, r3
 800fed8:	bf28      	it	cs
 800feda:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800fede:	4912      	ldr	r1, [pc, #72]	; (800ff28 <_scanf_float+0x418>)
 800fee0:	4630      	mov	r0, r6
 800fee2:	f000 f82b 	bl	800ff3c <siprintf>
 800fee6:	e7cf      	b.n	800fe88 <_scanf_float+0x378>
 800fee8:	f011 0f04 	tst.w	r1, #4
 800feec:	9903      	ldr	r1, [sp, #12]
 800feee:	600a      	str	r2, [r1, #0]
 800fef0:	d1db      	bne.n	800feaa <_scanf_float+0x39a>
 800fef2:	f8d3 8000 	ldr.w	r8, [r3]
 800fef6:	ee10 2a10 	vmov	r2, s0
 800fefa:	ee10 0a10 	vmov	r0, s0
 800fefe:	463b      	mov	r3, r7
 800ff00:	4639      	mov	r1, r7
 800ff02:	f7f0 fe13 	bl	8000b2c <__aeabi_dcmpun>
 800ff06:	b128      	cbz	r0, 800ff14 <_scanf_float+0x404>
 800ff08:	4808      	ldr	r0, [pc, #32]	; (800ff2c <_scanf_float+0x41c>)
 800ff0a:	f000 f811 	bl	800ff30 <nanf>
 800ff0e:	ed88 0a00 	vstr	s0, [r8]
 800ff12:	e7cd      	b.n	800feb0 <_scanf_float+0x3a0>
 800ff14:	4630      	mov	r0, r6
 800ff16:	4639      	mov	r1, r7
 800ff18:	f7f0 fe66 	bl	8000be8 <__aeabi_d2f>
 800ff1c:	f8c8 0000 	str.w	r0, [r8]
 800ff20:	e7c6      	b.n	800feb0 <_scanf_float+0x3a0>
 800ff22:	2500      	movs	r5, #0
 800ff24:	e635      	b.n	800fb92 <_scanf_float+0x82>
 800ff26:	bf00      	nop
 800ff28:	08015034 	.word	0x08015034
 800ff2c:	08015450 	.word	0x08015450

0800ff30 <nanf>:
 800ff30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ff38 <nanf+0x8>
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop
 800ff38:	7fc00000 	.word	0x7fc00000

0800ff3c <siprintf>:
 800ff3c:	b40e      	push	{r1, r2, r3}
 800ff3e:	b500      	push	{lr}
 800ff40:	b09c      	sub	sp, #112	; 0x70
 800ff42:	ab1d      	add	r3, sp, #116	; 0x74
 800ff44:	9002      	str	r0, [sp, #8]
 800ff46:	9006      	str	r0, [sp, #24]
 800ff48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ff4c:	4809      	ldr	r0, [pc, #36]	; (800ff74 <siprintf+0x38>)
 800ff4e:	9107      	str	r1, [sp, #28]
 800ff50:	9104      	str	r1, [sp, #16]
 800ff52:	4909      	ldr	r1, [pc, #36]	; (800ff78 <siprintf+0x3c>)
 800ff54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff58:	9105      	str	r1, [sp, #20]
 800ff5a:	6800      	ldr	r0, [r0, #0]
 800ff5c:	9301      	str	r3, [sp, #4]
 800ff5e:	a902      	add	r1, sp, #8
 800ff60:	f002 ff2c 	bl	8012dbc <_svfiprintf_r>
 800ff64:	9b02      	ldr	r3, [sp, #8]
 800ff66:	2200      	movs	r2, #0
 800ff68:	701a      	strb	r2, [r3, #0]
 800ff6a:	b01c      	add	sp, #112	; 0x70
 800ff6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff70:	b003      	add	sp, #12
 800ff72:	4770      	bx	lr
 800ff74:	20000058 	.word	0x20000058
 800ff78:	ffff0208 	.word	0xffff0208

0800ff7c <__sread>:
 800ff7c:	b510      	push	{r4, lr}
 800ff7e:	460c      	mov	r4, r1
 800ff80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff84:	f003 f81a 	bl	8012fbc <_read_r>
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	bfab      	itete	ge
 800ff8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ff90:	181b      	addge	r3, r3, r0
 800ff92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff96:	bfac      	ite	ge
 800ff98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff9a:	81a3      	strhlt	r3, [r4, #12]
 800ff9c:	bd10      	pop	{r4, pc}

0800ff9e <__swrite>:
 800ff9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa2:	461f      	mov	r7, r3
 800ffa4:	898b      	ldrh	r3, [r1, #12]
 800ffa6:	05db      	lsls	r3, r3, #23
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	460c      	mov	r4, r1
 800ffac:	4616      	mov	r6, r2
 800ffae:	d505      	bpl.n	800ffbc <__swrite+0x1e>
 800ffb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb4:	2302      	movs	r3, #2
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	f002 f8f6 	bl	80121a8 <_lseek_r>
 800ffbc:	89a3      	ldrh	r3, [r4, #12]
 800ffbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffc6:	81a3      	strh	r3, [r4, #12]
 800ffc8:	4632      	mov	r2, r6
 800ffca:	463b      	mov	r3, r7
 800ffcc:	4628      	mov	r0, r5
 800ffce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd2:	f000 bedb 	b.w	8010d8c <_write_r>

0800ffd6 <__sseek>:
 800ffd6:	b510      	push	{r4, lr}
 800ffd8:	460c      	mov	r4, r1
 800ffda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffde:	f002 f8e3 	bl	80121a8 <_lseek_r>
 800ffe2:	1c43      	adds	r3, r0, #1
 800ffe4:	89a3      	ldrh	r3, [r4, #12]
 800ffe6:	bf15      	itete	ne
 800ffe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800ffea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fff2:	81a3      	strheq	r3, [r4, #12]
 800fff4:	bf18      	it	ne
 800fff6:	81a3      	strhne	r3, [r4, #12]
 800fff8:	bd10      	pop	{r4, pc}

0800fffa <__sclose>:
 800fffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fffe:	f000 bed7 	b.w	8010db0 <_close_r>

08010002 <strncmp>:
 8010002:	b510      	push	{r4, lr}
 8010004:	b16a      	cbz	r2, 8010022 <strncmp+0x20>
 8010006:	3901      	subs	r1, #1
 8010008:	1884      	adds	r4, r0, r2
 801000a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801000e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010012:	4293      	cmp	r3, r2
 8010014:	d103      	bne.n	801001e <strncmp+0x1c>
 8010016:	42a0      	cmp	r0, r4
 8010018:	d001      	beq.n	801001e <strncmp+0x1c>
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1f5      	bne.n	801000a <strncmp+0x8>
 801001e:	1a98      	subs	r0, r3, r2
 8010020:	bd10      	pop	{r4, pc}
 8010022:	4610      	mov	r0, r2
 8010024:	e7fc      	b.n	8010020 <strncmp+0x1e>

08010026 <sulp>:
 8010026:	b570      	push	{r4, r5, r6, lr}
 8010028:	4604      	mov	r4, r0
 801002a:	460d      	mov	r5, r1
 801002c:	ec45 4b10 	vmov	d0, r4, r5
 8010030:	4616      	mov	r6, r2
 8010032:	f002 fc5f 	bl	80128f4 <__ulp>
 8010036:	ec51 0b10 	vmov	r0, r1, d0
 801003a:	b17e      	cbz	r6, 801005c <sulp+0x36>
 801003c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010040:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010044:	2b00      	cmp	r3, #0
 8010046:	dd09      	ble.n	801005c <sulp+0x36>
 8010048:	051b      	lsls	r3, r3, #20
 801004a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801004e:	2400      	movs	r4, #0
 8010050:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010054:	4622      	mov	r2, r4
 8010056:	462b      	mov	r3, r5
 8010058:	f7f0 face 	bl	80005f8 <__aeabi_dmul>
 801005c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010060 <_strtod_l>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	b0a3      	sub	sp, #140	; 0x8c
 8010066:	461f      	mov	r7, r3
 8010068:	2300      	movs	r3, #0
 801006a:	931e      	str	r3, [sp, #120]	; 0x78
 801006c:	4ba4      	ldr	r3, [pc, #656]	; (8010300 <_strtod_l+0x2a0>)
 801006e:	9219      	str	r2, [sp, #100]	; 0x64
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	9307      	str	r3, [sp, #28]
 8010074:	4604      	mov	r4, r0
 8010076:	4618      	mov	r0, r3
 8010078:	4688      	mov	r8, r1
 801007a:	f7f0 f8a9 	bl	80001d0 <strlen>
 801007e:	f04f 0a00 	mov.w	sl, #0
 8010082:	4605      	mov	r5, r0
 8010084:	f04f 0b00 	mov.w	fp, #0
 8010088:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801008c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801008e:	781a      	ldrb	r2, [r3, #0]
 8010090:	2a2b      	cmp	r2, #43	; 0x2b
 8010092:	d04c      	beq.n	801012e <_strtod_l+0xce>
 8010094:	d839      	bhi.n	801010a <_strtod_l+0xaa>
 8010096:	2a0d      	cmp	r2, #13
 8010098:	d832      	bhi.n	8010100 <_strtod_l+0xa0>
 801009a:	2a08      	cmp	r2, #8
 801009c:	d832      	bhi.n	8010104 <_strtod_l+0xa4>
 801009e:	2a00      	cmp	r2, #0
 80100a0:	d03c      	beq.n	801011c <_strtod_l+0xbc>
 80100a2:	2300      	movs	r3, #0
 80100a4:	930e      	str	r3, [sp, #56]	; 0x38
 80100a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80100a8:	7833      	ldrb	r3, [r6, #0]
 80100aa:	2b30      	cmp	r3, #48	; 0x30
 80100ac:	f040 80b4 	bne.w	8010218 <_strtod_l+0x1b8>
 80100b0:	7873      	ldrb	r3, [r6, #1]
 80100b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80100b6:	2b58      	cmp	r3, #88	; 0x58
 80100b8:	d16c      	bne.n	8010194 <_strtod_l+0x134>
 80100ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100bc:	9301      	str	r3, [sp, #4]
 80100be:	ab1e      	add	r3, sp, #120	; 0x78
 80100c0:	9702      	str	r7, [sp, #8]
 80100c2:	9300      	str	r3, [sp, #0]
 80100c4:	4a8f      	ldr	r2, [pc, #572]	; (8010304 <_strtod_l+0x2a4>)
 80100c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80100c8:	a91d      	add	r1, sp, #116	; 0x74
 80100ca:	4620      	mov	r0, r4
 80100cc:	f001 fd60 	bl	8011b90 <__gethex>
 80100d0:	f010 0707 	ands.w	r7, r0, #7
 80100d4:	4605      	mov	r5, r0
 80100d6:	d005      	beq.n	80100e4 <_strtod_l+0x84>
 80100d8:	2f06      	cmp	r7, #6
 80100da:	d12a      	bne.n	8010132 <_strtod_l+0xd2>
 80100dc:	3601      	adds	r6, #1
 80100de:	2300      	movs	r3, #0
 80100e0:	961d      	str	r6, [sp, #116]	; 0x74
 80100e2:	930e      	str	r3, [sp, #56]	; 0x38
 80100e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	f040 8596 	bne.w	8010c18 <_strtod_l+0xbb8>
 80100ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80100ee:	b1db      	cbz	r3, 8010128 <_strtod_l+0xc8>
 80100f0:	4652      	mov	r2, sl
 80100f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80100f6:	ec43 2b10 	vmov	d0, r2, r3
 80100fa:	b023      	add	sp, #140	; 0x8c
 80100fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010100:	2a20      	cmp	r2, #32
 8010102:	d1ce      	bne.n	80100a2 <_strtod_l+0x42>
 8010104:	3301      	adds	r3, #1
 8010106:	931d      	str	r3, [sp, #116]	; 0x74
 8010108:	e7c0      	b.n	801008c <_strtod_l+0x2c>
 801010a:	2a2d      	cmp	r2, #45	; 0x2d
 801010c:	d1c9      	bne.n	80100a2 <_strtod_l+0x42>
 801010e:	2201      	movs	r2, #1
 8010110:	920e      	str	r2, [sp, #56]	; 0x38
 8010112:	1c5a      	adds	r2, r3, #1
 8010114:	921d      	str	r2, [sp, #116]	; 0x74
 8010116:	785b      	ldrb	r3, [r3, #1]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1c4      	bne.n	80100a6 <_strtod_l+0x46>
 801011c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801011e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010122:	2b00      	cmp	r3, #0
 8010124:	f040 8576 	bne.w	8010c14 <_strtod_l+0xbb4>
 8010128:	4652      	mov	r2, sl
 801012a:	465b      	mov	r3, fp
 801012c:	e7e3      	b.n	80100f6 <_strtod_l+0x96>
 801012e:	2200      	movs	r2, #0
 8010130:	e7ee      	b.n	8010110 <_strtod_l+0xb0>
 8010132:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010134:	b13a      	cbz	r2, 8010146 <_strtod_l+0xe6>
 8010136:	2135      	movs	r1, #53	; 0x35
 8010138:	a820      	add	r0, sp, #128	; 0x80
 801013a:	f002 fce6 	bl	8012b0a <__copybits>
 801013e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010140:	4620      	mov	r0, r4
 8010142:	f002 f8ab 	bl	801229c <_Bfree>
 8010146:	3f01      	subs	r7, #1
 8010148:	2f05      	cmp	r7, #5
 801014a:	d807      	bhi.n	801015c <_strtod_l+0xfc>
 801014c:	e8df f007 	tbb	[pc, r7]
 8010150:	1d180b0e 	.word	0x1d180b0e
 8010154:	030e      	.short	0x030e
 8010156:	f04f 0b00 	mov.w	fp, #0
 801015a:	46da      	mov	sl, fp
 801015c:	0728      	lsls	r0, r5, #28
 801015e:	d5c1      	bpl.n	80100e4 <_strtod_l+0x84>
 8010160:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010164:	e7be      	b.n	80100e4 <_strtod_l+0x84>
 8010166:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801016a:	e7f7      	b.n	801015c <_strtod_l+0xfc>
 801016c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010170:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010172:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010176:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801017a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801017e:	e7ed      	b.n	801015c <_strtod_l+0xfc>
 8010180:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010308 <_strtod_l+0x2a8>
 8010184:	f04f 0a00 	mov.w	sl, #0
 8010188:	e7e8      	b.n	801015c <_strtod_l+0xfc>
 801018a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801018e:	f04f 3aff 	mov.w	sl, #4294967295
 8010192:	e7e3      	b.n	801015c <_strtod_l+0xfc>
 8010194:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010196:	1c5a      	adds	r2, r3, #1
 8010198:	921d      	str	r2, [sp, #116]	; 0x74
 801019a:	785b      	ldrb	r3, [r3, #1]
 801019c:	2b30      	cmp	r3, #48	; 0x30
 801019e:	d0f9      	beq.n	8010194 <_strtod_l+0x134>
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d09f      	beq.n	80100e4 <_strtod_l+0x84>
 80101a4:	2301      	movs	r3, #1
 80101a6:	f04f 0900 	mov.w	r9, #0
 80101aa:	9304      	str	r3, [sp, #16]
 80101ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80101ae:	930a      	str	r3, [sp, #40]	; 0x28
 80101b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80101b4:	464f      	mov	r7, r9
 80101b6:	220a      	movs	r2, #10
 80101b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80101ba:	7806      	ldrb	r6, [r0, #0]
 80101bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80101c0:	b2d9      	uxtb	r1, r3
 80101c2:	2909      	cmp	r1, #9
 80101c4:	d92a      	bls.n	801021c <_strtod_l+0x1bc>
 80101c6:	9907      	ldr	r1, [sp, #28]
 80101c8:	462a      	mov	r2, r5
 80101ca:	f7ff ff1a 	bl	8010002 <strncmp>
 80101ce:	b398      	cbz	r0, 8010238 <_strtod_l+0x1d8>
 80101d0:	2000      	movs	r0, #0
 80101d2:	4633      	mov	r3, r6
 80101d4:	463d      	mov	r5, r7
 80101d6:	9007      	str	r0, [sp, #28]
 80101d8:	4602      	mov	r2, r0
 80101da:	2b65      	cmp	r3, #101	; 0x65
 80101dc:	d001      	beq.n	80101e2 <_strtod_l+0x182>
 80101de:	2b45      	cmp	r3, #69	; 0x45
 80101e0:	d118      	bne.n	8010214 <_strtod_l+0x1b4>
 80101e2:	b91d      	cbnz	r5, 80101ec <_strtod_l+0x18c>
 80101e4:	9b04      	ldr	r3, [sp, #16]
 80101e6:	4303      	orrs	r3, r0
 80101e8:	d098      	beq.n	801011c <_strtod_l+0xbc>
 80101ea:	2500      	movs	r5, #0
 80101ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80101f0:	f108 0301 	add.w	r3, r8, #1
 80101f4:	931d      	str	r3, [sp, #116]	; 0x74
 80101f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80101fa:	2b2b      	cmp	r3, #43	; 0x2b
 80101fc:	d075      	beq.n	80102ea <_strtod_l+0x28a>
 80101fe:	2b2d      	cmp	r3, #45	; 0x2d
 8010200:	d07b      	beq.n	80102fa <_strtod_l+0x29a>
 8010202:	f04f 0c00 	mov.w	ip, #0
 8010206:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801020a:	2909      	cmp	r1, #9
 801020c:	f240 8082 	bls.w	8010314 <_strtod_l+0x2b4>
 8010210:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010214:	2600      	movs	r6, #0
 8010216:	e09d      	b.n	8010354 <_strtod_l+0x2f4>
 8010218:	2300      	movs	r3, #0
 801021a:	e7c4      	b.n	80101a6 <_strtod_l+0x146>
 801021c:	2f08      	cmp	r7, #8
 801021e:	bfd8      	it	le
 8010220:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010222:	f100 0001 	add.w	r0, r0, #1
 8010226:	bfda      	itte	le
 8010228:	fb02 3301 	mlale	r3, r2, r1, r3
 801022c:	9309      	strle	r3, [sp, #36]	; 0x24
 801022e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010232:	3701      	adds	r7, #1
 8010234:	901d      	str	r0, [sp, #116]	; 0x74
 8010236:	e7bf      	b.n	80101b8 <_strtod_l+0x158>
 8010238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801023a:	195a      	adds	r2, r3, r5
 801023c:	921d      	str	r2, [sp, #116]	; 0x74
 801023e:	5d5b      	ldrb	r3, [r3, r5]
 8010240:	2f00      	cmp	r7, #0
 8010242:	d037      	beq.n	80102b4 <_strtod_l+0x254>
 8010244:	9007      	str	r0, [sp, #28]
 8010246:	463d      	mov	r5, r7
 8010248:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801024c:	2a09      	cmp	r2, #9
 801024e:	d912      	bls.n	8010276 <_strtod_l+0x216>
 8010250:	2201      	movs	r2, #1
 8010252:	e7c2      	b.n	80101da <_strtod_l+0x17a>
 8010254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010256:	1c5a      	adds	r2, r3, #1
 8010258:	921d      	str	r2, [sp, #116]	; 0x74
 801025a:	785b      	ldrb	r3, [r3, #1]
 801025c:	3001      	adds	r0, #1
 801025e:	2b30      	cmp	r3, #48	; 0x30
 8010260:	d0f8      	beq.n	8010254 <_strtod_l+0x1f4>
 8010262:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8010266:	2a08      	cmp	r2, #8
 8010268:	f200 84db 	bhi.w	8010c22 <_strtod_l+0xbc2>
 801026c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801026e:	9007      	str	r0, [sp, #28]
 8010270:	2000      	movs	r0, #0
 8010272:	920a      	str	r2, [sp, #40]	; 0x28
 8010274:	4605      	mov	r5, r0
 8010276:	3b30      	subs	r3, #48	; 0x30
 8010278:	f100 0201 	add.w	r2, r0, #1
 801027c:	d014      	beq.n	80102a8 <_strtod_l+0x248>
 801027e:	9907      	ldr	r1, [sp, #28]
 8010280:	4411      	add	r1, r2
 8010282:	9107      	str	r1, [sp, #28]
 8010284:	462a      	mov	r2, r5
 8010286:	eb00 0e05 	add.w	lr, r0, r5
 801028a:	210a      	movs	r1, #10
 801028c:	4572      	cmp	r2, lr
 801028e:	d113      	bne.n	80102b8 <_strtod_l+0x258>
 8010290:	182a      	adds	r2, r5, r0
 8010292:	2a08      	cmp	r2, #8
 8010294:	f105 0501 	add.w	r5, r5, #1
 8010298:	4405      	add	r5, r0
 801029a:	dc1c      	bgt.n	80102d6 <_strtod_l+0x276>
 801029c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801029e:	220a      	movs	r2, #10
 80102a0:	fb02 3301 	mla	r3, r2, r1, r3
 80102a4:	9309      	str	r3, [sp, #36]	; 0x24
 80102a6:	2200      	movs	r2, #0
 80102a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80102aa:	1c59      	adds	r1, r3, #1
 80102ac:	911d      	str	r1, [sp, #116]	; 0x74
 80102ae:	785b      	ldrb	r3, [r3, #1]
 80102b0:	4610      	mov	r0, r2
 80102b2:	e7c9      	b.n	8010248 <_strtod_l+0x1e8>
 80102b4:	4638      	mov	r0, r7
 80102b6:	e7d2      	b.n	801025e <_strtod_l+0x1fe>
 80102b8:	2a08      	cmp	r2, #8
 80102ba:	dc04      	bgt.n	80102c6 <_strtod_l+0x266>
 80102bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80102be:	434e      	muls	r6, r1
 80102c0:	9609      	str	r6, [sp, #36]	; 0x24
 80102c2:	3201      	adds	r2, #1
 80102c4:	e7e2      	b.n	801028c <_strtod_l+0x22c>
 80102c6:	f102 0c01 	add.w	ip, r2, #1
 80102ca:	f1bc 0f10 	cmp.w	ip, #16
 80102ce:	bfd8      	it	le
 80102d0:	fb01 f909 	mulle.w	r9, r1, r9
 80102d4:	e7f5      	b.n	80102c2 <_strtod_l+0x262>
 80102d6:	2d10      	cmp	r5, #16
 80102d8:	bfdc      	itt	le
 80102da:	220a      	movle	r2, #10
 80102dc:	fb02 3909 	mlale	r9, r2, r9, r3
 80102e0:	e7e1      	b.n	80102a6 <_strtod_l+0x246>
 80102e2:	2300      	movs	r3, #0
 80102e4:	9307      	str	r3, [sp, #28]
 80102e6:	2201      	movs	r2, #1
 80102e8:	e77c      	b.n	80101e4 <_strtod_l+0x184>
 80102ea:	f04f 0c00 	mov.w	ip, #0
 80102ee:	f108 0302 	add.w	r3, r8, #2
 80102f2:	931d      	str	r3, [sp, #116]	; 0x74
 80102f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80102f8:	e785      	b.n	8010206 <_strtod_l+0x1a6>
 80102fa:	f04f 0c01 	mov.w	ip, #1
 80102fe:	e7f6      	b.n	80102ee <_strtod_l+0x28e>
 8010300:	08015290 	.word	0x08015290
 8010304:	0801503c 	.word	0x0801503c
 8010308:	7ff00000 	.word	0x7ff00000
 801030c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801030e:	1c59      	adds	r1, r3, #1
 8010310:	911d      	str	r1, [sp, #116]	; 0x74
 8010312:	785b      	ldrb	r3, [r3, #1]
 8010314:	2b30      	cmp	r3, #48	; 0x30
 8010316:	d0f9      	beq.n	801030c <_strtod_l+0x2ac>
 8010318:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801031c:	2908      	cmp	r1, #8
 801031e:	f63f af79 	bhi.w	8010214 <_strtod_l+0x1b4>
 8010322:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8010326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010328:	9308      	str	r3, [sp, #32]
 801032a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801032c:	1c59      	adds	r1, r3, #1
 801032e:	911d      	str	r1, [sp, #116]	; 0x74
 8010330:	785b      	ldrb	r3, [r3, #1]
 8010332:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8010336:	2e09      	cmp	r6, #9
 8010338:	d937      	bls.n	80103aa <_strtod_l+0x34a>
 801033a:	9e08      	ldr	r6, [sp, #32]
 801033c:	1b89      	subs	r1, r1, r6
 801033e:	2908      	cmp	r1, #8
 8010340:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010344:	dc02      	bgt.n	801034c <_strtod_l+0x2ec>
 8010346:	4576      	cmp	r6, lr
 8010348:	bfa8      	it	ge
 801034a:	4676      	movge	r6, lr
 801034c:	f1bc 0f00 	cmp.w	ip, #0
 8010350:	d000      	beq.n	8010354 <_strtod_l+0x2f4>
 8010352:	4276      	negs	r6, r6
 8010354:	2d00      	cmp	r5, #0
 8010356:	d14f      	bne.n	80103f8 <_strtod_l+0x398>
 8010358:	9904      	ldr	r1, [sp, #16]
 801035a:	4301      	orrs	r1, r0
 801035c:	f47f aec2 	bne.w	80100e4 <_strtod_l+0x84>
 8010360:	2a00      	cmp	r2, #0
 8010362:	f47f aedb 	bne.w	801011c <_strtod_l+0xbc>
 8010366:	2b69      	cmp	r3, #105	; 0x69
 8010368:	d027      	beq.n	80103ba <_strtod_l+0x35a>
 801036a:	dc24      	bgt.n	80103b6 <_strtod_l+0x356>
 801036c:	2b49      	cmp	r3, #73	; 0x49
 801036e:	d024      	beq.n	80103ba <_strtod_l+0x35a>
 8010370:	2b4e      	cmp	r3, #78	; 0x4e
 8010372:	f47f aed3 	bne.w	801011c <_strtod_l+0xbc>
 8010376:	499e      	ldr	r1, [pc, #632]	; (80105f0 <_strtod_l+0x590>)
 8010378:	a81d      	add	r0, sp, #116	; 0x74
 801037a:	f001 fe61 	bl	8012040 <__match>
 801037e:	2800      	cmp	r0, #0
 8010380:	f43f aecc 	beq.w	801011c <_strtod_l+0xbc>
 8010384:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	2b28      	cmp	r3, #40	; 0x28
 801038a:	d12d      	bne.n	80103e8 <_strtod_l+0x388>
 801038c:	4999      	ldr	r1, [pc, #612]	; (80105f4 <_strtod_l+0x594>)
 801038e:	aa20      	add	r2, sp, #128	; 0x80
 8010390:	a81d      	add	r0, sp, #116	; 0x74
 8010392:	f001 fe69 	bl	8012068 <__hexnan>
 8010396:	2805      	cmp	r0, #5
 8010398:	d126      	bne.n	80103e8 <_strtod_l+0x388>
 801039a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801039c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80103a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80103a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80103a8:	e69c      	b.n	80100e4 <_strtod_l+0x84>
 80103aa:	210a      	movs	r1, #10
 80103ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 80103b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80103b4:	e7b9      	b.n	801032a <_strtod_l+0x2ca>
 80103b6:	2b6e      	cmp	r3, #110	; 0x6e
 80103b8:	e7db      	b.n	8010372 <_strtod_l+0x312>
 80103ba:	498f      	ldr	r1, [pc, #572]	; (80105f8 <_strtod_l+0x598>)
 80103bc:	a81d      	add	r0, sp, #116	; 0x74
 80103be:	f001 fe3f 	bl	8012040 <__match>
 80103c2:	2800      	cmp	r0, #0
 80103c4:	f43f aeaa 	beq.w	801011c <_strtod_l+0xbc>
 80103c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80103ca:	498c      	ldr	r1, [pc, #560]	; (80105fc <_strtod_l+0x59c>)
 80103cc:	3b01      	subs	r3, #1
 80103ce:	a81d      	add	r0, sp, #116	; 0x74
 80103d0:	931d      	str	r3, [sp, #116]	; 0x74
 80103d2:	f001 fe35 	bl	8012040 <__match>
 80103d6:	b910      	cbnz	r0, 80103de <_strtod_l+0x37e>
 80103d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80103da:	3301      	adds	r3, #1
 80103dc:	931d      	str	r3, [sp, #116]	; 0x74
 80103de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801060c <_strtod_l+0x5ac>
 80103e2:	f04f 0a00 	mov.w	sl, #0
 80103e6:	e67d      	b.n	80100e4 <_strtod_l+0x84>
 80103e8:	4885      	ldr	r0, [pc, #532]	; (8010600 <_strtod_l+0x5a0>)
 80103ea:	f002 fdf9 	bl	8012fe0 <nan>
 80103ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 80103f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80103f6:	e675      	b.n	80100e4 <_strtod_l+0x84>
 80103f8:	9b07      	ldr	r3, [sp, #28]
 80103fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80103fc:	1af3      	subs	r3, r6, r3
 80103fe:	2f00      	cmp	r7, #0
 8010400:	bf08      	it	eq
 8010402:	462f      	moveq	r7, r5
 8010404:	2d10      	cmp	r5, #16
 8010406:	9308      	str	r3, [sp, #32]
 8010408:	46a8      	mov	r8, r5
 801040a:	bfa8      	it	ge
 801040c:	f04f 0810 	movge.w	r8, #16
 8010410:	f7f0 f878 	bl	8000504 <__aeabi_ui2d>
 8010414:	2d09      	cmp	r5, #9
 8010416:	4682      	mov	sl, r0
 8010418:	468b      	mov	fp, r1
 801041a:	dd13      	ble.n	8010444 <_strtod_l+0x3e4>
 801041c:	4b79      	ldr	r3, [pc, #484]	; (8010604 <_strtod_l+0x5a4>)
 801041e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010422:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010426:	f7f0 f8e7 	bl	80005f8 <__aeabi_dmul>
 801042a:	4682      	mov	sl, r0
 801042c:	4648      	mov	r0, r9
 801042e:	468b      	mov	fp, r1
 8010430:	f7f0 f868 	bl	8000504 <__aeabi_ui2d>
 8010434:	4602      	mov	r2, r0
 8010436:	460b      	mov	r3, r1
 8010438:	4650      	mov	r0, sl
 801043a:	4659      	mov	r1, fp
 801043c:	f7ef ff26 	bl	800028c <__adddf3>
 8010440:	4682      	mov	sl, r0
 8010442:	468b      	mov	fp, r1
 8010444:	2d0f      	cmp	r5, #15
 8010446:	dc38      	bgt.n	80104ba <_strtod_l+0x45a>
 8010448:	9b08      	ldr	r3, [sp, #32]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f43f ae4a 	beq.w	80100e4 <_strtod_l+0x84>
 8010450:	dd24      	ble.n	801049c <_strtod_l+0x43c>
 8010452:	2b16      	cmp	r3, #22
 8010454:	dc0b      	bgt.n	801046e <_strtod_l+0x40e>
 8010456:	4d6b      	ldr	r5, [pc, #428]	; (8010604 <_strtod_l+0x5a4>)
 8010458:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801045c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010460:	4652      	mov	r2, sl
 8010462:	465b      	mov	r3, fp
 8010464:	f7f0 f8c8 	bl	80005f8 <__aeabi_dmul>
 8010468:	4682      	mov	sl, r0
 801046a:	468b      	mov	fp, r1
 801046c:	e63a      	b.n	80100e4 <_strtod_l+0x84>
 801046e:	9a08      	ldr	r2, [sp, #32]
 8010470:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010474:	4293      	cmp	r3, r2
 8010476:	db20      	blt.n	80104ba <_strtod_l+0x45a>
 8010478:	4c62      	ldr	r4, [pc, #392]	; (8010604 <_strtod_l+0x5a4>)
 801047a:	f1c5 050f 	rsb	r5, r5, #15
 801047e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010482:	4652      	mov	r2, sl
 8010484:	465b      	mov	r3, fp
 8010486:	e9d1 0100 	ldrd	r0, r1, [r1]
 801048a:	f7f0 f8b5 	bl	80005f8 <__aeabi_dmul>
 801048e:	9b08      	ldr	r3, [sp, #32]
 8010490:	1b5d      	subs	r5, r3, r5
 8010492:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010496:	e9d4 2300 	ldrd	r2, r3, [r4]
 801049a:	e7e3      	b.n	8010464 <_strtod_l+0x404>
 801049c:	9b08      	ldr	r3, [sp, #32]
 801049e:	3316      	adds	r3, #22
 80104a0:	db0b      	blt.n	80104ba <_strtod_l+0x45a>
 80104a2:	9b07      	ldr	r3, [sp, #28]
 80104a4:	4a57      	ldr	r2, [pc, #348]	; (8010604 <_strtod_l+0x5a4>)
 80104a6:	1b9e      	subs	r6, r3, r6
 80104a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80104ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80104b0:	4650      	mov	r0, sl
 80104b2:	4659      	mov	r1, fp
 80104b4:	f7f0 f9ca 	bl	800084c <__aeabi_ddiv>
 80104b8:	e7d6      	b.n	8010468 <_strtod_l+0x408>
 80104ba:	9b08      	ldr	r3, [sp, #32]
 80104bc:	eba5 0808 	sub.w	r8, r5, r8
 80104c0:	4498      	add	r8, r3
 80104c2:	f1b8 0f00 	cmp.w	r8, #0
 80104c6:	dd71      	ble.n	80105ac <_strtod_l+0x54c>
 80104c8:	f018 030f 	ands.w	r3, r8, #15
 80104cc:	d00a      	beq.n	80104e4 <_strtod_l+0x484>
 80104ce:	494d      	ldr	r1, [pc, #308]	; (8010604 <_strtod_l+0x5a4>)
 80104d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80104d4:	4652      	mov	r2, sl
 80104d6:	465b      	mov	r3, fp
 80104d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104dc:	f7f0 f88c 	bl	80005f8 <__aeabi_dmul>
 80104e0:	4682      	mov	sl, r0
 80104e2:	468b      	mov	fp, r1
 80104e4:	f038 080f 	bics.w	r8, r8, #15
 80104e8:	d04d      	beq.n	8010586 <_strtod_l+0x526>
 80104ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80104ee:	dd22      	ble.n	8010536 <_strtod_l+0x4d6>
 80104f0:	2500      	movs	r5, #0
 80104f2:	462e      	mov	r6, r5
 80104f4:	9509      	str	r5, [sp, #36]	; 0x24
 80104f6:	9507      	str	r5, [sp, #28]
 80104f8:	2322      	movs	r3, #34	; 0x22
 80104fa:	f8df b110 	ldr.w	fp, [pc, #272]	; 801060c <_strtod_l+0x5ac>
 80104fe:	6023      	str	r3, [r4, #0]
 8010500:	f04f 0a00 	mov.w	sl, #0
 8010504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010506:	2b00      	cmp	r3, #0
 8010508:	f43f adec 	beq.w	80100e4 <_strtod_l+0x84>
 801050c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801050e:	4620      	mov	r0, r4
 8010510:	f001 fec4 	bl	801229c <_Bfree>
 8010514:	9907      	ldr	r1, [sp, #28]
 8010516:	4620      	mov	r0, r4
 8010518:	f001 fec0 	bl	801229c <_Bfree>
 801051c:	4631      	mov	r1, r6
 801051e:	4620      	mov	r0, r4
 8010520:	f001 febc 	bl	801229c <_Bfree>
 8010524:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010526:	4620      	mov	r0, r4
 8010528:	f001 feb8 	bl	801229c <_Bfree>
 801052c:	4629      	mov	r1, r5
 801052e:	4620      	mov	r0, r4
 8010530:	f001 feb4 	bl	801229c <_Bfree>
 8010534:	e5d6      	b.n	80100e4 <_strtod_l+0x84>
 8010536:	2300      	movs	r3, #0
 8010538:	ea4f 1828 	mov.w	r8, r8, asr #4
 801053c:	4650      	mov	r0, sl
 801053e:	4659      	mov	r1, fp
 8010540:	4699      	mov	r9, r3
 8010542:	f1b8 0f01 	cmp.w	r8, #1
 8010546:	dc21      	bgt.n	801058c <_strtod_l+0x52c>
 8010548:	b10b      	cbz	r3, 801054e <_strtod_l+0x4ee>
 801054a:	4682      	mov	sl, r0
 801054c:	468b      	mov	fp, r1
 801054e:	4b2e      	ldr	r3, [pc, #184]	; (8010608 <_strtod_l+0x5a8>)
 8010550:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010554:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010558:	4652      	mov	r2, sl
 801055a:	465b      	mov	r3, fp
 801055c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010560:	f7f0 f84a 	bl	80005f8 <__aeabi_dmul>
 8010564:	4b29      	ldr	r3, [pc, #164]	; (801060c <_strtod_l+0x5ac>)
 8010566:	460a      	mov	r2, r1
 8010568:	400b      	ands	r3, r1
 801056a:	4929      	ldr	r1, [pc, #164]	; (8010610 <_strtod_l+0x5b0>)
 801056c:	428b      	cmp	r3, r1
 801056e:	4682      	mov	sl, r0
 8010570:	d8be      	bhi.n	80104f0 <_strtod_l+0x490>
 8010572:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010576:	428b      	cmp	r3, r1
 8010578:	bf86      	itte	hi
 801057a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010614 <_strtod_l+0x5b4>
 801057e:	f04f 3aff 	movhi.w	sl, #4294967295
 8010582:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010586:	2300      	movs	r3, #0
 8010588:	9304      	str	r3, [sp, #16]
 801058a:	e081      	b.n	8010690 <_strtod_l+0x630>
 801058c:	f018 0f01 	tst.w	r8, #1
 8010590:	d007      	beq.n	80105a2 <_strtod_l+0x542>
 8010592:	4b1d      	ldr	r3, [pc, #116]	; (8010608 <_strtod_l+0x5a8>)
 8010594:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059c:	f7f0 f82c 	bl	80005f8 <__aeabi_dmul>
 80105a0:	2301      	movs	r3, #1
 80105a2:	f109 0901 	add.w	r9, r9, #1
 80105a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80105aa:	e7ca      	b.n	8010542 <_strtod_l+0x4e2>
 80105ac:	d0eb      	beq.n	8010586 <_strtod_l+0x526>
 80105ae:	f1c8 0800 	rsb	r8, r8, #0
 80105b2:	f018 020f 	ands.w	r2, r8, #15
 80105b6:	d00a      	beq.n	80105ce <_strtod_l+0x56e>
 80105b8:	4b12      	ldr	r3, [pc, #72]	; (8010604 <_strtod_l+0x5a4>)
 80105ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80105be:	4650      	mov	r0, sl
 80105c0:	4659      	mov	r1, fp
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	f7f0 f941 	bl	800084c <__aeabi_ddiv>
 80105ca:	4682      	mov	sl, r0
 80105cc:	468b      	mov	fp, r1
 80105ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 80105d2:	d0d8      	beq.n	8010586 <_strtod_l+0x526>
 80105d4:	f1b8 0f1f 	cmp.w	r8, #31
 80105d8:	dd1e      	ble.n	8010618 <_strtod_l+0x5b8>
 80105da:	2500      	movs	r5, #0
 80105dc:	462e      	mov	r6, r5
 80105de:	9509      	str	r5, [sp, #36]	; 0x24
 80105e0:	9507      	str	r5, [sp, #28]
 80105e2:	2322      	movs	r3, #34	; 0x22
 80105e4:	f04f 0a00 	mov.w	sl, #0
 80105e8:	f04f 0b00 	mov.w	fp, #0
 80105ec:	6023      	str	r3, [r4, #0]
 80105ee:	e789      	b.n	8010504 <_strtod_l+0x4a4>
 80105f0:	0801500d 	.word	0x0801500d
 80105f4:	08015050 	.word	0x08015050
 80105f8:	08015005 	.word	0x08015005
 80105fc:	08015194 	.word	0x08015194
 8010600:	08015450 	.word	0x08015450
 8010604:	08015330 	.word	0x08015330
 8010608:	08015308 	.word	0x08015308
 801060c:	7ff00000 	.word	0x7ff00000
 8010610:	7ca00000 	.word	0x7ca00000
 8010614:	7fefffff 	.word	0x7fefffff
 8010618:	f018 0310 	ands.w	r3, r8, #16
 801061c:	bf18      	it	ne
 801061e:	236a      	movne	r3, #106	; 0x6a
 8010620:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80109d8 <_strtod_l+0x978>
 8010624:	9304      	str	r3, [sp, #16]
 8010626:	4650      	mov	r0, sl
 8010628:	4659      	mov	r1, fp
 801062a:	2300      	movs	r3, #0
 801062c:	f018 0f01 	tst.w	r8, #1
 8010630:	d004      	beq.n	801063c <_strtod_l+0x5dc>
 8010632:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010636:	f7ef ffdf 	bl	80005f8 <__aeabi_dmul>
 801063a:	2301      	movs	r3, #1
 801063c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010640:	f109 0908 	add.w	r9, r9, #8
 8010644:	d1f2      	bne.n	801062c <_strtod_l+0x5cc>
 8010646:	b10b      	cbz	r3, 801064c <_strtod_l+0x5ec>
 8010648:	4682      	mov	sl, r0
 801064a:	468b      	mov	fp, r1
 801064c:	9b04      	ldr	r3, [sp, #16]
 801064e:	b1bb      	cbz	r3, 8010680 <_strtod_l+0x620>
 8010650:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010654:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010658:	2b00      	cmp	r3, #0
 801065a:	4659      	mov	r1, fp
 801065c:	dd10      	ble.n	8010680 <_strtod_l+0x620>
 801065e:	2b1f      	cmp	r3, #31
 8010660:	f340 8128 	ble.w	80108b4 <_strtod_l+0x854>
 8010664:	2b34      	cmp	r3, #52	; 0x34
 8010666:	bfde      	ittt	le
 8010668:	3b20      	suble	r3, #32
 801066a:	f04f 32ff 	movle.w	r2, #4294967295
 801066e:	fa02 f303 	lslle.w	r3, r2, r3
 8010672:	f04f 0a00 	mov.w	sl, #0
 8010676:	bfcc      	ite	gt
 8010678:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801067c:	ea03 0b01 	andle.w	fp, r3, r1
 8010680:	2200      	movs	r2, #0
 8010682:	2300      	movs	r3, #0
 8010684:	4650      	mov	r0, sl
 8010686:	4659      	mov	r1, fp
 8010688:	f7f0 fa1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801068c:	2800      	cmp	r0, #0
 801068e:	d1a4      	bne.n	80105da <_strtod_l+0x57a>
 8010690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010696:	462b      	mov	r3, r5
 8010698:	463a      	mov	r2, r7
 801069a:	4620      	mov	r0, r4
 801069c:	f001 fe6a 	bl	8012374 <__s2b>
 80106a0:	9009      	str	r0, [sp, #36]	; 0x24
 80106a2:	2800      	cmp	r0, #0
 80106a4:	f43f af24 	beq.w	80104f0 <_strtod_l+0x490>
 80106a8:	9b07      	ldr	r3, [sp, #28]
 80106aa:	1b9e      	subs	r6, r3, r6
 80106ac:	9b08      	ldr	r3, [sp, #32]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	bfb4      	ite	lt
 80106b2:	4633      	movlt	r3, r6
 80106b4:	2300      	movge	r3, #0
 80106b6:	9310      	str	r3, [sp, #64]	; 0x40
 80106b8:	9b08      	ldr	r3, [sp, #32]
 80106ba:	2500      	movs	r5, #0
 80106bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80106c0:	9318      	str	r3, [sp, #96]	; 0x60
 80106c2:	462e      	mov	r6, r5
 80106c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c6:	4620      	mov	r0, r4
 80106c8:	6859      	ldr	r1, [r3, #4]
 80106ca:	f001 fda7 	bl	801221c <_Balloc>
 80106ce:	9007      	str	r0, [sp, #28]
 80106d0:	2800      	cmp	r0, #0
 80106d2:	f43f af11 	beq.w	80104f8 <_strtod_l+0x498>
 80106d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106d8:	691a      	ldr	r2, [r3, #16]
 80106da:	3202      	adds	r2, #2
 80106dc:	f103 010c 	add.w	r1, r3, #12
 80106e0:	0092      	lsls	r2, r2, #2
 80106e2:	300c      	adds	r0, #12
 80106e4:	f001 fd8c 	bl	8012200 <memcpy>
 80106e8:	ec4b ab10 	vmov	d0, sl, fp
 80106ec:	aa20      	add	r2, sp, #128	; 0x80
 80106ee:	a91f      	add	r1, sp, #124	; 0x7c
 80106f0:	4620      	mov	r0, r4
 80106f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80106f6:	f002 f979 	bl	80129ec <__d2b>
 80106fa:	901e      	str	r0, [sp, #120]	; 0x78
 80106fc:	2800      	cmp	r0, #0
 80106fe:	f43f aefb 	beq.w	80104f8 <_strtod_l+0x498>
 8010702:	2101      	movs	r1, #1
 8010704:	4620      	mov	r0, r4
 8010706:	f001 fecf 	bl	80124a8 <__i2b>
 801070a:	4606      	mov	r6, r0
 801070c:	2800      	cmp	r0, #0
 801070e:	f43f aef3 	beq.w	80104f8 <_strtod_l+0x498>
 8010712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010714:	9904      	ldr	r1, [sp, #16]
 8010716:	2b00      	cmp	r3, #0
 8010718:	bfab      	itete	ge
 801071a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801071c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801071e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010720:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010724:	bfac      	ite	ge
 8010726:	eb03 0902 	addge.w	r9, r3, r2
 801072a:	1ad7      	sublt	r7, r2, r3
 801072c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801072e:	eba3 0801 	sub.w	r8, r3, r1
 8010732:	4490      	add	r8, r2
 8010734:	4ba3      	ldr	r3, [pc, #652]	; (80109c4 <_strtod_l+0x964>)
 8010736:	f108 38ff 	add.w	r8, r8, #4294967295
 801073a:	4598      	cmp	r8, r3
 801073c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010740:	f280 80cc 	bge.w	80108dc <_strtod_l+0x87c>
 8010744:	eba3 0308 	sub.w	r3, r3, r8
 8010748:	2b1f      	cmp	r3, #31
 801074a:	eba2 0203 	sub.w	r2, r2, r3
 801074e:	f04f 0101 	mov.w	r1, #1
 8010752:	f300 80b6 	bgt.w	80108c2 <_strtod_l+0x862>
 8010756:	fa01 f303 	lsl.w	r3, r1, r3
 801075a:	9311      	str	r3, [sp, #68]	; 0x44
 801075c:	2300      	movs	r3, #0
 801075e:	930c      	str	r3, [sp, #48]	; 0x30
 8010760:	eb09 0802 	add.w	r8, r9, r2
 8010764:	9b04      	ldr	r3, [sp, #16]
 8010766:	45c1      	cmp	r9, r8
 8010768:	4417      	add	r7, r2
 801076a:	441f      	add	r7, r3
 801076c:	464b      	mov	r3, r9
 801076e:	bfa8      	it	ge
 8010770:	4643      	movge	r3, r8
 8010772:	42bb      	cmp	r3, r7
 8010774:	bfa8      	it	ge
 8010776:	463b      	movge	r3, r7
 8010778:	2b00      	cmp	r3, #0
 801077a:	bfc2      	ittt	gt
 801077c:	eba8 0803 	subgt.w	r8, r8, r3
 8010780:	1aff      	subgt	r7, r7, r3
 8010782:	eba9 0903 	subgt.w	r9, r9, r3
 8010786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010788:	2b00      	cmp	r3, #0
 801078a:	dd17      	ble.n	80107bc <_strtod_l+0x75c>
 801078c:	4631      	mov	r1, r6
 801078e:	461a      	mov	r2, r3
 8010790:	4620      	mov	r0, r4
 8010792:	f001 ff45 	bl	8012620 <__pow5mult>
 8010796:	4606      	mov	r6, r0
 8010798:	2800      	cmp	r0, #0
 801079a:	f43f aead 	beq.w	80104f8 <_strtod_l+0x498>
 801079e:	4601      	mov	r1, r0
 80107a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80107a2:	4620      	mov	r0, r4
 80107a4:	f001 fe96 	bl	80124d4 <__multiply>
 80107a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80107aa:	2800      	cmp	r0, #0
 80107ac:	f43f aea4 	beq.w	80104f8 <_strtod_l+0x498>
 80107b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80107b2:	4620      	mov	r0, r4
 80107b4:	f001 fd72 	bl	801229c <_Bfree>
 80107b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80107ba:	931e      	str	r3, [sp, #120]	; 0x78
 80107bc:	f1b8 0f00 	cmp.w	r8, #0
 80107c0:	f300 8091 	bgt.w	80108e6 <_strtod_l+0x886>
 80107c4:	9b08      	ldr	r3, [sp, #32]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	dd08      	ble.n	80107dc <_strtod_l+0x77c>
 80107ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80107cc:	9907      	ldr	r1, [sp, #28]
 80107ce:	4620      	mov	r0, r4
 80107d0:	f001 ff26 	bl	8012620 <__pow5mult>
 80107d4:	9007      	str	r0, [sp, #28]
 80107d6:	2800      	cmp	r0, #0
 80107d8:	f43f ae8e 	beq.w	80104f8 <_strtod_l+0x498>
 80107dc:	2f00      	cmp	r7, #0
 80107de:	dd08      	ble.n	80107f2 <_strtod_l+0x792>
 80107e0:	9907      	ldr	r1, [sp, #28]
 80107e2:	463a      	mov	r2, r7
 80107e4:	4620      	mov	r0, r4
 80107e6:	f001 ff75 	bl	80126d4 <__lshift>
 80107ea:	9007      	str	r0, [sp, #28]
 80107ec:	2800      	cmp	r0, #0
 80107ee:	f43f ae83 	beq.w	80104f8 <_strtod_l+0x498>
 80107f2:	f1b9 0f00 	cmp.w	r9, #0
 80107f6:	dd08      	ble.n	801080a <_strtod_l+0x7aa>
 80107f8:	4631      	mov	r1, r6
 80107fa:	464a      	mov	r2, r9
 80107fc:	4620      	mov	r0, r4
 80107fe:	f001 ff69 	bl	80126d4 <__lshift>
 8010802:	4606      	mov	r6, r0
 8010804:	2800      	cmp	r0, #0
 8010806:	f43f ae77 	beq.w	80104f8 <_strtod_l+0x498>
 801080a:	9a07      	ldr	r2, [sp, #28]
 801080c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801080e:	4620      	mov	r0, r4
 8010810:	f001 ffe8 	bl	80127e4 <__mdiff>
 8010814:	4605      	mov	r5, r0
 8010816:	2800      	cmp	r0, #0
 8010818:	f43f ae6e 	beq.w	80104f8 <_strtod_l+0x498>
 801081c:	68c3      	ldr	r3, [r0, #12]
 801081e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010820:	2300      	movs	r3, #0
 8010822:	60c3      	str	r3, [r0, #12]
 8010824:	4631      	mov	r1, r6
 8010826:	f001 ffc1 	bl	80127ac <__mcmp>
 801082a:	2800      	cmp	r0, #0
 801082c:	da65      	bge.n	80108fa <_strtod_l+0x89a>
 801082e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010830:	ea53 030a 	orrs.w	r3, r3, sl
 8010834:	f040 8087 	bne.w	8010946 <_strtod_l+0x8e6>
 8010838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801083c:	2b00      	cmp	r3, #0
 801083e:	f040 8082 	bne.w	8010946 <_strtod_l+0x8e6>
 8010842:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010846:	0d1b      	lsrs	r3, r3, #20
 8010848:	051b      	lsls	r3, r3, #20
 801084a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801084e:	d97a      	bls.n	8010946 <_strtod_l+0x8e6>
 8010850:	696b      	ldr	r3, [r5, #20]
 8010852:	b913      	cbnz	r3, 801085a <_strtod_l+0x7fa>
 8010854:	692b      	ldr	r3, [r5, #16]
 8010856:	2b01      	cmp	r3, #1
 8010858:	dd75      	ble.n	8010946 <_strtod_l+0x8e6>
 801085a:	4629      	mov	r1, r5
 801085c:	2201      	movs	r2, #1
 801085e:	4620      	mov	r0, r4
 8010860:	f001 ff38 	bl	80126d4 <__lshift>
 8010864:	4631      	mov	r1, r6
 8010866:	4605      	mov	r5, r0
 8010868:	f001 ffa0 	bl	80127ac <__mcmp>
 801086c:	2800      	cmp	r0, #0
 801086e:	dd6a      	ble.n	8010946 <_strtod_l+0x8e6>
 8010870:	9904      	ldr	r1, [sp, #16]
 8010872:	4a55      	ldr	r2, [pc, #340]	; (80109c8 <_strtod_l+0x968>)
 8010874:	465b      	mov	r3, fp
 8010876:	2900      	cmp	r1, #0
 8010878:	f000 8085 	beq.w	8010986 <_strtod_l+0x926>
 801087c:	ea02 010b 	and.w	r1, r2, fp
 8010880:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010884:	dc7f      	bgt.n	8010986 <_strtod_l+0x926>
 8010886:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801088a:	f77f aeaa 	ble.w	80105e2 <_strtod_l+0x582>
 801088e:	4a4f      	ldr	r2, [pc, #316]	; (80109cc <_strtod_l+0x96c>)
 8010890:	2300      	movs	r3, #0
 8010892:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010896:	4650      	mov	r0, sl
 8010898:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801089c:	4659      	mov	r1, fp
 801089e:	f7ef feab 	bl	80005f8 <__aeabi_dmul>
 80108a2:	460b      	mov	r3, r1
 80108a4:	4303      	orrs	r3, r0
 80108a6:	bf08      	it	eq
 80108a8:	2322      	moveq	r3, #34	; 0x22
 80108aa:	4682      	mov	sl, r0
 80108ac:	468b      	mov	fp, r1
 80108ae:	bf08      	it	eq
 80108b0:	6023      	streq	r3, [r4, #0]
 80108b2:	e62b      	b.n	801050c <_strtod_l+0x4ac>
 80108b4:	f04f 32ff 	mov.w	r2, #4294967295
 80108b8:	fa02 f303 	lsl.w	r3, r2, r3
 80108bc:	ea03 0a0a 	and.w	sl, r3, sl
 80108c0:	e6de      	b.n	8010680 <_strtod_l+0x620>
 80108c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80108c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80108ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80108ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80108d2:	fa01 f308 	lsl.w	r3, r1, r8
 80108d6:	930c      	str	r3, [sp, #48]	; 0x30
 80108d8:	9111      	str	r1, [sp, #68]	; 0x44
 80108da:	e741      	b.n	8010760 <_strtod_l+0x700>
 80108dc:	2300      	movs	r3, #0
 80108de:	930c      	str	r3, [sp, #48]	; 0x30
 80108e0:	2301      	movs	r3, #1
 80108e2:	9311      	str	r3, [sp, #68]	; 0x44
 80108e4:	e73c      	b.n	8010760 <_strtod_l+0x700>
 80108e6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80108e8:	4642      	mov	r2, r8
 80108ea:	4620      	mov	r0, r4
 80108ec:	f001 fef2 	bl	80126d4 <__lshift>
 80108f0:	901e      	str	r0, [sp, #120]	; 0x78
 80108f2:	2800      	cmp	r0, #0
 80108f4:	f47f af66 	bne.w	80107c4 <_strtod_l+0x764>
 80108f8:	e5fe      	b.n	80104f8 <_strtod_l+0x498>
 80108fa:	465f      	mov	r7, fp
 80108fc:	d16e      	bne.n	80109dc <_strtod_l+0x97c>
 80108fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010904:	b342      	cbz	r2, 8010958 <_strtod_l+0x8f8>
 8010906:	4a32      	ldr	r2, [pc, #200]	; (80109d0 <_strtod_l+0x970>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d128      	bne.n	801095e <_strtod_l+0x8fe>
 801090c:	9b04      	ldr	r3, [sp, #16]
 801090e:	4650      	mov	r0, sl
 8010910:	b1eb      	cbz	r3, 801094e <_strtod_l+0x8ee>
 8010912:	4a2d      	ldr	r2, [pc, #180]	; (80109c8 <_strtod_l+0x968>)
 8010914:	403a      	ands	r2, r7
 8010916:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801091a:	f04f 31ff 	mov.w	r1, #4294967295
 801091e:	d819      	bhi.n	8010954 <_strtod_l+0x8f4>
 8010920:	0d12      	lsrs	r2, r2, #20
 8010922:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010926:	fa01 f303 	lsl.w	r3, r1, r3
 801092a:	4298      	cmp	r0, r3
 801092c:	d117      	bne.n	801095e <_strtod_l+0x8fe>
 801092e:	4b29      	ldr	r3, [pc, #164]	; (80109d4 <_strtod_l+0x974>)
 8010930:	429f      	cmp	r7, r3
 8010932:	d102      	bne.n	801093a <_strtod_l+0x8da>
 8010934:	3001      	adds	r0, #1
 8010936:	f43f addf 	beq.w	80104f8 <_strtod_l+0x498>
 801093a:	4b23      	ldr	r3, [pc, #140]	; (80109c8 <_strtod_l+0x968>)
 801093c:	403b      	ands	r3, r7
 801093e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010942:	f04f 0a00 	mov.w	sl, #0
 8010946:	9b04      	ldr	r3, [sp, #16]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d1a0      	bne.n	801088e <_strtod_l+0x82e>
 801094c:	e5de      	b.n	801050c <_strtod_l+0x4ac>
 801094e:	f04f 33ff 	mov.w	r3, #4294967295
 8010952:	e7ea      	b.n	801092a <_strtod_l+0x8ca>
 8010954:	460b      	mov	r3, r1
 8010956:	e7e8      	b.n	801092a <_strtod_l+0x8ca>
 8010958:	ea53 030a 	orrs.w	r3, r3, sl
 801095c:	d088      	beq.n	8010870 <_strtod_l+0x810>
 801095e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010960:	b1db      	cbz	r3, 801099a <_strtod_l+0x93a>
 8010962:	423b      	tst	r3, r7
 8010964:	d0ef      	beq.n	8010946 <_strtod_l+0x8e6>
 8010966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010968:	9a04      	ldr	r2, [sp, #16]
 801096a:	4650      	mov	r0, sl
 801096c:	4659      	mov	r1, fp
 801096e:	b1c3      	cbz	r3, 80109a2 <_strtod_l+0x942>
 8010970:	f7ff fb59 	bl	8010026 <sulp>
 8010974:	4602      	mov	r2, r0
 8010976:	460b      	mov	r3, r1
 8010978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801097c:	f7ef fc86 	bl	800028c <__adddf3>
 8010980:	4682      	mov	sl, r0
 8010982:	468b      	mov	fp, r1
 8010984:	e7df      	b.n	8010946 <_strtod_l+0x8e6>
 8010986:	4013      	ands	r3, r2
 8010988:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801098c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010990:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010994:	f04f 3aff 	mov.w	sl, #4294967295
 8010998:	e7d5      	b.n	8010946 <_strtod_l+0x8e6>
 801099a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801099c:	ea13 0f0a 	tst.w	r3, sl
 80109a0:	e7e0      	b.n	8010964 <_strtod_l+0x904>
 80109a2:	f7ff fb40 	bl	8010026 <sulp>
 80109a6:	4602      	mov	r2, r0
 80109a8:	460b      	mov	r3, r1
 80109aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80109ae:	f7ef fc6b 	bl	8000288 <__aeabi_dsub>
 80109b2:	2200      	movs	r2, #0
 80109b4:	2300      	movs	r3, #0
 80109b6:	4682      	mov	sl, r0
 80109b8:	468b      	mov	fp, r1
 80109ba:	f7f0 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d0c1      	beq.n	8010946 <_strtod_l+0x8e6>
 80109c2:	e60e      	b.n	80105e2 <_strtod_l+0x582>
 80109c4:	fffffc02 	.word	0xfffffc02
 80109c8:	7ff00000 	.word	0x7ff00000
 80109cc:	39500000 	.word	0x39500000
 80109d0:	000fffff 	.word	0x000fffff
 80109d4:	7fefffff 	.word	0x7fefffff
 80109d8:	08015068 	.word	0x08015068
 80109dc:	4631      	mov	r1, r6
 80109de:	4628      	mov	r0, r5
 80109e0:	f002 f860 	bl	8012aa4 <__ratio>
 80109e4:	ec59 8b10 	vmov	r8, r9, d0
 80109e8:	ee10 0a10 	vmov	r0, s0
 80109ec:	2200      	movs	r2, #0
 80109ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80109f2:	4649      	mov	r1, r9
 80109f4:	f7f0 f87c 	bl	8000af0 <__aeabi_dcmple>
 80109f8:	2800      	cmp	r0, #0
 80109fa:	d07c      	beq.n	8010af6 <_strtod_l+0xa96>
 80109fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d04c      	beq.n	8010a9c <_strtod_l+0xa3c>
 8010a02:	4b95      	ldr	r3, [pc, #596]	; (8010c58 <_strtod_l+0xbf8>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010a0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010c58 <_strtod_l+0xbf8>
 8010a0e:	f04f 0800 	mov.w	r8, #0
 8010a12:	4b92      	ldr	r3, [pc, #584]	; (8010c5c <_strtod_l+0xbfc>)
 8010a14:	403b      	ands	r3, r7
 8010a16:	9311      	str	r3, [sp, #68]	; 0x44
 8010a18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010a1a:	4b91      	ldr	r3, [pc, #580]	; (8010c60 <_strtod_l+0xc00>)
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	f040 80b2 	bne.w	8010b86 <_strtod_l+0xb26>
 8010a22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010a2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010a2e:	ec4b ab10 	vmov	d0, sl, fp
 8010a32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010a36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010a3a:	f001 ff5b 	bl	80128f4 <__ulp>
 8010a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010a42:	ec53 2b10 	vmov	r2, r3, d0
 8010a46:	f7ef fdd7 	bl	80005f8 <__aeabi_dmul>
 8010a4a:	4652      	mov	r2, sl
 8010a4c:	465b      	mov	r3, fp
 8010a4e:	f7ef fc1d 	bl	800028c <__adddf3>
 8010a52:	460b      	mov	r3, r1
 8010a54:	4981      	ldr	r1, [pc, #516]	; (8010c5c <_strtod_l+0xbfc>)
 8010a56:	4a83      	ldr	r2, [pc, #524]	; (8010c64 <_strtod_l+0xc04>)
 8010a58:	4019      	ands	r1, r3
 8010a5a:	4291      	cmp	r1, r2
 8010a5c:	4682      	mov	sl, r0
 8010a5e:	d95e      	bls.n	8010b1e <_strtod_l+0xabe>
 8010a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d103      	bne.n	8010a72 <_strtod_l+0xa12>
 8010a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	f43f ad43 	beq.w	80104f8 <_strtod_l+0x498>
 8010a72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8010c70 <_strtod_l+0xc10>
 8010a76:	f04f 3aff 	mov.w	sl, #4294967295
 8010a7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	f001 fc0d 	bl	801229c <_Bfree>
 8010a82:	9907      	ldr	r1, [sp, #28]
 8010a84:	4620      	mov	r0, r4
 8010a86:	f001 fc09 	bl	801229c <_Bfree>
 8010a8a:	4631      	mov	r1, r6
 8010a8c:	4620      	mov	r0, r4
 8010a8e:	f001 fc05 	bl	801229c <_Bfree>
 8010a92:	4629      	mov	r1, r5
 8010a94:	4620      	mov	r0, r4
 8010a96:	f001 fc01 	bl	801229c <_Bfree>
 8010a9a:	e613      	b.n	80106c4 <_strtod_l+0x664>
 8010a9c:	f1ba 0f00 	cmp.w	sl, #0
 8010aa0:	d11b      	bne.n	8010ada <_strtod_l+0xa7a>
 8010aa2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010aa6:	b9f3      	cbnz	r3, 8010ae6 <_strtod_l+0xa86>
 8010aa8:	4b6b      	ldr	r3, [pc, #428]	; (8010c58 <_strtod_l+0xbf8>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	4640      	mov	r0, r8
 8010aae:	4649      	mov	r1, r9
 8010ab0:	f7f0 f814 	bl	8000adc <__aeabi_dcmplt>
 8010ab4:	b9d0      	cbnz	r0, 8010aec <_strtod_l+0xa8c>
 8010ab6:	4640      	mov	r0, r8
 8010ab8:	4649      	mov	r1, r9
 8010aba:	4b6b      	ldr	r3, [pc, #428]	; (8010c68 <_strtod_l+0xc08>)
 8010abc:	2200      	movs	r2, #0
 8010abe:	f7ef fd9b 	bl	80005f8 <__aeabi_dmul>
 8010ac2:	4680      	mov	r8, r0
 8010ac4:	4689      	mov	r9, r1
 8010ac6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010aca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010ace:	931b      	str	r3, [sp, #108]	; 0x6c
 8010ad0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010ad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010ad8:	e79b      	b.n	8010a12 <_strtod_l+0x9b2>
 8010ada:	f1ba 0f01 	cmp.w	sl, #1
 8010ade:	d102      	bne.n	8010ae6 <_strtod_l+0xa86>
 8010ae0:	2f00      	cmp	r7, #0
 8010ae2:	f43f ad7e 	beq.w	80105e2 <_strtod_l+0x582>
 8010ae6:	4b61      	ldr	r3, [pc, #388]	; (8010c6c <_strtod_l+0xc0c>)
 8010ae8:	2200      	movs	r2, #0
 8010aea:	e78c      	b.n	8010a06 <_strtod_l+0x9a6>
 8010aec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010c68 <_strtod_l+0xc08>
 8010af0:	f04f 0800 	mov.w	r8, #0
 8010af4:	e7e7      	b.n	8010ac6 <_strtod_l+0xa66>
 8010af6:	4b5c      	ldr	r3, [pc, #368]	; (8010c68 <_strtod_l+0xc08>)
 8010af8:	4640      	mov	r0, r8
 8010afa:	4649      	mov	r1, r9
 8010afc:	2200      	movs	r2, #0
 8010afe:	f7ef fd7b 	bl	80005f8 <__aeabi_dmul>
 8010b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b04:	4680      	mov	r8, r0
 8010b06:	4689      	mov	r9, r1
 8010b08:	b933      	cbnz	r3, 8010b18 <_strtod_l+0xab8>
 8010b0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b0e:	9012      	str	r0, [sp, #72]	; 0x48
 8010b10:	9313      	str	r3, [sp, #76]	; 0x4c
 8010b12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010b16:	e7dd      	b.n	8010ad4 <_strtod_l+0xa74>
 8010b18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010b1c:	e7f9      	b.n	8010b12 <_strtod_l+0xab2>
 8010b1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010b22:	9b04      	ldr	r3, [sp, #16]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1a8      	bne.n	8010a7a <_strtod_l+0xa1a>
 8010b28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010b2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010b2e:	0d1b      	lsrs	r3, r3, #20
 8010b30:	051b      	lsls	r3, r3, #20
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d1a1      	bne.n	8010a7a <_strtod_l+0xa1a>
 8010b36:	4640      	mov	r0, r8
 8010b38:	4649      	mov	r1, r9
 8010b3a:	f7f0 f90d 	bl	8000d58 <__aeabi_d2lz>
 8010b3e:	f7ef fd2d 	bl	800059c <__aeabi_l2d>
 8010b42:	4602      	mov	r2, r0
 8010b44:	460b      	mov	r3, r1
 8010b46:	4640      	mov	r0, r8
 8010b48:	4649      	mov	r1, r9
 8010b4a:	f7ef fb9d 	bl	8000288 <__aeabi_dsub>
 8010b4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010b50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b54:	ea43 030a 	orr.w	r3, r3, sl
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	4680      	mov	r8, r0
 8010b5c:	4689      	mov	r9, r1
 8010b5e:	d053      	beq.n	8010c08 <_strtod_l+0xba8>
 8010b60:	a335      	add	r3, pc, #212	; (adr r3, 8010c38 <_strtod_l+0xbd8>)
 8010b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b66:	f7ef ffb9 	bl	8000adc <__aeabi_dcmplt>
 8010b6a:	2800      	cmp	r0, #0
 8010b6c:	f47f acce 	bne.w	801050c <_strtod_l+0x4ac>
 8010b70:	a333      	add	r3, pc, #204	; (adr r3, 8010c40 <_strtod_l+0xbe0>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	4640      	mov	r0, r8
 8010b78:	4649      	mov	r1, r9
 8010b7a:	f7ef ffcd 	bl	8000b18 <__aeabi_dcmpgt>
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	f43f af7b 	beq.w	8010a7a <_strtod_l+0xa1a>
 8010b84:	e4c2      	b.n	801050c <_strtod_l+0x4ac>
 8010b86:	9b04      	ldr	r3, [sp, #16]
 8010b88:	b333      	cbz	r3, 8010bd8 <_strtod_l+0xb78>
 8010b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010b90:	d822      	bhi.n	8010bd8 <_strtod_l+0xb78>
 8010b92:	a32d      	add	r3, pc, #180	; (adr r3, 8010c48 <_strtod_l+0xbe8>)
 8010b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b98:	4640      	mov	r0, r8
 8010b9a:	4649      	mov	r1, r9
 8010b9c:	f7ef ffa8 	bl	8000af0 <__aeabi_dcmple>
 8010ba0:	b1a0      	cbz	r0, 8010bcc <_strtod_l+0xb6c>
 8010ba2:	4649      	mov	r1, r9
 8010ba4:	4640      	mov	r0, r8
 8010ba6:	f7ef ffff 	bl	8000ba8 <__aeabi_d2uiz>
 8010baa:	2801      	cmp	r0, #1
 8010bac:	bf38      	it	cc
 8010bae:	2001      	movcc	r0, #1
 8010bb0:	f7ef fca8 	bl	8000504 <__aeabi_ui2d>
 8010bb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010bb6:	4680      	mov	r8, r0
 8010bb8:	4689      	mov	r9, r1
 8010bba:	bb13      	cbnz	r3, 8010c02 <_strtod_l+0xba2>
 8010bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bc0:	9014      	str	r0, [sp, #80]	; 0x50
 8010bc2:	9315      	str	r3, [sp, #84]	; 0x54
 8010bc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010bc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010bd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010bd4:	1a9b      	subs	r3, r3, r2
 8010bd6:	930d      	str	r3, [sp, #52]	; 0x34
 8010bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010bdc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010be0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010be4:	f001 fe86 	bl	80128f4 <__ulp>
 8010be8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010bec:	ec53 2b10 	vmov	r2, r3, d0
 8010bf0:	f7ef fd02 	bl	80005f8 <__aeabi_dmul>
 8010bf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010bf8:	f7ef fb48 	bl	800028c <__adddf3>
 8010bfc:	4682      	mov	sl, r0
 8010bfe:	468b      	mov	fp, r1
 8010c00:	e78f      	b.n	8010b22 <_strtod_l+0xac2>
 8010c02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8010c06:	e7dd      	b.n	8010bc4 <_strtod_l+0xb64>
 8010c08:	a311      	add	r3, pc, #68	; (adr r3, 8010c50 <_strtod_l+0xbf0>)
 8010c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0e:	f7ef ff65 	bl	8000adc <__aeabi_dcmplt>
 8010c12:	e7b4      	b.n	8010b7e <_strtod_l+0xb1e>
 8010c14:	2300      	movs	r3, #0
 8010c16:	930e      	str	r3, [sp, #56]	; 0x38
 8010c18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010c1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c1c:	6013      	str	r3, [r2, #0]
 8010c1e:	f7ff ba65 	b.w	80100ec <_strtod_l+0x8c>
 8010c22:	2b65      	cmp	r3, #101	; 0x65
 8010c24:	f43f ab5d 	beq.w	80102e2 <_strtod_l+0x282>
 8010c28:	2b45      	cmp	r3, #69	; 0x45
 8010c2a:	f43f ab5a 	beq.w	80102e2 <_strtod_l+0x282>
 8010c2e:	2201      	movs	r2, #1
 8010c30:	f7ff bb92 	b.w	8010358 <_strtod_l+0x2f8>
 8010c34:	f3af 8000 	nop.w
 8010c38:	94a03595 	.word	0x94a03595
 8010c3c:	3fdfffff 	.word	0x3fdfffff
 8010c40:	35afe535 	.word	0x35afe535
 8010c44:	3fe00000 	.word	0x3fe00000
 8010c48:	ffc00000 	.word	0xffc00000
 8010c4c:	41dfffff 	.word	0x41dfffff
 8010c50:	94a03595 	.word	0x94a03595
 8010c54:	3fcfffff 	.word	0x3fcfffff
 8010c58:	3ff00000 	.word	0x3ff00000
 8010c5c:	7ff00000 	.word	0x7ff00000
 8010c60:	7fe00000 	.word	0x7fe00000
 8010c64:	7c9fffff 	.word	0x7c9fffff
 8010c68:	3fe00000 	.word	0x3fe00000
 8010c6c:	bff00000 	.word	0xbff00000
 8010c70:	7fefffff 	.word	0x7fefffff

08010c74 <_strtod_r>:
 8010c74:	4b01      	ldr	r3, [pc, #4]	; (8010c7c <_strtod_r+0x8>)
 8010c76:	f7ff b9f3 	b.w	8010060 <_strtod_l>
 8010c7a:	bf00      	nop
 8010c7c:	200000c0 	.word	0x200000c0

08010c80 <_strtol_l.isra.0>:
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c86:	d001      	beq.n	8010c8c <_strtol_l.isra.0+0xc>
 8010c88:	2b24      	cmp	r3, #36	; 0x24
 8010c8a:	d906      	bls.n	8010c9a <_strtol_l.isra.0+0x1a>
 8010c8c:	f7fe faa4 	bl	800f1d8 <__errno>
 8010c90:	2316      	movs	r3, #22
 8010c92:	6003      	str	r3, [r0, #0]
 8010c94:	2000      	movs	r0, #0
 8010c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c9a:	4f3a      	ldr	r7, [pc, #232]	; (8010d84 <_strtol_l.isra.0+0x104>)
 8010c9c:	468e      	mov	lr, r1
 8010c9e:	4676      	mov	r6, lr
 8010ca0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010ca4:	5de5      	ldrb	r5, [r4, r7]
 8010ca6:	f015 0508 	ands.w	r5, r5, #8
 8010caa:	d1f8      	bne.n	8010c9e <_strtol_l.isra.0+0x1e>
 8010cac:	2c2d      	cmp	r4, #45	; 0x2d
 8010cae:	d134      	bne.n	8010d1a <_strtol_l.isra.0+0x9a>
 8010cb0:	f89e 4000 	ldrb.w	r4, [lr]
 8010cb4:	f04f 0801 	mov.w	r8, #1
 8010cb8:	f106 0e02 	add.w	lr, r6, #2
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d05c      	beq.n	8010d7a <_strtol_l.isra.0+0xfa>
 8010cc0:	2b10      	cmp	r3, #16
 8010cc2:	d10c      	bne.n	8010cde <_strtol_l.isra.0+0x5e>
 8010cc4:	2c30      	cmp	r4, #48	; 0x30
 8010cc6:	d10a      	bne.n	8010cde <_strtol_l.isra.0+0x5e>
 8010cc8:	f89e 4000 	ldrb.w	r4, [lr]
 8010ccc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010cd0:	2c58      	cmp	r4, #88	; 0x58
 8010cd2:	d14d      	bne.n	8010d70 <_strtol_l.isra.0+0xf0>
 8010cd4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010cd8:	2310      	movs	r3, #16
 8010cda:	f10e 0e02 	add.w	lr, lr, #2
 8010cde:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8010ce2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010ce6:	2600      	movs	r6, #0
 8010ce8:	fbbc f9f3 	udiv	r9, ip, r3
 8010cec:	4635      	mov	r5, r6
 8010cee:	fb03 ca19 	mls	sl, r3, r9, ip
 8010cf2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8010cf6:	2f09      	cmp	r7, #9
 8010cf8:	d818      	bhi.n	8010d2c <_strtol_l.isra.0+0xac>
 8010cfa:	463c      	mov	r4, r7
 8010cfc:	42a3      	cmp	r3, r4
 8010cfe:	dd24      	ble.n	8010d4a <_strtol_l.isra.0+0xca>
 8010d00:	2e00      	cmp	r6, #0
 8010d02:	db1f      	blt.n	8010d44 <_strtol_l.isra.0+0xc4>
 8010d04:	45a9      	cmp	r9, r5
 8010d06:	d31d      	bcc.n	8010d44 <_strtol_l.isra.0+0xc4>
 8010d08:	d101      	bne.n	8010d0e <_strtol_l.isra.0+0x8e>
 8010d0a:	45a2      	cmp	sl, r4
 8010d0c:	db1a      	blt.n	8010d44 <_strtol_l.isra.0+0xc4>
 8010d0e:	fb05 4503 	mla	r5, r5, r3, r4
 8010d12:	2601      	movs	r6, #1
 8010d14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010d18:	e7eb      	b.n	8010cf2 <_strtol_l.isra.0+0x72>
 8010d1a:	2c2b      	cmp	r4, #43	; 0x2b
 8010d1c:	bf08      	it	eq
 8010d1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8010d22:	46a8      	mov	r8, r5
 8010d24:	bf08      	it	eq
 8010d26:	f106 0e02 	addeq.w	lr, r6, #2
 8010d2a:	e7c7      	b.n	8010cbc <_strtol_l.isra.0+0x3c>
 8010d2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010d30:	2f19      	cmp	r7, #25
 8010d32:	d801      	bhi.n	8010d38 <_strtol_l.isra.0+0xb8>
 8010d34:	3c37      	subs	r4, #55	; 0x37
 8010d36:	e7e1      	b.n	8010cfc <_strtol_l.isra.0+0x7c>
 8010d38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010d3c:	2f19      	cmp	r7, #25
 8010d3e:	d804      	bhi.n	8010d4a <_strtol_l.isra.0+0xca>
 8010d40:	3c57      	subs	r4, #87	; 0x57
 8010d42:	e7db      	b.n	8010cfc <_strtol_l.isra.0+0x7c>
 8010d44:	f04f 36ff 	mov.w	r6, #4294967295
 8010d48:	e7e4      	b.n	8010d14 <_strtol_l.isra.0+0x94>
 8010d4a:	2e00      	cmp	r6, #0
 8010d4c:	da05      	bge.n	8010d5a <_strtol_l.isra.0+0xda>
 8010d4e:	2322      	movs	r3, #34	; 0x22
 8010d50:	6003      	str	r3, [r0, #0]
 8010d52:	4665      	mov	r5, ip
 8010d54:	b942      	cbnz	r2, 8010d68 <_strtol_l.isra.0+0xe8>
 8010d56:	4628      	mov	r0, r5
 8010d58:	e79d      	b.n	8010c96 <_strtol_l.isra.0+0x16>
 8010d5a:	f1b8 0f00 	cmp.w	r8, #0
 8010d5e:	d000      	beq.n	8010d62 <_strtol_l.isra.0+0xe2>
 8010d60:	426d      	negs	r5, r5
 8010d62:	2a00      	cmp	r2, #0
 8010d64:	d0f7      	beq.n	8010d56 <_strtol_l.isra.0+0xd6>
 8010d66:	b10e      	cbz	r6, 8010d6c <_strtol_l.isra.0+0xec>
 8010d68:	f10e 31ff 	add.w	r1, lr, #4294967295
 8010d6c:	6011      	str	r1, [r2, #0]
 8010d6e:	e7f2      	b.n	8010d56 <_strtol_l.isra.0+0xd6>
 8010d70:	2430      	movs	r4, #48	; 0x30
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d1b3      	bne.n	8010cde <_strtol_l.isra.0+0x5e>
 8010d76:	2308      	movs	r3, #8
 8010d78:	e7b1      	b.n	8010cde <_strtol_l.isra.0+0x5e>
 8010d7a:	2c30      	cmp	r4, #48	; 0x30
 8010d7c:	d0a4      	beq.n	8010cc8 <_strtol_l.isra.0+0x48>
 8010d7e:	230a      	movs	r3, #10
 8010d80:	e7ad      	b.n	8010cde <_strtol_l.isra.0+0x5e>
 8010d82:	bf00      	nop
 8010d84:	08015091 	.word	0x08015091

08010d88 <_strtol_r>:
 8010d88:	f7ff bf7a 	b.w	8010c80 <_strtol_l.isra.0>

08010d8c <_write_r>:
 8010d8c:	b538      	push	{r3, r4, r5, lr}
 8010d8e:	4d07      	ldr	r5, [pc, #28]	; (8010dac <_write_r+0x20>)
 8010d90:	4604      	mov	r4, r0
 8010d92:	4608      	mov	r0, r1
 8010d94:	4611      	mov	r1, r2
 8010d96:	2200      	movs	r2, #0
 8010d98:	602a      	str	r2, [r5, #0]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	f7f3 ff49 	bl	8004c32 <_write>
 8010da0:	1c43      	adds	r3, r0, #1
 8010da2:	d102      	bne.n	8010daa <_write_r+0x1e>
 8010da4:	682b      	ldr	r3, [r5, #0]
 8010da6:	b103      	cbz	r3, 8010daa <_write_r+0x1e>
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	bd38      	pop	{r3, r4, r5, pc}
 8010dac:	20004b34 	.word	0x20004b34

08010db0 <_close_r>:
 8010db0:	b538      	push	{r3, r4, r5, lr}
 8010db2:	4d06      	ldr	r5, [pc, #24]	; (8010dcc <_close_r+0x1c>)
 8010db4:	2300      	movs	r3, #0
 8010db6:	4604      	mov	r4, r0
 8010db8:	4608      	mov	r0, r1
 8010dba:	602b      	str	r3, [r5, #0]
 8010dbc:	f7f3 ff55 	bl	8004c6a <_close>
 8010dc0:	1c43      	adds	r3, r0, #1
 8010dc2:	d102      	bne.n	8010dca <_close_r+0x1a>
 8010dc4:	682b      	ldr	r3, [r5, #0]
 8010dc6:	b103      	cbz	r3, 8010dca <_close_r+0x1a>
 8010dc8:	6023      	str	r3, [r4, #0]
 8010dca:	bd38      	pop	{r3, r4, r5, pc}
 8010dcc:	20004b34 	.word	0x20004b34

08010dd0 <quorem>:
 8010dd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd4:	6903      	ldr	r3, [r0, #16]
 8010dd6:	690c      	ldr	r4, [r1, #16]
 8010dd8:	42a3      	cmp	r3, r4
 8010dda:	4607      	mov	r7, r0
 8010ddc:	f2c0 8081 	blt.w	8010ee2 <quorem+0x112>
 8010de0:	3c01      	subs	r4, #1
 8010de2:	f101 0814 	add.w	r8, r1, #20
 8010de6:	f100 0514 	add.w	r5, r0, #20
 8010dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010e00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010e04:	fbb2 f6f3 	udiv	r6, r2, r3
 8010e08:	d331      	bcc.n	8010e6e <quorem+0x9e>
 8010e0a:	f04f 0e00 	mov.w	lr, #0
 8010e0e:	4640      	mov	r0, r8
 8010e10:	46ac      	mov	ip, r5
 8010e12:	46f2      	mov	sl, lr
 8010e14:	f850 2b04 	ldr.w	r2, [r0], #4
 8010e18:	b293      	uxth	r3, r2
 8010e1a:	fb06 e303 	mla	r3, r6, r3, lr
 8010e1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	ebaa 0303 	sub.w	r3, sl, r3
 8010e28:	0c12      	lsrs	r2, r2, #16
 8010e2a:	f8dc a000 	ldr.w	sl, [ip]
 8010e2e:	fb06 e202 	mla	r2, r6, r2, lr
 8010e32:	fa13 f38a 	uxtah	r3, r3, sl
 8010e36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010e3a:	fa1f fa82 	uxth.w	sl, r2
 8010e3e:	f8dc 2000 	ldr.w	r2, [ip]
 8010e42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010e46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010e50:	4581      	cmp	r9, r0
 8010e52:	f84c 3b04 	str.w	r3, [ip], #4
 8010e56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010e5a:	d2db      	bcs.n	8010e14 <quorem+0x44>
 8010e5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010e60:	b92b      	cbnz	r3, 8010e6e <quorem+0x9e>
 8010e62:	9b01      	ldr	r3, [sp, #4]
 8010e64:	3b04      	subs	r3, #4
 8010e66:	429d      	cmp	r5, r3
 8010e68:	461a      	mov	r2, r3
 8010e6a:	d32e      	bcc.n	8010eca <quorem+0xfa>
 8010e6c:	613c      	str	r4, [r7, #16]
 8010e6e:	4638      	mov	r0, r7
 8010e70:	f001 fc9c 	bl	80127ac <__mcmp>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	db24      	blt.n	8010ec2 <quorem+0xf2>
 8010e78:	3601      	adds	r6, #1
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	f04f 0c00 	mov.w	ip, #0
 8010e80:	f858 2b04 	ldr.w	r2, [r8], #4
 8010e84:	f8d0 e000 	ldr.w	lr, [r0]
 8010e88:	b293      	uxth	r3, r2
 8010e8a:	ebac 0303 	sub.w	r3, ip, r3
 8010e8e:	0c12      	lsrs	r2, r2, #16
 8010e90:	fa13 f38e 	uxtah	r3, r3, lr
 8010e94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010e98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ea2:	45c1      	cmp	r9, r8
 8010ea4:	f840 3b04 	str.w	r3, [r0], #4
 8010ea8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010eac:	d2e8      	bcs.n	8010e80 <quorem+0xb0>
 8010eae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010eb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010eb6:	b922      	cbnz	r2, 8010ec2 <quorem+0xf2>
 8010eb8:	3b04      	subs	r3, #4
 8010eba:	429d      	cmp	r5, r3
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	d30a      	bcc.n	8010ed6 <quorem+0x106>
 8010ec0:	613c      	str	r4, [r7, #16]
 8010ec2:	4630      	mov	r0, r6
 8010ec4:	b003      	add	sp, #12
 8010ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eca:	6812      	ldr	r2, [r2, #0]
 8010ecc:	3b04      	subs	r3, #4
 8010ece:	2a00      	cmp	r2, #0
 8010ed0:	d1cc      	bne.n	8010e6c <quorem+0x9c>
 8010ed2:	3c01      	subs	r4, #1
 8010ed4:	e7c7      	b.n	8010e66 <quorem+0x96>
 8010ed6:	6812      	ldr	r2, [r2, #0]
 8010ed8:	3b04      	subs	r3, #4
 8010eda:	2a00      	cmp	r2, #0
 8010edc:	d1f0      	bne.n	8010ec0 <quorem+0xf0>
 8010ede:	3c01      	subs	r4, #1
 8010ee0:	e7eb      	b.n	8010eba <quorem+0xea>
 8010ee2:	2000      	movs	r0, #0
 8010ee4:	e7ee      	b.n	8010ec4 <quorem+0xf4>
	...

08010ee8 <_dtoa_r>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	ed2d 8b02 	vpush	{d8}
 8010ef0:	ec57 6b10 	vmov	r6, r7, d0
 8010ef4:	b095      	sub	sp, #84	; 0x54
 8010ef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010ef8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010efc:	9105      	str	r1, [sp, #20]
 8010efe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010f02:	4604      	mov	r4, r0
 8010f04:	9209      	str	r2, [sp, #36]	; 0x24
 8010f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f08:	b975      	cbnz	r5, 8010f28 <_dtoa_r+0x40>
 8010f0a:	2010      	movs	r0, #16
 8010f0c:	f001 f95e 	bl	80121cc <malloc>
 8010f10:	4602      	mov	r2, r0
 8010f12:	6260      	str	r0, [r4, #36]	; 0x24
 8010f14:	b920      	cbnz	r0, 8010f20 <_dtoa_r+0x38>
 8010f16:	4bb2      	ldr	r3, [pc, #712]	; (80111e0 <_dtoa_r+0x2f8>)
 8010f18:	21ea      	movs	r1, #234	; 0xea
 8010f1a:	48b2      	ldr	r0, [pc, #712]	; (80111e4 <_dtoa_r+0x2fc>)
 8010f1c:	f002 f886 	bl	801302c <__assert_func>
 8010f20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010f24:	6005      	str	r5, [r0, #0]
 8010f26:	60c5      	str	r5, [r0, #12]
 8010f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f2a:	6819      	ldr	r1, [r3, #0]
 8010f2c:	b151      	cbz	r1, 8010f44 <_dtoa_r+0x5c>
 8010f2e:	685a      	ldr	r2, [r3, #4]
 8010f30:	604a      	str	r2, [r1, #4]
 8010f32:	2301      	movs	r3, #1
 8010f34:	4093      	lsls	r3, r2
 8010f36:	608b      	str	r3, [r1, #8]
 8010f38:	4620      	mov	r0, r4
 8010f3a:	f001 f9af 	bl	801229c <_Bfree>
 8010f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010f40:	2200      	movs	r2, #0
 8010f42:	601a      	str	r2, [r3, #0]
 8010f44:	1e3b      	subs	r3, r7, #0
 8010f46:	bfb9      	ittee	lt
 8010f48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010f4c:	9303      	strlt	r3, [sp, #12]
 8010f4e:	2300      	movge	r3, #0
 8010f50:	f8c8 3000 	strge.w	r3, [r8]
 8010f54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010f58:	4ba3      	ldr	r3, [pc, #652]	; (80111e8 <_dtoa_r+0x300>)
 8010f5a:	bfbc      	itt	lt
 8010f5c:	2201      	movlt	r2, #1
 8010f5e:	f8c8 2000 	strlt.w	r2, [r8]
 8010f62:	ea33 0309 	bics.w	r3, r3, r9
 8010f66:	d11b      	bne.n	8010fa0 <_dtoa_r+0xb8>
 8010f68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f74:	4333      	orrs	r3, r6
 8010f76:	f000 857a 	beq.w	8011a6e <_dtoa_r+0xb86>
 8010f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f7c:	b963      	cbnz	r3, 8010f98 <_dtoa_r+0xb0>
 8010f7e:	4b9b      	ldr	r3, [pc, #620]	; (80111ec <_dtoa_r+0x304>)
 8010f80:	e024      	b.n	8010fcc <_dtoa_r+0xe4>
 8010f82:	4b9b      	ldr	r3, [pc, #620]	; (80111f0 <_dtoa_r+0x308>)
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	3308      	adds	r3, #8
 8010f88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010f8a:	6013      	str	r3, [r2, #0]
 8010f8c:	9800      	ldr	r0, [sp, #0]
 8010f8e:	b015      	add	sp, #84	; 0x54
 8010f90:	ecbd 8b02 	vpop	{d8}
 8010f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f98:	4b94      	ldr	r3, [pc, #592]	; (80111ec <_dtoa_r+0x304>)
 8010f9a:	9300      	str	r3, [sp, #0]
 8010f9c:	3303      	adds	r3, #3
 8010f9e:	e7f3      	b.n	8010f88 <_dtoa_r+0xa0>
 8010fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	ec51 0b17 	vmov	r0, r1, d7
 8010faa:	2300      	movs	r3, #0
 8010fac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010fb0:	f7ef fd8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fb4:	4680      	mov	r8, r0
 8010fb6:	b158      	cbz	r0, 8010fd0 <_dtoa_r+0xe8>
 8010fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010fba:	2301      	movs	r3, #1
 8010fbc:	6013      	str	r3, [r2, #0]
 8010fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f000 8551 	beq.w	8011a68 <_dtoa_r+0xb80>
 8010fc6:	488b      	ldr	r0, [pc, #556]	; (80111f4 <_dtoa_r+0x30c>)
 8010fc8:	6018      	str	r0, [r3, #0]
 8010fca:	1e43      	subs	r3, r0, #1
 8010fcc:	9300      	str	r3, [sp, #0]
 8010fce:	e7dd      	b.n	8010f8c <_dtoa_r+0xa4>
 8010fd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010fd4:	aa12      	add	r2, sp, #72	; 0x48
 8010fd6:	a913      	add	r1, sp, #76	; 0x4c
 8010fd8:	4620      	mov	r0, r4
 8010fda:	f001 fd07 	bl	80129ec <__d2b>
 8010fde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010fe2:	4683      	mov	fp, r0
 8010fe4:	2d00      	cmp	r5, #0
 8010fe6:	d07c      	beq.n	80110e2 <_dtoa_r+0x1fa>
 8010fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010fee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ff2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010ff6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010ffa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010ffe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011002:	4b7d      	ldr	r3, [pc, #500]	; (80111f8 <_dtoa_r+0x310>)
 8011004:	2200      	movs	r2, #0
 8011006:	4630      	mov	r0, r6
 8011008:	4639      	mov	r1, r7
 801100a:	f7ef f93d 	bl	8000288 <__aeabi_dsub>
 801100e:	a36e      	add	r3, pc, #440	; (adr r3, 80111c8 <_dtoa_r+0x2e0>)
 8011010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011014:	f7ef faf0 	bl	80005f8 <__aeabi_dmul>
 8011018:	a36d      	add	r3, pc, #436	; (adr r3, 80111d0 <_dtoa_r+0x2e8>)
 801101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101e:	f7ef f935 	bl	800028c <__adddf3>
 8011022:	4606      	mov	r6, r0
 8011024:	4628      	mov	r0, r5
 8011026:	460f      	mov	r7, r1
 8011028:	f7ef fa7c 	bl	8000524 <__aeabi_i2d>
 801102c:	a36a      	add	r3, pc, #424	; (adr r3, 80111d8 <_dtoa_r+0x2f0>)
 801102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011032:	f7ef fae1 	bl	80005f8 <__aeabi_dmul>
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	4630      	mov	r0, r6
 801103c:	4639      	mov	r1, r7
 801103e:	f7ef f925 	bl	800028c <__adddf3>
 8011042:	4606      	mov	r6, r0
 8011044:	460f      	mov	r7, r1
 8011046:	f7ef fd87 	bl	8000b58 <__aeabi_d2iz>
 801104a:	2200      	movs	r2, #0
 801104c:	4682      	mov	sl, r0
 801104e:	2300      	movs	r3, #0
 8011050:	4630      	mov	r0, r6
 8011052:	4639      	mov	r1, r7
 8011054:	f7ef fd42 	bl	8000adc <__aeabi_dcmplt>
 8011058:	b148      	cbz	r0, 801106e <_dtoa_r+0x186>
 801105a:	4650      	mov	r0, sl
 801105c:	f7ef fa62 	bl	8000524 <__aeabi_i2d>
 8011060:	4632      	mov	r2, r6
 8011062:	463b      	mov	r3, r7
 8011064:	f7ef fd30 	bl	8000ac8 <__aeabi_dcmpeq>
 8011068:	b908      	cbnz	r0, 801106e <_dtoa_r+0x186>
 801106a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801106e:	f1ba 0f16 	cmp.w	sl, #22
 8011072:	d854      	bhi.n	801111e <_dtoa_r+0x236>
 8011074:	4b61      	ldr	r3, [pc, #388]	; (80111fc <_dtoa_r+0x314>)
 8011076:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801107e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011082:	f7ef fd2b 	bl	8000adc <__aeabi_dcmplt>
 8011086:	2800      	cmp	r0, #0
 8011088:	d04b      	beq.n	8011122 <_dtoa_r+0x23a>
 801108a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801108e:	2300      	movs	r3, #0
 8011090:	930e      	str	r3, [sp, #56]	; 0x38
 8011092:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011094:	1b5d      	subs	r5, r3, r5
 8011096:	1e6b      	subs	r3, r5, #1
 8011098:	9304      	str	r3, [sp, #16]
 801109a:	bf43      	ittte	mi
 801109c:	2300      	movmi	r3, #0
 801109e:	f1c5 0801 	rsbmi	r8, r5, #1
 80110a2:	9304      	strmi	r3, [sp, #16]
 80110a4:	f04f 0800 	movpl.w	r8, #0
 80110a8:	f1ba 0f00 	cmp.w	sl, #0
 80110ac:	db3b      	blt.n	8011126 <_dtoa_r+0x23e>
 80110ae:	9b04      	ldr	r3, [sp, #16]
 80110b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80110b4:	4453      	add	r3, sl
 80110b6:	9304      	str	r3, [sp, #16]
 80110b8:	2300      	movs	r3, #0
 80110ba:	9306      	str	r3, [sp, #24]
 80110bc:	9b05      	ldr	r3, [sp, #20]
 80110be:	2b09      	cmp	r3, #9
 80110c0:	d869      	bhi.n	8011196 <_dtoa_r+0x2ae>
 80110c2:	2b05      	cmp	r3, #5
 80110c4:	bfc4      	itt	gt
 80110c6:	3b04      	subgt	r3, #4
 80110c8:	9305      	strgt	r3, [sp, #20]
 80110ca:	9b05      	ldr	r3, [sp, #20]
 80110cc:	f1a3 0302 	sub.w	r3, r3, #2
 80110d0:	bfcc      	ite	gt
 80110d2:	2500      	movgt	r5, #0
 80110d4:	2501      	movle	r5, #1
 80110d6:	2b03      	cmp	r3, #3
 80110d8:	d869      	bhi.n	80111ae <_dtoa_r+0x2c6>
 80110da:	e8df f003 	tbb	[pc, r3]
 80110de:	4e2c      	.short	0x4e2c
 80110e0:	5a4c      	.short	0x5a4c
 80110e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80110e6:	441d      	add	r5, r3
 80110e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80110ec:	2b20      	cmp	r3, #32
 80110ee:	bfc1      	itttt	gt
 80110f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80110f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80110f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80110fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011100:	bfda      	itte	le
 8011102:	f1c3 0320 	rsble	r3, r3, #32
 8011106:	fa06 f003 	lslle.w	r0, r6, r3
 801110a:	4318      	orrgt	r0, r3
 801110c:	f7ef f9fa 	bl	8000504 <__aeabi_ui2d>
 8011110:	2301      	movs	r3, #1
 8011112:	4606      	mov	r6, r0
 8011114:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011118:	3d01      	subs	r5, #1
 801111a:	9310      	str	r3, [sp, #64]	; 0x40
 801111c:	e771      	b.n	8011002 <_dtoa_r+0x11a>
 801111e:	2301      	movs	r3, #1
 8011120:	e7b6      	b.n	8011090 <_dtoa_r+0x1a8>
 8011122:	900e      	str	r0, [sp, #56]	; 0x38
 8011124:	e7b5      	b.n	8011092 <_dtoa_r+0x1aa>
 8011126:	f1ca 0300 	rsb	r3, sl, #0
 801112a:	9306      	str	r3, [sp, #24]
 801112c:	2300      	movs	r3, #0
 801112e:	eba8 080a 	sub.w	r8, r8, sl
 8011132:	930d      	str	r3, [sp, #52]	; 0x34
 8011134:	e7c2      	b.n	80110bc <_dtoa_r+0x1d4>
 8011136:	2300      	movs	r3, #0
 8011138:	9308      	str	r3, [sp, #32]
 801113a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801113c:	2b00      	cmp	r3, #0
 801113e:	dc39      	bgt.n	80111b4 <_dtoa_r+0x2cc>
 8011140:	f04f 0901 	mov.w	r9, #1
 8011144:	f8cd 9004 	str.w	r9, [sp, #4]
 8011148:	464b      	mov	r3, r9
 801114a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801114e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011150:	2200      	movs	r2, #0
 8011152:	6042      	str	r2, [r0, #4]
 8011154:	2204      	movs	r2, #4
 8011156:	f102 0614 	add.w	r6, r2, #20
 801115a:	429e      	cmp	r6, r3
 801115c:	6841      	ldr	r1, [r0, #4]
 801115e:	d92f      	bls.n	80111c0 <_dtoa_r+0x2d8>
 8011160:	4620      	mov	r0, r4
 8011162:	f001 f85b 	bl	801221c <_Balloc>
 8011166:	9000      	str	r0, [sp, #0]
 8011168:	2800      	cmp	r0, #0
 801116a:	d14b      	bne.n	8011204 <_dtoa_r+0x31c>
 801116c:	4b24      	ldr	r3, [pc, #144]	; (8011200 <_dtoa_r+0x318>)
 801116e:	4602      	mov	r2, r0
 8011170:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011174:	e6d1      	b.n	8010f1a <_dtoa_r+0x32>
 8011176:	2301      	movs	r3, #1
 8011178:	e7de      	b.n	8011138 <_dtoa_r+0x250>
 801117a:	2300      	movs	r3, #0
 801117c:	9308      	str	r3, [sp, #32]
 801117e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011180:	eb0a 0903 	add.w	r9, sl, r3
 8011184:	f109 0301 	add.w	r3, r9, #1
 8011188:	2b01      	cmp	r3, #1
 801118a:	9301      	str	r3, [sp, #4]
 801118c:	bfb8      	it	lt
 801118e:	2301      	movlt	r3, #1
 8011190:	e7dd      	b.n	801114e <_dtoa_r+0x266>
 8011192:	2301      	movs	r3, #1
 8011194:	e7f2      	b.n	801117c <_dtoa_r+0x294>
 8011196:	2501      	movs	r5, #1
 8011198:	2300      	movs	r3, #0
 801119a:	9305      	str	r3, [sp, #20]
 801119c:	9508      	str	r5, [sp, #32]
 801119e:	f04f 39ff 	mov.w	r9, #4294967295
 80111a2:	2200      	movs	r2, #0
 80111a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80111a8:	2312      	movs	r3, #18
 80111aa:	9209      	str	r2, [sp, #36]	; 0x24
 80111ac:	e7cf      	b.n	801114e <_dtoa_r+0x266>
 80111ae:	2301      	movs	r3, #1
 80111b0:	9308      	str	r3, [sp, #32]
 80111b2:	e7f4      	b.n	801119e <_dtoa_r+0x2b6>
 80111b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80111b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80111bc:	464b      	mov	r3, r9
 80111be:	e7c6      	b.n	801114e <_dtoa_r+0x266>
 80111c0:	3101      	adds	r1, #1
 80111c2:	6041      	str	r1, [r0, #4]
 80111c4:	0052      	lsls	r2, r2, #1
 80111c6:	e7c6      	b.n	8011156 <_dtoa_r+0x26e>
 80111c8:	636f4361 	.word	0x636f4361
 80111cc:	3fd287a7 	.word	0x3fd287a7
 80111d0:	8b60c8b3 	.word	0x8b60c8b3
 80111d4:	3fc68a28 	.word	0x3fc68a28
 80111d8:	509f79fb 	.word	0x509f79fb
 80111dc:	3fd34413 	.word	0x3fd34413
 80111e0:	0801519e 	.word	0x0801519e
 80111e4:	080151b5 	.word	0x080151b5
 80111e8:	7ff00000 	.word	0x7ff00000
 80111ec:	0801519a 	.word	0x0801519a
 80111f0:	08015191 	.word	0x08015191
 80111f4:	08015011 	.word	0x08015011
 80111f8:	3ff80000 	.word	0x3ff80000
 80111fc:	08015330 	.word	0x08015330
 8011200:	08015214 	.word	0x08015214
 8011204:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011206:	9a00      	ldr	r2, [sp, #0]
 8011208:	601a      	str	r2, [r3, #0]
 801120a:	9b01      	ldr	r3, [sp, #4]
 801120c:	2b0e      	cmp	r3, #14
 801120e:	f200 80ad 	bhi.w	801136c <_dtoa_r+0x484>
 8011212:	2d00      	cmp	r5, #0
 8011214:	f000 80aa 	beq.w	801136c <_dtoa_r+0x484>
 8011218:	f1ba 0f00 	cmp.w	sl, #0
 801121c:	dd36      	ble.n	801128c <_dtoa_r+0x3a4>
 801121e:	4ac3      	ldr	r2, [pc, #780]	; (801152c <_dtoa_r+0x644>)
 8011220:	f00a 030f 	and.w	r3, sl, #15
 8011224:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011228:	ed93 7b00 	vldr	d7, [r3]
 801122c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011230:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011234:	eeb0 8a47 	vmov.f32	s16, s14
 8011238:	eef0 8a67 	vmov.f32	s17, s15
 801123c:	d016      	beq.n	801126c <_dtoa_r+0x384>
 801123e:	4bbc      	ldr	r3, [pc, #752]	; (8011530 <_dtoa_r+0x648>)
 8011240:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011248:	f7ef fb00 	bl	800084c <__aeabi_ddiv>
 801124c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011250:	f007 070f 	and.w	r7, r7, #15
 8011254:	2503      	movs	r5, #3
 8011256:	4eb6      	ldr	r6, [pc, #728]	; (8011530 <_dtoa_r+0x648>)
 8011258:	b957      	cbnz	r7, 8011270 <_dtoa_r+0x388>
 801125a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801125e:	ec53 2b18 	vmov	r2, r3, d8
 8011262:	f7ef faf3 	bl	800084c <__aeabi_ddiv>
 8011266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801126a:	e029      	b.n	80112c0 <_dtoa_r+0x3d8>
 801126c:	2502      	movs	r5, #2
 801126e:	e7f2      	b.n	8011256 <_dtoa_r+0x36e>
 8011270:	07f9      	lsls	r1, r7, #31
 8011272:	d508      	bpl.n	8011286 <_dtoa_r+0x39e>
 8011274:	ec51 0b18 	vmov	r0, r1, d8
 8011278:	e9d6 2300 	ldrd	r2, r3, [r6]
 801127c:	f7ef f9bc 	bl	80005f8 <__aeabi_dmul>
 8011280:	ec41 0b18 	vmov	d8, r0, r1
 8011284:	3501      	adds	r5, #1
 8011286:	107f      	asrs	r7, r7, #1
 8011288:	3608      	adds	r6, #8
 801128a:	e7e5      	b.n	8011258 <_dtoa_r+0x370>
 801128c:	f000 80a6 	beq.w	80113dc <_dtoa_r+0x4f4>
 8011290:	f1ca 0600 	rsb	r6, sl, #0
 8011294:	4ba5      	ldr	r3, [pc, #660]	; (801152c <_dtoa_r+0x644>)
 8011296:	4fa6      	ldr	r7, [pc, #664]	; (8011530 <_dtoa_r+0x648>)
 8011298:	f006 020f 	and.w	r2, r6, #15
 801129c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80112a8:	f7ef f9a6 	bl	80005f8 <__aeabi_dmul>
 80112ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112b0:	1136      	asrs	r6, r6, #4
 80112b2:	2300      	movs	r3, #0
 80112b4:	2502      	movs	r5, #2
 80112b6:	2e00      	cmp	r6, #0
 80112b8:	f040 8085 	bne.w	80113c6 <_dtoa_r+0x4de>
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d1d2      	bne.n	8011266 <_dtoa_r+0x37e>
 80112c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f000 808c 	beq.w	80113e0 <_dtoa_r+0x4f8>
 80112c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80112cc:	4b99      	ldr	r3, [pc, #612]	; (8011534 <_dtoa_r+0x64c>)
 80112ce:	2200      	movs	r2, #0
 80112d0:	4630      	mov	r0, r6
 80112d2:	4639      	mov	r1, r7
 80112d4:	f7ef fc02 	bl	8000adc <__aeabi_dcmplt>
 80112d8:	2800      	cmp	r0, #0
 80112da:	f000 8081 	beq.w	80113e0 <_dtoa_r+0x4f8>
 80112de:	9b01      	ldr	r3, [sp, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d07d      	beq.n	80113e0 <_dtoa_r+0x4f8>
 80112e4:	f1b9 0f00 	cmp.w	r9, #0
 80112e8:	dd3c      	ble.n	8011364 <_dtoa_r+0x47c>
 80112ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80112ee:	9307      	str	r3, [sp, #28]
 80112f0:	2200      	movs	r2, #0
 80112f2:	4b91      	ldr	r3, [pc, #580]	; (8011538 <_dtoa_r+0x650>)
 80112f4:	4630      	mov	r0, r6
 80112f6:	4639      	mov	r1, r7
 80112f8:	f7ef f97e 	bl	80005f8 <__aeabi_dmul>
 80112fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011300:	3501      	adds	r5, #1
 8011302:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011306:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801130a:	4628      	mov	r0, r5
 801130c:	f7ef f90a 	bl	8000524 <__aeabi_i2d>
 8011310:	4632      	mov	r2, r6
 8011312:	463b      	mov	r3, r7
 8011314:	f7ef f970 	bl	80005f8 <__aeabi_dmul>
 8011318:	4b88      	ldr	r3, [pc, #544]	; (801153c <_dtoa_r+0x654>)
 801131a:	2200      	movs	r2, #0
 801131c:	f7ee ffb6 	bl	800028c <__adddf3>
 8011320:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011328:	9303      	str	r3, [sp, #12]
 801132a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801132c:	2b00      	cmp	r3, #0
 801132e:	d15c      	bne.n	80113ea <_dtoa_r+0x502>
 8011330:	4b83      	ldr	r3, [pc, #524]	; (8011540 <_dtoa_r+0x658>)
 8011332:	2200      	movs	r2, #0
 8011334:	4630      	mov	r0, r6
 8011336:	4639      	mov	r1, r7
 8011338:	f7ee ffa6 	bl	8000288 <__aeabi_dsub>
 801133c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011340:	4606      	mov	r6, r0
 8011342:	460f      	mov	r7, r1
 8011344:	f7ef fbe8 	bl	8000b18 <__aeabi_dcmpgt>
 8011348:	2800      	cmp	r0, #0
 801134a:	f040 8296 	bne.w	801187a <_dtoa_r+0x992>
 801134e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011352:	4630      	mov	r0, r6
 8011354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011358:	4639      	mov	r1, r7
 801135a:	f7ef fbbf 	bl	8000adc <__aeabi_dcmplt>
 801135e:	2800      	cmp	r0, #0
 8011360:	f040 8288 	bne.w	8011874 <_dtoa_r+0x98c>
 8011364:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011368:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801136c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801136e:	2b00      	cmp	r3, #0
 8011370:	f2c0 8158 	blt.w	8011624 <_dtoa_r+0x73c>
 8011374:	f1ba 0f0e 	cmp.w	sl, #14
 8011378:	f300 8154 	bgt.w	8011624 <_dtoa_r+0x73c>
 801137c:	4b6b      	ldr	r3, [pc, #428]	; (801152c <_dtoa_r+0x644>)
 801137e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011382:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011388:	2b00      	cmp	r3, #0
 801138a:	f280 80e3 	bge.w	8011554 <_dtoa_r+0x66c>
 801138e:	9b01      	ldr	r3, [sp, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	f300 80df 	bgt.w	8011554 <_dtoa_r+0x66c>
 8011396:	f040 826d 	bne.w	8011874 <_dtoa_r+0x98c>
 801139a:	4b69      	ldr	r3, [pc, #420]	; (8011540 <_dtoa_r+0x658>)
 801139c:	2200      	movs	r2, #0
 801139e:	4640      	mov	r0, r8
 80113a0:	4649      	mov	r1, r9
 80113a2:	f7ef f929 	bl	80005f8 <__aeabi_dmul>
 80113a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80113aa:	f7ef fbab 	bl	8000b04 <__aeabi_dcmpge>
 80113ae:	9e01      	ldr	r6, [sp, #4]
 80113b0:	4637      	mov	r7, r6
 80113b2:	2800      	cmp	r0, #0
 80113b4:	f040 8243 	bne.w	801183e <_dtoa_r+0x956>
 80113b8:	9d00      	ldr	r5, [sp, #0]
 80113ba:	2331      	movs	r3, #49	; 0x31
 80113bc:	f805 3b01 	strb.w	r3, [r5], #1
 80113c0:	f10a 0a01 	add.w	sl, sl, #1
 80113c4:	e23f      	b.n	8011846 <_dtoa_r+0x95e>
 80113c6:	07f2      	lsls	r2, r6, #31
 80113c8:	d505      	bpl.n	80113d6 <_dtoa_r+0x4ee>
 80113ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113ce:	f7ef f913 	bl	80005f8 <__aeabi_dmul>
 80113d2:	3501      	adds	r5, #1
 80113d4:	2301      	movs	r3, #1
 80113d6:	1076      	asrs	r6, r6, #1
 80113d8:	3708      	adds	r7, #8
 80113da:	e76c      	b.n	80112b6 <_dtoa_r+0x3ce>
 80113dc:	2502      	movs	r5, #2
 80113de:	e76f      	b.n	80112c0 <_dtoa_r+0x3d8>
 80113e0:	9b01      	ldr	r3, [sp, #4]
 80113e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80113e6:	930c      	str	r3, [sp, #48]	; 0x30
 80113e8:	e78d      	b.n	8011306 <_dtoa_r+0x41e>
 80113ea:	9900      	ldr	r1, [sp, #0]
 80113ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80113ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80113f0:	4b4e      	ldr	r3, [pc, #312]	; (801152c <_dtoa_r+0x644>)
 80113f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113f6:	4401      	add	r1, r0
 80113f8:	9102      	str	r1, [sp, #8]
 80113fa:	9908      	ldr	r1, [sp, #32]
 80113fc:	eeb0 8a47 	vmov.f32	s16, s14
 8011400:	eef0 8a67 	vmov.f32	s17, s15
 8011404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011408:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801140c:	2900      	cmp	r1, #0
 801140e:	d045      	beq.n	801149c <_dtoa_r+0x5b4>
 8011410:	494c      	ldr	r1, [pc, #304]	; (8011544 <_dtoa_r+0x65c>)
 8011412:	2000      	movs	r0, #0
 8011414:	f7ef fa1a 	bl	800084c <__aeabi_ddiv>
 8011418:	ec53 2b18 	vmov	r2, r3, d8
 801141c:	f7ee ff34 	bl	8000288 <__aeabi_dsub>
 8011420:	9d00      	ldr	r5, [sp, #0]
 8011422:	ec41 0b18 	vmov	d8, r0, r1
 8011426:	4639      	mov	r1, r7
 8011428:	4630      	mov	r0, r6
 801142a:	f7ef fb95 	bl	8000b58 <__aeabi_d2iz>
 801142e:	900c      	str	r0, [sp, #48]	; 0x30
 8011430:	f7ef f878 	bl	8000524 <__aeabi_i2d>
 8011434:	4602      	mov	r2, r0
 8011436:	460b      	mov	r3, r1
 8011438:	4630      	mov	r0, r6
 801143a:	4639      	mov	r1, r7
 801143c:	f7ee ff24 	bl	8000288 <__aeabi_dsub>
 8011440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011442:	3330      	adds	r3, #48	; 0x30
 8011444:	f805 3b01 	strb.w	r3, [r5], #1
 8011448:	ec53 2b18 	vmov	r2, r3, d8
 801144c:	4606      	mov	r6, r0
 801144e:	460f      	mov	r7, r1
 8011450:	f7ef fb44 	bl	8000adc <__aeabi_dcmplt>
 8011454:	2800      	cmp	r0, #0
 8011456:	d165      	bne.n	8011524 <_dtoa_r+0x63c>
 8011458:	4632      	mov	r2, r6
 801145a:	463b      	mov	r3, r7
 801145c:	4935      	ldr	r1, [pc, #212]	; (8011534 <_dtoa_r+0x64c>)
 801145e:	2000      	movs	r0, #0
 8011460:	f7ee ff12 	bl	8000288 <__aeabi_dsub>
 8011464:	ec53 2b18 	vmov	r2, r3, d8
 8011468:	f7ef fb38 	bl	8000adc <__aeabi_dcmplt>
 801146c:	2800      	cmp	r0, #0
 801146e:	f040 80b9 	bne.w	80115e4 <_dtoa_r+0x6fc>
 8011472:	9b02      	ldr	r3, [sp, #8]
 8011474:	429d      	cmp	r5, r3
 8011476:	f43f af75 	beq.w	8011364 <_dtoa_r+0x47c>
 801147a:	4b2f      	ldr	r3, [pc, #188]	; (8011538 <_dtoa_r+0x650>)
 801147c:	ec51 0b18 	vmov	r0, r1, d8
 8011480:	2200      	movs	r2, #0
 8011482:	f7ef f8b9 	bl	80005f8 <__aeabi_dmul>
 8011486:	4b2c      	ldr	r3, [pc, #176]	; (8011538 <_dtoa_r+0x650>)
 8011488:	ec41 0b18 	vmov	d8, r0, r1
 801148c:	2200      	movs	r2, #0
 801148e:	4630      	mov	r0, r6
 8011490:	4639      	mov	r1, r7
 8011492:	f7ef f8b1 	bl	80005f8 <__aeabi_dmul>
 8011496:	4606      	mov	r6, r0
 8011498:	460f      	mov	r7, r1
 801149a:	e7c4      	b.n	8011426 <_dtoa_r+0x53e>
 801149c:	ec51 0b17 	vmov	r0, r1, d7
 80114a0:	f7ef f8aa 	bl	80005f8 <__aeabi_dmul>
 80114a4:	9b02      	ldr	r3, [sp, #8]
 80114a6:	9d00      	ldr	r5, [sp, #0]
 80114a8:	930c      	str	r3, [sp, #48]	; 0x30
 80114aa:	ec41 0b18 	vmov	d8, r0, r1
 80114ae:	4639      	mov	r1, r7
 80114b0:	4630      	mov	r0, r6
 80114b2:	f7ef fb51 	bl	8000b58 <__aeabi_d2iz>
 80114b6:	9011      	str	r0, [sp, #68]	; 0x44
 80114b8:	f7ef f834 	bl	8000524 <__aeabi_i2d>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	4630      	mov	r0, r6
 80114c2:	4639      	mov	r1, r7
 80114c4:	f7ee fee0 	bl	8000288 <__aeabi_dsub>
 80114c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80114ca:	3330      	adds	r3, #48	; 0x30
 80114cc:	f805 3b01 	strb.w	r3, [r5], #1
 80114d0:	9b02      	ldr	r3, [sp, #8]
 80114d2:	429d      	cmp	r5, r3
 80114d4:	4606      	mov	r6, r0
 80114d6:	460f      	mov	r7, r1
 80114d8:	f04f 0200 	mov.w	r2, #0
 80114dc:	d134      	bne.n	8011548 <_dtoa_r+0x660>
 80114de:	4b19      	ldr	r3, [pc, #100]	; (8011544 <_dtoa_r+0x65c>)
 80114e0:	ec51 0b18 	vmov	r0, r1, d8
 80114e4:	f7ee fed2 	bl	800028c <__adddf3>
 80114e8:	4602      	mov	r2, r0
 80114ea:	460b      	mov	r3, r1
 80114ec:	4630      	mov	r0, r6
 80114ee:	4639      	mov	r1, r7
 80114f0:	f7ef fb12 	bl	8000b18 <__aeabi_dcmpgt>
 80114f4:	2800      	cmp	r0, #0
 80114f6:	d175      	bne.n	80115e4 <_dtoa_r+0x6fc>
 80114f8:	ec53 2b18 	vmov	r2, r3, d8
 80114fc:	4911      	ldr	r1, [pc, #68]	; (8011544 <_dtoa_r+0x65c>)
 80114fe:	2000      	movs	r0, #0
 8011500:	f7ee fec2 	bl	8000288 <__aeabi_dsub>
 8011504:	4602      	mov	r2, r0
 8011506:	460b      	mov	r3, r1
 8011508:	4630      	mov	r0, r6
 801150a:	4639      	mov	r1, r7
 801150c:	f7ef fae6 	bl	8000adc <__aeabi_dcmplt>
 8011510:	2800      	cmp	r0, #0
 8011512:	f43f af27 	beq.w	8011364 <_dtoa_r+0x47c>
 8011516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011518:	1e6b      	subs	r3, r5, #1
 801151a:	930c      	str	r3, [sp, #48]	; 0x30
 801151c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011520:	2b30      	cmp	r3, #48	; 0x30
 8011522:	d0f8      	beq.n	8011516 <_dtoa_r+0x62e>
 8011524:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011528:	e04a      	b.n	80115c0 <_dtoa_r+0x6d8>
 801152a:	bf00      	nop
 801152c:	08015330 	.word	0x08015330
 8011530:	08015308 	.word	0x08015308
 8011534:	3ff00000 	.word	0x3ff00000
 8011538:	40240000 	.word	0x40240000
 801153c:	401c0000 	.word	0x401c0000
 8011540:	40140000 	.word	0x40140000
 8011544:	3fe00000 	.word	0x3fe00000
 8011548:	4baf      	ldr	r3, [pc, #700]	; (8011808 <_dtoa_r+0x920>)
 801154a:	f7ef f855 	bl	80005f8 <__aeabi_dmul>
 801154e:	4606      	mov	r6, r0
 8011550:	460f      	mov	r7, r1
 8011552:	e7ac      	b.n	80114ae <_dtoa_r+0x5c6>
 8011554:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011558:	9d00      	ldr	r5, [sp, #0]
 801155a:	4642      	mov	r2, r8
 801155c:	464b      	mov	r3, r9
 801155e:	4630      	mov	r0, r6
 8011560:	4639      	mov	r1, r7
 8011562:	f7ef f973 	bl	800084c <__aeabi_ddiv>
 8011566:	f7ef faf7 	bl	8000b58 <__aeabi_d2iz>
 801156a:	9002      	str	r0, [sp, #8]
 801156c:	f7ee ffda 	bl	8000524 <__aeabi_i2d>
 8011570:	4642      	mov	r2, r8
 8011572:	464b      	mov	r3, r9
 8011574:	f7ef f840 	bl	80005f8 <__aeabi_dmul>
 8011578:	4602      	mov	r2, r0
 801157a:	460b      	mov	r3, r1
 801157c:	4630      	mov	r0, r6
 801157e:	4639      	mov	r1, r7
 8011580:	f7ee fe82 	bl	8000288 <__aeabi_dsub>
 8011584:	9e02      	ldr	r6, [sp, #8]
 8011586:	9f01      	ldr	r7, [sp, #4]
 8011588:	3630      	adds	r6, #48	; 0x30
 801158a:	f805 6b01 	strb.w	r6, [r5], #1
 801158e:	9e00      	ldr	r6, [sp, #0]
 8011590:	1bae      	subs	r6, r5, r6
 8011592:	42b7      	cmp	r7, r6
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	d137      	bne.n	801160a <_dtoa_r+0x722>
 801159a:	f7ee fe77 	bl	800028c <__adddf3>
 801159e:	4642      	mov	r2, r8
 80115a0:	464b      	mov	r3, r9
 80115a2:	4606      	mov	r6, r0
 80115a4:	460f      	mov	r7, r1
 80115a6:	f7ef fab7 	bl	8000b18 <__aeabi_dcmpgt>
 80115aa:	b9c8      	cbnz	r0, 80115e0 <_dtoa_r+0x6f8>
 80115ac:	4642      	mov	r2, r8
 80115ae:	464b      	mov	r3, r9
 80115b0:	4630      	mov	r0, r6
 80115b2:	4639      	mov	r1, r7
 80115b4:	f7ef fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80115b8:	b110      	cbz	r0, 80115c0 <_dtoa_r+0x6d8>
 80115ba:	9b02      	ldr	r3, [sp, #8]
 80115bc:	07d9      	lsls	r1, r3, #31
 80115be:	d40f      	bmi.n	80115e0 <_dtoa_r+0x6f8>
 80115c0:	4620      	mov	r0, r4
 80115c2:	4659      	mov	r1, fp
 80115c4:	f000 fe6a 	bl	801229c <_Bfree>
 80115c8:	2300      	movs	r3, #0
 80115ca:	702b      	strb	r3, [r5, #0]
 80115cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115ce:	f10a 0001 	add.w	r0, sl, #1
 80115d2:	6018      	str	r0, [r3, #0]
 80115d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f43f acd8 	beq.w	8010f8c <_dtoa_r+0xa4>
 80115dc:	601d      	str	r5, [r3, #0]
 80115de:	e4d5      	b.n	8010f8c <_dtoa_r+0xa4>
 80115e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80115e4:	462b      	mov	r3, r5
 80115e6:	461d      	mov	r5, r3
 80115e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80115ec:	2a39      	cmp	r2, #57	; 0x39
 80115ee:	d108      	bne.n	8011602 <_dtoa_r+0x71a>
 80115f0:	9a00      	ldr	r2, [sp, #0]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d1f7      	bne.n	80115e6 <_dtoa_r+0x6fe>
 80115f6:	9a07      	ldr	r2, [sp, #28]
 80115f8:	9900      	ldr	r1, [sp, #0]
 80115fa:	3201      	adds	r2, #1
 80115fc:	9207      	str	r2, [sp, #28]
 80115fe:	2230      	movs	r2, #48	; 0x30
 8011600:	700a      	strb	r2, [r1, #0]
 8011602:	781a      	ldrb	r2, [r3, #0]
 8011604:	3201      	adds	r2, #1
 8011606:	701a      	strb	r2, [r3, #0]
 8011608:	e78c      	b.n	8011524 <_dtoa_r+0x63c>
 801160a:	4b7f      	ldr	r3, [pc, #508]	; (8011808 <_dtoa_r+0x920>)
 801160c:	2200      	movs	r2, #0
 801160e:	f7ee fff3 	bl	80005f8 <__aeabi_dmul>
 8011612:	2200      	movs	r2, #0
 8011614:	2300      	movs	r3, #0
 8011616:	4606      	mov	r6, r0
 8011618:	460f      	mov	r7, r1
 801161a:	f7ef fa55 	bl	8000ac8 <__aeabi_dcmpeq>
 801161e:	2800      	cmp	r0, #0
 8011620:	d09b      	beq.n	801155a <_dtoa_r+0x672>
 8011622:	e7cd      	b.n	80115c0 <_dtoa_r+0x6d8>
 8011624:	9a08      	ldr	r2, [sp, #32]
 8011626:	2a00      	cmp	r2, #0
 8011628:	f000 80c4 	beq.w	80117b4 <_dtoa_r+0x8cc>
 801162c:	9a05      	ldr	r2, [sp, #20]
 801162e:	2a01      	cmp	r2, #1
 8011630:	f300 80a8 	bgt.w	8011784 <_dtoa_r+0x89c>
 8011634:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011636:	2a00      	cmp	r2, #0
 8011638:	f000 80a0 	beq.w	801177c <_dtoa_r+0x894>
 801163c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011640:	9e06      	ldr	r6, [sp, #24]
 8011642:	4645      	mov	r5, r8
 8011644:	9a04      	ldr	r2, [sp, #16]
 8011646:	2101      	movs	r1, #1
 8011648:	441a      	add	r2, r3
 801164a:	4620      	mov	r0, r4
 801164c:	4498      	add	r8, r3
 801164e:	9204      	str	r2, [sp, #16]
 8011650:	f000 ff2a 	bl	80124a8 <__i2b>
 8011654:	4607      	mov	r7, r0
 8011656:	2d00      	cmp	r5, #0
 8011658:	dd0b      	ble.n	8011672 <_dtoa_r+0x78a>
 801165a:	9b04      	ldr	r3, [sp, #16]
 801165c:	2b00      	cmp	r3, #0
 801165e:	dd08      	ble.n	8011672 <_dtoa_r+0x78a>
 8011660:	42ab      	cmp	r3, r5
 8011662:	9a04      	ldr	r2, [sp, #16]
 8011664:	bfa8      	it	ge
 8011666:	462b      	movge	r3, r5
 8011668:	eba8 0803 	sub.w	r8, r8, r3
 801166c:	1aed      	subs	r5, r5, r3
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	9304      	str	r3, [sp, #16]
 8011672:	9b06      	ldr	r3, [sp, #24]
 8011674:	b1fb      	cbz	r3, 80116b6 <_dtoa_r+0x7ce>
 8011676:	9b08      	ldr	r3, [sp, #32]
 8011678:	2b00      	cmp	r3, #0
 801167a:	f000 809f 	beq.w	80117bc <_dtoa_r+0x8d4>
 801167e:	2e00      	cmp	r6, #0
 8011680:	dd11      	ble.n	80116a6 <_dtoa_r+0x7be>
 8011682:	4639      	mov	r1, r7
 8011684:	4632      	mov	r2, r6
 8011686:	4620      	mov	r0, r4
 8011688:	f000 ffca 	bl	8012620 <__pow5mult>
 801168c:	465a      	mov	r2, fp
 801168e:	4601      	mov	r1, r0
 8011690:	4607      	mov	r7, r0
 8011692:	4620      	mov	r0, r4
 8011694:	f000 ff1e 	bl	80124d4 <__multiply>
 8011698:	4659      	mov	r1, fp
 801169a:	9007      	str	r0, [sp, #28]
 801169c:	4620      	mov	r0, r4
 801169e:	f000 fdfd 	bl	801229c <_Bfree>
 80116a2:	9b07      	ldr	r3, [sp, #28]
 80116a4:	469b      	mov	fp, r3
 80116a6:	9b06      	ldr	r3, [sp, #24]
 80116a8:	1b9a      	subs	r2, r3, r6
 80116aa:	d004      	beq.n	80116b6 <_dtoa_r+0x7ce>
 80116ac:	4659      	mov	r1, fp
 80116ae:	4620      	mov	r0, r4
 80116b0:	f000 ffb6 	bl	8012620 <__pow5mult>
 80116b4:	4683      	mov	fp, r0
 80116b6:	2101      	movs	r1, #1
 80116b8:	4620      	mov	r0, r4
 80116ba:	f000 fef5 	bl	80124a8 <__i2b>
 80116be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	4606      	mov	r6, r0
 80116c4:	dd7c      	ble.n	80117c0 <_dtoa_r+0x8d8>
 80116c6:	461a      	mov	r2, r3
 80116c8:	4601      	mov	r1, r0
 80116ca:	4620      	mov	r0, r4
 80116cc:	f000 ffa8 	bl	8012620 <__pow5mult>
 80116d0:	9b05      	ldr	r3, [sp, #20]
 80116d2:	2b01      	cmp	r3, #1
 80116d4:	4606      	mov	r6, r0
 80116d6:	dd76      	ble.n	80117c6 <_dtoa_r+0x8de>
 80116d8:	2300      	movs	r3, #0
 80116da:	9306      	str	r3, [sp, #24]
 80116dc:	6933      	ldr	r3, [r6, #16]
 80116de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80116e2:	6918      	ldr	r0, [r3, #16]
 80116e4:	f000 fe90 	bl	8012408 <__hi0bits>
 80116e8:	f1c0 0020 	rsb	r0, r0, #32
 80116ec:	9b04      	ldr	r3, [sp, #16]
 80116ee:	4418      	add	r0, r3
 80116f0:	f010 001f 	ands.w	r0, r0, #31
 80116f4:	f000 8086 	beq.w	8011804 <_dtoa_r+0x91c>
 80116f8:	f1c0 0320 	rsb	r3, r0, #32
 80116fc:	2b04      	cmp	r3, #4
 80116fe:	dd7f      	ble.n	8011800 <_dtoa_r+0x918>
 8011700:	f1c0 001c 	rsb	r0, r0, #28
 8011704:	9b04      	ldr	r3, [sp, #16]
 8011706:	4403      	add	r3, r0
 8011708:	4480      	add	r8, r0
 801170a:	4405      	add	r5, r0
 801170c:	9304      	str	r3, [sp, #16]
 801170e:	f1b8 0f00 	cmp.w	r8, #0
 8011712:	dd05      	ble.n	8011720 <_dtoa_r+0x838>
 8011714:	4659      	mov	r1, fp
 8011716:	4642      	mov	r2, r8
 8011718:	4620      	mov	r0, r4
 801171a:	f000 ffdb 	bl	80126d4 <__lshift>
 801171e:	4683      	mov	fp, r0
 8011720:	9b04      	ldr	r3, [sp, #16]
 8011722:	2b00      	cmp	r3, #0
 8011724:	dd05      	ble.n	8011732 <_dtoa_r+0x84a>
 8011726:	4631      	mov	r1, r6
 8011728:	461a      	mov	r2, r3
 801172a:	4620      	mov	r0, r4
 801172c:	f000 ffd2 	bl	80126d4 <__lshift>
 8011730:	4606      	mov	r6, r0
 8011732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011734:	2b00      	cmp	r3, #0
 8011736:	d069      	beq.n	801180c <_dtoa_r+0x924>
 8011738:	4631      	mov	r1, r6
 801173a:	4658      	mov	r0, fp
 801173c:	f001 f836 	bl	80127ac <__mcmp>
 8011740:	2800      	cmp	r0, #0
 8011742:	da63      	bge.n	801180c <_dtoa_r+0x924>
 8011744:	2300      	movs	r3, #0
 8011746:	4659      	mov	r1, fp
 8011748:	220a      	movs	r2, #10
 801174a:	4620      	mov	r0, r4
 801174c:	f000 fdc8 	bl	80122e0 <__multadd>
 8011750:	9b08      	ldr	r3, [sp, #32]
 8011752:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011756:	4683      	mov	fp, r0
 8011758:	2b00      	cmp	r3, #0
 801175a:	f000 818f 	beq.w	8011a7c <_dtoa_r+0xb94>
 801175e:	4639      	mov	r1, r7
 8011760:	2300      	movs	r3, #0
 8011762:	220a      	movs	r2, #10
 8011764:	4620      	mov	r0, r4
 8011766:	f000 fdbb 	bl	80122e0 <__multadd>
 801176a:	f1b9 0f00 	cmp.w	r9, #0
 801176e:	4607      	mov	r7, r0
 8011770:	f300 808e 	bgt.w	8011890 <_dtoa_r+0x9a8>
 8011774:	9b05      	ldr	r3, [sp, #20]
 8011776:	2b02      	cmp	r3, #2
 8011778:	dc50      	bgt.n	801181c <_dtoa_r+0x934>
 801177a:	e089      	b.n	8011890 <_dtoa_r+0x9a8>
 801177c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801177e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011782:	e75d      	b.n	8011640 <_dtoa_r+0x758>
 8011784:	9b01      	ldr	r3, [sp, #4]
 8011786:	1e5e      	subs	r6, r3, #1
 8011788:	9b06      	ldr	r3, [sp, #24]
 801178a:	42b3      	cmp	r3, r6
 801178c:	bfbf      	itttt	lt
 801178e:	9b06      	ldrlt	r3, [sp, #24]
 8011790:	9606      	strlt	r6, [sp, #24]
 8011792:	1af2      	sublt	r2, r6, r3
 8011794:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011796:	bfb6      	itet	lt
 8011798:	189b      	addlt	r3, r3, r2
 801179a:	1b9e      	subge	r6, r3, r6
 801179c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801179e:	9b01      	ldr	r3, [sp, #4]
 80117a0:	bfb8      	it	lt
 80117a2:	2600      	movlt	r6, #0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	bfb5      	itete	lt
 80117a8:	eba8 0503 	sublt.w	r5, r8, r3
 80117ac:	9b01      	ldrge	r3, [sp, #4]
 80117ae:	2300      	movlt	r3, #0
 80117b0:	4645      	movge	r5, r8
 80117b2:	e747      	b.n	8011644 <_dtoa_r+0x75c>
 80117b4:	9e06      	ldr	r6, [sp, #24]
 80117b6:	9f08      	ldr	r7, [sp, #32]
 80117b8:	4645      	mov	r5, r8
 80117ba:	e74c      	b.n	8011656 <_dtoa_r+0x76e>
 80117bc:	9a06      	ldr	r2, [sp, #24]
 80117be:	e775      	b.n	80116ac <_dtoa_r+0x7c4>
 80117c0:	9b05      	ldr	r3, [sp, #20]
 80117c2:	2b01      	cmp	r3, #1
 80117c4:	dc18      	bgt.n	80117f8 <_dtoa_r+0x910>
 80117c6:	9b02      	ldr	r3, [sp, #8]
 80117c8:	b9b3      	cbnz	r3, 80117f8 <_dtoa_r+0x910>
 80117ca:	9b03      	ldr	r3, [sp, #12]
 80117cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117d0:	b9a3      	cbnz	r3, 80117fc <_dtoa_r+0x914>
 80117d2:	9b03      	ldr	r3, [sp, #12]
 80117d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117d8:	0d1b      	lsrs	r3, r3, #20
 80117da:	051b      	lsls	r3, r3, #20
 80117dc:	b12b      	cbz	r3, 80117ea <_dtoa_r+0x902>
 80117de:	9b04      	ldr	r3, [sp, #16]
 80117e0:	3301      	adds	r3, #1
 80117e2:	9304      	str	r3, [sp, #16]
 80117e4:	f108 0801 	add.w	r8, r8, #1
 80117e8:	2301      	movs	r3, #1
 80117ea:	9306      	str	r3, [sp, #24]
 80117ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	f47f af74 	bne.w	80116dc <_dtoa_r+0x7f4>
 80117f4:	2001      	movs	r0, #1
 80117f6:	e779      	b.n	80116ec <_dtoa_r+0x804>
 80117f8:	2300      	movs	r3, #0
 80117fa:	e7f6      	b.n	80117ea <_dtoa_r+0x902>
 80117fc:	9b02      	ldr	r3, [sp, #8]
 80117fe:	e7f4      	b.n	80117ea <_dtoa_r+0x902>
 8011800:	d085      	beq.n	801170e <_dtoa_r+0x826>
 8011802:	4618      	mov	r0, r3
 8011804:	301c      	adds	r0, #28
 8011806:	e77d      	b.n	8011704 <_dtoa_r+0x81c>
 8011808:	40240000 	.word	0x40240000
 801180c:	9b01      	ldr	r3, [sp, #4]
 801180e:	2b00      	cmp	r3, #0
 8011810:	dc38      	bgt.n	8011884 <_dtoa_r+0x99c>
 8011812:	9b05      	ldr	r3, [sp, #20]
 8011814:	2b02      	cmp	r3, #2
 8011816:	dd35      	ble.n	8011884 <_dtoa_r+0x99c>
 8011818:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801181c:	f1b9 0f00 	cmp.w	r9, #0
 8011820:	d10d      	bne.n	801183e <_dtoa_r+0x956>
 8011822:	4631      	mov	r1, r6
 8011824:	464b      	mov	r3, r9
 8011826:	2205      	movs	r2, #5
 8011828:	4620      	mov	r0, r4
 801182a:	f000 fd59 	bl	80122e0 <__multadd>
 801182e:	4601      	mov	r1, r0
 8011830:	4606      	mov	r6, r0
 8011832:	4658      	mov	r0, fp
 8011834:	f000 ffba 	bl	80127ac <__mcmp>
 8011838:	2800      	cmp	r0, #0
 801183a:	f73f adbd 	bgt.w	80113b8 <_dtoa_r+0x4d0>
 801183e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011840:	9d00      	ldr	r5, [sp, #0]
 8011842:	ea6f 0a03 	mvn.w	sl, r3
 8011846:	f04f 0800 	mov.w	r8, #0
 801184a:	4631      	mov	r1, r6
 801184c:	4620      	mov	r0, r4
 801184e:	f000 fd25 	bl	801229c <_Bfree>
 8011852:	2f00      	cmp	r7, #0
 8011854:	f43f aeb4 	beq.w	80115c0 <_dtoa_r+0x6d8>
 8011858:	f1b8 0f00 	cmp.w	r8, #0
 801185c:	d005      	beq.n	801186a <_dtoa_r+0x982>
 801185e:	45b8      	cmp	r8, r7
 8011860:	d003      	beq.n	801186a <_dtoa_r+0x982>
 8011862:	4641      	mov	r1, r8
 8011864:	4620      	mov	r0, r4
 8011866:	f000 fd19 	bl	801229c <_Bfree>
 801186a:	4639      	mov	r1, r7
 801186c:	4620      	mov	r0, r4
 801186e:	f000 fd15 	bl	801229c <_Bfree>
 8011872:	e6a5      	b.n	80115c0 <_dtoa_r+0x6d8>
 8011874:	2600      	movs	r6, #0
 8011876:	4637      	mov	r7, r6
 8011878:	e7e1      	b.n	801183e <_dtoa_r+0x956>
 801187a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801187c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011880:	4637      	mov	r7, r6
 8011882:	e599      	b.n	80113b8 <_dtoa_r+0x4d0>
 8011884:	9b08      	ldr	r3, [sp, #32]
 8011886:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801188a:	2b00      	cmp	r3, #0
 801188c:	f000 80fd 	beq.w	8011a8a <_dtoa_r+0xba2>
 8011890:	2d00      	cmp	r5, #0
 8011892:	dd05      	ble.n	80118a0 <_dtoa_r+0x9b8>
 8011894:	4639      	mov	r1, r7
 8011896:	462a      	mov	r2, r5
 8011898:	4620      	mov	r0, r4
 801189a:	f000 ff1b 	bl	80126d4 <__lshift>
 801189e:	4607      	mov	r7, r0
 80118a0:	9b06      	ldr	r3, [sp, #24]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d05c      	beq.n	8011960 <_dtoa_r+0xa78>
 80118a6:	6879      	ldr	r1, [r7, #4]
 80118a8:	4620      	mov	r0, r4
 80118aa:	f000 fcb7 	bl	801221c <_Balloc>
 80118ae:	4605      	mov	r5, r0
 80118b0:	b928      	cbnz	r0, 80118be <_dtoa_r+0x9d6>
 80118b2:	4b80      	ldr	r3, [pc, #512]	; (8011ab4 <_dtoa_r+0xbcc>)
 80118b4:	4602      	mov	r2, r0
 80118b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80118ba:	f7ff bb2e 	b.w	8010f1a <_dtoa_r+0x32>
 80118be:	693a      	ldr	r2, [r7, #16]
 80118c0:	3202      	adds	r2, #2
 80118c2:	0092      	lsls	r2, r2, #2
 80118c4:	f107 010c 	add.w	r1, r7, #12
 80118c8:	300c      	adds	r0, #12
 80118ca:	f000 fc99 	bl	8012200 <memcpy>
 80118ce:	2201      	movs	r2, #1
 80118d0:	4629      	mov	r1, r5
 80118d2:	4620      	mov	r0, r4
 80118d4:	f000 fefe 	bl	80126d4 <__lshift>
 80118d8:	9b00      	ldr	r3, [sp, #0]
 80118da:	3301      	adds	r3, #1
 80118dc:	9301      	str	r3, [sp, #4]
 80118de:	9b00      	ldr	r3, [sp, #0]
 80118e0:	444b      	add	r3, r9
 80118e2:	9307      	str	r3, [sp, #28]
 80118e4:	9b02      	ldr	r3, [sp, #8]
 80118e6:	f003 0301 	and.w	r3, r3, #1
 80118ea:	46b8      	mov	r8, r7
 80118ec:	9306      	str	r3, [sp, #24]
 80118ee:	4607      	mov	r7, r0
 80118f0:	9b01      	ldr	r3, [sp, #4]
 80118f2:	4631      	mov	r1, r6
 80118f4:	3b01      	subs	r3, #1
 80118f6:	4658      	mov	r0, fp
 80118f8:	9302      	str	r3, [sp, #8]
 80118fa:	f7ff fa69 	bl	8010dd0 <quorem>
 80118fe:	4603      	mov	r3, r0
 8011900:	3330      	adds	r3, #48	; 0x30
 8011902:	9004      	str	r0, [sp, #16]
 8011904:	4641      	mov	r1, r8
 8011906:	4658      	mov	r0, fp
 8011908:	9308      	str	r3, [sp, #32]
 801190a:	f000 ff4f 	bl	80127ac <__mcmp>
 801190e:	463a      	mov	r2, r7
 8011910:	4681      	mov	r9, r0
 8011912:	4631      	mov	r1, r6
 8011914:	4620      	mov	r0, r4
 8011916:	f000 ff65 	bl	80127e4 <__mdiff>
 801191a:	68c2      	ldr	r2, [r0, #12]
 801191c:	9b08      	ldr	r3, [sp, #32]
 801191e:	4605      	mov	r5, r0
 8011920:	bb02      	cbnz	r2, 8011964 <_dtoa_r+0xa7c>
 8011922:	4601      	mov	r1, r0
 8011924:	4658      	mov	r0, fp
 8011926:	f000 ff41 	bl	80127ac <__mcmp>
 801192a:	9b08      	ldr	r3, [sp, #32]
 801192c:	4602      	mov	r2, r0
 801192e:	4629      	mov	r1, r5
 8011930:	4620      	mov	r0, r4
 8011932:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011936:	f000 fcb1 	bl	801229c <_Bfree>
 801193a:	9b05      	ldr	r3, [sp, #20]
 801193c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801193e:	9d01      	ldr	r5, [sp, #4]
 8011940:	ea43 0102 	orr.w	r1, r3, r2
 8011944:	9b06      	ldr	r3, [sp, #24]
 8011946:	430b      	orrs	r3, r1
 8011948:	9b08      	ldr	r3, [sp, #32]
 801194a:	d10d      	bne.n	8011968 <_dtoa_r+0xa80>
 801194c:	2b39      	cmp	r3, #57	; 0x39
 801194e:	d029      	beq.n	80119a4 <_dtoa_r+0xabc>
 8011950:	f1b9 0f00 	cmp.w	r9, #0
 8011954:	dd01      	ble.n	801195a <_dtoa_r+0xa72>
 8011956:	9b04      	ldr	r3, [sp, #16]
 8011958:	3331      	adds	r3, #49	; 0x31
 801195a:	9a02      	ldr	r2, [sp, #8]
 801195c:	7013      	strb	r3, [r2, #0]
 801195e:	e774      	b.n	801184a <_dtoa_r+0x962>
 8011960:	4638      	mov	r0, r7
 8011962:	e7b9      	b.n	80118d8 <_dtoa_r+0x9f0>
 8011964:	2201      	movs	r2, #1
 8011966:	e7e2      	b.n	801192e <_dtoa_r+0xa46>
 8011968:	f1b9 0f00 	cmp.w	r9, #0
 801196c:	db06      	blt.n	801197c <_dtoa_r+0xa94>
 801196e:	9905      	ldr	r1, [sp, #20]
 8011970:	ea41 0909 	orr.w	r9, r1, r9
 8011974:	9906      	ldr	r1, [sp, #24]
 8011976:	ea59 0101 	orrs.w	r1, r9, r1
 801197a:	d120      	bne.n	80119be <_dtoa_r+0xad6>
 801197c:	2a00      	cmp	r2, #0
 801197e:	ddec      	ble.n	801195a <_dtoa_r+0xa72>
 8011980:	4659      	mov	r1, fp
 8011982:	2201      	movs	r2, #1
 8011984:	4620      	mov	r0, r4
 8011986:	9301      	str	r3, [sp, #4]
 8011988:	f000 fea4 	bl	80126d4 <__lshift>
 801198c:	4631      	mov	r1, r6
 801198e:	4683      	mov	fp, r0
 8011990:	f000 ff0c 	bl	80127ac <__mcmp>
 8011994:	2800      	cmp	r0, #0
 8011996:	9b01      	ldr	r3, [sp, #4]
 8011998:	dc02      	bgt.n	80119a0 <_dtoa_r+0xab8>
 801199a:	d1de      	bne.n	801195a <_dtoa_r+0xa72>
 801199c:	07da      	lsls	r2, r3, #31
 801199e:	d5dc      	bpl.n	801195a <_dtoa_r+0xa72>
 80119a0:	2b39      	cmp	r3, #57	; 0x39
 80119a2:	d1d8      	bne.n	8011956 <_dtoa_r+0xa6e>
 80119a4:	9a02      	ldr	r2, [sp, #8]
 80119a6:	2339      	movs	r3, #57	; 0x39
 80119a8:	7013      	strb	r3, [r2, #0]
 80119aa:	462b      	mov	r3, r5
 80119ac:	461d      	mov	r5, r3
 80119ae:	3b01      	subs	r3, #1
 80119b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80119b4:	2a39      	cmp	r2, #57	; 0x39
 80119b6:	d050      	beq.n	8011a5a <_dtoa_r+0xb72>
 80119b8:	3201      	adds	r2, #1
 80119ba:	701a      	strb	r2, [r3, #0]
 80119bc:	e745      	b.n	801184a <_dtoa_r+0x962>
 80119be:	2a00      	cmp	r2, #0
 80119c0:	dd03      	ble.n	80119ca <_dtoa_r+0xae2>
 80119c2:	2b39      	cmp	r3, #57	; 0x39
 80119c4:	d0ee      	beq.n	80119a4 <_dtoa_r+0xabc>
 80119c6:	3301      	adds	r3, #1
 80119c8:	e7c7      	b.n	801195a <_dtoa_r+0xa72>
 80119ca:	9a01      	ldr	r2, [sp, #4]
 80119cc:	9907      	ldr	r1, [sp, #28]
 80119ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80119d2:	428a      	cmp	r2, r1
 80119d4:	d02a      	beq.n	8011a2c <_dtoa_r+0xb44>
 80119d6:	4659      	mov	r1, fp
 80119d8:	2300      	movs	r3, #0
 80119da:	220a      	movs	r2, #10
 80119dc:	4620      	mov	r0, r4
 80119de:	f000 fc7f 	bl	80122e0 <__multadd>
 80119e2:	45b8      	cmp	r8, r7
 80119e4:	4683      	mov	fp, r0
 80119e6:	f04f 0300 	mov.w	r3, #0
 80119ea:	f04f 020a 	mov.w	r2, #10
 80119ee:	4641      	mov	r1, r8
 80119f0:	4620      	mov	r0, r4
 80119f2:	d107      	bne.n	8011a04 <_dtoa_r+0xb1c>
 80119f4:	f000 fc74 	bl	80122e0 <__multadd>
 80119f8:	4680      	mov	r8, r0
 80119fa:	4607      	mov	r7, r0
 80119fc:	9b01      	ldr	r3, [sp, #4]
 80119fe:	3301      	adds	r3, #1
 8011a00:	9301      	str	r3, [sp, #4]
 8011a02:	e775      	b.n	80118f0 <_dtoa_r+0xa08>
 8011a04:	f000 fc6c 	bl	80122e0 <__multadd>
 8011a08:	4639      	mov	r1, r7
 8011a0a:	4680      	mov	r8, r0
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	220a      	movs	r2, #10
 8011a10:	4620      	mov	r0, r4
 8011a12:	f000 fc65 	bl	80122e0 <__multadd>
 8011a16:	4607      	mov	r7, r0
 8011a18:	e7f0      	b.n	80119fc <_dtoa_r+0xb14>
 8011a1a:	f1b9 0f00 	cmp.w	r9, #0
 8011a1e:	9a00      	ldr	r2, [sp, #0]
 8011a20:	bfcc      	ite	gt
 8011a22:	464d      	movgt	r5, r9
 8011a24:	2501      	movle	r5, #1
 8011a26:	4415      	add	r5, r2
 8011a28:	f04f 0800 	mov.w	r8, #0
 8011a2c:	4659      	mov	r1, fp
 8011a2e:	2201      	movs	r2, #1
 8011a30:	4620      	mov	r0, r4
 8011a32:	9301      	str	r3, [sp, #4]
 8011a34:	f000 fe4e 	bl	80126d4 <__lshift>
 8011a38:	4631      	mov	r1, r6
 8011a3a:	4683      	mov	fp, r0
 8011a3c:	f000 feb6 	bl	80127ac <__mcmp>
 8011a40:	2800      	cmp	r0, #0
 8011a42:	dcb2      	bgt.n	80119aa <_dtoa_r+0xac2>
 8011a44:	d102      	bne.n	8011a4c <_dtoa_r+0xb64>
 8011a46:	9b01      	ldr	r3, [sp, #4]
 8011a48:	07db      	lsls	r3, r3, #31
 8011a4a:	d4ae      	bmi.n	80119aa <_dtoa_r+0xac2>
 8011a4c:	462b      	mov	r3, r5
 8011a4e:	461d      	mov	r5, r3
 8011a50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a54:	2a30      	cmp	r2, #48	; 0x30
 8011a56:	d0fa      	beq.n	8011a4e <_dtoa_r+0xb66>
 8011a58:	e6f7      	b.n	801184a <_dtoa_r+0x962>
 8011a5a:	9a00      	ldr	r2, [sp, #0]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d1a5      	bne.n	80119ac <_dtoa_r+0xac4>
 8011a60:	f10a 0a01 	add.w	sl, sl, #1
 8011a64:	2331      	movs	r3, #49	; 0x31
 8011a66:	e779      	b.n	801195c <_dtoa_r+0xa74>
 8011a68:	4b13      	ldr	r3, [pc, #76]	; (8011ab8 <_dtoa_r+0xbd0>)
 8011a6a:	f7ff baaf 	b.w	8010fcc <_dtoa_r+0xe4>
 8011a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f47f aa86 	bne.w	8010f82 <_dtoa_r+0x9a>
 8011a76:	4b11      	ldr	r3, [pc, #68]	; (8011abc <_dtoa_r+0xbd4>)
 8011a78:	f7ff baa8 	b.w	8010fcc <_dtoa_r+0xe4>
 8011a7c:	f1b9 0f00 	cmp.w	r9, #0
 8011a80:	dc03      	bgt.n	8011a8a <_dtoa_r+0xba2>
 8011a82:	9b05      	ldr	r3, [sp, #20]
 8011a84:	2b02      	cmp	r3, #2
 8011a86:	f73f aec9 	bgt.w	801181c <_dtoa_r+0x934>
 8011a8a:	9d00      	ldr	r5, [sp, #0]
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	4658      	mov	r0, fp
 8011a90:	f7ff f99e 	bl	8010dd0 <quorem>
 8011a94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011a98:	f805 3b01 	strb.w	r3, [r5], #1
 8011a9c:	9a00      	ldr	r2, [sp, #0]
 8011a9e:	1aaa      	subs	r2, r5, r2
 8011aa0:	4591      	cmp	r9, r2
 8011aa2:	ddba      	ble.n	8011a1a <_dtoa_r+0xb32>
 8011aa4:	4659      	mov	r1, fp
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	220a      	movs	r2, #10
 8011aaa:	4620      	mov	r0, r4
 8011aac:	f000 fc18 	bl	80122e0 <__multadd>
 8011ab0:	4683      	mov	fp, r0
 8011ab2:	e7eb      	b.n	8011a8c <_dtoa_r+0xba4>
 8011ab4:	08015214 	.word	0x08015214
 8011ab8:	08015010 	.word	0x08015010
 8011abc:	08015191 	.word	0x08015191

08011ac0 <rshift>:
 8011ac0:	6903      	ldr	r3, [r0, #16]
 8011ac2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011ac6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011aca:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011ace:	f100 0414 	add.w	r4, r0, #20
 8011ad2:	dd45      	ble.n	8011b60 <rshift+0xa0>
 8011ad4:	f011 011f 	ands.w	r1, r1, #31
 8011ad8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011adc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011ae0:	d10c      	bne.n	8011afc <rshift+0x3c>
 8011ae2:	f100 0710 	add.w	r7, r0, #16
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	42b1      	cmp	r1, r6
 8011aea:	d334      	bcc.n	8011b56 <rshift+0x96>
 8011aec:	1a9b      	subs	r3, r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	1eea      	subs	r2, r5, #3
 8011af2:	4296      	cmp	r6, r2
 8011af4:	bf38      	it	cc
 8011af6:	2300      	movcc	r3, #0
 8011af8:	4423      	add	r3, r4
 8011afa:	e015      	b.n	8011b28 <rshift+0x68>
 8011afc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011b00:	f1c1 0820 	rsb	r8, r1, #32
 8011b04:	40cf      	lsrs	r7, r1
 8011b06:	f105 0e04 	add.w	lr, r5, #4
 8011b0a:	46a1      	mov	r9, r4
 8011b0c:	4576      	cmp	r6, lr
 8011b0e:	46f4      	mov	ip, lr
 8011b10:	d815      	bhi.n	8011b3e <rshift+0x7e>
 8011b12:	1a9b      	subs	r3, r3, r2
 8011b14:	009a      	lsls	r2, r3, #2
 8011b16:	3a04      	subs	r2, #4
 8011b18:	3501      	adds	r5, #1
 8011b1a:	42ae      	cmp	r6, r5
 8011b1c:	bf38      	it	cc
 8011b1e:	2200      	movcc	r2, #0
 8011b20:	18a3      	adds	r3, r4, r2
 8011b22:	50a7      	str	r7, [r4, r2]
 8011b24:	b107      	cbz	r7, 8011b28 <rshift+0x68>
 8011b26:	3304      	adds	r3, #4
 8011b28:	1b1a      	subs	r2, r3, r4
 8011b2a:	42a3      	cmp	r3, r4
 8011b2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011b30:	bf08      	it	eq
 8011b32:	2300      	moveq	r3, #0
 8011b34:	6102      	str	r2, [r0, #16]
 8011b36:	bf08      	it	eq
 8011b38:	6143      	streq	r3, [r0, #20]
 8011b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b3e:	f8dc c000 	ldr.w	ip, [ip]
 8011b42:	fa0c fc08 	lsl.w	ip, ip, r8
 8011b46:	ea4c 0707 	orr.w	r7, ip, r7
 8011b4a:	f849 7b04 	str.w	r7, [r9], #4
 8011b4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011b52:	40cf      	lsrs	r7, r1
 8011b54:	e7da      	b.n	8011b0c <rshift+0x4c>
 8011b56:	f851 cb04 	ldr.w	ip, [r1], #4
 8011b5a:	f847 cf04 	str.w	ip, [r7, #4]!
 8011b5e:	e7c3      	b.n	8011ae8 <rshift+0x28>
 8011b60:	4623      	mov	r3, r4
 8011b62:	e7e1      	b.n	8011b28 <rshift+0x68>

08011b64 <__hexdig_fun>:
 8011b64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011b68:	2b09      	cmp	r3, #9
 8011b6a:	d802      	bhi.n	8011b72 <__hexdig_fun+0xe>
 8011b6c:	3820      	subs	r0, #32
 8011b6e:	b2c0      	uxtb	r0, r0
 8011b70:	4770      	bx	lr
 8011b72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011b76:	2b05      	cmp	r3, #5
 8011b78:	d801      	bhi.n	8011b7e <__hexdig_fun+0x1a>
 8011b7a:	3847      	subs	r0, #71	; 0x47
 8011b7c:	e7f7      	b.n	8011b6e <__hexdig_fun+0xa>
 8011b7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011b82:	2b05      	cmp	r3, #5
 8011b84:	d801      	bhi.n	8011b8a <__hexdig_fun+0x26>
 8011b86:	3827      	subs	r0, #39	; 0x27
 8011b88:	e7f1      	b.n	8011b6e <__hexdig_fun+0xa>
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	4770      	bx	lr
	...

08011b90 <__gethex>:
 8011b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b94:	ed2d 8b02 	vpush	{d8}
 8011b98:	b089      	sub	sp, #36	; 0x24
 8011b9a:	ee08 0a10 	vmov	s16, r0
 8011b9e:	9304      	str	r3, [sp, #16]
 8011ba0:	4bbc      	ldr	r3, [pc, #752]	; (8011e94 <__gethex+0x304>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	9301      	str	r3, [sp, #4]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	468b      	mov	fp, r1
 8011baa:	4690      	mov	r8, r2
 8011bac:	f7ee fb10 	bl	80001d0 <strlen>
 8011bb0:	9b01      	ldr	r3, [sp, #4]
 8011bb2:	f8db 2000 	ldr.w	r2, [fp]
 8011bb6:	4403      	add	r3, r0
 8011bb8:	4682      	mov	sl, r0
 8011bba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011bbe:	9305      	str	r3, [sp, #20]
 8011bc0:	1c93      	adds	r3, r2, #2
 8011bc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011bc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011bca:	32fe      	adds	r2, #254	; 0xfe
 8011bcc:	18d1      	adds	r1, r2, r3
 8011bce:	461f      	mov	r7, r3
 8011bd0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011bd4:	9100      	str	r1, [sp, #0]
 8011bd6:	2830      	cmp	r0, #48	; 0x30
 8011bd8:	d0f8      	beq.n	8011bcc <__gethex+0x3c>
 8011bda:	f7ff ffc3 	bl	8011b64 <__hexdig_fun>
 8011bde:	4604      	mov	r4, r0
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d13a      	bne.n	8011c5a <__gethex+0xca>
 8011be4:	9901      	ldr	r1, [sp, #4]
 8011be6:	4652      	mov	r2, sl
 8011be8:	4638      	mov	r0, r7
 8011bea:	f7fe fa0a 	bl	8010002 <strncmp>
 8011bee:	4605      	mov	r5, r0
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d168      	bne.n	8011cc6 <__gethex+0x136>
 8011bf4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011bf8:	eb07 060a 	add.w	r6, r7, sl
 8011bfc:	f7ff ffb2 	bl	8011b64 <__hexdig_fun>
 8011c00:	2800      	cmp	r0, #0
 8011c02:	d062      	beq.n	8011cca <__gethex+0x13a>
 8011c04:	4633      	mov	r3, r6
 8011c06:	7818      	ldrb	r0, [r3, #0]
 8011c08:	2830      	cmp	r0, #48	; 0x30
 8011c0a:	461f      	mov	r7, r3
 8011c0c:	f103 0301 	add.w	r3, r3, #1
 8011c10:	d0f9      	beq.n	8011c06 <__gethex+0x76>
 8011c12:	f7ff ffa7 	bl	8011b64 <__hexdig_fun>
 8011c16:	2301      	movs	r3, #1
 8011c18:	fab0 f480 	clz	r4, r0
 8011c1c:	0964      	lsrs	r4, r4, #5
 8011c1e:	4635      	mov	r5, r6
 8011c20:	9300      	str	r3, [sp, #0]
 8011c22:	463a      	mov	r2, r7
 8011c24:	4616      	mov	r6, r2
 8011c26:	3201      	adds	r2, #1
 8011c28:	7830      	ldrb	r0, [r6, #0]
 8011c2a:	f7ff ff9b 	bl	8011b64 <__hexdig_fun>
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d1f8      	bne.n	8011c24 <__gethex+0x94>
 8011c32:	9901      	ldr	r1, [sp, #4]
 8011c34:	4652      	mov	r2, sl
 8011c36:	4630      	mov	r0, r6
 8011c38:	f7fe f9e3 	bl	8010002 <strncmp>
 8011c3c:	b980      	cbnz	r0, 8011c60 <__gethex+0xd0>
 8011c3e:	b94d      	cbnz	r5, 8011c54 <__gethex+0xc4>
 8011c40:	eb06 050a 	add.w	r5, r6, sl
 8011c44:	462a      	mov	r2, r5
 8011c46:	4616      	mov	r6, r2
 8011c48:	3201      	adds	r2, #1
 8011c4a:	7830      	ldrb	r0, [r6, #0]
 8011c4c:	f7ff ff8a 	bl	8011b64 <__hexdig_fun>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d1f8      	bne.n	8011c46 <__gethex+0xb6>
 8011c54:	1bad      	subs	r5, r5, r6
 8011c56:	00ad      	lsls	r5, r5, #2
 8011c58:	e004      	b.n	8011c64 <__gethex+0xd4>
 8011c5a:	2400      	movs	r4, #0
 8011c5c:	4625      	mov	r5, r4
 8011c5e:	e7e0      	b.n	8011c22 <__gethex+0x92>
 8011c60:	2d00      	cmp	r5, #0
 8011c62:	d1f7      	bne.n	8011c54 <__gethex+0xc4>
 8011c64:	7833      	ldrb	r3, [r6, #0]
 8011c66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011c6a:	2b50      	cmp	r3, #80	; 0x50
 8011c6c:	d13b      	bne.n	8011ce6 <__gethex+0x156>
 8011c6e:	7873      	ldrb	r3, [r6, #1]
 8011c70:	2b2b      	cmp	r3, #43	; 0x2b
 8011c72:	d02c      	beq.n	8011cce <__gethex+0x13e>
 8011c74:	2b2d      	cmp	r3, #45	; 0x2d
 8011c76:	d02e      	beq.n	8011cd6 <__gethex+0x146>
 8011c78:	1c71      	adds	r1, r6, #1
 8011c7a:	f04f 0900 	mov.w	r9, #0
 8011c7e:	7808      	ldrb	r0, [r1, #0]
 8011c80:	f7ff ff70 	bl	8011b64 <__hexdig_fun>
 8011c84:	1e43      	subs	r3, r0, #1
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	2b18      	cmp	r3, #24
 8011c8a:	d82c      	bhi.n	8011ce6 <__gethex+0x156>
 8011c8c:	f1a0 0210 	sub.w	r2, r0, #16
 8011c90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011c94:	f7ff ff66 	bl	8011b64 <__hexdig_fun>
 8011c98:	1e43      	subs	r3, r0, #1
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	2b18      	cmp	r3, #24
 8011c9e:	d91d      	bls.n	8011cdc <__gethex+0x14c>
 8011ca0:	f1b9 0f00 	cmp.w	r9, #0
 8011ca4:	d000      	beq.n	8011ca8 <__gethex+0x118>
 8011ca6:	4252      	negs	r2, r2
 8011ca8:	4415      	add	r5, r2
 8011caa:	f8cb 1000 	str.w	r1, [fp]
 8011cae:	b1e4      	cbz	r4, 8011cea <__gethex+0x15a>
 8011cb0:	9b00      	ldr	r3, [sp, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	bf14      	ite	ne
 8011cb6:	2700      	movne	r7, #0
 8011cb8:	2706      	moveq	r7, #6
 8011cba:	4638      	mov	r0, r7
 8011cbc:	b009      	add	sp, #36	; 0x24
 8011cbe:	ecbd 8b02 	vpop	{d8}
 8011cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc6:	463e      	mov	r6, r7
 8011cc8:	4625      	mov	r5, r4
 8011cca:	2401      	movs	r4, #1
 8011ccc:	e7ca      	b.n	8011c64 <__gethex+0xd4>
 8011cce:	f04f 0900 	mov.w	r9, #0
 8011cd2:	1cb1      	adds	r1, r6, #2
 8011cd4:	e7d3      	b.n	8011c7e <__gethex+0xee>
 8011cd6:	f04f 0901 	mov.w	r9, #1
 8011cda:	e7fa      	b.n	8011cd2 <__gethex+0x142>
 8011cdc:	230a      	movs	r3, #10
 8011cde:	fb03 0202 	mla	r2, r3, r2, r0
 8011ce2:	3a10      	subs	r2, #16
 8011ce4:	e7d4      	b.n	8011c90 <__gethex+0x100>
 8011ce6:	4631      	mov	r1, r6
 8011ce8:	e7df      	b.n	8011caa <__gethex+0x11a>
 8011cea:	1bf3      	subs	r3, r6, r7
 8011cec:	3b01      	subs	r3, #1
 8011cee:	4621      	mov	r1, r4
 8011cf0:	2b07      	cmp	r3, #7
 8011cf2:	dc0b      	bgt.n	8011d0c <__gethex+0x17c>
 8011cf4:	ee18 0a10 	vmov	r0, s16
 8011cf8:	f000 fa90 	bl	801221c <_Balloc>
 8011cfc:	4604      	mov	r4, r0
 8011cfe:	b940      	cbnz	r0, 8011d12 <__gethex+0x182>
 8011d00:	4b65      	ldr	r3, [pc, #404]	; (8011e98 <__gethex+0x308>)
 8011d02:	4602      	mov	r2, r0
 8011d04:	21de      	movs	r1, #222	; 0xde
 8011d06:	4865      	ldr	r0, [pc, #404]	; (8011e9c <__gethex+0x30c>)
 8011d08:	f001 f990 	bl	801302c <__assert_func>
 8011d0c:	3101      	adds	r1, #1
 8011d0e:	105b      	asrs	r3, r3, #1
 8011d10:	e7ee      	b.n	8011cf0 <__gethex+0x160>
 8011d12:	f100 0914 	add.w	r9, r0, #20
 8011d16:	f04f 0b00 	mov.w	fp, #0
 8011d1a:	f1ca 0301 	rsb	r3, sl, #1
 8011d1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011d22:	f8cd b000 	str.w	fp, [sp]
 8011d26:	9306      	str	r3, [sp, #24]
 8011d28:	42b7      	cmp	r7, r6
 8011d2a:	d340      	bcc.n	8011dae <__gethex+0x21e>
 8011d2c:	9802      	ldr	r0, [sp, #8]
 8011d2e:	9b00      	ldr	r3, [sp, #0]
 8011d30:	f840 3b04 	str.w	r3, [r0], #4
 8011d34:	eba0 0009 	sub.w	r0, r0, r9
 8011d38:	1080      	asrs	r0, r0, #2
 8011d3a:	0146      	lsls	r6, r0, #5
 8011d3c:	6120      	str	r0, [r4, #16]
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f000 fb62 	bl	8012408 <__hi0bits>
 8011d44:	1a30      	subs	r0, r6, r0
 8011d46:	f8d8 6000 	ldr.w	r6, [r8]
 8011d4a:	42b0      	cmp	r0, r6
 8011d4c:	dd63      	ble.n	8011e16 <__gethex+0x286>
 8011d4e:	1b87      	subs	r7, r0, r6
 8011d50:	4639      	mov	r1, r7
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 fefc 	bl	8012b50 <__any_on>
 8011d58:	4682      	mov	sl, r0
 8011d5a:	b1a8      	cbz	r0, 8011d88 <__gethex+0x1f8>
 8011d5c:	1e7b      	subs	r3, r7, #1
 8011d5e:	1159      	asrs	r1, r3, #5
 8011d60:	f003 021f 	and.w	r2, r3, #31
 8011d64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011d68:	f04f 0a01 	mov.w	sl, #1
 8011d6c:	fa0a f202 	lsl.w	r2, sl, r2
 8011d70:	420a      	tst	r2, r1
 8011d72:	d009      	beq.n	8011d88 <__gethex+0x1f8>
 8011d74:	4553      	cmp	r3, sl
 8011d76:	dd05      	ble.n	8011d84 <__gethex+0x1f4>
 8011d78:	1eb9      	subs	r1, r7, #2
 8011d7a:	4620      	mov	r0, r4
 8011d7c:	f000 fee8 	bl	8012b50 <__any_on>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	d145      	bne.n	8011e10 <__gethex+0x280>
 8011d84:	f04f 0a02 	mov.w	sl, #2
 8011d88:	4639      	mov	r1, r7
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f7ff fe98 	bl	8011ac0 <rshift>
 8011d90:	443d      	add	r5, r7
 8011d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011d96:	42ab      	cmp	r3, r5
 8011d98:	da4c      	bge.n	8011e34 <__gethex+0x2a4>
 8011d9a:	ee18 0a10 	vmov	r0, s16
 8011d9e:	4621      	mov	r1, r4
 8011da0:	f000 fa7c 	bl	801229c <_Bfree>
 8011da4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011da6:	2300      	movs	r3, #0
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	27a3      	movs	r7, #163	; 0xa3
 8011dac:	e785      	b.n	8011cba <__gethex+0x12a>
 8011dae:	1e73      	subs	r3, r6, #1
 8011db0:	9a05      	ldr	r2, [sp, #20]
 8011db2:	9303      	str	r3, [sp, #12]
 8011db4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d019      	beq.n	8011df0 <__gethex+0x260>
 8011dbc:	f1bb 0f20 	cmp.w	fp, #32
 8011dc0:	d107      	bne.n	8011dd2 <__gethex+0x242>
 8011dc2:	9b02      	ldr	r3, [sp, #8]
 8011dc4:	9a00      	ldr	r2, [sp, #0]
 8011dc6:	f843 2b04 	str.w	r2, [r3], #4
 8011dca:	9302      	str	r3, [sp, #8]
 8011dcc:	2300      	movs	r3, #0
 8011dce:	9300      	str	r3, [sp, #0]
 8011dd0:	469b      	mov	fp, r3
 8011dd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011dd6:	f7ff fec5 	bl	8011b64 <__hexdig_fun>
 8011dda:	9b00      	ldr	r3, [sp, #0]
 8011ddc:	f000 000f 	and.w	r0, r0, #15
 8011de0:	fa00 f00b 	lsl.w	r0, r0, fp
 8011de4:	4303      	orrs	r3, r0
 8011de6:	9300      	str	r3, [sp, #0]
 8011de8:	f10b 0b04 	add.w	fp, fp, #4
 8011dec:	9b03      	ldr	r3, [sp, #12]
 8011dee:	e00d      	b.n	8011e0c <__gethex+0x27c>
 8011df0:	9b03      	ldr	r3, [sp, #12]
 8011df2:	9a06      	ldr	r2, [sp, #24]
 8011df4:	4413      	add	r3, r2
 8011df6:	42bb      	cmp	r3, r7
 8011df8:	d3e0      	bcc.n	8011dbc <__gethex+0x22c>
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	9901      	ldr	r1, [sp, #4]
 8011dfe:	9307      	str	r3, [sp, #28]
 8011e00:	4652      	mov	r2, sl
 8011e02:	f7fe f8fe 	bl	8010002 <strncmp>
 8011e06:	9b07      	ldr	r3, [sp, #28]
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	d1d7      	bne.n	8011dbc <__gethex+0x22c>
 8011e0c:	461e      	mov	r6, r3
 8011e0e:	e78b      	b.n	8011d28 <__gethex+0x198>
 8011e10:	f04f 0a03 	mov.w	sl, #3
 8011e14:	e7b8      	b.n	8011d88 <__gethex+0x1f8>
 8011e16:	da0a      	bge.n	8011e2e <__gethex+0x29e>
 8011e18:	1a37      	subs	r7, r6, r0
 8011e1a:	4621      	mov	r1, r4
 8011e1c:	ee18 0a10 	vmov	r0, s16
 8011e20:	463a      	mov	r2, r7
 8011e22:	f000 fc57 	bl	80126d4 <__lshift>
 8011e26:	1bed      	subs	r5, r5, r7
 8011e28:	4604      	mov	r4, r0
 8011e2a:	f100 0914 	add.w	r9, r0, #20
 8011e2e:	f04f 0a00 	mov.w	sl, #0
 8011e32:	e7ae      	b.n	8011d92 <__gethex+0x202>
 8011e34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011e38:	42a8      	cmp	r0, r5
 8011e3a:	dd72      	ble.n	8011f22 <__gethex+0x392>
 8011e3c:	1b45      	subs	r5, r0, r5
 8011e3e:	42ae      	cmp	r6, r5
 8011e40:	dc36      	bgt.n	8011eb0 <__gethex+0x320>
 8011e42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011e46:	2b02      	cmp	r3, #2
 8011e48:	d02a      	beq.n	8011ea0 <__gethex+0x310>
 8011e4a:	2b03      	cmp	r3, #3
 8011e4c:	d02c      	beq.n	8011ea8 <__gethex+0x318>
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d115      	bne.n	8011e7e <__gethex+0x2ee>
 8011e52:	42ae      	cmp	r6, r5
 8011e54:	d113      	bne.n	8011e7e <__gethex+0x2ee>
 8011e56:	2e01      	cmp	r6, #1
 8011e58:	d10b      	bne.n	8011e72 <__gethex+0x2e2>
 8011e5a:	9a04      	ldr	r2, [sp, #16]
 8011e5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011e60:	6013      	str	r3, [r2, #0]
 8011e62:	2301      	movs	r3, #1
 8011e64:	6123      	str	r3, [r4, #16]
 8011e66:	f8c9 3000 	str.w	r3, [r9]
 8011e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e6c:	2762      	movs	r7, #98	; 0x62
 8011e6e:	601c      	str	r4, [r3, #0]
 8011e70:	e723      	b.n	8011cba <__gethex+0x12a>
 8011e72:	1e71      	subs	r1, r6, #1
 8011e74:	4620      	mov	r0, r4
 8011e76:	f000 fe6b 	bl	8012b50 <__any_on>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	d1ed      	bne.n	8011e5a <__gethex+0x2ca>
 8011e7e:	ee18 0a10 	vmov	r0, s16
 8011e82:	4621      	mov	r1, r4
 8011e84:	f000 fa0a 	bl	801229c <_Bfree>
 8011e88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	6013      	str	r3, [r2, #0]
 8011e8e:	2750      	movs	r7, #80	; 0x50
 8011e90:	e713      	b.n	8011cba <__gethex+0x12a>
 8011e92:	bf00      	nop
 8011e94:	08015290 	.word	0x08015290
 8011e98:	08015214 	.word	0x08015214
 8011e9c:	08015225 	.word	0x08015225
 8011ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1eb      	bne.n	8011e7e <__gethex+0x2ee>
 8011ea6:	e7d8      	b.n	8011e5a <__gethex+0x2ca>
 8011ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1d5      	bne.n	8011e5a <__gethex+0x2ca>
 8011eae:	e7e6      	b.n	8011e7e <__gethex+0x2ee>
 8011eb0:	1e6f      	subs	r7, r5, #1
 8011eb2:	f1ba 0f00 	cmp.w	sl, #0
 8011eb6:	d131      	bne.n	8011f1c <__gethex+0x38c>
 8011eb8:	b127      	cbz	r7, 8011ec4 <__gethex+0x334>
 8011eba:	4639      	mov	r1, r7
 8011ebc:	4620      	mov	r0, r4
 8011ebe:	f000 fe47 	bl	8012b50 <__any_on>
 8011ec2:	4682      	mov	sl, r0
 8011ec4:	117b      	asrs	r3, r7, #5
 8011ec6:	2101      	movs	r1, #1
 8011ec8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011ecc:	f007 071f 	and.w	r7, r7, #31
 8011ed0:	fa01 f707 	lsl.w	r7, r1, r7
 8011ed4:	421f      	tst	r7, r3
 8011ed6:	4629      	mov	r1, r5
 8011ed8:	4620      	mov	r0, r4
 8011eda:	bf18      	it	ne
 8011edc:	f04a 0a02 	orrne.w	sl, sl, #2
 8011ee0:	1b76      	subs	r6, r6, r5
 8011ee2:	f7ff fded 	bl	8011ac0 <rshift>
 8011ee6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011eea:	2702      	movs	r7, #2
 8011eec:	f1ba 0f00 	cmp.w	sl, #0
 8011ef0:	d048      	beq.n	8011f84 <__gethex+0x3f4>
 8011ef2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ef6:	2b02      	cmp	r3, #2
 8011ef8:	d015      	beq.n	8011f26 <__gethex+0x396>
 8011efa:	2b03      	cmp	r3, #3
 8011efc:	d017      	beq.n	8011f2e <__gethex+0x39e>
 8011efe:	2b01      	cmp	r3, #1
 8011f00:	d109      	bne.n	8011f16 <__gethex+0x386>
 8011f02:	f01a 0f02 	tst.w	sl, #2
 8011f06:	d006      	beq.n	8011f16 <__gethex+0x386>
 8011f08:	f8d9 0000 	ldr.w	r0, [r9]
 8011f0c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011f10:	f01a 0f01 	tst.w	sl, #1
 8011f14:	d10e      	bne.n	8011f34 <__gethex+0x3a4>
 8011f16:	f047 0710 	orr.w	r7, r7, #16
 8011f1a:	e033      	b.n	8011f84 <__gethex+0x3f4>
 8011f1c:	f04f 0a01 	mov.w	sl, #1
 8011f20:	e7d0      	b.n	8011ec4 <__gethex+0x334>
 8011f22:	2701      	movs	r7, #1
 8011f24:	e7e2      	b.n	8011eec <__gethex+0x35c>
 8011f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f28:	f1c3 0301 	rsb	r3, r3, #1
 8011f2c:	9315      	str	r3, [sp, #84]	; 0x54
 8011f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d0f0      	beq.n	8011f16 <__gethex+0x386>
 8011f34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011f38:	f104 0314 	add.w	r3, r4, #20
 8011f3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011f40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011f44:	f04f 0c00 	mov.w	ip, #0
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011f52:	d01c      	beq.n	8011f8e <__gethex+0x3fe>
 8011f54:	3201      	adds	r2, #1
 8011f56:	6002      	str	r2, [r0, #0]
 8011f58:	2f02      	cmp	r7, #2
 8011f5a:	f104 0314 	add.w	r3, r4, #20
 8011f5e:	d13f      	bne.n	8011fe0 <__gethex+0x450>
 8011f60:	f8d8 2000 	ldr.w	r2, [r8]
 8011f64:	3a01      	subs	r2, #1
 8011f66:	42b2      	cmp	r2, r6
 8011f68:	d10a      	bne.n	8011f80 <__gethex+0x3f0>
 8011f6a:	1171      	asrs	r1, r6, #5
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011f72:	f006 061f 	and.w	r6, r6, #31
 8011f76:	fa02 f606 	lsl.w	r6, r2, r6
 8011f7a:	421e      	tst	r6, r3
 8011f7c:	bf18      	it	ne
 8011f7e:	4617      	movne	r7, r2
 8011f80:	f047 0720 	orr.w	r7, r7, #32
 8011f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f86:	601c      	str	r4, [r3, #0]
 8011f88:	9b04      	ldr	r3, [sp, #16]
 8011f8a:	601d      	str	r5, [r3, #0]
 8011f8c:	e695      	b.n	8011cba <__gethex+0x12a>
 8011f8e:	4299      	cmp	r1, r3
 8011f90:	f843 cc04 	str.w	ip, [r3, #-4]
 8011f94:	d8d8      	bhi.n	8011f48 <__gethex+0x3b8>
 8011f96:	68a3      	ldr	r3, [r4, #8]
 8011f98:	459b      	cmp	fp, r3
 8011f9a:	db19      	blt.n	8011fd0 <__gethex+0x440>
 8011f9c:	6861      	ldr	r1, [r4, #4]
 8011f9e:	ee18 0a10 	vmov	r0, s16
 8011fa2:	3101      	adds	r1, #1
 8011fa4:	f000 f93a 	bl	801221c <_Balloc>
 8011fa8:	4681      	mov	r9, r0
 8011faa:	b918      	cbnz	r0, 8011fb4 <__gethex+0x424>
 8011fac:	4b1a      	ldr	r3, [pc, #104]	; (8012018 <__gethex+0x488>)
 8011fae:	4602      	mov	r2, r0
 8011fb0:	2184      	movs	r1, #132	; 0x84
 8011fb2:	e6a8      	b.n	8011d06 <__gethex+0x176>
 8011fb4:	6922      	ldr	r2, [r4, #16]
 8011fb6:	3202      	adds	r2, #2
 8011fb8:	f104 010c 	add.w	r1, r4, #12
 8011fbc:	0092      	lsls	r2, r2, #2
 8011fbe:	300c      	adds	r0, #12
 8011fc0:	f000 f91e 	bl	8012200 <memcpy>
 8011fc4:	4621      	mov	r1, r4
 8011fc6:	ee18 0a10 	vmov	r0, s16
 8011fca:	f000 f967 	bl	801229c <_Bfree>
 8011fce:	464c      	mov	r4, r9
 8011fd0:	6923      	ldr	r3, [r4, #16]
 8011fd2:	1c5a      	adds	r2, r3, #1
 8011fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011fd8:	6122      	str	r2, [r4, #16]
 8011fda:	2201      	movs	r2, #1
 8011fdc:	615a      	str	r2, [r3, #20]
 8011fde:	e7bb      	b.n	8011f58 <__gethex+0x3c8>
 8011fe0:	6922      	ldr	r2, [r4, #16]
 8011fe2:	455a      	cmp	r2, fp
 8011fe4:	dd0b      	ble.n	8011ffe <__gethex+0x46e>
 8011fe6:	2101      	movs	r1, #1
 8011fe8:	4620      	mov	r0, r4
 8011fea:	f7ff fd69 	bl	8011ac0 <rshift>
 8011fee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ff2:	3501      	adds	r5, #1
 8011ff4:	42ab      	cmp	r3, r5
 8011ff6:	f6ff aed0 	blt.w	8011d9a <__gethex+0x20a>
 8011ffa:	2701      	movs	r7, #1
 8011ffc:	e7c0      	b.n	8011f80 <__gethex+0x3f0>
 8011ffe:	f016 061f 	ands.w	r6, r6, #31
 8012002:	d0fa      	beq.n	8011ffa <__gethex+0x46a>
 8012004:	449a      	add	sl, r3
 8012006:	f1c6 0620 	rsb	r6, r6, #32
 801200a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801200e:	f000 f9fb 	bl	8012408 <__hi0bits>
 8012012:	42b0      	cmp	r0, r6
 8012014:	dbe7      	blt.n	8011fe6 <__gethex+0x456>
 8012016:	e7f0      	b.n	8011ffa <__gethex+0x46a>
 8012018:	08015214 	.word	0x08015214

0801201c <L_shift>:
 801201c:	f1c2 0208 	rsb	r2, r2, #8
 8012020:	0092      	lsls	r2, r2, #2
 8012022:	b570      	push	{r4, r5, r6, lr}
 8012024:	f1c2 0620 	rsb	r6, r2, #32
 8012028:	6843      	ldr	r3, [r0, #4]
 801202a:	6804      	ldr	r4, [r0, #0]
 801202c:	fa03 f506 	lsl.w	r5, r3, r6
 8012030:	432c      	orrs	r4, r5
 8012032:	40d3      	lsrs	r3, r2
 8012034:	6004      	str	r4, [r0, #0]
 8012036:	f840 3f04 	str.w	r3, [r0, #4]!
 801203a:	4288      	cmp	r0, r1
 801203c:	d3f4      	bcc.n	8012028 <L_shift+0xc>
 801203e:	bd70      	pop	{r4, r5, r6, pc}

08012040 <__match>:
 8012040:	b530      	push	{r4, r5, lr}
 8012042:	6803      	ldr	r3, [r0, #0]
 8012044:	3301      	adds	r3, #1
 8012046:	f811 4b01 	ldrb.w	r4, [r1], #1
 801204a:	b914      	cbnz	r4, 8012052 <__match+0x12>
 801204c:	6003      	str	r3, [r0, #0]
 801204e:	2001      	movs	r0, #1
 8012050:	bd30      	pop	{r4, r5, pc}
 8012052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012056:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801205a:	2d19      	cmp	r5, #25
 801205c:	bf98      	it	ls
 801205e:	3220      	addls	r2, #32
 8012060:	42a2      	cmp	r2, r4
 8012062:	d0f0      	beq.n	8012046 <__match+0x6>
 8012064:	2000      	movs	r0, #0
 8012066:	e7f3      	b.n	8012050 <__match+0x10>

08012068 <__hexnan>:
 8012068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801206c:	680b      	ldr	r3, [r1, #0]
 801206e:	6801      	ldr	r1, [r0, #0]
 8012070:	115e      	asrs	r6, r3, #5
 8012072:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012076:	f013 031f 	ands.w	r3, r3, #31
 801207a:	b087      	sub	sp, #28
 801207c:	bf18      	it	ne
 801207e:	3604      	addne	r6, #4
 8012080:	2500      	movs	r5, #0
 8012082:	1f37      	subs	r7, r6, #4
 8012084:	4682      	mov	sl, r0
 8012086:	4690      	mov	r8, r2
 8012088:	9301      	str	r3, [sp, #4]
 801208a:	f846 5c04 	str.w	r5, [r6, #-4]
 801208e:	46b9      	mov	r9, r7
 8012090:	463c      	mov	r4, r7
 8012092:	9502      	str	r5, [sp, #8]
 8012094:	46ab      	mov	fp, r5
 8012096:	784a      	ldrb	r2, [r1, #1]
 8012098:	1c4b      	adds	r3, r1, #1
 801209a:	9303      	str	r3, [sp, #12]
 801209c:	b342      	cbz	r2, 80120f0 <__hexnan+0x88>
 801209e:	4610      	mov	r0, r2
 80120a0:	9105      	str	r1, [sp, #20]
 80120a2:	9204      	str	r2, [sp, #16]
 80120a4:	f7ff fd5e 	bl	8011b64 <__hexdig_fun>
 80120a8:	2800      	cmp	r0, #0
 80120aa:	d14f      	bne.n	801214c <__hexnan+0xe4>
 80120ac:	9a04      	ldr	r2, [sp, #16]
 80120ae:	9905      	ldr	r1, [sp, #20]
 80120b0:	2a20      	cmp	r2, #32
 80120b2:	d818      	bhi.n	80120e6 <__hexnan+0x7e>
 80120b4:	9b02      	ldr	r3, [sp, #8]
 80120b6:	459b      	cmp	fp, r3
 80120b8:	dd13      	ble.n	80120e2 <__hexnan+0x7a>
 80120ba:	454c      	cmp	r4, r9
 80120bc:	d206      	bcs.n	80120cc <__hexnan+0x64>
 80120be:	2d07      	cmp	r5, #7
 80120c0:	dc04      	bgt.n	80120cc <__hexnan+0x64>
 80120c2:	462a      	mov	r2, r5
 80120c4:	4649      	mov	r1, r9
 80120c6:	4620      	mov	r0, r4
 80120c8:	f7ff ffa8 	bl	801201c <L_shift>
 80120cc:	4544      	cmp	r4, r8
 80120ce:	d950      	bls.n	8012172 <__hexnan+0x10a>
 80120d0:	2300      	movs	r3, #0
 80120d2:	f1a4 0904 	sub.w	r9, r4, #4
 80120d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80120da:	f8cd b008 	str.w	fp, [sp, #8]
 80120de:	464c      	mov	r4, r9
 80120e0:	461d      	mov	r5, r3
 80120e2:	9903      	ldr	r1, [sp, #12]
 80120e4:	e7d7      	b.n	8012096 <__hexnan+0x2e>
 80120e6:	2a29      	cmp	r2, #41	; 0x29
 80120e8:	d156      	bne.n	8012198 <__hexnan+0x130>
 80120ea:	3102      	adds	r1, #2
 80120ec:	f8ca 1000 	str.w	r1, [sl]
 80120f0:	f1bb 0f00 	cmp.w	fp, #0
 80120f4:	d050      	beq.n	8012198 <__hexnan+0x130>
 80120f6:	454c      	cmp	r4, r9
 80120f8:	d206      	bcs.n	8012108 <__hexnan+0xa0>
 80120fa:	2d07      	cmp	r5, #7
 80120fc:	dc04      	bgt.n	8012108 <__hexnan+0xa0>
 80120fe:	462a      	mov	r2, r5
 8012100:	4649      	mov	r1, r9
 8012102:	4620      	mov	r0, r4
 8012104:	f7ff ff8a 	bl	801201c <L_shift>
 8012108:	4544      	cmp	r4, r8
 801210a:	d934      	bls.n	8012176 <__hexnan+0x10e>
 801210c:	f1a8 0204 	sub.w	r2, r8, #4
 8012110:	4623      	mov	r3, r4
 8012112:	f853 1b04 	ldr.w	r1, [r3], #4
 8012116:	f842 1f04 	str.w	r1, [r2, #4]!
 801211a:	429f      	cmp	r7, r3
 801211c:	d2f9      	bcs.n	8012112 <__hexnan+0xaa>
 801211e:	1b3b      	subs	r3, r7, r4
 8012120:	f023 0303 	bic.w	r3, r3, #3
 8012124:	3304      	adds	r3, #4
 8012126:	3401      	adds	r4, #1
 8012128:	3e03      	subs	r6, #3
 801212a:	42b4      	cmp	r4, r6
 801212c:	bf88      	it	hi
 801212e:	2304      	movhi	r3, #4
 8012130:	4443      	add	r3, r8
 8012132:	2200      	movs	r2, #0
 8012134:	f843 2b04 	str.w	r2, [r3], #4
 8012138:	429f      	cmp	r7, r3
 801213a:	d2fb      	bcs.n	8012134 <__hexnan+0xcc>
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	b91b      	cbnz	r3, 8012148 <__hexnan+0xe0>
 8012140:	4547      	cmp	r7, r8
 8012142:	d127      	bne.n	8012194 <__hexnan+0x12c>
 8012144:	2301      	movs	r3, #1
 8012146:	603b      	str	r3, [r7, #0]
 8012148:	2005      	movs	r0, #5
 801214a:	e026      	b.n	801219a <__hexnan+0x132>
 801214c:	3501      	adds	r5, #1
 801214e:	2d08      	cmp	r5, #8
 8012150:	f10b 0b01 	add.w	fp, fp, #1
 8012154:	dd06      	ble.n	8012164 <__hexnan+0xfc>
 8012156:	4544      	cmp	r4, r8
 8012158:	d9c3      	bls.n	80120e2 <__hexnan+0x7a>
 801215a:	2300      	movs	r3, #0
 801215c:	f844 3c04 	str.w	r3, [r4, #-4]
 8012160:	2501      	movs	r5, #1
 8012162:	3c04      	subs	r4, #4
 8012164:	6822      	ldr	r2, [r4, #0]
 8012166:	f000 000f 	and.w	r0, r0, #15
 801216a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801216e:	6022      	str	r2, [r4, #0]
 8012170:	e7b7      	b.n	80120e2 <__hexnan+0x7a>
 8012172:	2508      	movs	r5, #8
 8012174:	e7b5      	b.n	80120e2 <__hexnan+0x7a>
 8012176:	9b01      	ldr	r3, [sp, #4]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d0df      	beq.n	801213c <__hexnan+0xd4>
 801217c:	f04f 32ff 	mov.w	r2, #4294967295
 8012180:	f1c3 0320 	rsb	r3, r3, #32
 8012184:	fa22 f303 	lsr.w	r3, r2, r3
 8012188:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801218c:	401a      	ands	r2, r3
 801218e:	f846 2c04 	str.w	r2, [r6, #-4]
 8012192:	e7d3      	b.n	801213c <__hexnan+0xd4>
 8012194:	3f04      	subs	r7, #4
 8012196:	e7d1      	b.n	801213c <__hexnan+0xd4>
 8012198:	2004      	movs	r0, #4
 801219a:	b007      	add	sp, #28
 801219c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080121a0 <_localeconv_r>:
 80121a0:	4800      	ldr	r0, [pc, #0]	; (80121a4 <_localeconv_r+0x4>)
 80121a2:	4770      	bx	lr
 80121a4:	200001b0 	.word	0x200001b0

080121a8 <_lseek_r>:
 80121a8:	b538      	push	{r3, r4, r5, lr}
 80121aa:	4d07      	ldr	r5, [pc, #28]	; (80121c8 <_lseek_r+0x20>)
 80121ac:	4604      	mov	r4, r0
 80121ae:	4608      	mov	r0, r1
 80121b0:	4611      	mov	r1, r2
 80121b2:	2200      	movs	r2, #0
 80121b4:	602a      	str	r2, [r5, #0]
 80121b6:	461a      	mov	r2, r3
 80121b8:	f7f2 fd7e 	bl	8004cb8 <_lseek>
 80121bc:	1c43      	adds	r3, r0, #1
 80121be:	d102      	bne.n	80121c6 <_lseek_r+0x1e>
 80121c0:	682b      	ldr	r3, [r5, #0]
 80121c2:	b103      	cbz	r3, 80121c6 <_lseek_r+0x1e>
 80121c4:	6023      	str	r3, [r4, #0]
 80121c6:	bd38      	pop	{r3, r4, r5, pc}
 80121c8:	20004b34 	.word	0x20004b34

080121cc <malloc>:
 80121cc:	4b02      	ldr	r3, [pc, #8]	; (80121d8 <malloc+0xc>)
 80121ce:	4601      	mov	r1, r0
 80121d0:	6818      	ldr	r0, [r3, #0]
 80121d2:	f000 bd3d 	b.w	8012c50 <_malloc_r>
 80121d6:	bf00      	nop
 80121d8:	20000058 	.word	0x20000058

080121dc <__ascii_mbtowc>:
 80121dc:	b082      	sub	sp, #8
 80121de:	b901      	cbnz	r1, 80121e2 <__ascii_mbtowc+0x6>
 80121e0:	a901      	add	r1, sp, #4
 80121e2:	b142      	cbz	r2, 80121f6 <__ascii_mbtowc+0x1a>
 80121e4:	b14b      	cbz	r3, 80121fa <__ascii_mbtowc+0x1e>
 80121e6:	7813      	ldrb	r3, [r2, #0]
 80121e8:	600b      	str	r3, [r1, #0]
 80121ea:	7812      	ldrb	r2, [r2, #0]
 80121ec:	1e10      	subs	r0, r2, #0
 80121ee:	bf18      	it	ne
 80121f0:	2001      	movne	r0, #1
 80121f2:	b002      	add	sp, #8
 80121f4:	4770      	bx	lr
 80121f6:	4610      	mov	r0, r2
 80121f8:	e7fb      	b.n	80121f2 <__ascii_mbtowc+0x16>
 80121fa:	f06f 0001 	mvn.w	r0, #1
 80121fe:	e7f8      	b.n	80121f2 <__ascii_mbtowc+0x16>

08012200 <memcpy>:
 8012200:	440a      	add	r2, r1
 8012202:	4291      	cmp	r1, r2
 8012204:	f100 33ff 	add.w	r3, r0, #4294967295
 8012208:	d100      	bne.n	801220c <memcpy+0xc>
 801220a:	4770      	bx	lr
 801220c:	b510      	push	{r4, lr}
 801220e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012216:	4291      	cmp	r1, r2
 8012218:	d1f9      	bne.n	801220e <memcpy+0xe>
 801221a:	bd10      	pop	{r4, pc}

0801221c <_Balloc>:
 801221c:	b570      	push	{r4, r5, r6, lr}
 801221e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012220:	4604      	mov	r4, r0
 8012222:	460d      	mov	r5, r1
 8012224:	b976      	cbnz	r6, 8012244 <_Balloc+0x28>
 8012226:	2010      	movs	r0, #16
 8012228:	f7ff ffd0 	bl	80121cc <malloc>
 801222c:	4602      	mov	r2, r0
 801222e:	6260      	str	r0, [r4, #36]	; 0x24
 8012230:	b920      	cbnz	r0, 801223c <_Balloc+0x20>
 8012232:	4b18      	ldr	r3, [pc, #96]	; (8012294 <_Balloc+0x78>)
 8012234:	4818      	ldr	r0, [pc, #96]	; (8012298 <_Balloc+0x7c>)
 8012236:	2166      	movs	r1, #102	; 0x66
 8012238:	f000 fef8 	bl	801302c <__assert_func>
 801223c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012240:	6006      	str	r6, [r0, #0]
 8012242:	60c6      	str	r6, [r0, #12]
 8012244:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012246:	68f3      	ldr	r3, [r6, #12]
 8012248:	b183      	cbz	r3, 801226c <_Balloc+0x50>
 801224a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801224c:	68db      	ldr	r3, [r3, #12]
 801224e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012252:	b9b8      	cbnz	r0, 8012284 <_Balloc+0x68>
 8012254:	2101      	movs	r1, #1
 8012256:	fa01 f605 	lsl.w	r6, r1, r5
 801225a:	1d72      	adds	r2, r6, #5
 801225c:	0092      	lsls	r2, r2, #2
 801225e:	4620      	mov	r0, r4
 8012260:	f000 fc97 	bl	8012b92 <_calloc_r>
 8012264:	b160      	cbz	r0, 8012280 <_Balloc+0x64>
 8012266:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801226a:	e00e      	b.n	801228a <_Balloc+0x6e>
 801226c:	2221      	movs	r2, #33	; 0x21
 801226e:	2104      	movs	r1, #4
 8012270:	4620      	mov	r0, r4
 8012272:	f000 fc8e 	bl	8012b92 <_calloc_r>
 8012276:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012278:	60f0      	str	r0, [r6, #12]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d1e4      	bne.n	801224a <_Balloc+0x2e>
 8012280:	2000      	movs	r0, #0
 8012282:	bd70      	pop	{r4, r5, r6, pc}
 8012284:	6802      	ldr	r2, [r0, #0]
 8012286:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801228a:	2300      	movs	r3, #0
 801228c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012290:	e7f7      	b.n	8012282 <_Balloc+0x66>
 8012292:	bf00      	nop
 8012294:	0801519e 	.word	0x0801519e
 8012298:	080152a4 	.word	0x080152a4

0801229c <_Bfree>:
 801229c:	b570      	push	{r4, r5, r6, lr}
 801229e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122a0:	4605      	mov	r5, r0
 80122a2:	460c      	mov	r4, r1
 80122a4:	b976      	cbnz	r6, 80122c4 <_Bfree+0x28>
 80122a6:	2010      	movs	r0, #16
 80122a8:	f7ff ff90 	bl	80121cc <malloc>
 80122ac:	4602      	mov	r2, r0
 80122ae:	6268      	str	r0, [r5, #36]	; 0x24
 80122b0:	b920      	cbnz	r0, 80122bc <_Bfree+0x20>
 80122b2:	4b09      	ldr	r3, [pc, #36]	; (80122d8 <_Bfree+0x3c>)
 80122b4:	4809      	ldr	r0, [pc, #36]	; (80122dc <_Bfree+0x40>)
 80122b6:	218a      	movs	r1, #138	; 0x8a
 80122b8:	f000 feb8 	bl	801302c <__assert_func>
 80122bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80122c0:	6006      	str	r6, [r0, #0]
 80122c2:	60c6      	str	r6, [r0, #12]
 80122c4:	b13c      	cbz	r4, 80122d6 <_Bfree+0x3a>
 80122c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80122c8:	6862      	ldr	r2, [r4, #4]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80122d0:	6021      	str	r1, [r4, #0]
 80122d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80122d6:	bd70      	pop	{r4, r5, r6, pc}
 80122d8:	0801519e 	.word	0x0801519e
 80122dc:	080152a4 	.word	0x080152a4

080122e0 <__multadd>:
 80122e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e4:	690e      	ldr	r6, [r1, #16]
 80122e6:	4607      	mov	r7, r0
 80122e8:	4698      	mov	r8, r3
 80122ea:	460c      	mov	r4, r1
 80122ec:	f101 0014 	add.w	r0, r1, #20
 80122f0:	2300      	movs	r3, #0
 80122f2:	6805      	ldr	r5, [r0, #0]
 80122f4:	b2a9      	uxth	r1, r5
 80122f6:	fb02 8101 	mla	r1, r2, r1, r8
 80122fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80122fe:	0c2d      	lsrs	r5, r5, #16
 8012300:	fb02 c505 	mla	r5, r2, r5, ip
 8012304:	b289      	uxth	r1, r1
 8012306:	3301      	adds	r3, #1
 8012308:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801230c:	429e      	cmp	r6, r3
 801230e:	f840 1b04 	str.w	r1, [r0], #4
 8012312:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012316:	dcec      	bgt.n	80122f2 <__multadd+0x12>
 8012318:	f1b8 0f00 	cmp.w	r8, #0
 801231c:	d022      	beq.n	8012364 <__multadd+0x84>
 801231e:	68a3      	ldr	r3, [r4, #8]
 8012320:	42b3      	cmp	r3, r6
 8012322:	dc19      	bgt.n	8012358 <__multadd+0x78>
 8012324:	6861      	ldr	r1, [r4, #4]
 8012326:	4638      	mov	r0, r7
 8012328:	3101      	adds	r1, #1
 801232a:	f7ff ff77 	bl	801221c <_Balloc>
 801232e:	4605      	mov	r5, r0
 8012330:	b928      	cbnz	r0, 801233e <__multadd+0x5e>
 8012332:	4602      	mov	r2, r0
 8012334:	4b0d      	ldr	r3, [pc, #52]	; (801236c <__multadd+0x8c>)
 8012336:	480e      	ldr	r0, [pc, #56]	; (8012370 <__multadd+0x90>)
 8012338:	21b5      	movs	r1, #181	; 0xb5
 801233a:	f000 fe77 	bl	801302c <__assert_func>
 801233e:	6922      	ldr	r2, [r4, #16]
 8012340:	3202      	adds	r2, #2
 8012342:	f104 010c 	add.w	r1, r4, #12
 8012346:	0092      	lsls	r2, r2, #2
 8012348:	300c      	adds	r0, #12
 801234a:	f7ff ff59 	bl	8012200 <memcpy>
 801234e:	4621      	mov	r1, r4
 8012350:	4638      	mov	r0, r7
 8012352:	f7ff ffa3 	bl	801229c <_Bfree>
 8012356:	462c      	mov	r4, r5
 8012358:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801235c:	3601      	adds	r6, #1
 801235e:	f8c3 8014 	str.w	r8, [r3, #20]
 8012362:	6126      	str	r6, [r4, #16]
 8012364:	4620      	mov	r0, r4
 8012366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801236a:	bf00      	nop
 801236c:	08015214 	.word	0x08015214
 8012370:	080152a4 	.word	0x080152a4

08012374 <__s2b>:
 8012374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012378:	460c      	mov	r4, r1
 801237a:	4615      	mov	r5, r2
 801237c:	461f      	mov	r7, r3
 801237e:	2209      	movs	r2, #9
 8012380:	3308      	adds	r3, #8
 8012382:	4606      	mov	r6, r0
 8012384:	fb93 f3f2 	sdiv	r3, r3, r2
 8012388:	2100      	movs	r1, #0
 801238a:	2201      	movs	r2, #1
 801238c:	429a      	cmp	r2, r3
 801238e:	db09      	blt.n	80123a4 <__s2b+0x30>
 8012390:	4630      	mov	r0, r6
 8012392:	f7ff ff43 	bl	801221c <_Balloc>
 8012396:	b940      	cbnz	r0, 80123aa <__s2b+0x36>
 8012398:	4602      	mov	r2, r0
 801239a:	4b19      	ldr	r3, [pc, #100]	; (8012400 <__s2b+0x8c>)
 801239c:	4819      	ldr	r0, [pc, #100]	; (8012404 <__s2b+0x90>)
 801239e:	21ce      	movs	r1, #206	; 0xce
 80123a0:	f000 fe44 	bl	801302c <__assert_func>
 80123a4:	0052      	lsls	r2, r2, #1
 80123a6:	3101      	adds	r1, #1
 80123a8:	e7f0      	b.n	801238c <__s2b+0x18>
 80123aa:	9b08      	ldr	r3, [sp, #32]
 80123ac:	6143      	str	r3, [r0, #20]
 80123ae:	2d09      	cmp	r5, #9
 80123b0:	f04f 0301 	mov.w	r3, #1
 80123b4:	6103      	str	r3, [r0, #16]
 80123b6:	dd16      	ble.n	80123e6 <__s2b+0x72>
 80123b8:	f104 0909 	add.w	r9, r4, #9
 80123bc:	46c8      	mov	r8, r9
 80123be:	442c      	add	r4, r5
 80123c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80123c4:	4601      	mov	r1, r0
 80123c6:	3b30      	subs	r3, #48	; 0x30
 80123c8:	220a      	movs	r2, #10
 80123ca:	4630      	mov	r0, r6
 80123cc:	f7ff ff88 	bl	80122e0 <__multadd>
 80123d0:	45a0      	cmp	r8, r4
 80123d2:	d1f5      	bne.n	80123c0 <__s2b+0x4c>
 80123d4:	f1a5 0408 	sub.w	r4, r5, #8
 80123d8:	444c      	add	r4, r9
 80123da:	1b2d      	subs	r5, r5, r4
 80123dc:	1963      	adds	r3, r4, r5
 80123de:	42bb      	cmp	r3, r7
 80123e0:	db04      	blt.n	80123ec <__s2b+0x78>
 80123e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123e6:	340a      	adds	r4, #10
 80123e8:	2509      	movs	r5, #9
 80123ea:	e7f6      	b.n	80123da <__s2b+0x66>
 80123ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80123f0:	4601      	mov	r1, r0
 80123f2:	3b30      	subs	r3, #48	; 0x30
 80123f4:	220a      	movs	r2, #10
 80123f6:	4630      	mov	r0, r6
 80123f8:	f7ff ff72 	bl	80122e0 <__multadd>
 80123fc:	e7ee      	b.n	80123dc <__s2b+0x68>
 80123fe:	bf00      	nop
 8012400:	08015214 	.word	0x08015214
 8012404:	080152a4 	.word	0x080152a4

08012408 <__hi0bits>:
 8012408:	0c03      	lsrs	r3, r0, #16
 801240a:	041b      	lsls	r3, r3, #16
 801240c:	b9d3      	cbnz	r3, 8012444 <__hi0bits+0x3c>
 801240e:	0400      	lsls	r0, r0, #16
 8012410:	2310      	movs	r3, #16
 8012412:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012416:	bf04      	itt	eq
 8012418:	0200      	lsleq	r0, r0, #8
 801241a:	3308      	addeq	r3, #8
 801241c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012420:	bf04      	itt	eq
 8012422:	0100      	lsleq	r0, r0, #4
 8012424:	3304      	addeq	r3, #4
 8012426:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801242a:	bf04      	itt	eq
 801242c:	0080      	lsleq	r0, r0, #2
 801242e:	3302      	addeq	r3, #2
 8012430:	2800      	cmp	r0, #0
 8012432:	db05      	blt.n	8012440 <__hi0bits+0x38>
 8012434:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012438:	f103 0301 	add.w	r3, r3, #1
 801243c:	bf08      	it	eq
 801243e:	2320      	moveq	r3, #32
 8012440:	4618      	mov	r0, r3
 8012442:	4770      	bx	lr
 8012444:	2300      	movs	r3, #0
 8012446:	e7e4      	b.n	8012412 <__hi0bits+0xa>

08012448 <__lo0bits>:
 8012448:	6803      	ldr	r3, [r0, #0]
 801244a:	f013 0207 	ands.w	r2, r3, #7
 801244e:	4601      	mov	r1, r0
 8012450:	d00b      	beq.n	801246a <__lo0bits+0x22>
 8012452:	07da      	lsls	r2, r3, #31
 8012454:	d424      	bmi.n	80124a0 <__lo0bits+0x58>
 8012456:	0798      	lsls	r0, r3, #30
 8012458:	bf49      	itett	mi
 801245a:	085b      	lsrmi	r3, r3, #1
 801245c:	089b      	lsrpl	r3, r3, #2
 801245e:	2001      	movmi	r0, #1
 8012460:	600b      	strmi	r3, [r1, #0]
 8012462:	bf5c      	itt	pl
 8012464:	600b      	strpl	r3, [r1, #0]
 8012466:	2002      	movpl	r0, #2
 8012468:	4770      	bx	lr
 801246a:	b298      	uxth	r0, r3
 801246c:	b9b0      	cbnz	r0, 801249c <__lo0bits+0x54>
 801246e:	0c1b      	lsrs	r3, r3, #16
 8012470:	2010      	movs	r0, #16
 8012472:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012476:	bf04      	itt	eq
 8012478:	0a1b      	lsreq	r3, r3, #8
 801247a:	3008      	addeq	r0, #8
 801247c:	071a      	lsls	r2, r3, #28
 801247e:	bf04      	itt	eq
 8012480:	091b      	lsreq	r3, r3, #4
 8012482:	3004      	addeq	r0, #4
 8012484:	079a      	lsls	r2, r3, #30
 8012486:	bf04      	itt	eq
 8012488:	089b      	lsreq	r3, r3, #2
 801248a:	3002      	addeq	r0, #2
 801248c:	07da      	lsls	r2, r3, #31
 801248e:	d403      	bmi.n	8012498 <__lo0bits+0x50>
 8012490:	085b      	lsrs	r3, r3, #1
 8012492:	f100 0001 	add.w	r0, r0, #1
 8012496:	d005      	beq.n	80124a4 <__lo0bits+0x5c>
 8012498:	600b      	str	r3, [r1, #0]
 801249a:	4770      	bx	lr
 801249c:	4610      	mov	r0, r2
 801249e:	e7e8      	b.n	8012472 <__lo0bits+0x2a>
 80124a0:	2000      	movs	r0, #0
 80124a2:	4770      	bx	lr
 80124a4:	2020      	movs	r0, #32
 80124a6:	4770      	bx	lr

080124a8 <__i2b>:
 80124a8:	b510      	push	{r4, lr}
 80124aa:	460c      	mov	r4, r1
 80124ac:	2101      	movs	r1, #1
 80124ae:	f7ff feb5 	bl	801221c <_Balloc>
 80124b2:	4602      	mov	r2, r0
 80124b4:	b928      	cbnz	r0, 80124c2 <__i2b+0x1a>
 80124b6:	4b05      	ldr	r3, [pc, #20]	; (80124cc <__i2b+0x24>)
 80124b8:	4805      	ldr	r0, [pc, #20]	; (80124d0 <__i2b+0x28>)
 80124ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80124be:	f000 fdb5 	bl	801302c <__assert_func>
 80124c2:	2301      	movs	r3, #1
 80124c4:	6144      	str	r4, [r0, #20]
 80124c6:	6103      	str	r3, [r0, #16]
 80124c8:	bd10      	pop	{r4, pc}
 80124ca:	bf00      	nop
 80124cc:	08015214 	.word	0x08015214
 80124d0:	080152a4 	.word	0x080152a4

080124d4 <__multiply>:
 80124d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124d8:	4614      	mov	r4, r2
 80124da:	690a      	ldr	r2, [r1, #16]
 80124dc:	6923      	ldr	r3, [r4, #16]
 80124de:	429a      	cmp	r2, r3
 80124e0:	bfb8      	it	lt
 80124e2:	460b      	movlt	r3, r1
 80124e4:	460d      	mov	r5, r1
 80124e6:	bfbc      	itt	lt
 80124e8:	4625      	movlt	r5, r4
 80124ea:	461c      	movlt	r4, r3
 80124ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80124f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80124f4:	68ab      	ldr	r3, [r5, #8]
 80124f6:	6869      	ldr	r1, [r5, #4]
 80124f8:	eb0a 0709 	add.w	r7, sl, r9
 80124fc:	42bb      	cmp	r3, r7
 80124fe:	b085      	sub	sp, #20
 8012500:	bfb8      	it	lt
 8012502:	3101      	addlt	r1, #1
 8012504:	f7ff fe8a 	bl	801221c <_Balloc>
 8012508:	b930      	cbnz	r0, 8012518 <__multiply+0x44>
 801250a:	4602      	mov	r2, r0
 801250c:	4b42      	ldr	r3, [pc, #264]	; (8012618 <__multiply+0x144>)
 801250e:	4843      	ldr	r0, [pc, #268]	; (801261c <__multiply+0x148>)
 8012510:	f240 115d 	movw	r1, #349	; 0x15d
 8012514:	f000 fd8a 	bl	801302c <__assert_func>
 8012518:	f100 0614 	add.w	r6, r0, #20
 801251c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012520:	4633      	mov	r3, r6
 8012522:	2200      	movs	r2, #0
 8012524:	4543      	cmp	r3, r8
 8012526:	d31e      	bcc.n	8012566 <__multiply+0x92>
 8012528:	f105 0c14 	add.w	ip, r5, #20
 801252c:	f104 0314 	add.w	r3, r4, #20
 8012530:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012534:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012538:	9202      	str	r2, [sp, #8]
 801253a:	ebac 0205 	sub.w	r2, ip, r5
 801253e:	3a15      	subs	r2, #21
 8012540:	f022 0203 	bic.w	r2, r2, #3
 8012544:	3204      	adds	r2, #4
 8012546:	f105 0115 	add.w	r1, r5, #21
 801254a:	458c      	cmp	ip, r1
 801254c:	bf38      	it	cc
 801254e:	2204      	movcc	r2, #4
 8012550:	9201      	str	r2, [sp, #4]
 8012552:	9a02      	ldr	r2, [sp, #8]
 8012554:	9303      	str	r3, [sp, #12]
 8012556:	429a      	cmp	r2, r3
 8012558:	d808      	bhi.n	801256c <__multiply+0x98>
 801255a:	2f00      	cmp	r7, #0
 801255c:	dc55      	bgt.n	801260a <__multiply+0x136>
 801255e:	6107      	str	r7, [r0, #16]
 8012560:	b005      	add	sp, #20
 8012562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012566:	f843 2b04 	str.w	r2, [r3], #4
 801256a:	e7db      	b.n	8012524 <__multiply+0x50>
 801256c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012570:	f1ba 0f00 	cmp.w	sl, #0
 8012574:	d020      	beq.n	80125b8 <__multiply+0xe4>
 8012576:	f105 0e14 	add.w	lr, r5, #20
 801257a:	46b1      	mov	r9, r6
 801257c:	2200      	movs	r2, #0
 801257e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012582:	f8d9 b000 	ldr.w	fp, [r9]
 8012586:	b2a1      	uxth	r1, r4
 8012588:	fa1f fb8b 	uxth.w	fp, fp
 801258c:	fb0a b101 	mla	r1, sl, r1, fp
 8012590:	4411      	add	r1, r2
 8012592:	f8d9 2000 	ldr.w	r2, [r9]
 8012596:	0c24      	lsrs	r4, r4, #16
 8012598:	0c12      	lsrs	r2, r2, #16
 801259a:	fb0a 2404 	mla	r4, sl, r4, r2
 801259e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80125a2:	b289      	uxth	r1, r1
 80125a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80125a8:	45f4      	cmp	ip, lr
 80125aa:	f849 1b04 	str.w	r1, [r9], #4
 80125ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80125b2:	d8e4      	bhi.n	801257e <__multiply+0xaa>
 80125b4:	9901      	ldr	r1, [sp, #4]
 80125b6:	5072      	str	r2, [r6, r1]
 80125b8:	9a03      	ldr	r2, [sp, #12]
 80125ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80125be:	3304      	adds	r3, #4
 80125c0:	f1b9 0f00 	cmp.w	r9, #0
 80125c4:	d01f      	beq.n	8012606 <__multiply+0x132>
 80125c6:	6834      	ldr	r4, [r6, #0]
 80125c8:	f105 0114 	add.w	r1, r5, #20
 80125cc:	46b6      	mov	lr, r6
 80125ce:	f04f 0a00 	mov.w	sl, #0
 80125d2:	880a      	ldrh	r2, [r1, #0]
 80125d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80125d8:	fb09 b202 	mla	r2, r9, r2, fp
 80125dc:	4492      	add	sl, r2
 80125de:	b2a4      	uxth	r4, r4
 80125e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80125e4:	f84e 4b04 	str.w	r4, [lr], #4
 80125e8:	f851 4b04 	ldr.w	r4, [r1], #4
 80125ec:	f8be 2000 	ldrh.w	r2, [lr]
 80125f0:	0c24      	lsrs	r4, r4, #16
 80125f2:	fb09 2404 	mla	r4, r9, r4, r2
 80125f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80125fa:	458c      	cmp	ip, r1
 80125fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012600:	d8e7      	bhi.n	80125d2 <__multiply+0xfe>
 8012602:	9a01      	ldr	r2, [sp, #4]
 8012604:	50b4      	str	r4, [r6, r2]
 8012606:	3604      	adds	r6, #4
 8012608:	e7a3      	b.n	8012552 <__multiply+0x7e>
 801260a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801260e:	2b00      	cmp	r3, #0
 8012610:	d1a5      	bne.n	801255e <__multiply+0x8a>
 8012612:	3f01      	subs	r7, #1
 8012614:	e7a1      	b.n	801255a <__multiply+0x86>
 8012616:	bf00      	nop
 8012618:	08015214 	.word	0x08015214
 801261c:	080152a4 	.word	0x080152a4

08012620 <__pow5mult>:
 8012620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012624:	4615      	mov	r5, r2
 8012626:	f012 0203 	ands.w	r2, r2, #3
 801262a:	4606      	mov	r6, r0
 801262c:	460f      	mov	r7, r1
 801262e:	d007      	beq.n	8012640 <__pow5mult+0x20>
 8012630:	4c25      	ldr	r4, [pc, #148]	; (80126c8 <__pow5mult+0xa8>)
 8012632:	3a01      	subs	r2, #1
 8012634:	2300      	movs	r3, #0
 8012636:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801263a:	f7ff fe51 	bl	80122e0 <__multadd>
 801263e:	4607      	mov	r7, r0
 8012640:	10ad      	asrs	r5, r5, #2
 8012642:	d03d      	beq.n	80126c0 <__pow5mult+0xa0>
 8012644:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012646:	b97c      	cbnz	r4, 8012668 <__pow5mult+0x48>
 8012648:	2010      	movs	r0, #16
 801264a:	f7ff fdbf 	bl	80121cc <malloc>
 801264e:	4602      	mov	r2, r0
 8012650:	6270      	str	r0, [r6, #36]	; 0x24
 8012652:	b928      	cbnz	r0, 8012660 <__pow5mult+0x40>
 8012654:	4b1d      	ldr	r3, [pc, #116]	; (80126cc <__pow5mult+0xac>)
 8012656:	481e      	ldr	r0, [pc, #120]	; (80126d0 <__pow5mult+0xb0>)
 8012658:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801265c:	f000 fce6 	bl	801302c <__assert_func>
 8012660:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012664:	6004      	str	r4, [r0, #0]
 8012666:	60c4      	str	r4, [r0, #12]
 8012668:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801266c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012670:	b94c      	cbnz	r4, 8012686 <__pow5mult+0x66>
 8012672:	f240 2171 	movw	r1, #625	; 0x271
 8012676:	4630      	mov	r0, r6
 8012678:	f7ff ff16 	bl	80124a8 <__i2b>
 801267c:	2300      	movs	r3, #0
 801267e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012682:	4604      	mov	r4, r0
 8012684:	6003      	str	r3, [r0, #0]
 8012686:	f04f 0900 	mov.w	r9, #0
 801268a:	07eb      	lsls	r3, r5, #31
 801268c:	d50a      	bpl.n	80126a4 <__pow5mult+0x84>
 801268e:	4639      	mov	r1, r7
 8012690:	4622      	mov	r2, r4
 8012692:	4630      	mov	r0, r6
 8012694:	f7ff ff1e 	bl	80124d4 <__multiply>
 8012698:	4639      	mov	r1, r7
 801269a:	4680      	mov	r8, r0
 801269c:	4630      	mov	r0, r6
 801269e:	f7ff fdfd 	bl	801229c <_Bfree>
 80126a2:	4647      	mov	r7, r8
 80126a4:	106d      	asrs	r5, r5, #1
 80126a6:	d00b      	beq.n	80126c0 <__pow5mult+0xa0>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	b938      	cbnz	r0, 80126bc <__pow5mult+0x9c>
 80126ac:	4622      	mov	r2, r4
 80126ae:	4621      	mov	r1, r4
 80126b0:	4630      	mov	r0, r6
 80126b2:	f7ff ff0f 	bl	80124d4 <__multiply>
 80126b6:	6020      	str	r0, [r4, #0]
 80126b8:	f8c0 9000 	str.w	r9, [r0]
 80126bc:	4604      	mov	r4, r0
 80126be:	e7e4      	b.n	801268a <__pow5mult+0x6a>
 80126c0:	4638      	mov	r0, r7
 80126c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c6:	bf00      	nop
 80126c8:	080153f8 	.word	0x080153f8
 80126cc:	0801519e 	.word	0x0801519e
 80126d0:	080152a4 	.word	0x080152a4

080126d4 <__lshift>:
 80126d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126d8:	460c      	mov	r4, r1
 80126da:	6849      	ldr	r1, [r1, #4]
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80126e2:	68a3      	ldr	r3, [r4, #8]
 80126e4:	4607      	mov	r7, r0
 80126e6:	4691      	mov	r9, r2
 80126e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80126ec:	f108 0601 	add.w	r6, r8, #1
 80126f0:	42b3      	cmp	r3, r6
 80126f2:	db0b      	blt.n	801270c <__lshift+0x38>
 80126f4:	4638      	mov	r0, r7
 80126f6:	f7ff fd91 	bl	801221c <_Balloc>
 80126fa:	4605      	mov	r5, r0
 80126fc:	b948      	cbnz	r0, 8012712 <__lshift+0x3e>
 80126fe:	4602      	mov	r2, r0
 8012700:	4b28      	ldr	r3, [pc, #160]	; (80127a4 <__lshift+0xd0>)
 8012702:	4829      	ldr	r0, [pc, #164]	; (80127a8 <__lshift+0xd4>)
 8012704:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012708:	f000 fc90 	bl	801302c <__assert_func>
 801270c:	3101      	adds	r1, #1
 801270e:	005b      	lsls	r3, r3, #1
 8012710:	e7ee      	b.n	80126f0 <__lshift+0x1c>
 8012712:	2300      	movs	r3, #0
 8012714:	f100 0114 	add.w	r1, r0, #20
 8012718:	f100 0210 	add.w	r2, r0, #16
 801271c:	4618      	mov	r0, r3
 801271e:	4553      	cmp	r3, sl
 8012720:	db33      	blt.n	801278a <__lshift+0xb6>
 8012722:	6920      	ldr	r0, [r4, #16]
 8012724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012728:	f104 0314 	add.w	r3, r4, #20
 801272c:	f019 091f 	ands.w	r9, r9, #31
 8012730:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012734:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012738:	d02b      	beq.n	8012792 <__lshift+0xbe>
 801273a:	f1c9 0e20 	rsb	lr, r9, #32
 801273e:	468a      	mov	sl, r1
 8012740:	2200      	movs	r2, #0
 8012742:	6818      	ldr	r0, [r3, #0]
 8012744:	fa00 f009 	lsl.w	r0, r0, r9
 8012748:	4302      	orrs	r2, r0
 801274a:	f84a 2b04 	str.w	r2, [sl], #4
 801274e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012752:	459c      	cmp	ip, r3
 8012754:	fa22 f20e 	lsr.w	r2, r2, lr
 8012758:	d8f3      	bhi.n	8012742 <__lshift+0x6e>
 801275a:	ebac 0304 	sub.w	r3, ip, r4
 801275e:	3b15      	subs	r3, #21
 8012760:	f023 0303 	bic.w	r3, r3, #3
 8012764:	3304      	adds	r3, #4
 8012766:	f104 0015 	add.w	r0, r4, #21
 801276a:	4584      	cmp	ip, r0
 801276c:	bf38      	it	cc
 801276e:	2304      	movcc	r3, #4
 8012770:	50ca      	str	r2, [r1, r3]
 8012772:	b10a      	cbz	r2, 8012778 <__lshift+0xa4>
 8012774:	f108 0602 	add.w	r6, r8, #2
 8012778:	3e01      	subs	r6, #1
 801277a:	4638      	mov	r0, r7
 801277c:	612e      	str	r6, [r5, #16]
 801277e:	4621      	mov	r1, r4
 8012780:	f7ff fd8c 	bl	801229c <_Bfree>
 8012784:	4628      	mov	r0, r5
 8012786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801278a:	f842 0f04 	str.w	r0, [r2, #4]!
 801278e:	3301      	adds	r3, #1
 8012790:	e7c5      	b.n	801271e <__lshift+0x4a>
 8012792:	3904      	subs	r1, #4
 8012794:	f853 2b04 	ldr.w	r2, [r3], #4
 8012798:	f841 2f04 	str.w	r2, [r1, #4]!
 801279c:	459c      	cmp	ip, r3
 801279e:	d8f9      	bhi.n	8012794 <__lshift+0xc0>
 80127a0:	e7ea      	b.n	8012778 <__lshift+0xa4>
 80127a2:	bf00      	nop
 80127a4:	08015214 	.word	0x08015214
 80127a8:	080152a4 	.word	0x080152a4

080127ac <__mcmp>:
 80127ac:	b530      	push	{r4, r5, lr}
 80127ae:	6902      	ldr	r2, [r0, #16]
 80127b0:	690c      	ldr	r4, [r1, #16]
 80127b2:	1b12      	subs	r2, r2, r4
 80127b4:	d10e      	bne.n	80127d4 <__mcmp+0x28>
 80127b6:	f100 0314 	add.w	r3, r0, #20
 80127ba:	3114      	adds	r1, #20
 80127bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80127c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80127c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80127c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80127cc:	42a5      	cmp	r5, r4
 80127ce:	d003      	beq.n	80127d8 <__mcmp+0x2c>
 80127d0:	d305      	bcc.n	80127de <__mcmp+0x32>
 80127d2:	2201      	movs	r2, #1
 80127d4:	4610      	mov	r0, r2
 80127d6:	bd30      	pop	{r4, r5, pc}
 80127d8:	4283      	cmp	r3, r0
 80127da:	d3f3      	bcc.n	80127c4 <__mcmp+0x18>
 80127dc:	e7fa      	b.n	80127d4 <__mcmp+0x28>
 80127de:	f04f 32ff 	mov.w	r2, #4294967295
 80127e2:	e7f7      	b.n	80127d4 <__mcmp+0x28>

080127e4 <__mdiff>:
 80127e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e8:	460c      	mov	r4, r1
 80127ea:	4606      	mov	r6, r0
 80127ec:	4611      	mov	r1, r2
 80127ee:	4620      	mov	r0, r4
 80127f0:	4617      	mov	r7, r2
 80127f2:	f7ff ffdb 	bl	80127ac <__mcmp>
 80127f6:	1e05      	subs	r5, r0, #0
 80127f8:	d110      	bne.n	801281c <__mdiff+0x38>
 80127fa:	4629      	mov	r1, r5
 80127fc:	4630      	mov	r0, r6
 80127fe:	f7ff fd0d 	bl	801221c <_Balloc>
 8012802:	b930      	cbnz	r0, 8012812 <__mdiff+0x2e>
 8012804:	4b39      	ldr	r3, [pc, #228]	; (80128ec <__mdiff+0x108>)
 8012806:	4602      	mov	r2, r0
 8012808:	f240 2132 	movw	r1, #562	; 0x232
 801280c:	4838      	ldr	r0, [pc, #224]	; (80128f0 <__mdiff+0x10c>)
 801280e:	f000 fc0d 	bl	801302c <__assert_func>
 8012812:	2301      	movs	r3, #1
 8012814:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281c:	bfa4      	itt	ge
 801281e:	463b      	movge	r3, r7
 8012820:	4627      	movge	r7, r4
 8012822:	4630      	mov	r0, r6
 8012824:	6879      	ldr	r1, [r7, #4]
 8012826:	bfa6      	itte	ge
 8012828:	461c      	movge	r4, r3
 801282a:	2500      	movge	r5, #0
 801282c:	2501      	movlt	r5, #1
 801282e:	f7ff fcf5 	bl	801221c <_Balloc>
 8012832:	b920      	cbnz	r0, 801283e <__mdiff+0x5a>
 8012834:	4b2d      	ldr	r3, [pc, #180]	; (80128ec <__mdiff+0x108>)
 8012836:	4602      	mov	r2, r0
 8012838:	f44f 7110 	mov.w	r1, #576	; 0x240
 801283c:	e7e6      	b.n	801280c <__mdiff+0x28>
 801283e:	693e      	ldr	r6, [r7, #16]
 8012840:	60c5      	str	r5, [r0, #12]
 8012842:	6925      	ldr	r5, [r4, #16]
 8012844:	f107 0114 	add.w	r1, r7, #20
 8012848:	f104 0914 	add.w	r9, r4, #20
 801284c:	f100 0e14 	add.w	lr, r0, #20
 8012850:	f107 0210 	add.w	r2, r7, #16
 8012854:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012858:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801285c:	46f2      	mov	sl, lr
 801285e:	2700      	movs	r7, #0
 8012860:	f859 3b04 	ldr.w	r3, [r9], #4
 8012864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012868:	fa1f f883 	uxth.w	r8, r3
 801286c:	fa17 f78b 	uxtah	r7, r7, fp
 8012870:	0c1b      	lsrs	r3, r3, #16
 8012872:	eba7 0808 	sub.w	r8, r7, r8
 8012876:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801287a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801287e:	fa1f f888 	uxth.w	r8, r8
 8012882:	141f      	asrs	r7, r3, #16
 8012884:	454d      	cmp	r5, r9
 8012886:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801288a:	f84a 3b04 	str.w	r3, [sl], #4
 801288e:	d8e7      	bhi.n	8012860 <__mdiff+0x7c>
 8012890:	1b2b      	subs	r3, r5, r4
 8012892:	3b15      	subs	r3, #21
 8012894:	f023 0303 	bic.w	r3, r3, #3
 8012898:	3304      	adds	r3, #4
 801289a:	3415      	adds	r4, #21
 801289c:	42a5      	cmp	r5, r4
 801289e:	bf38      	it	cc
 80128a0:	2304      	movcc	r3, #4
 80128a2:	4419      	add	r1, r3
 80128a4:	4473      	add	r3, lr
 80128a6:	469e      	mov	lr, r3
 80128a8:	460d      	mov	r5, r1
 80128aa:	4565      	cmp	r5, ip
 80128ac:	d30e      	bcc.n	80128cc <__mdiff+0xe8>
 80128ae:	f10c 0203 	add.w	r2, ip, #3
 80128b2:	1a52      	subs	r2, r2, r1
 80128b4:	f022 0203 	bic.w	r2, r2, #3
 80128b8:	3903      	subs	r1, #3
 80128ba:	458c      	cmp	ip, r1
 80128bc:	bf38      	it	cc
 80128be:	2200      	movcc	r2, #0
 80128c0:	441a      	add	r2, r3
 80128c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80128c6:	b17b      	cbz	r3, 80128e8 <__mdiff+0x104>
 80128c8:	6106      	str	r6, [r0, #16]
 80128ca:	e7a5      	b.n	8012818 <__mdiff+0x34>
 80128cc:	f855 8b04 	ldr.w	r8, [r5], #4
 80128d0:	fa17 f488 	uxtah	r4, r7, r8
 80128d4:	1422      	asrs	r2, r4, #16
 80128d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80128da:	b2a4      	uxth	r4, r4
 80128dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80128e0:	f84e 4b04 	str.w	r4, [lr], #4
 80128e4:	1417      	asrs	r7, r2, #16
 80128e6:	e7e0      	b.n	80128aa <__mdiff+0xc6>
 80128e8:	3e01      	subs	r6, #1
 80128ea:	e7ea      	b.n	80128c2 <__mdiff+0xde>
 80128ec:	08015214 	.word	0x08015214
 80128f0:	080152a4 	.word	0x080152a4

080128f4 <__ulp>:
 80128f4:	b082      	sub	sp, #8
 80128f6:	ed8d 0b00 	vstr	d0, [sp]
 80128fa:	9b01      	ldr	r3, [sp, #4]
 80128fc:	4912      	ldr	r1, [pc, #72]	; (8012948 <__ulp+0x54>)
 80128fe:	4019      	ands	r1, r3
 8012900:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012904:	2900      	cmp	r1, #0
 8012906:	dd05      	ble.n	8012914 <__ulp+0x20>
 8012908:	2200      	movs	r2, #0
 801290a:	460b      	mov	r3, r1
 801290c:	ec43 2b10 	vmov	d0, r2, r3
 8012910:	b002      	add	sp, #8
 8012912:	4770      	bx	lr
 8012914:	4249      	negs	r1, r1
 8012916:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801291a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801291e:	f04f 0200 	mov.w	r2, #0
 8012922:	f04f 0300 	mov.w	r3, #0
 8012926:	da04      	bge.n	8012932 <__ulp+0x3e>
 8012928:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801292c:	fa41 f300 	asr.w	r3, r1, r0
 8012930:	e7ec      	b.n	801290c <__ulp+0x18>
 8012932:	f1a0 0114 	sub.w	r1, r0, #20
 8012936:	291e      	cmp	r1, #30
 8012938:	bfda      	itte	le
 801293a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801293e:	fa20 f101 	lsrle.w	r1, r0, r1
 8012942:	2101      	movgt	r1, #1
 8012944:	460a      	mov	r2, r1
 8012946:	e7e1      	b.n	801290c <__ulp+0x18>
 8012948:	7ff00000 	.word	0x7ff00000

0801294c <__b2d>:
 801294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294e:	6905      	ldr	r5, [r0, #16]
 8012950:	f100 0714 	add.w	r7, r0, #20
 8012954:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012958:	1f2e      	subs	r6, r5, #4
 801295a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801295e:	4620      	mov	r0, r4
 8012960:	f7ff fd52 	bl	8012408 <__hi0bits>
 8012964:	f1c0 0320 	rsb	r3, r0, #32
 8012968:	280a      	cmp	r0, #10
 801296a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80129e8 <__b2d+0x9c>
 801296e:	600b      	str	r3, [r1, #0]
 8012970:	dc14      	bgt.n	801299c <__b2d+0x50>
 8012972:	f1c0 0e0b 	rsb	lr, r0, #11
 8012976:	fa24 f10e 	lsr.w	r1, r4, lr
 801297a:	42b7      	cmp	r7, r6
 801297c:	ea41 030c 	orr.w	r3, r1, ip
 8012980:	bf34      	ite	cc
 8012982:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012986:	2100      	movcs	r1, #0
 8012988:	3015      	adds	r0, #21
 801298a:	fa04 f000 	lsl.w	r0, r4, r0
 801298e:	fa21 f10e 	lsr.w	r1, r1, lr
 8012992:	ea40 0201 	orr.w	r2, r0, r1
 8012996:	ec43 2b10 	vmov	d0, r2, r3
 801299a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801299c:	42b7      	cmp	r7, r6
 801299e:	bf3a      	itte	cc
 80129a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80129a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80129a8:	2100      	movcs	r1, #0
 80129aa:	380b      	subs	r0, #11
 80129ac:	d017      	beq.n	80129de <__b2d+0x92>
 80129ae:	f1c0 0c20 	rsb	ip, r0, #32
 80129b2:	fa04 f500 	lsl.w	r5, r4, r0
 80129b6:	42be      	cmp	r6, r7
 80129b8:	fa21 f40c 	lsr.w	r4, r1, ip
 80129bc:	ea45 0504 	orr.w	r5, r5, r4
 80129c0:	bf8c      	ite	hi
 80129c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80129c6:	2400      	movls	r4, #0
 80129c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80129cc:	fa01 f000 	lsl.w	r0, r1, r0
 80129d0:	fa24 f40c 	lsr.w	r4, r4, ip
 80129d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80129d8:	ea40 0204 	orr.w	r2, r0, r4
 80129dc:	e7db      	b.n	8012996 <__b2d+0x4a>
 80129de:	ea44 030c 	orr.w	r3, r4, ip
 80129e2:	460a      	mov	r2, r1
 80129e4:	e7d7      	b.n	8012996 <__b2d+0x4a>
 80129e6:	bf00      	nop
 80129e8:	3ff00000 	.word	0x3ff00000

080129ec <__d2b>:
 80129ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80129f0:	4689      	mov	r9, r1
 80129f2:	2101      	movs	r1, #1
 80129f4:	ec57 6b10 	vmov	r6, r7, d0
 80129f8:	4690      	mov	r8, r2
 80129fa:	f7ff fc0f 	bl	801221c <_Balloc>
 80129fe:	4604      	mov	r4, r0
 8012a00:	b930      	cbnz	r0, 8012a10 <__d2b+0x24>
 8012a02:	4602      	mov	r2, r0
 8012a04:	4b25      	ldr	r3, [pc, #148]	; (8012a9c <__d2b+0xb0>)
 8012a06:	4826      	ldr	r0, [pc, #152]	; (8012aa0 <__d2b+0xb4>)
 8012a08:	f240 310a 	movw	r1, #778	; 0x30a
 8012a0c:	f000 fb0e 	bl	801302c <__assert_func>
 8012a10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012a14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a18:	bb35      	cbnz	r5, 8012a68 <__d2b+0x7c>
 8012a1a:	2e00      	cmp	r6, #0
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	d028      	beq.n	8012a72 <__d2b+0x86>
 8012a20:	4668      	mov	r0, sp
 8012a22:	9600      	str	r6, [sp, #0]
 8012a24:	f7ff fd10 	bl	8012448 <__lo0bits>
 8012a28:	9900      	ldr	r1, [sp, #0]
 8012a2a:	b300      	cbz	r0, 8012a6e <__d2b+0x82>
 8012a2c:	9a01      	ldr	r2, [sp, #4]
 8012a2e:	f1c0 0320 	rsb	r3, r0, #32
 8012a32:	fa02 f303 	lsl.w	r3, r2, r3
 8012a36:	430b      	orrs	r3, r1
 8012a38:	40c2      	lsrs	r2, r0
 8012a3a:	6163      	str	r3, [r4, #20]
 8012a3c:	9201      	str	r2, [sp, #4]
 8012a3e:	9b01      	ldr	r3, [sp, #4]
 8012a40:	61a3      	str	r3, [r4, #24]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	bf14      	ite	ne
 8012a46:	2202      	movne	r2, #2
 8012a48:	2201      	moveq	r2, #1
 8012a4a:	6122      	str	r2, [r4, #16]
 8012a4c:	b1d5      	cbz	r5, 8012a84 <__d2b+0x98>
 8012a4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012a52:	4405      	add	r5, r0
 8012a54:	f8c9 5000 	str.w	r5, [r9]
 8012a58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012a5c:	f8c8 0000 	str.w	r0, [r8]
 8012a60:	4620      	mov	r0, r4
 8012a62:	b003      	add	sp, #12
 8012a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012a6c:	e7d5      	b.n	8012a1a <__d2b+0x2e>
 8012a6e:	6161      	str	r1, [r4, #20]
 8012a70:	e7e5      	b.n	8012a3e <__d2b+0x52>
 8012a72:	a801      	add	r0, sp, #4
 8012a74:	f7ff fce8 	bl	8012448 <__lo0bits>
 8012a78:	9b01      	ldr	r3, [sp, #4]
 8012a7a:	6163      	str	r3, [r4, #20]
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	6122      	str	r2, [r4, #16]
 8012a80:	3020      	adds	r0, #32
 8012a82:	e7e3      	b.n	8012a4c <__d2b+0x60>
 8012a84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012a88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012a8c:	f8c9 0000 	str.w	r0, [r9]
 8012a90:	6918      	ldr	r0, [r3, #16]
 8012a92:	f7ff fcb9 	bl	8012408 <__hi0bits>
 8012a96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012a9a:	e7df      	b.n	8012a5c <__d2b+0x70>
 8012a9c:	08015214 	.word	0x08015214
 8012aa0:	080152a4 	.word	0x080152a4

08012aa4 <__ratio>:
 8012aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa8:	4688      	mov	r8, r1
 8012aaa:	4669      	mov	r1, sp
 8012aac:	4681      	mov	r9, r0
 8012aae:	f7ff ff4d 	bl	801294c <__b2d>
 8012ab2:	a901      	add	r1, sp, #4
 8012ab4:	4640      	mov	r0, r8
 8012ab6:	ec55 4b10 	vmov	r4, r5, d0
 8012aba:	f7ff ff47 	bl	801294c <__b2d>
 8012abe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ac2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012ac6:	eba3 0c02 	sub.w	ip, r3, r2
 8012aca:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ace:	1a9b      	subs	r3, r3, r2
 8012ad0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012ad4:	ec51 0b10 	vmov	r0, r1, d0
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	bfd6      	itet	le
 8012adc:	460a      	movle	r2, r1
 8012ade:	462a      	movgt	r2, r5
 8012ae0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012ae4:	468b      	mov	fp, r1
 8012ae6:	462f      	mov	r7, r5
 8012ae8:	bfd4      	ite	le
 8012aea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012aee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012af2:	4620      	mov	r0, r4
 8012af4:	ee10 2a10 	vmov	r2, s0
 8012af8:	465b      	mov	r3, fp
 8012afa:	4639      	mov	r1, r7
 8012afc:	f7ed fea6 	bl	800084c <__aeabi_ddiv>
 8012b00:	ec41 0b10 	vmov	d0, r0, r1
 8012b04:	b003      	add	sp, #12
 8012b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b0a <__copybits>:
 8012b0a:	3901      	subs	r1, #1
 8012b0c:	b570      	push	{r4, r5, r6, lr}
 8012b0e:	1149      	asrs	r1, r1, #5
 8012b10:	6914      	ldr	r4, [r2, #16]
 8012b12:	3101      	adds	r1, #1
 8012b14:	f102 0314 	add.w	r3, r2, #20
 8012b18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012b1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012b20:	1f05      	subs	r5, r0, #4
 8012b22:	42a3      	cmp	r3, r4
 8012b24:	d30c      	bcc.n	8012b40 <__copybits+0x36>
 8012b26:	1aa3      	subs	r3, r4, r2
 8012b28:	3b11      	subs	r3, #17
 8012b2a:	f023 0303 	bic.w	r3, r3, #3
 8012b2e:	3211      	adds	r2, #17
 8012b30:	42a2      	cmp	r2, r4
 8012b32:	bf88      	it	hi
 8012b34:	2300      	movhi	r3, #0
 8012b36:	4418      	add	r0, r3
 8012b38:	2300      	movs	r3, #0
 8012b3a:	4288      	cmp	r0, r1
 8012b3c:	d305      	bcc.n	8012b4a <__copybits+0x40>
 8012b3e:	bd70      	pop	{r4, r5, r6, pc}
 8012b40:	f853 6b04 	ldr.w	r6, [r3], #4
 8012b44:	f845 6f04 	str.w	r6, [r5, #4]!
 8012b48:	e7eb      	b.n	8012b22 <__copybits+0x18>
 8012b4a:	f840 3b04 	str.w	r3, [r0], #4
 8012b4e:	e7f4      	b.n	8012b3a <__copybits+0x30>

08012b50 <__any_on>:
 8012b50:	f100 0214 	add.w	r2, r0, #20
 8012b54:	6900      	ldr	r0, [r0, #16]
 8012b56:	114b      	asrs	r3, r1, #5
 8012b58:	4298      	cmp	r0, r3
 8012b5a:	b510      	push	{r4, lr}
 8012b5c:	db11      	blt.n	8012b82 <__any_on+0x32>
 8012b5e:	dd0a      	ble.n	8012b76 <__any_on+0x26>
 8012b60:	f011 011f 	ands.w	r1, r1, #31
 8012b64:	d007      	beq.n	8012b76 <__any_on+0x26>
 8012b66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012b6a:	fa24 f001 	lsr.w	r0, r4, r1
 8012b6e:	fa00 f101 	lsl.w	r1, r0, r1
 8012b72:	428c      	cmp	r4, r1
 8012b74:	d10b      	bne.n	8012b8e <__any_on+0x3e>
 8012b76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012b7a:	4293      	cmp	r3, r2
 8012b7c:	d803      	bhi.n	8012b86 <__any_on+0x36>
 8012b7e:	2000      	movs	r0, #0
 8012b80:	bd10      	pop	{r4, pc}
 8012b82:	4603      	mov	r3, r0
 8012b84:	e7f7      	b.n	8012b76 <__any_on+0x26>
 8012b86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012b8a:	2900      	cmp	r1, #0
 8012b8c:	d0f5      	beq.n	8012b7a <__any_on+0x2a>
 8012b8e:	2001      	movs	r0, #1
 8012b90:	e7f6      	b.n	8012b80 <__any_on+0x30>

08012b92 <_calloc_r>:
 8012b92:	b513      	push	{r0, r1, r4, lr}
 8012b94:	434a      	muls	r2, r1
 8012b96:	4611      	mov	r1, r2
 8012b98:	9201      	str	r2, [sp, #4]
 8012b9a:	f000 f859 	bl	8012c50 <_malloc_r>
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	b118      	cbz	r0, 8012baa <_calloc_r+0x18>
 8012ba2:	9a01      	ldr	r2, [sp, #4]
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	f7fc fb41 	bl	800f22c <memset>
 8012baa:	4620      	mov	r0, r4
 8012bac:	b002      	add	sp, #8
 8012bae:	bd10      	pop	{r4, pc}

08012bb0 <_free_r>:
 8012bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bb2:	2900      	cmp	r1, #0
 8012bb4:	d048      	beq.n	8012c48 <_free_r+0x98>
 8012bb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bba:	9001      	str	r0, [sp, #4]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	f1a1 0404 	sub.w	r4, r1, #4
 8012bc2:	bfb8      	it	lt
 8012bc4:	18e4      	addlt	r4, r4, r3
 8012bc6:	f000 fc35 	bl	8013434 <__malloc_lock>
 8012bca:	4a20      	ldr	r2, [pc, #128]	; (8012c4c <_free_r+0x9c>)
 8012bcc:	9801      	ldr	r0, [sp, #4]
 8012bce:	6813      	ldr	r3, [r2, #0]
 8012bd0:	4615      	mov	r5, r2
 8012bd2:	b933      	cbnz	r3, 8012be2 <_free_r+0x32>
 8012bd4:	6063      	str	r3, [r4, #4]
 8012bd6:	6014      	str	r4, [r2, #0]
 8012bd8:	b003      	add	sp, #12
 8012bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bde:	f000 bc2f 	b.w	8013440 <__malloc_unlock>
 8012be2:	42a3      	cmp	r3, r4
 8012be4:	d90b      	bls.n	8012bfe <_free_r+0x4e>
 8012be6:	6821      	ldr	r1, [r4, #0]
 8012be8:	1862      	adds	r2, r4, r1
 8012bea:	4293      	cmp	r3, r2
 8012bec:	bf04      	itt	eq
 8012bee:	681a      	ldreq	r2, [r3, #0]
 8012bf0:	685b      	ldreq	r3, [r3, #4]
 8012bf2:	6063      	str	r3, [r4, #4]
 8012bf4:	bf04      	itt	eq
 8012bf6:	1852      	addeq	r2, r2, r1
 8012bf8:	6022      	streq	r2, [r4, #0]
 8012bfa:	602c      	str	r4, [r5, #0]
 8012bfc:	e7ec      	b.n	8012bd8 <_free_r+0x28>
 8012bfe:	461a      	mov	r2, r3
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	b10b      	cbz	r3, 8012c08 <_free_r+0x58>
 8012c04:	42a3      	cmp	r3, r4
 8012c06:	d9fa      	bls.n	8012bfe <_free_r+0x4e>
 8012c08:	6811      	ldr	r1, [r2, #0]
 8012c0a:	1855      	adds	r5, r2, r1
 8012c0c:	42a5      	cmp	r5, r4
 8012c0e:	d10b      	bne.n	8012c28 <_free_r+0x78>
 8012c10:	6824      	ldr	r4, [r4, #0]
 8012c12:	4421      	add	r1, r4
 8012c14:	1854      	adds	r4, r2, r1
 8012c16:	42a3      	cmp	r3, r4
 8012c18:	6011      	str	r1, [r2, #0]
 8012c1a:	d1dd      	bne.n	8012bd8 <_free_r+0x28>
 8012c1c:	681c      	ldr	r4, [r3, #0]
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	6053      	str	r3, [r2, #4]
 8012c22:	4421      	add	r1, r4
 8012c24:	6011      	str	r1, [r2, #0]
 8012c26:	e7d7      	b.n	8012bd8 <_free_r+0x28>
 8012c28:	d902      	bls.n	8012c30 <_free_r+0x80>
 8012c2a:	230c      	movs	r3, #12
 8012c2c:	6003      	str	r3, [r0, #0]
 8012c2e:	e7d3      	b.n	8012bd8 <_free_r+0x28>
 8012c30:	6825      	ldr	r5, [r4, #0]
 8012c32:	1961      	adds	r1, r4, r5
 8012c34:	428b      	cmp	r3, r1
 8012c36:	bf04      	itt	eq
 8012c38:	6819      	ldreq	r1, [r3, #0]
 8012c3a:	685b      	ldreq	r3, [r3, #4]
 8012c3c:	6063      	str	r3, [r4, #4]
 8012c3e:	bf04      	itt	eq
 8012c40:	1949      	addeq	r1, r1, r5
 8012c42:	6021      	streq	r1, [r4, #0]
 8012c44:	6054      	str	r4, [r2, #4]
 8012c46:	e7c7      	b.n	8012bd8 <_free_r+0x28>
 8012c48:	b003      	add	sp, #12
 8012c4a:	bd30      	pop	{r4, r5, pc}
 8012c4c:	20000494 	.word	0x20000494

08012c50 <_malloc_r>:
 8012c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c52:	1ccd      	adds	r5, r1, #3
 8012c54:	f025 0503 	bic.w	r5, r5, #3
 8012c58:	3508      	adds	r5, #8
 8012c5a:	2d0c      	cmp	r5, #12
 8012c5c:	bf38      	it	cc
 8012c5e:	250c      	movcc	r5, #12
 8012c60:	2d00      	cmp	r5, #0
 8012c62:	4606      	mov	r6, r0
 8012c64:	db01      	blt.n	8012c6a <_malloc_r+0x1a>
 8012c66:	42a9      	cmp	r1, r5
 8012c68:	d903      	bls.n	8012c72 <_malloc_r+0x22>
 8012c6a:	230c      	movs	r3, #12
 8012c6c:	6033      	str	r3, [r6, #0]
 8012c6e:	2000      	movs	r0, #0
 8012c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c72:	f000 fbdf 	bl	8013434 <__malloc_lock>
 8012c76:	4921      	ldr	r1, [pc, #132]	; (8012cfc <_malloc_r+0xac>)
 8012c78:	680a      	ldr	r2, [r1, #0]
 8012c7a:	4614      	mov	r4, r2
 8012c7c:	b99c      	cbnz	r4, 8012ca6 <_malloc_r+0x56>
 8012c7e:	4f20      	ldr	r7, [pc, #128]	; (8012d00 <_malloc_r+0xb0>)
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	b923      	cbnz	r3, 8012c8e <_malloc_r+0x3e>
 8012c84:	4621      	mov	r1, r4
 8012c86:	4630      	mov	r0, r6
 8012c88:	f000 f9b2 	bl	8012ff0 <_sbrk_r>
 8012c8c:	6038      	str	r0, [r7, #0]
 8012c8e:	4629      	mov	r1, r5
 8012c90:	4630      	mov	r0, r6
 8012c92:	f000 f9ad 	bl	8012ff0 <_sbrk_r>
 8012c96:	1c43      	adds	r3, r0, #1
 8012c98:	d123      	bne.n	8012ce2 <_malloc_r+0x92>
 8012c9a:	230c      	movs	r3, #12
 8012c9c:	6033      	str	r3, [r6, #0]
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	f000 fbce 	bl	8013440 <__malloc_unlock>
 8012ca4:	e7e3      	b.n	8012c6e <_malloc_r+0x1e>
 8012ca6:	6823      	ldr	r3, [r4, #0]
 8012ca8:	1b5b      	subs	r3, r3, r5
 8012caa:	d417      	bmi.n	8012cdc <_malloc_r+0x8c>
 8012cac:	2b0b      	cmp	r3, #11
 8012cae:	d903      	bls.n	8012cb8 <_malloc_r+0x68>
 8012cb0:	6023      	str	r3, [r4, #0]
 8012cb2:	441c      	add	r4, r3
 8012cb4:	6025      	str	r5, [r4, #0]
 8012cb6:	e004      	b.n	8012cc2 <_malloc_r+0x72>
 8012cb8:	6863      	ldr	r3, [r4, #4]
 8012cba:	42a2      	cmp	r2, r4
 8012cbc:	bf0c      	ite	eq
 8012cbe:	600b      	streq	r3, [r1, #0]
 8012cc0:	6053      	strne	r3, [r2, #4]
 8012cc2:	4630      	mov	r0, r6
 8012cc4:	f000 fbbc 	bl	8013440 <__malloc_unlock>
 8012cc8:	f104 000b 	add.w	r0, r4, #11
 8012ccc:	1d23      	adds	r3, r4, #4
 8012cce:	f020 0007 	bic.w	r0, r0, #7
 8012cd2:	1ac2      	subs	r2, r0, r3
 8012cd4:	d0cc      	beq.n	8012c70 <_malloc_r+0x20>
 8012cd6:	1a1b      	subs	r3, r3, r0
 8012cd8:	50a3      	str	r3, [r4, r2]
 8012cda:	e7c9      	b.n	8012c70 <_malloc_r+0x20>
 8012cdc:	4622      	mov	r2, r4
 8012cde:	6864      	ldr	r4, [r4, #4]
 8012ce0:	e7cc      	b.n	8012c7c <_malloc_r+0x2c>
 8012ce2:	1cc4      	adds	r4, r0, #3
 8012ce4:	f024 0403 	bic.w	r4, r4, #3
 8012ce8:	42a0      	cmp	r0, r4
 8012cea:	d0e3      	beq.n	8012cb4 <_malloc_r+0x64>
 8012cec:	1a21      	subs	r1, r4, r0
 8012cee:	4630      	mov	r0, r6
 8012cf0:	f000 f97e 	bl	8012ff0 <_sbrk_r>
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	d1dd      	bne.n	8012cb4 <_malloc_r+0x64>
 8012cf8:	e7cf      	b.n	8012c9a <_malloc_r+0x4a>
 8012cfa:	bf00      	nop
 8012cfc:	20000494 	.word	0x20000494
 8012d00:	20000498 	.word	0x20000498

08012d04 <__ssputs_r>:
 8012d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d08:	688e      	ldr	r6, [r1, #8]
 8012d0a:	429e      	cmp	r6, r3
 8012d0c:	4682      	mov	sl, r0
 8012d0e:	460c      	mov	r4, r1
 8012d10:	4690      	mov	r8, r2
 8012d12:	461f      	mov	r7, r3
 8012d14:	d838      	bhi.n	8012d88 <__ssputs_r+0x84>
 8012d16:	898a      	ldrh	r2, [r1, #12]
 8012d18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012d1c:	d032      	beq.n	8012d84 <__ssputs_r+0x80>
 8012d1e:	6825      	ldr	r5, [r4, #0]
 8012d20:	6909      	ldr	r1, [r1, #16]
 8012d22:	eba5 0901 	sub.w	r9, r5, r1
 8012d26:	6965      	ldr	r5, [r4, #20]
 8012d28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d30:	3301      	adds	r3, #1
 8012d32:	444b      	add	r3, r9
 8012d34:	106d      	asrs	r5, r5, #1
 8012d36:	429d      	cmp	r5, r3
 8012d38:	bf38      	it	cc
 8012d3a:	461d      	movcc	r5, r3
 8012d3c:	0553      	lsls	r3, r2, #21
 8012d3e:	d531      	bpl.n	8012da4 <__ssputs_r+0xa0>
 8012d40:	4629      	mov	r1, r5
 8012d42:	f7ff ff85 	bl	8012c50 <_malloc_r>
 8012d46:	4606      	mov	r6, r0
 8012d48:	b950      	cbnz	r0, 8012d60 <__ssputs_r+0x5c>
 8012d4a:	230c      	movs	r3, #12
 8012d4c:	f8ca 3000 	str.w	r3, [sl]
 8012d50:	89a3      	ldrh	r3, [r4, #12]
 8012d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d56:	81a3      	strh	r3, [r4, #12]
 8012d58:	f04f 30ff 	mov.w	r0, #4294967295
 8012d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d60:	6921      	ldr	r1, [r4, #16]
 8012d62:	464a      	mov	r2, r9
 8012d64:	f7ff fa4c 	bl	8012200 <memcpy>
 8012d68:	89a3      	ldrh	r3, [r4, #12]
 8012d6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d72:	81a3      	strh	r3, [r4, #12]
 8012d74:	6126      	str	r6, [r4, #16]
 8012d76:	6165      	str	r5, [r4, #20]
 8012d78:	444e      	add	r6, r9
 8012d7a:	eba5 0509 	sub.w	r5, r5, r9
 8012d7e:	6026      	str	r6, [r4, #0]
 8012d80:	60a5      	str	r5, [r4, #8]
 8012d82:	463e      	mov	r6, r7
 8012d84:	42be      	cmp	r6, r7
 8012d86:	d900      	bls.n	8012d8a <__ssputs_r+0x86>
 8012d88:	463e      	mov	r6, r7
 8012d8a:	4632      	mov	r2, r6
 8012d8c:	6820      	ldr	r0, [r4, #0]
 8012d8e:	4641      	mov	r1, r8
 8012d90:	f000 fb36 	bl	8013400 <memmove>
 8012d94:	68a3      	ldr	r3, [r4, #8]
 8012d96:	6822      	ldr	r2, [r4, #0]
 8012d98:	1b9b      	subs	r3, r3, r6
 8012d9a:	4432      	add	r2, r6
 8012d9c:	60a3      	str	r3, [r4, #8]
 8012d9e:	6022      	str	r2, [r4, #0]
 8012da0:	2000      	movs	r0, #0
 8012da2:	e7db      	b.n	8012d5c <__ssputs_r+0x58>
 8012da4:	462a      	mov	r2, r5
 8012da6:	f000 fb51 	bl	801344c <_realloc_r>
 8012daa:	4606      	mov	r6, r0
 8012dac:	2800      	cmp	r0, #0
 8012dae:	d1e1      	bne.n	8012d74 <__ssputs_r+0x70>
 8012db0:	6921      	ldr	r1, [r4, #16]
 8012db2:	4650      	mov	r0, sl
 8012db4:	f7ff fefc 	bl	8012bb0 <_free_r>
 8012db8:	e7c7      	b.n	8012d4a <__ssputs_r+0x46>
	...

08012dbc <_svfiprintf_r>:
 8012dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dc0:	4698      	mov	r8, r3
 8012dc2:	898b      	ldrh	r3, [r1, #12]
 8012dc4:	061b      	lsls	r3, r3, #24
 8012dc6:	b09d      	sub	sp, #116	; 0x74
 8012dc8:	4607      	mov	r7, r0
 8012dca:	460d      	mov	r5, r1
 8012dcc:	4614      	mov	r4, r2
 8012dce:	d50e      	bpl.n	8012dee <_svfiprintf_r+0x32>
 8012dd0:	690b      	ldr	r3, [r1, #16]
 8012dd2:	b963      	cbnz	r3, 8012dee <_svfiprintf_r+0x32>
 8012dd4:	2140      	movs	r1, #64	; 0x40
 8012dd6:	f7ff ff3b 	bl	8012c50 <_malloc_r>
 8012dda:	6028      	str	r0, [r5, #0]
 8012ddc:	6128      	str	r0, [r5, #16]
 8012dde:	b920      	cbnz	r0, 8012dea <_svfiprintf_r+0x2e>
 8012de0:	230c      	movs	r3, #12
 8012de2:	603b      	str	r3, [r7, #0]
 8012de4:	f04f 30ff 	mov.w	r0, #4294967295
 8012de8:	e0d1      	b.n	8012f8e <_svfiprintf_r+0x1d2>
 8012dea:	2340      	movs	r3, #64	; 0x40
 8012dec:	616b      	str	r3, [r5, #20]
 8012dee:	2300      	movs	r3, #0
 8012df0:	9309      	str	r3, [sp, #36]	; 0x24
 8012df2:	2320      	movs	r3, #32
 8012df4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012df8:	f8cd 800c 	str.w	r8, [sp, #12]
 8012dfc:	2330      	movs	r3, #48	; 0x30
 8012dfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012fa8 <_svfiprintf_r+0x1ec>
 8012e02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e06:	f04f 0901 	mov.w	r9, #1
 8012e0a:	4623      	mov	r3, r4
 8012e0c:	469a      	mov	sl, r3
 8012e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e12:	b10a      	cbz	r2, 8012e18 <_svfiprintf_r+0x5c>
 8012e14:	2a25      	cmp	r2, #37	; 0x25
 8012e16:	d1f9      	bne.n	8012e0c <_svfiprintf_r+0x50>
 8012e18:	ebba 0b04 	subs.w	fp, sl, r4
 8012e1c:	d00b      	beq.n	8012e36 <_svfiprintf_r+0x7a>
 8012e1e:	465b      	mov	r3, fp
 8012e20:	4622      	mov	r2, r4
 8012e22:	4629      	mov	r1, r5
 8012e24:	4638      	mov	r0, r7
 8012e26:	f7ff ff6d 	bl	8012d04 <__ssputs_r>
 8012e2a:	3001      	adds	r0, #1
 8012e2c:	f000 80aa 	beq.w	8012f84 <_svfiprintf_r+0x1c8>
 8012e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e32:	445a      	add	r2, fp
 8012e34:	9209      	str	r2, [sp, #36]	; 0x24
 8012e36:	f89a 3000 	ldrb.w	r3, [sl]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f000 80a2 	beq.w	8012f84 <_svfiprintf_r+0x1c8>
 8012e40:	2300      	movs	r3, #0
 8012e42:	f04f 32ff 	mov.w	r2, #4294967295
 8012e46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e4a:	f10a 0a01 	add.w	sl, sl, #1
 8012e4e:	9304      	str	r3, [sp, #16]
 8012e50:	9307      	str	r3, [sp, #28]
 8012e52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e56:	931a      	str	r3, [sp, #104]	; 0x68
 8012e58:	4654      	mov	r4, sl
 8012e5a:	2205      	movs	r2, #5
 8012e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e60:	4851      	ldr	r0, [pc, #324]	; (8012fa8 <_svfiprintf_r+0x1ec>)
 8012e62:	f7ed f9bd 	bl	80001e0 <memchr>
 8012e66:	9a04      	ldr	r2, [sp, #16]
 8012e68:	b9d8      	cbnz	r0, 8012ea2 <_svfiprintf_r+0xe6>
 8012e6a:	06d0      	lsls	r0, r2, #27
 8012e6c:	bf44      	itt	mi
 8012e6e:	2320      	movmi	r3, #32
 8012e70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e74:	0711      	lsls	r1, r2, #28
 8012e76:	bf44      	itt	mi
 8012e78:	232b      	movmi	r3, #43	; 0x2b
 8012e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8012e82:	2b2a      	cmp	r3, #42	; 0x2a
 8012e84:	d015      	beq.n	8012eb2 <_svfiprintf_r+0xf6>
 8012e86:	9a07      	ldr	r2, [sp, #28]
 8012e88:	4654      	mov	r4, sl
 8012e8a:	2000      	movs	r0, #0
 8012e8c:	f04f 0c0a 	mov.w	ip, #10
 8012e90:	4621      	mov	r1, r4
 8012e92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e96:	3b30      	subs	r3, #48	; 0x30
 8012e98:	2b09      	cmp	r3, #9
 8012e9a:	d94e      	bls.n	8012f3a <_svfiprintf_r+0x17e>
 8012e9c:	b1b0      	cbz	r0, 8012ecc <_svfiprintf_r+0x110>
 8012e9e:	9207      	str	r2, [sp, #28]
 8012ea0:	e014      	b.n	8012ecc <_svfiprintf_r+0x110>
 8012ea2:	eba0 0308 	sub.w	r3, r0, r8
 8012ea6:	fa09 f303 	lsl.w	r3, r9, r3
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	9304      	str	r3, [sp, #16]
 8012eae:	46a2      	mov	sl, r4
 8012eb0:	e7d2      	b.n	8012e58 <_svfiprintf_r+0x9c>
 8012eb2:	9b03      	ldr	r3, [sp, #12]
 8012eb4:	1d19      	adds	r1, r3, #4
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	9103      	str	r1, [sp, #12]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	bfbb      	ittet	lt
 8012ebe:	425b      	neglt	r3, r3
 8012ec0:	f042 0202 	orrlt.w	r2, r2, #2
 8012ec4:	9307      	strge	r3, [sp, #28]
 8012ec6:	9307      	strlt	r3, [sp, #28]
 8012ec8:	bfb8      	it	lt
 8012eca:	9204      	strlt	r2, [sp, #16]
 8012ecc:	7823      	ldrb	r3, [r4, #0]
 8012ece:	2b2e      	cmp	r3, #46	; 0x2e
 8012ed0:	d10c      	bne.n	8012eec <_svfiprintf_r+0x130>
 8012ed2:	7863      	ldrb	r3, [r4, #1]
 8012ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8012ed6:	d135      	bne.n	8012f44 <_svfiprintf_r+0x188>
 8012ed8:	9b03      	ldr	r3, [sp, #12]
 8012eda:	1d1a      	adds	r2, r3, #4
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	9203      	str	r2, [sp, #12]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	bfb8      	it	lt
 8012ee4:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ee8:	3402      	adds	r4, #2
 8012eea:	9305      	str	r3, [sp, #20]
 8012eec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012fb8 <_svfiprintf_r+0x1fc>
 8012ef0:	7821      	ldrb	r1, [r4, #0]
 8012ef2:	2203      	movs	r2, #3
 8012ef4:	4650      	mov	r0, sl
 8012ef6:	f7ed f973 	bl	80001e0 <memchr>
 8012efa:	b140      	cbz	r0, 8012f0e <_svfiprintf_r+0x152>
 8012efc:	2340      	movs	r3, #64	; 0x40
 8012efe:	eba0 000a 	sub.w	r0, r0, sl
 8012f02:	fa03 f000 	lsl.w	r0, r3, r0
 8012f06:	9b04      	ldr	r3, [sp, #16]
 8012f08:	4303      	orrs	r3, r0
 8012f0a:	3401      	adds	r4, #1
 8012f0c:	9304      	str	r3, [sp, #16]
 8012f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f12:	4826      	ldr	r0, [pc, #152]	; (8012fac <_svfiprintf_r+0x1f0>)
 8012f14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f18:	2206      	movs	r2, #6
 8012f1a:	f7ed f961 	bl	80001e0 <memchr>
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	d038      	beq.n	8012f94 <_svfiprintf_r+0x1d8>
 8012f22:	4b23      	ldr	r3, [pc, #140]	; (8012fb0 <_svfiprintf_r+0x1f4>)
 8012f24:	bb1b      	cbnz	r3, 8012f6e <_svfiprintf_r+0x1b2>
 8012f26:	9b03      	ldr	r3, [sp, #12]
 8012f28:	3307      	adds	r3, #7
 8012f2a:	f023 0307 	bic.w	r3, r3, #7
 8012f2e:	3308      	adds	r3, #8
 8012f30:	9303      	str	r3, [sp, #12]
 8012f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f34:	4433      	add	r3, r6
 8012f36:	9309      	str	r3, [sp, #36]	; 0x24
 8012f38:	e767      	b.n	8012e0a <_svfiprintf_r+0x4e>
 8012f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f3e:	460c      	mov	r4, r1
 8012f40:	2001      	movs	r0, #1
 8012f42:	e7a5      	b.n	8012e90 <_svfiprintf_r+0xd4>
 8012f44:	2300      	movs	r3, #0
 8012f46:	3401      	adds	r4, #1
 8012f48:	9305      	str	r3, [sp, #20]
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	f04f 0c0a 	mov.w	ip, #10
 8012f50:	4620      	mov	r0, r4
 8012f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f56:	3a30      	subs	r2, #48	; 0x30
 8012f58:	2a09      	cmp	r2, #9
 8012f5a:	d903      	bls.n	8012f64 <_svfiprintf_r+0x1a8>
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d0c5      	beq.n	8012eec <_svfiprintf_r+0x130>
 8012f60:	9105      	str	r1, [sp, #20]
 8012f62:	e7c3      	b.n	8012eec <_svfiprintf_r+0x130>
 8012f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f68:	4604      	mov	r4, r0
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	e7f0      	b.n	8012f50 <_svfiprintf_r+0x194>
 8012f6e:	ab03      	add	r3, sp, #12
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	462a      	mov	r2, r5
 8012f74:	4b0f      	ldr	r3, [pc, #60]	; (8012fb4 <_svfiprintf_r+0x1f8>)
 8012f76:	a904      	add	r1, sp, #16
 8012f78:	4638      	mov	r0, r7
 8012f7a:	f7fc f9ff 	bl	800f37c <_printf_float>
 8012f7e:	1c42      	adds	r2, r0, #1
 8012f80:	4606      	mov	r6, r0
 8012f82:	d1d6      	bne.n	8012f32 <_svfiprintf_r+0x176>
 8012f84:	89ab      	ldrh	r3, [r5, #12]
 8012f86:	065b      	lsls	r3, r3, #25
 8012f88:	f53f af2c 	bmi.w	8012de4 <_svfiprintf_r+0x28>
 8012f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f8e:	b01d      	add	sp, #116	; 0x74
 8012f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f94:	ab03      	add	r3, sp, #12
 8012f96:	9300      	str	r3, [sp, #0]
 8012f98:	462a      	mov	r2, r5
 8012f9a:	4b06      	ldr	r3, [pc, #24]	; (8012fb4 <_svfiprintf_r+0x1f8>)
 8012f9c:	a904      	add	r1, sp, #16
 8012f9e:	4638      	mov	r0, r7
 8012fa0:	f7fc fc90 	bl	800f8c4 <_printf_i>
 8012fa4:	e7eb      	b.n	8012f7e <_svfiprintf_r+0x1c2>
 8012fa6:	bf00      	nop
 8012fa8:	08015404 	.word	0x08015404
 8012fac:	0801540e 	.word	0x0801540e
 8012fb0:	0800f37d 	.word	0x0800f37d
 8012fb4:	08012d05 	.word	0x08012d05
 8012fb8:	0801540a 	.word	0x0801540a

08012fbc <_read_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4d07      	ldr	r5, [pc, #28]	; (8012fdc <_read_r+0x20>)
 8012fc0:	4604      	mov	r4, r0
 8012fc2:	4608      	mov	r0, r1
 8012fc4:	4611      	mov	r1, r2
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	602a      	str	r2, [r5, #0]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	f7f1 fe14 	bl	8004bf8 <_read>
 8012fd0:	1c43      	adds	r3, r0, #1
 8012fd2:	d102      	bne.n	8012fda <_read_r+0x1e>
 8012fd4:	682b      	ldr	r3, [r5, #0]
 8012fd6:	b103      	cbz	r3, 8012fda <_read_r+0x1e>
 8012fd8:	6023      	str	r3, [r4, #0]
 8012fda:	bd38      	pop	{r3, r4, r5, pc}
 8012fdc:	20004b34 	.word	0x20004b34

08012fe0 <nan>:
 8012fe0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012fe8 <nan+0x8>
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	7ff80000 	.word	0x7ff80000

08012ff0 <_sbrk_r>:
 8012ff0:	b538      	push	{r3, r4, r5, lr}
 8012ff2:	4d06      	ldr	r5, [pc, #24]	; (801300c <_sbrk_r+0x1c>)
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	4608      	mov	r0, r1
 8012ffa:	602b      	str	r3, [r5, #0]
 8012ffc:	f7f1 fe6a 	bl	8004cd4 <_sbrk>
 8013000:	1c43      	adds	r3, r0, #1
 8013002:	d102      	bne.n	801300a <_sbrk_r+0x1a>
 8013004:	682b      	ldr	r3, [r5, #0]
 8013006:	b103      	cbz	r3, 801300a <_sbrk_r+0x1a>
 8013008:	6023      	str	r3, [r4, #0]
 801300a:	bd38      	pop	{r3, r4, r5, pc}
 801300c:	20004b34 	.word	0x20004b34

08013010 <__ascii_wctomb>:
 8013010:	b149      	cbz	r1, 8013026 <__ascii_wctomb+0x16>
 8013012:	2aff      	cmp	r2, #255	; 0xff
 8013014:	bf85      	ittet	hi
 8013016:	238a      	movhi	r3, #138	; 0x8a
 8013018:	6003      	strhi	r3, [r0, #0]
 801301a:	700a      	strbls	r2, [r1, #0]
 801301c:	f04f 30ff 	movhi.w	r0, #4294967295
 8013020:	bf98      	it	ls
 8013022:	2001      	movls	r0, #1
 8013024:	4770      	bx	lr
 8013026:	4608      	mov	r0, r1
 8013028:	4770      	bx	lr
	...

0801302c <__assert_func>:
 801302c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801302e:	4614      	mov	r4, r2
 8013030:	461a      	mov	r2, r3
 8013032:	4b09      	ldr	r3, [pc, #36]	; (8013058 <__assert_func+0x2c>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	4605      	mov	r5, r0
 8013038:	68d8      	ldr	r0, [r3, #12]
 801303a:	b14c      	cbz	r4, 8013050 <__assert_func+0x24>
 801303c:	4b07      	ldr	r3, [pc, #28]	; (801305c <__assert_func+0x30>)
 801303e:	9100      	str	r1, [sp, #0]
 8013040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013044:	4906      	ldr	r1, [pc, #24]	; (8013060 <__assert_func+0x34>)
 8013046:	462b      	mov	r3, r5
 8013048:	f000 f9a6 	bl	8013398 <fiprintf>
 801304c:	f000 fc3e 	bl	80138cc <abort>
 8013050:	4b04      	ldr	r3, [pc, #16]	; (8013064 <__assert_func+0x38>)
 8013052:	461c      	mov	r4, r3
 8013054:	e7f3      	b.n	801303e <__assert_func+0x12>
 8013056:	bf00      	nop
 8013058:	20000058 	.word	0x20000058
 801305c:	08015415 	.word	0x08015415
 8013060:	08015422 	.word	0x08015422
 8013064:	08015450 	.word	0x08015450

08013068 <__sflush_r>:
 8013068:	898a      	ldrh	r2, [r1, #12]
 801306a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801306e:	4605      	mov	r5, r0
 8013070:	0710      	lsls	r0, r2, #28
 8013072:	460c      	mov	r4, r1
 8013074:	d458      	bmi.n	8013128 <__sflush_r+0xc0>
 8013076:	684b      	ldr	r3, [r1, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	dc05      	bgt.n	8013088 <__sflush_r+0x20>
 801307c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801307e:	2b00      	cmp	r3, #0
 8013080:	dc02      	bgt.n	8013088 <__sflush_r+0x20>
 8013082:	2000      	movs	r0, #0
 8013084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801308a:	2e00      	cmp	r6, #0
 801308c:	d0f9      	beq.n	8013082 <__sflush_r+0x1a>
 801308e:	2300      	movs	r3, #0
 8013090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013094:	682f      	ldr	r7, [r5, #0]
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	d032      	beq.n	8013100 <__sflush_r+0x98>
 801309a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801309c:	89a3      	ldrh	r3, [r4, #12]
 801309e:	075a      	lsls	r2, r3, #29
 80130a0:	d505      	bpl.n	80130ae <__sflush_r+0x46>
 80130a2:	6863      	ldr	r3, [r4, #4]
 80130a4:	1ac0      	subs	r0, r0, r3
 80130a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80130a8:	b10b      	cbz	r3, 80130ae <__sflush_r+0x46>
 80130aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80130ac:	1ac0      	subs	r0, r0, r3
 80130ae:	2300      	movs	r3, #0
 80130b0:	4602      	mov	r2, r0
 80130b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80130b4:	6a21      	ldr	r1, [r4, #32]
 80130b6:	4628      	mov	r0, r5
 80130b8:	47b0      	blx	r6
 80130ba:	1c43      	adds	r3, r0, #1
 80130bc:	89a3      	ldrh	r3, [r4, #12]
 80130be:	d106      	bne.n	80130ce <__sflush_r+0x66>
 80130c0:	6829      	ldr	r1, [r5, #0]
 80130c2:	291d      	cmp	r1, #29
 80130c4:	d82c      	bhi.n	8013120 <__sflush_r+0xb8>
 80130c6:	4a2a      	ldr	r2, [pc, #168]	; (8013170 <__sflush_r+0x108>)
 80130c8:	40ca      	lsrs	r2, r1
 80130ca:	07d6      	lsls	r6, r2, #31
 80130cc:	d528      	bpl.n	8013120 <__sflush_r+0xb8>
 80130ce:	2200      	movs	r2, #0
 80130d0:	6062      	str	r2, [r4, #4]
 80130d2:	04d9      	lsls	r1, r3, #19
 80130d4:	6922      	ldr	r2, [r4, #16]
 80130d6:	6022      	str	r2, [r4, #0]
 80130d8:	d504      	bpl.n	80130e4 <__sflush_r+0x7c>
 80130da:	1c42      	adds	r2, r0, #1
 80130dc:	d101      	bne.n	80130e2 <__sflush_r+0x7a>
 80130de:	682b      	ldr	r3, [r5, #0]
 80130e0:	b903      	cbnz	r3, 80130e4 <__sflush_r+0x7c>
 80130e2:	6560      	str	r0, [r4, #84]	; 0x54
 80130e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80130e6:	602f      	str	r7, [r5, #0]
 80130e8:	2900      	cmp	r1, #0
 80130ea:	d0ca      	beq.n	8013082 <__sflush_r+0x1a>
 80130ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80130f0:	4299      	cmp	r1, r3
 80130f2:	d002      	beq.n	80130fa <__sflush_r+0x92>
 80130f4:	4628      	mov	r0, r5
 80130f6:	f7ff fd5b 	bl	8012bb0 <_free_r>
 80130fa:	2000      	movs	r0, #0
 80130fc:	6360      	str	r0, [r4, #52]	; 0x34
 80130fe:	e7c1      	b.n	8013084 <__sflush_r+0x1c>
 8013100:	6a21      	ldr	r1, [r4, #32]
 8013102:	2301      	movs	r3, #1
 8013104:	4628      	mov	r0, r5
 8013106:	47b0      	blx	r6
 8013108:	1c41      	adds	r1, r0, #1
 801310a:	d1c7      	bne.n	801309c <__sflush_r+0x34>
 801310c:	682b      	ldr	r3, [r5, #0]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d0c4      	beq.n	801309c <__sflush_r+0x34>
 8013112:	2b1d      	cmp	r3, #29
 8013114:	d001      	beq.n	801311a <__sflush_r+0xb2>
 8013116:	2b16      	cmp	r3, #22
 8013118:	d101      	bne.n	801311e <__sflush_r+0xb6>
 801311a:	602f      	str	r7, [r5, #0]
 801311c:	e7b1      	b.n	8013082 <__sflush_r+0x1a>
 801311e:	89a3      	ldrh	r3, [r4, #12]
 8013120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013124:	81a3      	strh	r3, [r4, #12]
 8013126:	e7ad      	b.n	8013084 <__sflush_r+0x1c>
 8013128:	690f      	ldr	r7, [r1, #16]
 801312a:	2f00      	cmp	r7, #0
 801312c:	d0a9      	beq.n	8013082 <__sflush_r+0x1a>
 801312e:	0793      	lsls	r3, r2, #30
 8013130:	680e      	ldr	r6, [r1, #0]
 8013132:	bf08      	it	eq
 8013134:	694b      	ldreq	r3, [r1, #20]
 8013136:	600f      	str	r7, [r1, #0]
 8013138:	bf18      	it	ne
 801313a:	2300      	movne	r3, #0
 801313c:	eba6 0807 	sub.w	r8, r6, r7
 8013140:	608b      	str	r3, [r1, #8]
 8013142:	f1b8 0f00 	cmp.w	r8, #0
 8013146:	dd9c      	ble.n	8013082 <__sflush_r+0x1a>
 8013148:	6a21      	ldr	r1, [r4, #32]
 801314a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801314c:	4643      	mov	r3, r8
 801314e:	463a      	mov	r2, r7
 8013150:	4628      	mov	r0, r5
 8013152:	47b0      	blx	r6
 8013154:	2800      	cmp	r0, #0
 8013156:	dc06      	bgt.n	8013166 <__sflush_r+0xfe>
 8013158:	89a3      	ldrh	r3, [r4, #12]
 801315a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801315e:	81a3      	strh	r3, [r4, #12]
 8013160:	f04f 30ff 	mov.w	r0, #4294967295
 8013164:	e78e      	b.n	8013084 <__sflush_r+0x1c>
 8013166:	4407      	add	r7, r0
 8013168:	eba8 0800 	sub.w	r8, r8, r0
 801316c:	e7e9      	b.n	8013142 <__sflush_r+0xda>
 801316e:	bf00      	nop
 8013170:	20400001 	.word	0x20400001

08013174 <_fflush_r>:
 8013174:	b538      	push	{r3, r4, r5, lr}
 8013176:	690b      	ldr	r3, [r1, #16]
 8013178:	4605      	mov	r5, r0
 801317a:	460c      	mov	r4, r1
 801317c:	b913      	cbnz	r3, 8013184 <_fflush_r+0x10>
 801317e:	2500      	movs	r5, #0
 8013180:	4628      	mov	r0, r5
 8013182:	bd38      	pop	{r3, r4, r5, pc}
 8013184:	b118      	cbz	r0, 801318e <_fflush_r+0x1a>
 8013186:	6983      	ldr	r3, [r0, #24]
 8013188:	b90b      	cbnz	r3, 801318e <_fflush_r+0x1a>
 801318a:	f000 f887 	bl	801329c <__sinit>
 801318e:	4b14      	ldr	r3, [pc, #80]	; (80131e0 <_fflush_r+0x6c>)
 8013190:	429c      	cmp	r4, r3
 8013192:	d11b      	bne.n	80131cc <_fflush_r+0x58>
 8013194:	686c      	ldr	r4, [r5, #4]
 8013196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d0ef      	beq.n	801317e <_fflush_r+0xa>
 801319e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80131a0:	07d0      	lsls	r0, r2, #31
 80131a2:	d404      	bmi.n	80131ae <_fflush_r+0x3a>
 80131a4:	0599      	lsls	r1, r3, #22
 80131a6:	d402      	bmi.n	80131ae <_fflush_r+0x3a>
 80131a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131aa:	f000 f927 	bl	80133fc <__retarget_lock_acquire_recursive>
 80131ae:	4628      	mov	r0, r5
 80131b0:	4621      	mov	r1, r4
 80131b2:	f7ff ff59 	bl	8013068 <__sflush_r>
 80131b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131b8:	07da      	lsls	r2, r3, #31
 80131ba:	4605      	mov	r5, r0
 80131bc:	d4e0      	bmi.n	8013180 <_fflush_r+0xc>
 80131be:	89a3      	ldrh	r3, [r4, #12]
 80131c0:	059b      	lsls	r3, r3, #22
 80131c2:	d4dd      	bmi.n	8013180 <_fflush_r+0xc>
 80131c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131c6:	f000 f91a 	bl	80133fe <__retarget_lock_release_recursive>
 80131ca:	e7d9      	b.n	8013180 <_fflush_r+0xc>
 80131cc:	4b05      	ldr	r3, [pc, #20]	; (80131e4 <_fflush_r+0x70>)
 80131ce:	429c      	cmp	r4, r3
 80131d0:	d101      	bne.n	80131d6 <_fflush_r+0x62>
 80131d2:	68ac      	ldr	r4, [r5, #8]
 80131d4:	e7df      	b.n	8013196 <_fflush_r+0x22>
 80131d6:	4b04      	ldr	r3, [pc, #16]	; (80131e8 <_fflush_r+0x74>)
 80131d8:	429c      	cmp	r4, r3
 80131da:	bf08      	it	eq
 80131dc:	68ec      	ldreq	r4, [r5, #12]
 80131de:	e7da      	b.n	8013196 <_fflush_r+0x22>
 80131e0:	08015474 	.word	0x08015474
 80131e4:	08015494 	.word	0x08015494
 80131e8:	08015454 	.word	0x08015454

080131ec <std>:
 80131ec:	2300      	movs	r3, #0
 80131ee:	b510      	push	{r4, lr}
 80131f0:	4604      	mov	r4, r0
 80131f2:	e9c0 3300 	strd	r3, r3, [r0]
 80131f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80131fa:	6083      	str	r3, [r0, #8]
 80131fc:	8181      	strh	r1, [r0, #12]
 80131fe:	6643      	str	r3, [r0, #100]	; 0x64
 8013200:	81c2      	strh	r2, [r0, #14]
 8013202:	6183      	str	r3, [r0, #24]
 8013204:	4619      	mov	r1, r3
 8013206:	2208      	movs	r2, #8
 8013208:	305c      	adds	r0, #92	; 0x5c
 801320a:	f7fc f80f 	bl	800f22c <memset>
 801320e:	4b05      	ldr	r3, [pc, #20]	; (8013224 <std+0x38>)
 8013210:	6263      	str	r3, [r4, #36]	; 0x24
 8013212:	4b05      	ldr	r3, [pc, #20]	; (8013228 <std+0x3c>)
 8013214:	62a3      	str	r3, [r4, #40]	; 0x28
 8013216:	4b05      	ldr	r3, [pc, #20]	; (801322c <std+0x40>)
 8013218:	62e3      	str	r3, [r4, #44]	; 0x2c
 801321a:	4b05      	ldr	r3, [pc, #20]	; (8013230 <std+0x44>)
 801321c:	6224      	str	r4, [r4, #32]
 801321e:	6323      	str	r3, [r4, #48]	; 0x30
 8013220:	bd10      	pop	{r4, pc}
 8013222:	bf00      	nop
 8013224:	0800ff7d 	.word	0x0800ff7d
 8013228:	0800ff9f 	.word	0x0800ff9f
 801322c:	0800ffd7 	.word	0x0800ffd7
 8013230:	0800fffb 	.word	0x0800fffb

08013234 <_cleanup_r>:
 8013234:	4901      	ldr	r1, [pc, #4]	; (801323c <_cleanup_r+0x8>)
 8013236:	f000 b8c1 	b.w	80133bc <_fwalk_reent>
 801323a:	bf00      	nop
 801323c:	08013175 	.word	0x08013175

08013240 <__sfmoreglue>:
 8013240:	b570      	push	{r4, r5, r6, lr}
 8013242:	1e4a      	subs	r2, r1, #1
 8013244:	2568      	movs	r5, #104	; 0x68
 8013246:	4355      	muls	r5, r2
 8013248:	460e      	mov	r6, r1
 801324a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801324e:	f7ff fcff 	bl	8012c50 <_malloc_r>
 8013252:	4604      	mov	r4, r0
 8013254:	b140      	cbz	r0, 8013268 <__sfmoreglue+0x28>
 8013256:	2100      	movs	r1, #0
 8013258:	e9c0 1600 	strd	r1, r6, [r0]
 801325c:	300c      	adds	r0, #12
 801325e:	60a0      	str	r0, [r4, #8]
 8013260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013264:	f7fb ffe2 	bl	800f22c <memset>
 8013268:	4620      	mov	r0, r4
 801326a:	bd70      	pop	{r4, r5, r6, pc}

0801326c <__sfp_lock_acquire>:
 801326c:	4801      	ldr	r0, [pc, #4]	; (8013274 <__sfp_lock_acquire+0x8>)
 801326e:	f000 b8c5 	b.w	80133fc <__retarget_lock_acquire_recursive>
 8013272:	bf00      	nop
 8013274:	20004b40 	.word	0x20004b40

08013278 <__sfp_lock_release>:
 8013278:	4801      	ldr	r0, [pc, #4]	; (8013280 <__sfp_lock_release+0x8>)
 801327a:	f000 b8c0 	b.w	80133fe <__retarget_lock_release_recursive>
 801327e:	bf00      	nop
 8013280:	20004b40 	.word	0x20004b40

08013284 <__sinit_lock_acquire>:
 8013284:	4801      	ldr	r0, [pc, #4]	; (801328c <__sinit_lock_acquire+0x8>)
 8013286:	f000 b8b9 	b.w	80133fc <__retarget_lock_acquire_recursive>
 801328a:	bf00      	nop
 801328c:	20004b3b 	.word	0x20004b3b

08013290 <__sinit_lock_release>:
 8013290:	4801      	ldr	r0, [pc, #4]	; (8013298 <__sinit_lock_release+0x8>)
 8013292:	f000 b8b4 	b.w	80133fe <__retarget_lock_release_recursive>
 8013296:	bf00      	nop
 8013298:	20004b3b 	.word	0x20004b3b

0801329c <__sinit>:
 801329c:	b510      	push	{r4, lr}
 801329e:	4604      	mov	r4, r0
 80132a0:	f7ff fff0 	bl	8013284 <__sinit_lock_acquire>
 80132a4:	69a3      	ldr	r3, [r4, #24]
 80132a6:	b11b      	cbz	r3, 80132b0 <__sinit+0x14>
 80132a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132ac:	f7ff bff0 	b.w	8013290 <__sinit_lock_release>
 80132b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80132b4:	6523      	str	r3, [r4, #80]	; 0x50
 80132b6:	4b13      	ldr	r3, [pc, #76]	; (8013304 <__sinit+0x68>)
 80132b8:	4a13      	ldr	r2, [pc, #76]	; (8013308 <__sinit+0x6c>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80132be:	42a3      	cmp	r3, r4
 80132c0:	bf04      	itt	eq
 80132c2:	2301      	moveq	r3, #1
 80132c4:	61a3      	streq	r3, [r4, #24]
 80132c6:	4620      	mov	r0, r4
 80132c8:	f000 f820 	bl	801330c <__sfp>
 80132cc:	6060      	str	r0, [r4, #4]
 80132ce:	4620      	mov	r0, r4
 80132d0:	f000 f81c 	bl	801330c <__sfp>
 80132d4:	60a0      	str	r0, [r4, #8]
 80132d6:	4620      	mov	r0, r4
 80132d8:	f000 f818 	bl	801330c <__sfp>
 80132dc:	2200      	movs	r2, #0
 80132de:	60e0      	str	r0, [r4, #12]
 80132e0:	2104      	movs	r1, #4
 80132e2:	6860      	ldr	r0, [r4, #4]
 80132e4:	f7ff ff82 	bl	80131ec <std>
 80132e8:	68a0      	ldr	r0, [r4, #8]
 80132ea:	2201      	movs	r2, #1
 80132ec:	2109      	movs	r1, #9
 80132ee:	f7ff ff7d 	bl	80131ec <std>
 80132f2:	68e0      	ldr	r0, [r4, #12]
 80132f4:	2202      	movs	r2, #2
 80132f6:	2112      	movs	r1, #18
 80132f8:	f7ff ff78 	bl	80131ec <std>
 80132fc:	2301      	movs	r3, #1
 80132fe:	61a3      	str	r3, [r4, #24]
 8013300:	e7d2      	b.n	80132a8 <__sinit+0xc>
 8013302:	bf00      	nop
 8013304:	08014ffc 	.word	0x08014ffc
 8013308:	08013235 	.word	0x08013235

0801330c <__sfp>:
 801330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801330e:	4607      	mov	r7, r0
 8013310:	f7ff ffac 	bl	801326c <__sfp_lock_acquire>
 8013314:	4b1e      	ldr	r3, [pc, #120]	; (8013390 <__sfp+0x84>)
 8013316:	681e      	ldr	r6, [r3, #0]
 8013318:	69b3      	ldr	r3, [r6, #24]
 801331a:	b913      	cbnz	r3, 8013322 <__sfp+0x16>
 801331c:	4630      	mov	r0, r6
 801331e:	f7ff ffbd 	bl	801329c <__sinit>
 8013322:	3648      	adds	r6, #72	; 0x48
 8013324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013328:	3b01      	subs	r3, #1
 801332a:	d503      	bpl.n	8013334 <__sfp+0x28>
 801332c:	6833      	ldr	r3, [r6, #0]
 801332e:	b30b      	cbz	r3, 8013374 <__sfp+0x68>
 8013330:	6836      	ldr	r6, [r6, #0]
 8013332:	e7f7      	b.n	8013324 <__sfp+0x18>
 8013334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013338:	b9d5      	cbnz	r5, 8013370 <__sfp+0x64>
 801333a:	4b16      	ldr	r3, [pc, #88]	; (8013394 <__sfp+0x88>)
 801333c:	60e3      	str	r3, [r4, #12]
 801333e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013342:	6665      	str	r5, [r4, #100]	; 0x64
 8013344:	f000 f859 	bl	80133fa <__retarget_lock_init_recursive>
 8013348:	f7ff ff96 	bl	8013278 <__sfp_lock_release>
 801334c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013354:	6025      	str	r5, [r4, #0]
 8013356:	61a5      	str	r5, [r4, #24]
 8013358:	2208      	movs	r2, #8
 801335a:	4629      	mov	r1, r5
 801335c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013360:	f7fb ff64 	bl	800f22c <memset>
 8013364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801336c:	4620      	mov	r0, r4
 801336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013370:	3468      	adds	r4, #104	; 0x68
 8013372:	e7d9      	b.n	8013328 <__sfp+0x1c>
 8013374:	2104      	movs	r1, #4
 8013376:	4638      	mov	r0, r7
 8013378:	f7ff ff62 	bl	8013240 <__sfmoreglue>
 801337c:	4604      	mov	r4, r0
 801337e:	6030      	str	r0, [r6, #0]
 8013380:	2800      	cmp	r0, #0
 8013382:	d1d5      	bne.n	8013330 <__sfp+0x24>
 8013384:	f7ff ff78 	bl	8013278 <__sfp_lock_release>
 8013388:	230c      	movs	r3, #12
 801338a:	603b      	str	r3, [r7, #0]
 801338c:	e7ee      	b.n	801336c <__sfp+0x60>
 801338e:	bf00      	nop
 8013390:	08014ffc 	.word	0x08014ffc
 8013394:	ffff0001 	.word	0xffff0001

08013398 <fiprintf>:
 8013398:	b40e      	push	{r1, r2, r3}
 801339a:	b503      	push	{r0, r1, lr}
 801339c:	4601      	mov	r1, r0
 801339e:	ab03      	add	r3, sp, #12
 80133a0:	4805      	ldr	r0, [pc, #20]	; (80133b8 <fiprintf+0x20>)
 80133a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80133a6:	6800      	ldr	r0, [r0, #0]
 80133a8:	9301      	str	r3, [sp, #4]
 80133aa:	f000 f89f 	bl	80134ec <_vfiprintf_r>
 80133ae:	b002      	add	sp, #8
 80133b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80133b4:	b003      	add	sp, #12
 80133b6:	4770      	bx	lr
 80133b8:	20000058 	.word	0x20000058

080133bc <_fwalk_reent>:
 80133bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133c0:	4606      	mov	r6, r0
 80133c2:	4688      	mov	r8, r1
 80133c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80133c8:	2700      	movs	r7, #0
 80133ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80133ce:	f1b9 0901 	subs.w	r9, r9, #1
 80133d2:	d505      	bpl.n	80133e0 <_fwalk_reent+0x24>
 80133d4:	6824      	ldr	r4, [r4, #0]
 80133d6:	2c00      	cmp	r4, #0
 80133d8:	d1f7      	bne.n	80133ca <_fwalk_reent+0xe>
 80133da:	4638      	mov	r0, r7
 80133dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133e0:	89ab      	ldrh	r3, [r5, #12]
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d907      	bls.n	80133f6 <_fwalk_reent+0x3a>
 80133e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80133ea:	3301      	adds	r3, #1
 80133ec:	d003      	beq.n	80133f6 <_fwalk_reent+0x3a>
 80133ee:	4629      	mov	r1, r5
 80133f0:	4630      	mov	r0, r6
 80133f2:	47c0      	blx	r8
 80133f4:	4307      	orrs	r7, r0
 80133f6:	3568      	adds	r5, #104	; 0x68
 80133f8:	e7e9      	b.n	80133ce <_fwalk_reent+0x12>

080133fa <__retarget_lock_init_recursive>:
 80133fa:	4770      	bx	lr

080133fc <__retarget_lock_acquire_recursive>:
 80133fc:	4770      	bx	lr

080133fe <__retarget_lock_release_recursive>:
 80133fe:	4770      	bx	lr

08013400 <memmove>:
 8013400:	4288      	cmp	r0, r1
 8013402:	b510      	push	{r4, lr}
 8013404:	eb01 0402 	add.w	r4, r1, r2
 8013408:	d902      	bls.n	8013410 <memmove+0x10>
 801340a:	4284      	cmp	r4, r0
 801340c:	4623      	mov	r3, r4
 801340e:	d807      	bhi.n	8013420 <memmove+0x20>
 8013410:	1e43      	subs	r3, r0, #1
 8013412:	42a1      	cmp	r1, r4
 8013414:	d008      	beq.n	8013428 <memmove+0x28>
 8013416:	f811 2b01 	ldrb.w	r2, [r1], #1
 801341a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801341e:	e7f8      	b.n	8013412 <memmove+0x12>
 8013420:	4402      	add	r2, r0
 8013422:	4601      	mov	r1, r0
 8013424:	428a      	cmp	r2, r1
 8013426:	d100      	bne.n	801342a <memmove+0x2a>
 8013428:	bd10      	pop	{r4, pc}
 801342a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801342e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013432:	e7f7      	b.n	8013424 <memmove+0x24>

08013434 <__malloc_lock>:
 8013434:	4801      	ldr	r0, [pc, #4]	; (801343c <__malloc_lock+0x8>)
 8013436:	f7ff bfe1 	b.w	80133fc <__retarget_lock_acquire_recursive>
 801343a:	bf00      	nop
 801343c:	20004b3c 	.word	0x20004b3c

08013440 <__malloc_unlock>:
 8013440:	4801      	ldr	r0, [pc, #4]	; (8013448 <__malloc_unlock+0x8>)
 8013442:	f7ff bfdc 	b.w	80133fe <__retarget_lock_release_recursive>
 8013446:	bf00      	nop
 8013448:	20004b3c 	.word	0x20004b3c

0801344c <_realloc_r>:
 801344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801344e:	4607      	mov	r7, r0
 8013450:	4614      	mov	r4, r2
 8013452:	460e      	mov	r6, r1
 8013454:	b921      	cbnz	r1, 8013460 <_realloc_r+0x14>
 8013456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801345a:	4611      	mov	r1, r2
 801345c:	f7ff bbf8 	b.w	8012c50 <_malloc_r>
 8013460:	b922      	cbnz	r2, 801346c <_realloc_r+0x20>
 8013462:	f7ff fba5 	bl	8012bb0 <_free_r>
 8013466:	4625      	mov	r5, r4
 8013468:	4628      	mov	r0, r5
 801346a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801346c:	f000 fa9a 	bl	80139a4 <_malloc_usable_size_r>
 8013470:	42a0      	cmp	r0, r4
 8013472:	d20f      	bcs.n	8013494 <_realloc_r+0x48>
 8013474:	4621      	mov	r1, r4
 8013476:	4638      	mov	r0, r7
 8013478:	f7ff fbea 	bl	8012c50 <_malloc_r>
 801347c:	4605      	mov	r5, r0
 801347e:	2800      	cmp	r0, #0
 8013480:	d0f2      	beq.n	8013468 <_realloc_r+0x1c>
 8013482:	4631      	mov	r1, r6
 8013484:	4622      	mov	r2, r4
 8013486:	f7fe febb 	bl	8012200 <memcpy>
 801348a:	4631      	mov	r1, r6
 801348c:	4638      	mov	r0, r7
 801348e:	f7ff fb8f 	bl	8012bb0 <_free_r>
 8013492:	e7e9      	b.n	8013468 <_realloc_r+0x1c>
 8013494:	4635      	mov	r5, r6
 8013496:	e7e7      	b.n	8013468 <_realloc_r+0x1c>

08013498 <__sfputc_r>:
 8013498:	6893      	ldr	r3, [r2, #8]
 801349a:	3b01      	subs	r3, #1
 801349c:	2b00      	cmp	r3, #0
 801349e:	b410      	push	{r4}
 80134a0:	6093      	str	r3, [r2, #8]
 80134a2:	da08      	bge.n	80134b6 <__sfputc_r+0x1e>
 80134a4:	6994      	ldr	r4, [r2, #24]
 80134a6:	42a3      	cmp	r3, r4
 80134a8:	db01      	blt.n	80134ae <__sfputc_r+0x16>
 80134aa:	290a      	cmp	r1, #10
 80134ac:	d103      	bne.n	80134b6 <__sfputc_r+0x1e>
 80134ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134b2:	f000 b94b 	b.w	801374c <__swbuf_r>
 80134b6:	6813      	ldr	r3, [r2, #0]
 80134b8:	1c58      	adds	r0, r3, #1
 80134ba:	6010      	str	r0, [r2, #0]
 80134bc:	7019      	strb	r1, [r3, #0]
 80134be:	4608      	mov	r0, r1
 80134c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80134c4:	4770      	bx	lr

080134c6 <__sfputs_r>:
 80134c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134c8:	4606      	mov	r6, r0
 80134ca:	460f      	mov	r7, r1
 80134cc:	4614      	mov	r4, r2
 80134ce:	18d5      	adds	r5, r2, r3
 80134d0:	42ac      	cmp	r4, r5
 80134d2:	d101      	bne.n	80134d8 <__sfputs_r+0x12>
 80134d4:	2000      	movs	r0, #0
 80134d6:	e007      	b.n	80134e8 <__sfputs_r+0x22>
 80134d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134dc:	463a      	mov	r2, r7
 80134de:	4630      	mov	r0, r6
 80134e0:	f7ff ffda 	bl	8013498 <__sfputc_r>
 80134e4:	1c43      	adds	r3, r0, #1
 80134e6:	d1f3      	bne.n	80134d0 <__sfputs_r+0xa>
 80134e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080134ec <_vfiprintf_r>:
 80134ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f0:	460d      	mov	r5, r1
 80134f2:	b09d      	sub	sp, #116	; 0x74
 80134f4:	4614      	mov	r4, r2
 80134f6:	4698      	mov	r8, r3
 80134f8:	4606      	mov	r6, r0
 80134fa:	b118      	cbz	r0, 8013504 <_vfiprintf_r+0x18>
 80134fc:	6983      	ldr	r3, [r0, #24]
 80134fe:	b90b      	cbnz	r3, 8013504 <_vfiprintf_r+0x18>
 8013500:	f7ff fecc 	bl	801329c <__sinit>
 8013504:	4b89      	ldr	r3, [pc, #548]	; (801372c <_vfiprintf_r+0x240>)
 8013506:	429d      	cmp	r5, r3
 8013508:	d11b      	bne.n	8013542 <_vfiprintf_r+0x56>
 801350a:	6875      	ldr	r5, [r6, #4]
 801350c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801350e:	07d9      	lsls	r1, r3, #31
 8013510:	d405      	bmi.n	801351e <_vfiprintf_r+0x32>
 8013512:	89ab      	ldrh	r3, [r5, #12]
 8013514:	059a      	lsls	r2, r3, #22
 8013516:	d402      	bmi.n	801351e <_vfiprintf_r+0x32>
 8013518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801351a:	f7ff ff6f 	bl	80133fc <__retarget_lock_acquire_recursive>
 801351e:	89ab      	ldrh	r3, [r5, #12]
 8013520:	071b      	lsls	r3, r3, #28
 8013522:	d501      	bpl.n	8013528 <_vfiprintf_r+0x3c>
 8013524:	692b      	ldr	r3, [r5, #16]
 8013526:	b9eb      	cbnz	r3, 8013564 <_vfiprintf_r+0x78>
 8013528:	4629      	mov	r1, r5
 801352a:	4630      	mov	r0, r6
 801352c:	f000 f960 	bl	80137f0 <__swsetup_r>
 8013530:	b1c0      	cbz	r0, 8013564 <_vfiprintf_r+0x78>
 8013532:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013534:	07dc      	lsls	r4, r3, #31
 8013536:	d50e      	bpl.n	8013556 <_vfiprintf_r+0x6a>
 8013538:	f04f 30ff 	mov.w	r0, #4294967295
 801353c:	b01d      	add	sp, #116	; 0x74
 801353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013542:	4b7b      	ldr	r3, [pc, #492]	; (8013730 <_vfiprintf_r+0x244>)
 8013544:	429d      	cmp	r5, r3
 8013546:	d101      	bne.n	801354c <_vfiprintf_r+0x60>
 8013548:	68b5      	ldr	r5, [r6, #8]
 801354a:	e7df      	b.n	801350c <_vfiprintf_r+0x20>
 801354c:	4b79      	ldr	r3, [pc, #484]	; (8013734 <_vfiprintf_r+0x248>)
 801354e:	429d      	cmp	r5, r3
 8013550:	bf08      	it	eq
 8013552:	68f5      	ldreq	r5, [r6, #12]
 8013554:	e7da      	b.n	801350c <_vfiprintf_r+0x20>
 8013556:	89ab      	ldrh	r3, [r5, #12]
 8013558:	0598      	lsls	r0, r3, #22
 801355a:	d4ed      	bmi.n	8013538 <_vfiprintf_r+0x4c>
 801355c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801355e:	f7ff ff4e 	bl	80133fe <__retarget_lock_release_recursive>
 8013562:	e7e9      	b.n	8013538 <_vfiprintf_r+0x4c>
 8013564:	2300      	movs	r3, #0
 8013566:	9309      	str	r3, [sp, #36]	; 0x24
 8013568:	2320      	movs	r3, #32
 801356a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801356e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013572:	2330      	movs	r3, #48	; 0x30
 8013574:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013738 <_vfiprintf_r+0x24c>
 8013578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801357c:	f04f 0901 	mov.w	r9, #1
 8013580:	4623      	mov	r3, r4
 8013582:	469a      	mov	sl, r3
 8013584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013588:	b10a      	cbz	r2, 801358e <_vfiprintf_r+0xa2>
 801358a:	2a25      	cmp	r2, #37	; 0x25
 801358c:	d1f9      	bne.n	8013582 <_vfiprintf_r+0x96>
 801358e:	ebba 0b04 	subs.w	fp, sl, r4
 8013592:	d00b      	beq.n	80135ac <_vfiprintf_r+0xc0>
 8013594:	465b      	mov	r3, fp
 8013596:	4622      	mov	r2, r4
 8013598:	4629      	mov	r1, r5
 801359a:	4630      	mov	r0, r6
 801359c:	f7ff ff93 	bl	80134c6 <__sfputs_r>
 80135a0:	3001      	adds	r0, #1
 80135a2:	f000 80aa 	beq.w	80136fa <_vfiprintf_r+0x20e>
 80135a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135a8:	445a      	add	r2, fp
 80135aa:	9209      	str	r2, [sp, #36]	; 0x24
 80135ac:	f89a 3000 	ldrb.w	r3, [sl]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	f000 80a2 	beq.w	80136fa <_vfiprintf_r+0x20e>
 80135b6:	2300      	movs	r3, #0
 80135b8:	f04f 32ff 	mov.w	r2, #4294967295
 80135bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135c0:	f10a 0a01 	add.w	sl, sl, #1
 80135c4:	9304      	str	r3, [sp, #16]
 80135c6:	9307      	str	r3, [sp, #28]
 80135c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80135cc:	931a      	str	r3, [sp, #104]	; 0x68
 80135ce:	4654      	mov	r4, sl
 80135d0:	2205      	movs	r2, #5
 80135d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135d6:	4858      	ldr	r0, [pc, #352]	; (8013738 <_vfiprintf_r+0x24c>)
 80135d8:	f7ec fe02 	bl	80001e0 <memchr>
 80135dc:	9a04      	ldr	r2, [sp, #16]
 80135de:	b9d8      	cbnz	r0, 8013618 <_vfiprintf_r+0x12c>
 80135e0:	06d1      	lsls	r1, r2, #27
 80135e2:	bf44      	itt	mi
 80135e4:	2320      	movmi	r3, #32
 80135e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135ea:	0713      	lsls	r3, r2, #28
 80135ec:	bf44      	itt	mi
 80135ee:	232b      	movmi	r3, #43	; 0x2b
 80135f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80135f4:	f89a 3000 	ldrb.w	r3, [sl]
 80135f8:	2b2a      	cmp	r3, #42	; 0x2a
 80135fa:	d015      	beq.n	8013628 <_vfiprintf_r+0x13c>
 80135fc:	9a07      	ldr	r2, [sp, #28]
 80135fe:	4654      	mov	r4, sl
 8013600:	2000      	movs	r0, #0
 8013602:	f04f 0c0a 	mov.w	ip, #10
 8013606:	4621      	mov	r1, r4
 8013608:	f811 3b01 	ldrb.w	r3, [r1], #1
 801360c:	3b30      	subs	r3, #48	; 0x30
 801360e:	2b09      	cmp	r3, #9
 8013610:	d94e      	bls.n	80136b0 <_vfiprintf_r+0x1c4>
 8013612:	b1b0      	cbz	r0, 8013642 <_vfiprintf_r+0x156>
 8013614:	9207      	str	r2, [sp, #28]
 8013616:	e014      	b.n	8013642 <_vfiprintf_r+0x156>
 8013618:	eba0 0308 	sub.w	r3, r0, r8
 801361c:	fa09 f303 	lsl.w	r3, r9, r3
 8013620:	4313      	orrs	r3, r2
 8013622:	9304      	str	r3, [sp, #16]
 8013624:	46a2      	mov	sl, r4
 8013626:	e7d2      	b.n	80135ce <_vfiprintf_r+0xe2>
 8013628:	9b03      	ldr	r3, [sp, #12]
 801362a:	1d19      	adds	r1, r3, #4
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	9103      	str	r1, [sp, #12]
 8013630:	2b00      	cmp	r3, #0
 8013632:	bfbb      	ittet	lt
 8013634:	425b      	neglt	r3, r3
 8013636:	f042 0202 	orrlt.w	r2, r2, #2
 801363a:	9307      	strge	r3, [sp, #28]
 801363c:	9307      	strlt	r3, [sp, #28]
 801363e:	bfb8      	it	lt
 8013640:	9204      	strlt	r2, [sp, #16]
 8013642:	7823      	ldrb	r3, [r4, #0]
 8013644:	2b2e      	cmp	r3, #46	; 0x2e
 8013646:	d10c      	bne.n	8013662 <_vfiprintf_r+0x176>
 8013648:	7863      	ldrb	r3, [r4, #1]
 801364a:	2b2a      	cmp	r3, #42	; 0x2a
 801364c:	d135      	bne.n	80136ba <_vfiprintf_r+0x1ce>
 801364e:	9b03      	ldr	r3, [sp, #12]
 8013650:	1d1a      	adds	r2, r3, #4
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	9203      	str	r2, [sp, #12]
 8013656:	2b00      	cmp	r3, #0
 8013658:	bfb8      	it	lt
 801365a:	f04f 33ff 	movlt.w	r3, #4294967295
 801365e:	3402      	adds	r4, #2
 8013660:	9305      	str	r3, [sp, #20]
 8013662:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013748 <_vfiprintf_r+0x25c>
 8013666:	7821      	ldrb	r1, [r4, #0]
 8013668:	2203      	movs	r2, #3
 801366a:	4650      	mov	r0, sl
 801366c:	f7ec fdb8 	bl	80001e0 <memchr>
 8013670:	b140      	cbz	r0, 8013684 <_vfiprintf_r+0x198>
 8013672:	2340      	movs	r3, #64	; 0x40
 8013674:	eba0 000a 	sub.w	r0, r0, sl
 8013678:	fa03 f000 	lsl.w	r0, r3, r0
 801367c:	9b04      	ldr	r3, [sp, #16]
 801367e:	4303      	orrs	r3, r0
 8013680:	3401      	adds	r4, #1
 8013682:	9304      	str	r3, [sp, #16]
 8013684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013688:	482c      	ldr	r0, [pc, #176]	; (801373c <_vfiprintf_r+0x250>)
 801368a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801368e:	2206      	movs	r2, #6
 8013690:	f7ec fda6 	bl	80001e0 <memchr>
 8013694:	2800      	cmp	r0, #0
 8013696:	d03f      	beq.n	8013718 <_vfiprintf_r+0x22c>
 8013698:	4b29      	ldr	r3, [pc, #164]	; (8013740 <_vfiprintf_r+0x254>)
 801369a:	bb1b      	cbnz	r3, 80136e4 <_vfiprintf_r+0x1f8>
 801369c:	9b03      	ldr	r3, [sp, #12]
 801369e:	3307      	adds	r3, #7
 80136a0:	f023 0307 	bic.w	r3, r3, #7
 80136a4:	3308      	adds	r3, #8
 80136a6:	9303      	str	r3, [sp, #12]
 80136a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136aa:	443b      	add	r3, r7
 80136ac:	9309      	str	r3, [sp, #36]	; 0x24
 80136ae:	e767      	b.n	8013580 <_vfiprintf_r+0x94>
 80136b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80136b4:	460c      	mov	r4, r1
 80136b6:	2001      	movs	r0, #1
 80136b8:	e7a5      	b.n	8013606 <_vfiprintf_r+0x11a>
 80136ba:	2300      	movs	r3, #0
 80136bc:	3401      	adds	r4, #1
 80136be:	9305      	str	r3, [sp, #20]
 80136c0:	4619      	mov	r1, r3
 80136c2:	f04f 0c0a 	mov.w	ip, #10
 80136c6:	4620      	mov	r0, r4
 80136c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136cc:	3a30      	subs	r2, #48	; 0x30
 80136ce:	2a09      	cmp	r2, #9
 80136d0:	d903      	bls.n	80136da <_vfiprintf_r+0x1ee>
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d0c5      	beq.n	8013662 <_vfiprintf_r+0x176>
 80136d6:	9105      	str	r1, [sp, #20]
 80136d8:	e7c3      	b.n	8013662 <_vfiprintf_r+0x176>
 80136da:	fb0c 2101 	mla	r1, ip, r1, r2
 80136de:	4604      	mov	r4, r0
 80136e0:	2301      	movs	r3, #1
 80136e2:	e7f0      	b.n	80136c6 <_vfiprintf_r+0x1da>
 80136e4:	ab03      	add	r3, sp, #12
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	462a      	mov	r2, r5
 80136ea:	4b16      	ldr	r3, [pc, #88]	; (8013744 <_vfiprintf_r+0x258>)
 80136ec:	a904      	add	r1, sp, #16
 80136ee:	4630      	mov	r0, r6
 80136f0:	f7fb fe44 	bl	800f37c <_printf_float>
 80136f4:	4607      	mov	r7, r0
 80136f6:	1c78      	adds	r0, r7, #1
 80136f8:	d1d6      	bne.n	80136a8 <_vfiprintf_r+0x1bc>
 80136fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136fc:	07d9      	lsls	r1, r3, #31
 80136fe:	d405      	bmi.n	801370c <_vfiprintf_r+0x220>
 8013700:	89ab      	ldrh	r3, [r5, #12]
 8013702:	059a      	lsls	r2, r3, #22
 8013704:	d402      	bmi.n	801370c <_vfiprintf_r+0x220>
 8013706:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013708:	f7ff fe79 	bl	80133fe <__retarget_lock_release_recursive>
 801370c:	89ab      	ldrh	r3, [r5, #12]
 801370e:	065b      	lsls	r3, r3, #25
 8013710:	f53f af12 	bmi.w	8013538 <_vfiprintf_r+0x4c>
 8013714:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013716:	e711      	b.n	801353c <_vfiprintf_r+0x50>
 8013718:	ab03      	add	r3, sp, #12
 801371a:	9300      	str	r3, [sp, #0]
 801371c:	462a      	mov	r2, r5
 801371e:	4b09      	ldr	r3, [pc, #36]	; (8013744 <_vfiprintf_r+0x258>)
 8013720:	a904      	add	r1, sp, #16
 8013722:	4630      	mov	r0, r6
 8013724:	f7fc f8ce 	bl	800f8c4 <_printf_i>
 8013728:	e7e4      	b.n	80136f4 <_vfiprintf_r+0x208>
 801372a:	bf00      	nop
 801372c:	08015474 	.word	0x08015474
 8013730:	08015494 	.word	0x08015494
 8013734:	08015454 	.word	0x08015454
 8013738:	08015404 	.word	0x08015404
 801373c:	0801540e 	.word	0x0801540e
 8013740:	0800f37d 	.word	0x0800f37d
 8013744:	080134c7 	.word	0x080134c7
 8013748:	0801540a 	.word	0x0801540a

0801374c <__swbuf_r>:
 801374c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801374e:	460e      	mov	r6, r1
 8013750:	4614      	mov	r4, r2
 8013752:	4605      	mov	r5, r0
 8013754:	b118      	cbz	r0, 801375e <__swbuf_r+0x12>
 8013756:	6983      	ldr	r3, [r0, #24]
 8013758:	b90b      	cbnz	r3, 801375e <__swbuf_r+0x12>
 801375a:	f7ff fd9f 	bl	801329c <__sinit>
 801375e:	4b21      	ldr	r3, [pc, #132]	; (80137e4 <__swbuf_r+0x98>)
 8013760:	429c      	cmp	r4, r3
 8013762:	d12b      	bne.n	80137bc <__swbuf_r+0x70>
 8013764:	686c      	ldr	r4, [r5, #4]
 8013766:	69a3      	ldr	r3, [r4, #24]
 8013768:	60a3      	str	r3, [r4, #8]
 801376a:	89a3      	ldrh	r3, [r4, #12]
 801376c:	071a      	lsls	r2, r3, #28
 801376e:	d52f      	bpl.n	80137d0 <__swbuf_r+0x84>
 8013770:	6923      	ldr	r3, [r4, #16]
 8013772:	b36b      	cbz	r3, 80137d0 <__swbuf_r+0x84>
 8013774:	6923      	ldr	r3, [r4, #16]
 8013776:	6820      	ldr	r0, [r4, #0]
 8013778:	1ac0      	subs	r0, r0, r3
 801377a:	6963      	ldr	r3, [r4, #20]
 801377c:	b2f6      	uxtb	r6, r6
 801377e:	4283      	cmp	r3, r0
 8013780:	4637      	mov	r7, r6
 8013782:	dc04      	bgt.n	801378e <__swbuf_r+0x42>
 8013784:	4621      	mov	r1, r4
 8013786:	4628      	mov	r0, r5
 8013788:	f7ff fcf4 	bl	8013174 <_fflush_r>
 801378c:	bb30      	cbnz	r0, 80137dc <__swbuf_r+0x90>
 801378e:	68a3      	ldr	r3, [r4, #8]
 8013790:	3b01      	subs	r3, #1
 8013792:	60a3      	str	r3, [r4, #8]
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	1c5a      	adds	r2, r3, #1
 8013798:	6022      	str	r2, [r4, #0]
 801379a:	701e      	strb	r6, [r3, #0]
 801379c:	6963      	ldr	r3, [r4, #20]
 801379e:	3001      	adds	r0, #1
 80137a0:	4283      	cmp	r3, r0
 80137a2:	d004      	beq.n	80137ae <__swbuf_r+0x62>
 80137a4:	89a3      	ldrh	r3, [r4, #12]
 80137a6:	07db      	lsls	r3, r3, #31
 80137a8:	d506      	bpl.n	80137b8 <__swbuf_r+0x6c>
 80137aa:	2e0a      	cmp	r6, #10
 80137ac:	d104      	bne.n	80137b8 <__swbuf_r+0x6c>
 80137ae:	4621      	mov	r1, r4
 80137b0:	4628      	mov	r0, r5
 80137b2:	f7ff fcdf 	bl	8013174 <_fflush_r>
 80137b6:	b988      	cbnz	r0, 80137dc <__swbuf_r+0x90>
 80137b8:	4638      	mov	r0, r7
 80137ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137bc:	4b0a      	ldr	r3, [pc, #40]	; (80137e8 <__swbuf_r+0x9c>)
 80137be:	429c      	cmp	r4, r3
 80137c0:	d101      	bne.n	80137c6 <__swbuf_r+0x7a>
 80137c2:	68ac      	ldr	r4, [r5, #8]
 80137c4:	e7cf      	b.n	8013766 <__swbuf_r+0x1a>
 80137c6:	4b09      	ldr	r3, [pc, #36]	; (80137ec <__swbuf_r+0xa0>)
 80137c8:	429c      	cmp	r4, r3
 80137ca:	bf08      	it	eq
 80137cc:	68ec      	ldreq	r4, [r5, #12]
 80137ce:	e7ca      	b.n	8013766 <__swbuf_r+0x1a>
 80137d0:	4621      	mov	r1, r4
 80137d2:	4628      	mov	r0, r5
 80137d4:	f000 f80c 	bl	80137f0 <__swsetup_r>
 80137d8:	2800      	cmp	r0, #0
 80137da:	d0cb      	beq.n	8013774 <__swbuf_r+0x28>
 80137dc:	f04f 37ff 	mov.w	r7, #4294967295
 80137e0:	e7ea      	b.n	80137b8 <__swbuf_r+0x6c>
 80137e2:	bf00      	nop
 80137e4:	08015474 	.word	0x08015474
 80137e8:	08015494 	.word	0x08015494
 80137ec:	08015454 	.word	0x08015454

080137f0 <__swsetup_r>:
 80137f0:	4b32      	ldr	r3, [pc, #200]	; (80138bc <__swsetup_r+0xcc>)
 80137f2:	b570      	push	{r4, r5, r6, lr}
 80137f4:	681d      	ldr	r5, [r3, #0]
 80137f6:	4606      	mov	r6, r0
 80137f8:	460c      	mov	r4, r1
 80137fa:	b125      	cbz	r5, 8013806 <__swsetup_r+0x16>
 80137fc:	69ab      	ldr	r3, [r5, #24]
 80137fe:	b913      	cbnz	r3, 8013806 <__swsetup_r+0x16>
 8013800:	4628      	mov	r0, r5
 8013802:	f7ff fd4b 	bl	801329c <__sinit>
 8013806:	4b2e      	ldr	r3, [pc, #184]	; (80138c0 <__swsetup_r+0xd0>)
 8013808:	429c      	cmp	r4, r3
 801380a:	d10f      	bne.n	801382c <__swsetup_r+0x3c>
 801380c:	686c      	ldr	r4, [r5, #4]
 801380e:	89a3      	ldrh	r3, [r4, #12]
 8013810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013814:	0719      	lsls	r1, r3, #28
 8013816:	d42c      	bmi.n	8013872 <__swsetup_r+0x82>
 8013818:	06dd      	lsls	r5, r3, #27
 801381a:	d411      	bmi.n	8013840 <__swsetup_r+0x50>
 801381c:	2309      	movs	r3, #9
 801381e:	6033      	str	r3, [r6, #0]
 8013820:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013824:	81a3      	strh	r3, [r4, #12]
 8013826:	f04f 30ff 	mov.w	r0, #4294967295
 801382a:	e03e      	b.n	80138aa <__swsetup_r+0xba>
 801382c:	4b25      	ldr	r3, [pc, #148]	; (80138c4 <__swsetup_r+0xd4>)
 801382e:	429c      	cmp	r4, r3
 8013830:	d101      	bne.n	8013836 <__swsetup_r+0x46>
 8013832:	68ac      	ldr	r4, [r5, #8]
 8013834:	e7eb      	b.n	801380e <__swsetup_r+0x1e>
 8013836:	4b24      	ldr	r3, [pc, #144]	; (80138c8 <__swsetup_r+0xd8>)
 8013838:	429c      	cmp	r4, r3
 801383a:	bf08      	it	eq
 801383c:	68ec      	ldreq	r4, [r5, #12]
 801383e:	e7e6      	b.n	801380e <__swsetup_r+0x1e>
 8013840:	0758      	lsls	r0, r3, #29
 8013842:	d512      	bpl.n	801386a <__swsetup_r+0x7a>
 8013844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013846:	b141      	cbz	r1, 801385a <__swsetup_r+0x6a>
 8013848:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801384c:	4299      	cmp	r1, r3
 801384e:	d002      	beq.n	8013856 <__swsetup_r+0x66>
 8013850:	4630      	mov	r0, r6
 8013852:	f7ff f9ad 	bl	8012bb0 <_free_r>
 8013856:	2300      	movs	r3, #0
 8013858:	6363      	str	r3, [r4, #52]	; 0x34
 801385a:	89a3      	ldrh	r3, [r4, #12]
 801385c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013860:	81a3      	strh	r3, [r4, #12]
 8013862:	2300      	movs	r3, #0
 8013864:	6063      	str	r3, [r4, #4]
 8013866:	6923      	ldr	r3, [r4, #16]
 8013868:	6023      	str	r3, [r4, #0]
 801386a:	89a3      	ldrh	r3, [r4, #12]
 801386c:	f043 0308 	orr.w	r3, r3, #8
 8013870:	81a3      	strh	r3, [r4, #12]
 8013872:	6923      	ldr	r3, [r4, #16]
 8013874:	b94b      	cbnz	r3, 801388a <__swsetup_r+0x9a>
 8013876:	89a3      	ldrh	r3, [r4, #12]
 8013878:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801387c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013880:	d003      	beq.n	801388a <__swsetup_r+0x9a>
 8013882:	4621      	mov	r1, r4
 8013884:	4630      	mov	r0, r6
 8013886:	f000 f84d 	bl	8013924 <__smakebuf_r>
 801388a:	89a0      	ldrh	r0, [r4, #12]
 801388c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013890:	f010 0301 	ands.w	r3, r0, #1
 8013894:	d00a      	beq.n	80138ac <__swsetup_r+0xbc>
 8013896:	2300      	movs	r3, #0
 8013898:	60a3      	str	r3, [r4, #8]
 801389a:	6963      	ldr	r3, [r4, #20]
 801389c:	425b      	negs	r3, r3
 801389e:	61a3      	str	r3, [r4, #24]
 80138a0:	6923      	ldr	r3, [r4, #16]
 80138a2:	b943      	cbnz	r3, 80138b6 <__swsetup_r+0xc6>
 80138a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80138a8:	d1ba      	bne.n	8013820 <__swsetup_r+0x30>
 80138aa:	bd70      	pop	{r4, r5, r6, pc}
 80138ac:	0781      	lsls	r1, r0, #30
 80138ae:	bf58      	it	pl
 80138b0:	6963      	ldrpl	r3, [r4, #20]
 80138b2:	60a3      	str	r3, [r4, #8]
 80138b4:	e7f4      	b.n	80138a0 <__swsetup_r+0xb0>
 80138b6:	2000      	movs	r0, #0
 80138b8:	e7f7      	b.n	80138aa <__swsetup_r+0xba>
 80138ba:	bf00      	nop
 80138bc:	20000058 	.word	0x20000058
 80138c0:	08015474 	.word	0x08015474
 80138c4:	08015494 	.word	0x08015494
 80138c8:	08015454 	.word	0x08015454

080138cc <abort>:
 80138cc:	b508      	push	{r3, lr}
 80138ce:	2006      	movs	r0, #6
 80138d0:	f000 f898 	bl	8013a04 <raise>
 80138d4:	2001      	movs	r0, #1
 80138d6:	f7f1 f985 	bl	8004be4 <_exit>

080138da <__swhatbuf_r>:
 80138da:	b570      	push	{r4, r5, r6, lr}
 80138dc:	460e      	mov	r6, r1
 80138de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138e2:	2900      	cmp	r1, #0
 80138e4:	b096      	sub	sp, #88	; 0x58
 80138e6:	4614      	mov	r4, r2
 80138e8:	461d      	mov	r5, r3
 80138ea:	da07      	bge.n	80138fc <__swhatbuf_r+0x22>
 80138ec:	2300      	movs	r3, #0
 80138ee:	602b      	str	r3, [r5, #0]
 80138f0:	89b3      	ldrh	r3, [r6, #12]
 80138f2:	061a      	lsls	r2, r3, #24
 80138f4:	d410      	bmi.n	8013918 <__swhatbuf_r+0x3e>
 80138f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138fa:	e00e      	b.n	801391a <__swhatbuf_r+0x40>
 80138fc:	466a      	mov	r2, sp
 80138fe:	f000 f89d 	bl	8013a3c <_fstat_r>
 8013902:	2800      	cmp	r0, #0
 8013904:	dbf2      	blt.n	80138ec <__swhatbuf_r+0x12>
 8013906:	9a01      	ldr	r2, [sp, #4]
 8013908:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801390c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013910:	425a      	negs	r2, r3
 8013912:	415a      	adcs	r2, r3
 8013914:	602a      	str	r2, [r5, #0]
 8013916:	e7ee      	b.n	80138f6 <__swhatbuf_r+0x1c>
 8013918:	2340      	movs	r3, #64	; 0x40
 801391a:	2000      	movs	r0, #0
 801391c:	6023      	str	r3, [r4, #0]
 801391e:	b016      	add	sp, #88	; 0x58
 8013920:	bd70      	pop	{r4, r5, r6, pc}
	...

08013924 <__smakebuf_r>:
 8013924:	898b      	ldrh	r3, [r1, #12]
 8013926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013928:	079d      	lsls	r5, r3, #30
 801392a:	4606      	mov	r6, r0
 801392c:	460c      	mov	r4, r1
 801392e:	d507      	bpl.n	8013940 <__smakebuf_r+0x1c>
 8013930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013934:	6023      	str	r3, [r4, #0]
 8013936:	6123      	str	r3, [r4, #16]
 8013938:	2301      	movs	r3, #1
 801393a:	6163      	str	r3, [r4, #20]
 801393c:	b002      	add	sp, #8
 801393e:	bd70      	pop	{r4, r5, r6, pc}
 8013940:	ab01      	add	r3, sp, #4
 8013942:	466a      	mov	r2, sp
 8013944:	f7ff ffc9 	bl	80138da <__swhatbuf_r>
 8013948:	9900      	ldr	r1, [sp, #0]
 801394a:	4605      	mov	r5, r0
 801394c:	4630      	mov	r0, r6
 801394e:	f7ff f97f 	bl	8012c50 <_malloc_r>
 8013952:	b948      	cbnz	r0, 8013968 <__smakebuf_r+0x44>
 8013954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013958:	059a      	lsls	r2, r3, #22
 801395a:	d4ef      	bmi.n	801393c <__smakebuf_r+0x18>
 801395c:	f023 0303 	bic.w	r3, r3, #3
 8013960:	f043 0302 	orr.w	r3, r3, #2
 8013964:	81a3      	strh	r3, [r4, #12]
 8013966:	e7e3      	b.n	8013930 <__smakebuf_r+0xc>
 8013968:	4b0d      	ldr	r3, [pc, #52]	; (80139a0 <__smakebuf_r+0x7c>)
 801396a:	62b3      	str	r3, [r6, #40]	; 0x28
 801396c:	89a3      	ldrh	r3, [r4, #12]
 801396e:	6020      	str	r0, [r4, #0]
 8013970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013974:	81a3      	strh	r3, [r4, #12]
 8013976:	9b00      	ldr	r3, [sp, #0]
 8013978:	6163      	str	r3, [r4, #20]
 801397a:	9b01      	ldr	r3, [sp, #4]
 801397c:	6120      	str	r0, [r4, #16]
 801397e:	b15b      	cbz	r3, 8013998 <__smakebuf_r+0x74>
 8013980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013984:	4630      	mov	r0, r6
 8013986:	f000 f86b 	bl	8013a60 <_isatty_r>
 801398a:	b128      	cbz	r0, 8013998 <__smakebuf_r+0x74>
 801398c:	89a3      	ldrh	r3, [r4, #12]
 801398e:	f023 0303 	bic.w	r3, r3, #3
 8013992:	f043 0301 	orr.w	r3, r3, #1
 8013996:	81a3      	strh	r3, [r4, #12]
 8013998:	89a0      	ldrh	r0, [r4, #12]
 801399a:	4305      	orrs	r5, r0
 801399c:	81a5      	strh	r5, [r4, #12]
 801399e:	e7cd      	b.n	801393c <__smakebuf_r+0x18>
 80139a0:	08013235 	.word	0x08013235

080139a4 <_malloc_usable_size_r>:
 80139a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80139a8:	1f18      	subs	r0, r3, #4
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	bfbc      	itt	lt
 80139ae:	580b      	ldrlt	r3, [r1, r0]
 80139b0:	18c0      	addlt	r0, r0, r3
 80139b2:	4770      	bx	lr

080139b4 <_raise_r>:
 80139b4:	291f      	cmp	r1, #31
 80139b6:	b538      	push	{r3, r4, r5, lr}
 80139b8:	4604      	mov	r4, r0
 80139ba:	460d      	mov	r5, r1
 80139bc:	d904      	bls.n	80139c8 <_raise_r+0x14>
 80139be:	2316      	movs	r3, #22
 80139c0:	6003      	str	r3, [r0, #0]
 80139c2:	f04f 30ff 	mov.w	r0, #4294967295
 80139c6:	bd38      	pop	{r3, r4, r5, pc}
 80139c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80139ca:	b112      	cbz	r2, 80139d2 <_raise_r+0x1e>
 80139cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139d0:	b94b      	cbnz	r3, 80139e6 <_raise_r+0x32>
 80139d2:	4620      	mov	r0, r4
 80139d4:	f000 f830 	bl	8013a38 <_getpid_r>
 80139d8:	462a      	mov	r2, r5
 80139da:	4601      	mov	r1, r0
 80139dc:	4620      	mov	r0, r4
 80139de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139e2:	f000 b817 	b.w	8013a14 <_kill_r>
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d00a      	beq.n	8013a00 <_raise_r+0x4c>
 80139ea:	1c59      	adds	r1, r3, #1
 80139ec:	d103      	bne.n	80139f6 <_raise_r+0x42>
 80139ee:	2316      	movs	r3, #22
 80139f0:	6003      	str	r3, [r0, #0]
 80139f2:	2001      	movs	r0, #1
 80139f4:	e7e7      	b.n	80139c6 <_raise_r+0x12>
 80139f6:	2400      	movs	r4, #0
 80139f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139fc:	4628      	mov	r0, r5
 80139fe:	4798      	blx	r3
 8013a00:	2000      	movs	r0, #0
 8013a02:	e7e0      	b.n	80139c6 <_raise_r+0x12>

08013a04 <raise>:
 8013a04:	4b02      	ldr	r3, [pc, #8]	; (8013a10 <raise+0xc>)
 8013a06:	4601      	mov	r1, r0
 8013a08:	6818      	ldr	r0, [r3, #0]
 8013a0a:	f7ff bfd3 	b.w	80139b4 <_raise_r>
 8013a0e:	bf00      	nop
 8013a10:	20000058 	.word	0x20000058

08013a14 <_kill_r>:
 8013a14:	b538      	push	{r3, r4, r5, lr}
 8013a16:	4d07      	ldr	r5, [pc, #28]	; (8013a34 <_kill_r+0x20>)
 8013a18:	2300      	movs	r3, #0
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	4608      	mov	r0, r1
 8013a1e:	4611      	mov	r1, r2
 8013a20:	602b      	str	r3, [r5, #0]
 8013a22:	f7f1 f8cf 	bl	8004bc4 <_kill>
 8013a26:	1c43      	adds	r3, r0, #1
 8013a28:	d102      	bne.n	8013a30 <_kill_r+0x1c>
 8013a2a:	682b      	ldr	r3, [r5, #0]
 8013a2c:	b103      	cbz	r3, 8013a30 <_kill_r+0x1c>
 8013a2e:	6023      	str	r3, [r4, #0]
 8013a30:	bd38      	pop	{r3, r4, r5, pc}
 8013a32:	bf00      	nop
 8013a34:	20004b34 	.word	0x20004b34

08013a38 <_getpid_r>:
 8013a38:	f7f1 b8bc 	b.w	8004bb4 <_getpid>

08013a3c <_fstat_r>:
 8013a3c:	b538      	push	{r3, r4, r5, lr}
 8013a3e:	4d07      	ldr	r5, [pc, #28]	; (8013a5c <_fstat_r+0x20>)
 8013a40:	2300      	movs	r3, #0
 8013a42:	4604      	mov	r4, r0
 8013a44:	4608      	mov	r0, r1
 8013a46:	4611      	mov	r1, r2
 8013a48:	602b      	str	r3, [r5, #0]
 8013a4a:	f7f1 f91a 	bl	8004c82 <_fstat>
 8013a4e:	1c43      	adds	r3, r0, #1
 8013a50:	d102      	bne.n	8013a58 <_fstat_r+0x1c>
 8013a52:	682b      	ldr	r3, [r5, #0]
 8013a54:	b103      	cbz	r3, 8013a58 <_fstat_r+0x1c>
 8013a56:	6023      	str	r3, [r4, #0]
 8013a58:	bd38      	pop	{r3, r4, r5, pc}
 8013a5a:	bf00      	nop
 8013a5c:	20004b34 	.word	0x20004b34

08013a60 <_isatty_r>:
 8013a60:	b538      	push	{r3, r4, r5, lr}
 8013a62:	4d06      	ldr	r5, [pc, #24]	; (8013a7c <_isatty_r+0x1c>)
 8013a64:	2300      	movs	r3, #0
 8013a66:	4604      	mov	r4, r0
 8013a68:	4608      	mov	r0, r1
 8013a6a:	602b      	str	r3, [r5, #0]
 8013a6c:	f7f1 f919 	bl	8004ca2 <_isatty>
 8013a70:	1c43      	adds	r3, r0, #1
 8013a72:	d102      	bne.n	8013a7a <_isatty_r+0x1a>
 8013a74:	682b      	ldr	r3, [r5, #0]
 8013a76:	b103      	cbz	r3, 8013a7a <_isatty_r+0x1a>
 8013a78:	6023      	str	r3, [r4, #0]
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}
 8013a7c:	20004b34 	.word	0x20004b34

08013a80 <atan2>:
 8013a80:	f000 b8ce 	b.w	8013c20 <__ieee754_atan2>

08013a84 <sqrt>:
 8013a84:	b538      	push	{r3, r4, r5, lr}
 8013a86:	ed2d 8b02 	vpush	{d8}
 8013a8a:	ec55 4b10 	vmov	r4, r5, d0
 8013a8e:	f000 f991 	bl	8013db4 <__ieee754_sqrt>
 8013a92:	4b15      	ldr	r3, [pc, #84]	; (8013ae8 <sqrt+0x64>)
 8013a94:	eeb0 8a40 	vmov.f32	s16, s0
 8013a98:	eef0 8a60 	vmov.f32	s17, s1
 8013a9c:	f993 3000 	ldrsb.w	r3, [r3]
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	d019      	beq.n	8013ad8 <sqrt+0x54>
 8013aa4:	4622      	mov	r2, r4
 8013aa6:	462b      	mov	r3, r5
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	4629      	mov	r1, r5
 8013aac:	f7ed f83e 	bl	8000b2c <__aeabi_dcmpun>
 8013ab0:	b990      	cbnz	r0, 8013ad8 <sqrt+0x54>
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	4629      	mov	r1, r5
 8013aba:	f7ed f80f 	bl	8000adc <__aeabi_dcmplt>
 8013abe:	b158      	cbz	r0, 8013ad8 <sqrt+0x54>
 8013ac0:	f7fb fb8a 	bl	800f1d8 <__errno>
 8013ac4:	2321      	movs	r3, #33	; 0x21
 8013ac6:	6003      	str	r3, [r0, #0]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	2300      	movs	r3, #0
 8013acc:	4610      	mov	r0, r2
 8013ace:	4619      	mov	r1, r3
 8013ad0:	f7ec febc 	bl	800084c <__aeabi_ddiv>
 8013ad4:	ec41 0b18 	vmov	d8, r0, r1
 8013ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8013adc:	eef0 0a68 	vmov.f32	s1, s17
 8013ae0:	ecbd 8b02 	vpop	{d8}
 8013ae4:	bd38      	pop	{r3, r4, r5, pc}
 8013ae6:	bf00      	nop
 8013ae8:	2000022c 	.word	0x2000022c

08013aec <powf>:
 8013aec:	b508      	push	{r3, lr}
 8013aee:	ed2d 8b04 	vpush	{d8-d9}
 8013af2:	eeb0 9a40 	vmov.f32	s18, s0
 8013af6:	eef0 8a60 	vmov.f32	s17, s1
 8013afa:	f000 fa0f 	bl	8013f1c <__ieee754_powf>
 8013afe:	4b43      	ldr	r3, [pc, #268]	; (8013c0c <powf+0x120>)
 8013b00:	f993 3000 	ldrsb.w	r3, [r3]
 8013b04:	3301      	adds	r3, #1
 8013b06:	eeb0 8a40 	vmov.f32	s16, s0
 8013b0a:	d012      	beq.n	8013b32 <powf+0x46>
 8013b0c:	eef4 8a68 	vcmp.f32	s17, s17
 8013b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b14:	d60d      	bvs.n	8013b32 <powf+0x46>
 8013b16:	eeb4 9a49 	vcmp.f32	s18, s18
 8013b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1e:	d70d      	bvc.n	8013b3c <powf+0x50>
 8013b20:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b2c:	bf08      	it	eq
 8013b2e:	eeb0 8a67 	vmoveq.f32	s16, s15
 8013b32:	eeb0 0a48 	vmov.f32	s0, s16
 8013b36:	ecbd 8b04 	vpop	{d8-d9}
 8013b3a:	bd08      	pop	{r3, pc}
 8013b3c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8013c10 <powf+0x124>
 8013b40:	eeb4 9a69 	vcmp.f32	s18, s19
 8013b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b48:	d116      	bne.n	8013b78 <powf+0x8c>
 8013b4a:	eef4 8a69 	vcmp.f32	s17, s19
 8013b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b52:	d057      	beq.n	8013c04 <powf+0x118>
 8013b54:	eeb0 0a68 	vmov.f32	s0, s17
 8013b58:	f000 fe56 	bl	8014808 <finitef>
 8013b5c:	2800      	cmp	r0, #0
 8013b5e:	d0e8      	beq.n	8013b32 <powf+0x46>
 8013b60:	eef4 8ae9 	vcmpe.f32	s17, s19
 8013b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b68:	d5e3      	bpl.n	8013b32 <powf+0x46>
 8013b6a:	f7fb fb35 	bl	800f1d8 <__errno>
 8013b6e:	2321      	movs	r3, #33	; 0x21
 8013b70:	6003      	str	r3, [r0, #0]
 8013b72:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8013c14 <powf+0x128>
 8013b76:	e7dc      	b.n	8013b32 <powf+0x46>
 8013b78:	f000 fe46 	bl	8014808 <finitef>
 8013b7c:	bb50      	cbnz	r0, 8013bd4 <powf+0xe8>
 8013b7e:	eeb0 0a49 	vmov.f32	s0, s18
 8013b82:	f000 fe41 	bl	8014808 <finitef>
 8013b86:	b328      	cbz	r0, 8013bd4 <powf+0xe8>
 8013b88:	eeb0 0a68 	vmov.f32	s0, s17
 8013b8c:	f000 fe3c 	bl	8014808 <finitef>
 8013b90:	b300      	cbz	r0, 8013bd4 <powf+0xe8>
 8013b92:	eeb4 8a48 	vcmp.f32	s16, s16
 8013b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b9a:	d706      	bvc.n	8013baa <powf+0xbe>
 8013b9c:	f7fb fb1c 	bl	800f1d8 <__errno>
 8013ba0:	2321      	movs	r3, #33	; 0x21
 8013ba2:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8013ba6:	6003      	str	r3, [r0, #0]
 8013ba8:	e7c3      	b.n	8013b32 <powf+0x46>
 8013baa:	f7fb fb15 	bl	800f1d8 <__errno>
 8013bae:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8013bb2:	2322      	movs	r3, #34	; 0x22
 8013bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb8:	6003      	str	r3, [r0, #0]
 8013bba:	d508      	bpl.n	8013bce <powf+0xe2>
 8013bbc:	eeb0 0a68 	vmov.f32	s0, s17
 8013bc0:	f000 fe30 	bl	8014824 <rintf>
 8013bc4:	eeb4 0a68 	vcmp.f32	s0, s17
 8013bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bcc:	d1d1      	bne.n	8013b72 <powf+0x86>
 8013bce:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8013c18 <powf+0x12c>
 8013bd2:	e7ae      	b.n	8013b32 <powf+0x46>
 8013bd4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bdc:	d1a9      	bne.n	8013b32 <powf+0x46>
 8013bde:	eeb0 0a49 	vmov.f32	s0, s18
 8013be2:	f000 fe11 	bl	8014808 <finitef>
 8013be6:	2800      	cmp	r0, #0
 8013be8:	d0a3      	beq.n	8013b32 <powf+0x46>
 8013bea:	eeb0 0a68 	vmov.f32	s0, s17
 8013bee:	f000 fe0b 	bl	8014808 <finitef>
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	d09d      	beq.n	8013b32 <powf+0x46>
 8013bf6:	f7fb faef 	bl	800f1d8 <__errno>
 8013bfa:	2322      	movs	r3, #34	; 0x22
 8013bfc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8013c10 <powf+0x124>
 8013c00:	6003      	str	r3, [r0, #0]
 8013c02:	e796      	b.n	8013b32 <powf+0x46>
 8013c04:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013c08:	e793      	b.n	8013b32 <powf+0x46>
 8013c0a:	bf00      	nop
 8013c0c:	2000022c 	.word	0x2000022c
 8013c10:	00000000 	.word	0x00000000
 8013c14:	ff800000 	.word	0xff800000
 8013c18:	7f800000 	.word	0x7f800000
 8013c1c:	00000000 	.word	0x00000000

08013c20 <__ieee754_atan2>:
 8013c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c24:	ec57 6b11 	vmov	r6, r7, d1
 8013c28:	4273      	negs	r3, r6
 8013c2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 8013db0 <__ieee754_atan2+0x190>
 8013c2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8013c32:	4333      	orrs	r3, r6
 8013c34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013c38:	4573      	cmp	r3, lr
 8013c3a:	ec51 0b10 	vmov	r0, r1, d0
 8013c3e:	ee11 8a10 	vmov	r8, s2
 8013c42:	d80a      	bhi.n	8013c5a <__ieee754_atan2+0x3a>
 8013c44:	4244      	negs	r4, r0
 8013c46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013c4a:	4304      	orrs	r4, r0
 8013c4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013c50:	4574      	cmp	r4, lr
 8013c52:	ee10 9a10 	vmov	r9, s0
 8013c56:	468c      	mov	ip, r1
 8013c58:	d907      	bls.n	8013c6a <__ieee754_atan2+0x4a>
 8013c5a:	4632      	mov	r2, r6
 8013c5c:	463b      	mov	r3, r7
 8013c5e:	f7ec fb15 	bl	800028c <__adddf3>
 8013c62:	ec41 0b10 	vmov	d0, r0, r1
 8013c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013c6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013c72:	4334      	orrs	r4, r6
 8013c74:	d103      	bne.n	8013c7e <__ieee754_atan2+0x5e>
 8013c76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c7a:	f000 bc15 	b.w	80144a8 <atan>
 8013c7e:	17bc      	asrs	r4, r7, #30
 8013c80:	f004 0402 	and.w	r4, r4, #2
 8013c84:	ea53 0909 	orrs.w	r9, r3, r9
 8013c88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013c8c:	d107      	bne.n	8013c9e <__ieee754_atan2+0x7e>
 8013c8e:	2c02      	cmp	r4, #2
 8013c90:	d060      	beq.n	8013d54 <__ieee754_atan2+0x134>
 8013c92:	2c03      	cmp	r4, #3
 8013c94:	d1e5      	bne.n	8013c62 <__ieee754_atan2+0x42>
 8013c96:	a142      	add	r1, pc, #264	; (adr r1, 8013da0 <__ieee754_atan2+0x180>)
 8013c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c9c:	e7e1      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013c9e:	ea52 0808 	orrs.w	r8, r2, r8
 8013ca2:	d106      	bne.n	8013cb2 <__ieee754_atan2+0x92>
 8013ca4:	f1bc 0f00 	cmp.w	ip, #0
 8013ca8:	da5f      	bge.n	8013d6a <__ieee754_atan2+0x14a>
 8013caa:	a13f      	add	r1, pc, #252	; (adr r1, 8013da8 <__ieee754_atan2+0x188>)
 8013cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cb0:	e7d7      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013cb2:	4572      	cmp	r2, lr
 8013cb4:	d10f      	bne.n	8013cd6 <__ieee754_atan2+0xb6>
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	f104 34ff 	add.w	r4, r4, #4294967295
 8013cbc:	d107      	bne.n	8013cce <__ieee754_atan2+0xae>
 8013cbe:	2c02      	cmp	r4, #2
 8013cc0:	d84c      	bhi.n	8013d5c <__ieee754_atan2+0x13c>
 8013cc2:	4b35      	ldr	r3, [pc, #212]	; (8013d98 <__ieee754_atan2+0x178>)
 8013cc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013cc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013ccc:	e7c9      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013cce:	2c02      	cmp	r4, #2
 8013cd0:	d848      	bhi.n	8013d64 <__ieee754_atan2+0x144>
 8013cd2:	4b32      	ldr	r3, [pc, #200]	; (8013d9c <__ieee754_atan2+0x17c>)
 8013cd4:	e7f6      	b.n	8013cc4 <__ieee754_atan2+0xa4>
 8013cd6:	4573      	cmp	r3, lr
 8013cd8:	d0e4      	beq.n	8013ca4 <__ieee754_atan2+0x84>
 8013cda:	1a9b      	subs	r3, r3, r2
 8013cdc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013ce0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013ce4:	da1e      	bge.n	8013d24 <__ieee754_atan2+0x104>
 8013ce6:	2f00      	cmp	r7, #0
 8013ce8:	da01      	bge.n	8013cee <__ieee754_atan2+0xce>
 8013cea:	323c      	adds	r2, #60	; 0x3c
 8013cec:	db1e      	blt.n	8013d2c <__ieee754_atan2+0x10c>
 8013cee:	4632      	mov	r2, r6
 8013cf0:	463b      	mov	r3, r7
 8013cf2:	f7ec fdab 	bl	800084c <__aeabi_ddiv>
 8013cf6:	ec41 0b10 	vmov	d0, r0, r1
 8013cfa:	f000 fd75 	bl	80147e8 <fabs>
 8013cfe:	f000 fbd3 	bl	80144a8 <atan>
 8013d02:	ec51 0b10 	vmov	r0, r1, d0
 8013d06:	2c01      	cmp	r4, #1
 8013d08:	d013      	beq.n	8013d32 <__ieee754_atan2+0x112>
 8013d0a:	2c02      	cmp	r4, #2
 8013d0c:	d015      	beq.n	8013d3a <__ieee754_atan2+0x11a>
 8013d0e:	2c00      	cmp	r4, #0
 8013d10:	d0a7      	beq.n	8013c62 <__ieee754_atan2+0x42>
 8013d12:	a319      	add	r3, pc, #100	; (adr r3, 8013d78 <__ieee754_atan2+0x158>)
 8013d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d18:	f7ec fab6 	bl	8000288 <__aeabi_dsub>
 8013d1c:	a318      	add	r3, pc, #96	; (adr r3, 8013d80 <__ieee754_atan2+0x160>)
 8013d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d22:	e014      	b.n	8013d4e <__ieee754_atan2+0x12e>
 8013d24:	a118      	add	r1, pc, #96	; (adr r1, 8013d88 <__ieee754_atan2+0x168>)
 8013d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d2a:	e7ec      	b.n	8013d06 <__ieee754_atan2+0xe6>
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	2100      	movs	r1, #0
 8013d30:	e7e9      	b.n	8013d06 <__ieee754_atan2+0xe6>
 8013d32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d36:	4619      	mov	r1, r3
 8013d38:	e793      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013d3a:	a30f      	add	r3, pc, #60	; (adr r3, 8013d78 <__ieee754_atan2+0x158>)
 8013d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d40:	f7ec faa2 	bl	8000288 <__aeabi_dsub>
 8013d44:	4602      	mov	r2, r0
 8013d46:	460b      	mov	r3, r1
 8013d48:	a10d      	add	r1, pc, #52	; (adr r1, 8013d80 <__ieee754_atan2+0x160>)
 8013d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d4e:	f7ec fa9b 	bl	8000288 <__aeabi_dsub>
 8013d52:	e786      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013d54:	a10a      	add	r1, pc, #40	; (adr r1, 8013d80 <__ieee754_atan2+0x160>)
 8013d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d5a:	e782      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013d5c:	a10c      	add	r1, pc, #48	; (adr r1, 8013d90 <__ieee754_atan2+0x170>)
 8013d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d62:	e77e      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013d64:	2000      	movs	r0, #0
 8013d66:	2100      	movs	r1, #0
 8013d68:	e77b      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013d6a:	a107      	add	r1, pc, #28	; (adr r1, 8013d88 <__ieee754_atan2+0x168>)
 8013d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d70:	e777      	b.n	8013c62 <__ieee754_atan2+0x42>
 8013d72:	bf00      	nop
 8013d74:	f3af 8000 	nop.w
 8013d78:	33145c07 	.word	0x33145c07
 8013d7c:	3ca1a626 	.word	0x3ca1a626
 8013d80:	54442d18 	.word	0x54442d18
 8013d84:	400921fb 	.word	0x400921fb
 8013d88:	54442d18 	.word	0x54442d18
 8013d8c:	3ff921fb 	.word	0x3ff921fb
 8013d90:	54442d18 	.word	0x54442d18
 8013d94:	3fe921fb 	.word	0x3fe921fb
 8013d98:	080154b8 	.word	0x080154b8
 8013d9c:	080154d0 	.word	0x080154d0
 8013da0:	54442d18 	.word	0x54442d18
 8013da4:	c00921fb 	.word	0xc00921fb
 8013da8:	54442d18 	.word	0x54442d18
 8013dac:	bff921fb 	.word	0xbff921fb
 8013db0:	7ff00000 	.word	0x7ff00000

08013db4 <__ieee754_sqrt>:
 8013db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db8:	ec55 4b10 	vmov	r4, r5, d0
 8013dbc:	4e56      	ldr	r6, [pc, #344]	; (8013f18 <__ieee754_sqrt+0x164>)
 8013dbe:	43ae      	bics	r6, r5
 8013dc0:	ee10 0a10 	vmov	r0, s0
 8013dc4:	ee10 3a10 	vmov	r3, s0
 8013dc8:	4629      	mov	r1, r5
 8013dca:	462a      	mov	r2, r5
 8013dcc:	d110      	bne.n	8013df0 <__ieee754_sqrt+0x3c>
 8013dce:	ee10 2a10 	vmov	r2, s0
 8013dd2:	462b      	mov	r3, r5
 8013dd4:	f7ec fc10 	bl	80005f8 <__aeabi_dmul>
 8013dd8:	4602      	mov	r2, r0
 8013dda:	460b      	mov	r3, r1
 8013ddc:	4620      	mov	r0, r4
 8013dde:	4629      	mov	r1, r5
 8013de0:	f7ec fa54 	bl	800028c <__adddf3>
 8013de4:	4604      	mov	r4, r0
 8013de6:	460d      	mov	r5, r1
 8013de8:	ec45 4b10 	vmov	d0, r4, r5
 8013dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013df0:	2d00      	cmp	r5, #0
 8013df2:	dc10      	bgt.n	8013e16 <__ieee754_sqrt+0x62>
 8013df4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013df8:	4330      	orrs	r0, r6
 8013dfa:	d0f5      	beq.n	8013de8 <__ieee754_sqrt+0x34>
 8013dfc:	b15d      	cbz	r5, 8013e16 <__ieee754_sqrt+0x62>
 8013dfe:	ee10 2a10 	vmov	r2, s0
 8013e02:	462b      	mov	r3, r5
 8013e04:	ee10 0a10 	vmov	r0, s0
 8013e08:	f7ec fa3e 	bl	8000288 <__aeabi_dsub>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	460b      	mov	r3, r1
 8013e10:	f7ec fd1c 	bl	800084c <__aeabi_ddiv>
 8013e14:	e7e6      	b.n	8013de4 <__ieee754_sqrt+0x30>
 8013e16:	1509      	asrs	r1, r1, #20
 8013e18:	d076      	beq.n	8013f08 <__ieee754_sqrt+0x154>
 8013e1a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013e1e:	07ce      	lsls	r6, r1, #31
 8013e20:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8013e24:	bf5e      	ittt	pl
 8013e26:	0fda      	lsrpl	r2, r3, #31
 8013e28:	005b      	lslpl	r3, r3, #1
 8013e2a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8013e2e:	0fda      	lsrs	r2, r3, #31
 8013e30:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8013e34:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8013e38:	2000      	movs	r0, #0
 8013e3a:	106d      	asrs	r5, r5, #1
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	f04f 0e16 	mov.w	lr, #22
 8013e42:	4684      	mov	ip, r0
 8013e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013e48:	eb0c 0401 	add.w	r4, ip, r1
 8013e4c:	4294      	cmp	r4, r2
 8013e4e:	bfde      	ittt	le
 8013e50:	1b12      	suble	r2, r2, r4
 8013e52:	eb04 0c01 	addle.w	ip, r4, r1
 8013e56:	1840      	addle	r0, r0, r1
 8013e58:	0052      	lsls	r2, r2, #1
 8013e5a:	f1be 0e01 	subs.w	lr, lr, #1
 8013e5e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8013e62:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8013e66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013e6a:	d1ed      	bne.n	8013e48 <__ieee754_sqrt+0x94>
 8013e6c:	4671      	mov	r1, lr
 8013e6e:	2720      	movs	r7, #32
 8013e70:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013e74:	4562      	cmp	r2, ip
 8013e76:	eb04 060e 	add.w	r6, r4, lr
 8013e7a:	dc02      	bgt.n	8013e82 <__ieee754_sqrt+0xce>
 8013e7c:	d113      	bne.n	8013ea6 <__ieee754_sqrt+0xf2>
 8013e7e:	429e      	cmp	r6, r3
 8013e80:	d811      	bhi.n	8013ea6 <__ieee754_sqrt+0xf2>
 8013e82:	2e00      	cmp	r6, #0
 8013e84:	eb06 0e04 	add.w	lr, r6, r4
 8013e88:	da43      	bge.n	8013f12 <__ieee754_sqrt+0x15e>
 8013e8a:	f1be 0f00 	cmp.w	lr, #0
 8013e8e:	db40      	blt.n	8013f12 <__ieee754_sqrt+0x15e>
 8013e90:	f10c 0801 	add.w	r8, ip, #1
 8013e94:	eba2 020c 	sub.w	r2, r2, ip
 8013e98:	429e      	cmp	r6, r3
 8013e9a:	bf88      	it	hi
 8013e9c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013ea0:	1b9b      	subs	r3, r3, r6
 8013ea2:	4421      	add	r1, r4
 8013ea4:	46c4      	mov	ip, r8
 8013ea6:	0052      	lsls	r2, r2, #1
 8013ea8:	3f01      	subs	r7, #1
 8013eaa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8013eae:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8013eb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013eb6:	d1dd      	bne.n	8013e74 <__ieee754_sqrt+0xc0>
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	d006      	beq.n	8013eca <__ieee754_sqrt+0x116>
 8013ebc:	1c4c      	adds	r4, r1, #1
 8013ebe:	bf13      	iteet	ne
 8013ec0:	3101      	addne	r1, #1
 8013ec2:	3001      	addeq	r0, #1
 8013ec4:	4639      	moveq	r1, r7
 8013ec6:	f021 0101 	bicne.w	r1, r1, #1
 8013eca:	1043      	asrs	r3, r0, #1
 8013ecc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013ed0:	0849      	lsrs	r1, r1, #1
 8013ed2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013ed6:	07c2      	lsls	r2, r0, #31
 8013ed8:	bf48      	it	mi
 8013eda:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8013ede:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8013ee2:	460c      	mov	r4, r1
 8013ee4:	463d      	mov	r5, r7
 8013ee6:	e77f      	b.n	8013de8 <__ieee754_sqrt+0x34>
 8013ee8:	0ada      	lsrs	r2, r3, #11
 8013eea:	3815      	subs	r0, #21
 8013eec:	055b      	lsls	r3, r3, #21
 8013eee:	2a00      	cmp	r2, #0
 8013ef0:	d0fa      	beq.n	8013ee8 <__ieee754_sqrt+0x134>
 8013ef2:	02d7      	lsls	r7, r2, #11
 8013ef4:	d50a      	bpl.n	8013f0c <__ieee754_sqrt+0x158>
 8013ef6:	f1c1 0420 	rsb	r4, r1, #32
 8013efa:	fa23 f404 	lsr.w	r4, r3, r4
 8013efe:	1e4d      	subs	r5, r1, #1
 8013f00:	408b      	lsls	r3, r1
 8013f02:	4322      	orrs	r2, r4
 8013f04:	1b41      	subs	r1, r0, r5
 8013f06:	e788      	b.n	8013e1a <__ieee754_sqrt+0x66>
 8013f08:	4608      	mov	r0, r1
 8013f0a:	e7f0      	b.n	8013eee <__ieee754_sqrt+0x13a>
 8013f0c:	0052      	lsls	r2, r2, #1
 8013f0e:	3101      	adds	r1, #1
 8013f10:	e7ef      	b.n	8013ef2 <__ieee754_sqrt+0x13e>
 8013f12:	46e0      	mov	r8, ip
 8013f14:	e7be      	b.n	8013e94 <__ieee754_sqrt+0xe0>
 8013f16:	bf00      	nop
 8013f18:	7ff00000 	.word	0x7ff00000

08013f1c <__ieee754_powf>:
 8013f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f20:	ee10 5a90 	vmov	r5, s1
 8013f24:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8013f28:	ed2d 8b02 	vpush	{d8}
 8013f2c:	eeb0 8a40 	vmov.f32	s16, s0
 8013f30:	eef0 8a60 	vmov.f32	s17, s1
 8013f34:	f000 8291 	beq.w	801445a <__ieee754_powf+0x53e>
 8013f38:	ee10 8a10 	vmov	r8, s0
 8013f3c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8013f40:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013f44:	dc06      	bgt.n	8013f54 <__ieee754_powf+0x38>
 8013f46:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013f4a:	dd0a      	ble.n	8013f62 <__ieee754_powf+0x46>
 8013f4c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013f50:	f000 8283 	beq.w	801445a <__ieee754_powf+0x53e>
 8013f54:	ecbd 8b02 	vpop	{d8}
 8013f58:	48d8      	ldr	r0, [pc, #864]	; (80142bc <__ieee754_powf+0x3a0>)
 8013f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5e:	f7fb bfe7 	b.w	800ff30 <nanf>
 8013f62:	f1b8 0f00 	cmp.w	r8, #0
 8013f66:	da1f      	bge.n	8013fa8 <__ieee754_powf+0x8c>
 8013f68:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8013f6c:	da2e      	bge.n	8013fcc <__ieee754_powf+0xb0>
 8013f6e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013f72:	f2c0 827b 	blt.w	801446c <__ieee754_powf+0x550>
 8013f76:	15fb      	asrs	r3, r7, #23
 8013f78:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8013f7c:	fa47 f603 	asr.w	r6, r7, r3
 8013f80:	fa06 f303 	lsl.w	r3, r6, r3
 8013f84:	42bb      	cmp	r3, r7
 8013f86:	f040 8271 	bne.w	801446c <__ieee754_powf+0x550>
 8013f8a:	f006 0601 	and.w	r6, r6, #1
 8013f8e:	f1c6 0602 	rsb	r6, r6, #2
 8013f92:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8013f96:	d120      	bne.n	8013fda <__ieee754_powf+0xbe>
 8013f98:	2d00      	cmp	r5, #0
 8013f9a:	f280 8264 	bge.w	8014466 <__ieee754_powf+0x54a>
 8013f9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013fa2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8013fa6:	e00d      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8013fa8:	2600      	movs	r6, #0
 8013faa:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8013fae:	d1f0      	bne.n	8013f92 <__ieee754_powf+0x76>
 8013fb0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8013fb4:	f000 8251 	beq.w	801445a <__ieee754_powf+0x53e>
 8013fb8:	dd0a      	ble.n	8013fd0 <__ieee754_powf+0xb4>
 8013fba:	2d00      	cmp	r5, #0
 8013fbc:	f280 8250 	bge.w	8014460 <__ieee754_powf+0x544>
 8013fc0:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80142c0 <__ieee754_powf+0x3a4>
 8013fc4:	ecbd 8b02 	vpop	{d8}
 8013fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fcc:	2602      	movs	r6, #2
 8013fce:	e7ec      	b.n	8013faa <__ieee754_powf+0x8e>
 8013fd0:	2d00      	cmp	r5, #0
 8013fd2:	daf5      	bge.n	8013fc0 <__ieee754_powf+0xa4>
 8013fd4:	eeb1 0a68 	vneg.f32	s0, s17
 8013fd8:	e7f4      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8013fda:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8013fde:	d102      	bne.n	8013fe6 <__ieee754_powf+0xca>
 8013fe0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013fe4:	e7ee      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8013fe6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8013fea:	eeb0 0a48 	vmov.f32	s0, s16
 8013fee:	d108      	bne.n	8014002 <__ieee754_powf+0xe6>
 8013ff0:	f1b8 0f00 	cmp.w	r8, #0
 8013ff4:	db05      	blt.n	8014002 <__ieee754_powf+0xe6>
 8013ff6:	ecbd 8b02 	vpop	{d8}
 8013ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ffe:	f000 ba4d 	b.w	801449c <__ieee754_sqrtf>
 8014002:	f000 fbfa 	bl	80147fa <fabsf>
 8014006:	b124      	cbz	r4, 8014012 <__ieee754_powf+0xf6>
 8014008:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801400c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014010:	d117      	bne.n	8014042 <__ieee754_powf+0x126>
 8014012:	2d00      	cmp	r5, #0
 8014014:	bfbc      	itt	lt
 8014016:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801401a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801401e:	f1b8 0f00 	cmp.w	r8, #0
 8014022:	dacf      	bge.n	8013fc4 <__ieee754_powf+0xa8>
 8014024:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8014028:	ea54 0306 	orrs.w	r3, r4, r6
 801402c:	d104      	bne.n	8014038 <__ieee754_powf+0x11c>
 801402e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8014032:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8014036:	e7c5      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014038:	2e01      	cmp	r6, #1
 801403a:	d1c3      	bne.n	8013fc4 <__ieee754_powf+0xa8>
 801403c:	eeb1 0a40 	vneg.f32	s0, s0
 8014040:	e7c0      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014042:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8014046:	3801      	subs	r0, #1
 8014048:	ea56 0300 	orrs.w	r3, r6, r0
 801404c:	d104      	bne.n	8014058 <__ieee754_powf+0x13c>
 801404e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8014052:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8014056:	e7b5      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014058:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801405c:	dd6b      	ble.n	8014136 <__ieee754_powf+0x21a>
 801405e:	4b99      	ldr	r3, [pc, #612]	; (80142c4 <__ieee754_powf+0x3a8>)
 8014060:	429c      	cmp	r4, r3
 8014062:	dc06      	bgt.n	8014072 <__ieee754_powf+0x156>
 8014064:	2d00      	cmp	r5, #0
 8014066:	daab      	bge.n	8013fc0 <__ieee754_powf+0xa4>
 8014068:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80142c8 <__ieee754_powf+0x3ac>
 801406c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014070:	e7a8      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014072:	4b96      	ldr	r3, [pc, #600]	; (80142cc <__ieee754_powf+0x3b0>)
 8014074:	429c      	cmp	r4, r3
 8014076:	dd02      	ble.n	801407e <__ieee754_powf+0x162>
 8014078:	2d00      	cmp	r5, #0
 801407a:	dcf5      	bgt.n	8014068 <__ieee754_powf+0x14c>
 801407c:	e7a0      	b.n	8013fc0 <__ieee754_powf+0xa4>
 801407e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014082:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014086:	eddf 6a92 	vldr	s13, [pc, #584]	; 80142d0 <__ieee754_powf+0x3b4>
 801408a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801408e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8014092:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014096:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801409a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80140a2:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80142d4 <__ieee754_powf+0x3b8>
 80140a6:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80140aa:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80142d8 <__ieee754_powf+0x3bc>
 80140ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80140b2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80142dc <__ieee754_powf+0x3c0>
 80140b6:	eef0 6a67 	vmov.f32	s13, s15
 80140ba:	eee0 6a07 	vfma.f32	s13, s0, s14
 80140be:	ee16 3a90 	vmov	r3, s13
 80140c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80140c6:	f023 030f 	bic.w	r3, r3, #15
 80140ca:	ee00 3a90 	vmov	s1, r3
 80140ce:	eee0 0a47 	vfms.f32	s1, s0, s14
 80140d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80140d6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80140da:	f025 050f 	bic.w	r5, r5, #15
 80140de:	ee07 5a10 	vmov	s14, r5
 80140e2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80140e6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80140ea:	ee07 3a90 	vmov	s15, r3
 80140ee:	eee7 0a27 	vfma.f32	s1, s14, s15
 80140f2:	3e01      	subs	r6, #1
 80140f4:	ea56 0200 	orrs.w	r2, r6, r0
 80140f8:	ee07 5a10 	vmov	s14, r5
 80140fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014100:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014104:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014108:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801410c:	ee17 4a10 	vmov	r4, s14
 8014110:	bf08      	it	eq
 8014112:	eeb0 8a40 	vmoveq.f32	s16, s0
 8014116:	2c00      	cmp	r4, #0
 8014118:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801411c:	f340 8184 	ble.w	8014428 <__ieee754_powf+0x50c>
 8014120:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8014124:	f340 80fc 	ble.w	8014320 <__ieee754_powf+0x404>
 8014128:	eddf 7a67 	vldr	s15, [pc, #412]	; 80142c8 <__ieee754_powf+0x3ac>
 801412c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8014130:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014134:	e746      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014136:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 801413a:	bf01      	itttt	eq
 801413c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80142e0 <__ieee754_powf+0x3c4>
 8014140:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8014144:	f06f 0217 	mvneq.w	r2, #23
 8014148:	ee17 4a90 	vmoveq	r4, s15
 801414c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8014150:	bf18      	it	ne
 8014152:	2200      	movne	r2, #0
 8014154:	3b7f      	subs	r3, #127	; 0x7f
 8014156:	4413      	add	r3, r2
 8014158:	4a62      	ldr	r2, [pc, #392]	; (80142e4 <__ieee754_powf+0x3c8>)
 801415a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801415e:	4294      	cmp	r4, r2
 8014160:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8014164:	dd06      	ble.n	8014174 <__ieee754_powf+0x258>
 8014166:	4a60      	ldr	r2, [pc, #384]	; (80142e8 <__ieee754_powf+0x3cc>)
 8014168:	4294      	cmp	r4, r2
 801416a:	f340 80a4 	ble.w	80142b6 <__ieee754_powf+0x39a>
 801416e:	3301      	adds	r3, #1
 8014170:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014174:	2400      	movs	r4, #0
 8014176:	4a5d      	ldr	r2, [pc, #372]	; (80142ec <__ieee754_powf+0x3d0>)
 8014178:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801417c:	ee07 1a90 	vmov	s15, r1
 8014180:	ed92 7a00 	vldr	s14, [r2]
 8014184:	4a5a      	ldr	r2, [pc, #360]	; (80142f0 <__ieee754_powf+0x3d4>)
 8014186:	ee37 6a27 	vadd.f32	s12, s14, s15
 801418a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801418e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8014192:	1049      	asrs	r1, r1, #1
 8014194:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8014198:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801419c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80141a0:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80141a4:	ee06 1a10 	vmov	s12, r1
 80141a8:	ee65 4a26 	vmul.f32	s9, s10, s13
 80141ac:	ee36 7a47 	vsub.f32	s14, s12, s14
 80141b0:	ee14 7a90 	vmov	r7, s9
 80141b4:	4017      	ands	r7, r2
 80141b6:	ee05 7a90 	vmov	s11, r7
 80141ba:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80141be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141c2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80142f4 <__ieee754_powf+0x3d8>
 80141c6:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80141ca:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80141ce:	ee25 6a26 	vmul.f32	s12, s10, s13
 80141d2:	eddf 6a49 	vldr	s13, [pc, #292]	; 80142f8 <__ieee754_powf+0x3dc>
 80141d6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80141da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80142fc <__ieee754_powf+0x3e0>
 80141de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80141e2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80142d0 <__ieee754_powf+0x3b4>
 80141e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80141ea:	eddf 6a45 	vldr	s13, [pc, #276]	; 8014300 <__ieee754_powf+0x3e4>
 80141ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 80141f2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8014304 <__ieee754_powf+0x3e8>
 80141f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80141fa:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80141fe:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8014202:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014206:	eee5 6a07 	vfma.f32	s13, s10, s14
 801420a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 801420e:	eef0 7a45 	vmov.f32	s15, s10
 8014212:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8014216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801421a:	ee17 1a90 	vmov	r1, s15
 801421e:	4011      	ands	r1, r2
 8014220:	ee07 1a90 	vmov	s15, r1
 8014224:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8014228:	eea5 7ae5 	vfms.f32	s14, s11, s11
 801422c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014230:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014234:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014238:	eeb0 6a47 	vmov.f32	s12, s14
 801423c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014240:	ee16 1a10 	vmov	r1, s12
 8014244:	4011      	ands	r1, r2
 8014246:	ee06 1a90 	vmov	s13, r1
 801424a:	eee5 6ae7 	vfms.f32	s13, s11, s15
 801424e:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014308 <__ieee754_powf+0x3ec>
 8014252:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801430c <__ieee754_powf+0x3f0>
 8014256:	ee37 7a66 	vsub.f32	s14, s14, s13
 801425a:	ee06 1a10 	vmov	s12, r1
 801425e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014262:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014310 <__ieee754_powf+0x3f4>
 8014266:	492b      	ldr	r1, [pc, #172]	; (8014314 <__ieee754_powf+0x3f8>)
 8014268:	eea6 7a27 	vfma.f32	s14, s12, s15
 801426c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014270:	edd1 7a00 	vldr	s15, [r1]
 8014274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014278:	ee07 3a90 	vmov	s15, r3
 801427c:	4b26      	ldr	r3, [pc, #152]	; (8014318 <__ieee754_powf+0x3fc>)
 801427e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014282:	eef0 7a47 	vmov.f32	s15, s14
 8014286:	eee6 7a25 	vfma.f32	s15, s12, s11
 801428a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801428e:	edd4 0a00 	vldr	s1, [r4]
 8014292:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801429a:	ee17 3a90 	vmov	r3, s15
 801429e:	4013      	ands	r3, r2
 80142a0:	ee07 3a90 	vmov	s15, r3
 80142a4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80142a8:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80142ac:	eee6 6a65 	vfms.f32	s13, s12, s11
 80142b0:	ee77 7a66 	vsub.f32	s15, s14, s13
 80142b4:	e70f      	b.n	80140d6 <__ieee754_powf+0x1ba>
 80142b6:	2401      	movs	r4, #1
 80142b8:	e75d      	b.n	8014176 <__ieee754_powf+0x25a>
 80142ba:	bf00      	nop
 80142bc:	08015450 	.word	0x08015450
 80142c0:	00000000 	.word	0x00000000
 80142c4:	3f7ffff7 	.word	0x3f7ffff7
 80142c8:	7149f2ca 	.word	0x7149f2ca
 80142cc:	3f800007 	.word	0x3f800007
 80142d0:	3eaaaaab 	.word	0x3eaaaaab
 80142d4:	3fb8aa3b 	.word	0x3fb8aa3b
 80142d8:	36eca570 	.word	0x36eca570
 80142dc:	3fb8aa00 	.word	0x3fb8aa00
 80142e0:	4b800000 	.word	0x4b800000
 80142e4:	001cc471 	.word	0x001cc471
 80142e8:	005db3d6 	.word	0x005db3d6
 80142ec:	080154e8 	.word	0x080154e8
 80142f0:	fffff000 	.word	0xfffff000
 80142f4:	3e6c3255 	.word	0x3e6c3255
 80142f8:	3e53f142 	.word	0x3e53f142
 80142fc:	3e8ba305 	.word	0x3e8ba305
 8014300:	3edb6db7 	.word	0x3edb6db7
 8014304:	3f19999a 	.word	0x3f19999a
 8014308:	3f76384f 	.word	0x3f76384f
 801430c:	3f763800 	.word	0x3f763800
 8014310:	369dc3a0 	.word	0x369dc3a0
 8014314:	080154f8 	.word	0x080154f8
 8014318:	080154f0 	.word	0x080154f0
 801431c:	3338aa3c 	.word	0x3338aa3c
 8014320:	f040 8092 	bne.w	8014448 <__ieee754_powf+0x52c>
 8014324:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801431c <__ieee754_powf+0x400>
 8014328:	ee37 7a67 	vsub.f32	s14, s14, s15
 801432c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014330:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014338:	f73f aef6 	bgt.w	8014128 <__ieee754_powf+0x20c>
 801433c:	15db      	asrs	r3, r3, #23
 801433e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8014342:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014346:	4103      	asrs	r3, r0
 8014348:	4423      	add	r3, r4
 801434a:	4949      	ldr	r1, [pc, #292]	; (8014470 <__ieee754_powf+0x554>)
 801434c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014350:	3a7f      	subs	r2, #127	; 0x7f
 8014352:	4111      	asrs	r1, r2
 8014354:	ea23 0101 	bic.w	r1, r3, r1
 8014358:	ee07 1a10 	vmov	s14, r1
 801435c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014360:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014364:	f1c2 0217 	rsb	r2, r2, #23
 8014368:	4110      	asrs	r0, r2
 801436a:	2c00      	cmp	r4, #0
 801436c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014370:	bfb8      	it	lt
 8014372:	4240      	neglt	r0, r0
 8014374:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014378:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8014474 <__ieee754_powf+0x558>
 801437c:	ee17 3a10 	vmov	r3, s14
 8014380:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014384:	f023 030f 	bic.w	r3, r3, #15
 8014388:	ee07 3a10 	vmov	s14, r3
 801438c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014390:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014394:	eddf 7a38 	vldr	s15, [pc, #224]	; 8014478 <__ieee754_powf+0x55c>
 8014398:	ee67 7a27 	vmul.f32	s15, s14, s15
 801439c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80143a0:	eddf 6a36 	vldr	s13, [pc, #216]	; 801447c <__ieee754_powf+0x560>
 80143a4:	eeb0 0a67 	vmov.f32	s0, s15
 80143a8:	eea7 0a26 	vfma.f32	s0, s14, s13
 80143ac:	eeb0 6a40 	vmov.f32	s12, s0
 80143b0:	eea7 6a66 	vfms.f32	s12, s14, s13
 80143b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80143b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80143bc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014480 <__ieee754_powf+0x564>
 80143c0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8014484 <__ieee754_powf+0x568>
 80143c4:	eea7 6a26 	vfma.f32	s12, s14, s13
 80143c8:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014488 <__ieee754_powf+0x56c>
 80143cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80143d0:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 801448c <__ieee754_powf+0x570>
 80143d4:	eea6 6a87 	vfma.f32	s12, s13, s14
 80143d8:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8014490 <__ieee754_powf+0x574>
 80143dc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80143e0:	eeb0 6a40 	vmov.f32	s12, s0
 80143e4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80143e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80143ec:	eeb0 7a46 	vmov.f32	s14, s12
 80143f0:	ee77 6a66 	vsub.f32	s13, s14, s13
 80143f4:	ee20 6a06 	vmul.f32	s12, s0, s12
 80143f8:	eee0 7a27 	vfma.f32	s15, s0, s15
 80143fc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014404:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014408:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801440c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014410:	ee10 3a10 	vmov	r3, s0
 8014414:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801441c:	da1a      	bge.n	8014454 <__ieee754_powf+0x538>
 801441e:	f000 fa5d 	bl	80148dc <scalbnf>
 8014422:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014426:	e5cd      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014428:	4a1a      	ldr	r2, [pc, #104]	; (8014494 <__ieee754_powf+0x578>)
 801442a:	4293      	cmp	r3, r2
 801442c:	dd02      	ble.n	8014434 <__ieee754_powf+0x518>
 801442e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8014498 <__ieee754_powf+0x57c>
 8014432:	e67b      	b.n	801412c <__ieee754_powf+0x210>
 8014434:	d108      	bne.n	8014448 <__ieee754_powf+0x52c>
 8014436:	ee37 7a67 	vsub.f32	s14, s14, s15
 801443a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014442:	f6ff af7b 	blt.w	801433c <__ieee754_powf+0x420>
 8014446:	e7f2      	b.n	801442e <__ieee754_powf+0x512>
 8014448:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801444c:	f73f af76 	bgt.w	801433c <__ieee754_powf+0x420>
 8014450:	2000      	movs	r0, #0
 8014452:	e78f      	b.n	8014374 <__ieee754_powf+0x458>
 8014454:	ee00 3a10 	vmov	s0, r3
 8014458:	e7e3      	b.n	8014422 <__ieee754_powf+0x506>
 801445a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801445e:	e5b1      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014460:	eeb0 0a68 	vmov.f32	s0, s17
 8014464:	e5ae      	b.n	8013fc4 <__ieee754_powf+0xa8>
 8014466:	eeb0 0a48 	vmov.f32	s0, s16
 801446a:	e5ab      	b.n	8013fc4 <__ieee754_powf+0xa8>
 801446c:	2600      	movs	r6, #0
 801446e:	e590      	b.n	8013f92 <__ieee754_powf+0x76>
 8014470:	007fffff 	.word	0x007fffff
 8014474:	3f317218 	.word	0x3f317218
 8014478:	35bfbe8c 	.word	0x35bfbe8c
 801447c:	3f317200 	.word	0x3f317200
 8014480:	3331bb4c 	.word	0x3331bb4c
 8014484:	b5ddea0e 	.word	0xb5ddea0e
 8014488:	388ab355 	.word	0x388ab355
 801448c:	bb360b61 	.word	0xbb360b61
 8014490:	3e2aaaab 	.word	0x3e2aaaab
 8014494:	43160000 	.word	0x43160000
 8014498:	0da24260 	.word	0x0da24260

0801449c <__ieee754_sqrtf>:
 801449c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80144a0:	4770      	bx	lr
 80144a2:	0000      	movs	r0, r0
 80144a4:	0000      	movs	r0, r0
	...

080144a8 <atan>:
 80144a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144ac:	ec55 4b10 	vmov	r4, r5, d0
 80144b0:	4bc3      	ldr	r3, [pc, #780]	; (80147c0 <atan+0x318>)
 80144b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80144b6:	429e      	cmp	r6, r3
 80144b8:	46ab      	mov	fp, r5
 80144ba:	dd18      	ble.n	80144ee <atan+0x46>
 80144bc:	4bc1      	ldr	r3, [pc, #772]	; (80147c4 <atan+0x31c>)
 80144be:	429e      	cmp	r6, r3
 80144c0:	dc01      	bgt.n	80144c6 <atan+0x1e>
 80144c2:	d109      	bne.n	80144d8 <atan+0x30>
 80144c4:	b144      	cbz	r4, 80144d8 <atan+0x30>
 80144c6:	4622      	mov	r2, r4
 80144c8:	462b      	mov	r3, r5
 80144ca:	4620      	mov	r0, r4
 80144cc:	4629      	mov	r1, r5
 80144ce:	f7eb fedd 	bl	800028c <__adddf3>
 80144d2:	4604      	mov	r4, r0
 80144d4:	460d      	mov	r5, r1
 80144d6:	e006      	b.n	80144e6 <atan+0x3e>
 80144d8:	f1bb 0f00 	cmp.w	fp, #0
 80144dc:	f300 8131 	bgt.w	8014742 <atan+0x29a>
 80144e0:	a59b      	add	r5, pc, #620	; (adr r5, 8014750 <atan+0x2a8>)
 80144e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80144e6:	ec45 4b10 	vmov	d0, r4, r5
 80144ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ee:	4bb6      	ldr	r3, [pc, #728]	; (80147c8 <atan+0x320>)
 80144f0:	429e      	cmp	r6, r3
 80144f2:	dc14      	bgt.n	801451e <atan+0x76>
 80144f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80144f8:	429e      	cmp	r6, r3
 80144fa:	dc0d      	bgt.n	8014518 <atan+0x70>
 80144fc:	a396      	add	r3, pc, #600	; (adr r3, 8014758 <atan+0x2b0>)
 80144fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014502:	ee10 0a10 	vmov	r0, s0
 8014506:	4629      	mov	r1, r5
 8014508:	f7eb fec0 	bl	800028c <__adddf3>
 801450c:	4baf      	ldr	r3, [pc, #700]	; (80147cc <atan+0x324>)
 801450e:	2200      	movs	r2, #0
 8014510:	f7ec fb02 	bl	8000b18 <__aeabi_dcmpgt>
 8014514:	2800      	cmp	r0, #0
 8014516:	d1e6      	bne.n	80144e6 <atan+0x3e>
 8014518:	f04f 3aff 	mov.w	sl, #4294967295
 801451c:	e02b      	b.n	8014576 <atan+0xce>
 801451e:	f000 f963 	bl	80147e8 <fabs>
 8014522:	4bab      	ldr	r3, [pc, #684]	; (80147d0 <atan+0x328>)
 8014524:	429e      	cmp	r6, r3
 8014526:	ec55 4b10 	vmov	r4, r5, d0
 801452a:	f300 80bf 	bgt.w	80146ac <atan+0x204>
 801452e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014532:	429e      	cmp	r6, r3
 8014534:	f300 80a0 	bgt.w	8014678 <atan+0x1d0>
 8014538:	ee10 2a10 	vmov	r2, s0
 801453c:	ee10 0a10 	vmov	r0, s0
 8014540:	462b      	mov	r3, r5
 8014542:	4629      	mov	r1, r5
 8014544:	f7eb fea2 	bl	800028c <__adddf3>
 8014548:	4ba0      	ldr	r3, [pc, #640]	; (80147cc <atan+0x324>)
 801454a:	2200      	movs	r2, #0
 801454c:	f7eb fe9c 	bl	8000288 <__aeabi_dsub>
 8014550:	2200      	movs	r2, #0
 8014552:	4606      	mov	r6, r0
 8014554:	460f      	mov	r7, r1
 8014556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801455a:	4620      	mov	r0, r4
 801455c:	4629      	mov	r1, r5
 801455e:	f7eb fe95 	bl	800028c <__adddf3>
 8014562:	4602      	mov	r2, r0
 8014564:	460b      	mov	r3, r1
 8014566:	4630      	mov	r0, r6
 8014568:	4639      	mov	r1, r7
 801456a:	f7ec f96f 	bl	800084c <__aeabi_ddiv>
 801456e:	f04f 0a00 	mov.w	sl, #0
 8014572:	4604      	mov	r4, r0
 8014574:	460d      	mov	r5, r1
 8014576:	4622      	mov	r2, r4
 8014578:	462b      	mov	r3, r5
 801457a:	4620      	mov	r0, r4
 801457c:	4629      	mov	r1, r5
 801457e:	f7ec f83b 	bl	80005f8 <__aeabi_dmul>
 8014582:	4602      	mov	r2, r0
 8014584:	460b      	mov	r3, r1
 8014586:	4680      	mov	r8, r0
 8014588:	4689      	mov	r9, r1
 801458a:	f7ec f835 	bl	80005f8 <__aeabi_dmul>
 801458e:	a374      	add	r3, pc, #464	; (adr r3, 8014760 <atan+0x2b8>)
 8014590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014594:	4606      	mov	r6, r0
 8014596:	460f      	mov	r7, r1
 8014598:	f7ec f82e 	bl	80005f8 <__aeabi_dmul>
 801459c:	a372      	add	r3, pc, #456	; (adr r3, 8014768 <atan+0x2c0>)
 801459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a2:	f7eb fe73 	bl	800028c <__adddf3>
 80145a6:	4632      	mov	r2, r6
 80145a8:	463b      	mov	r3, r7
 80145aa:	f7ec f825 	bl	80005f8 <__aeabi_dmul>
 80145ae:	a370      	add	r3, pc, #448	; (adr r3, 8014770 <atan+0x2c8>)
 80145b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b4:	f7eb fe6a 	bl	800028c <__adddf3>
 80145b8:	4632      	mov	r2, r6
 80145ba:	463b      	mov	r3, r7
 80145bc:	f7ec f81c 	bl	80005f8 <__aeabi_dmul>
 80145c0:	a36d      	add	r3, pc, #436	; (adr r3, 8014778 <atan+0x2d0>)
 80145c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c6:	f7eb fe61 	bl	800028c <__adddf3>
 80145ca:	4632      	mov	r2, r6
 80145cc:	463b      	mov	r3, r7
 80145ce:	f7ec f813 	bl	80005f8 <__aeabi_dmul>
 80145d2:	a36b      	add	r3, pc, #428	; (adr r3, 8014780 <atan+0x2d8>)
 80145d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d8:	f7eb fe58 	bl	800028c <__adddf3>
 80145dc:	4632      	mov	r2, r6
 80145de:	463b      	mov	r3, r7
 80145e0:	f7ec f80a 	bl	80005f8 <__aeabi_dmul>
 80145e4:	a368      	add	r3, pc, #416	; (adr r3, 8014788 <atan+0x2e0>)
 80145e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ea:	f7eb fe4f 	bl	800028c <__adddf3>
 80145ee:	4642      	mov	r2, r8
 80145f0:	464b      	mov	r3, r9
 80145f2:	f7ec f801 	bl	80005f8 <__aeabi_dmul>
 80145f6:	a366      	add	r3, pc, #408	; (adr r3, 8014790 <atan+0x2e8>)
 80145f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fc:	4680      	mov	r8, r0
 80145fe:	4689      	mov	r9, r1
 8014600:	4630      	mov	r0, r6
 8014602:	4639      	mov	r1, r7
 8014604:	f7eb fff8 	bl	80005f8 <__aeabi_dmul>
 8014608:	a363      	add	r3, pc, #396	; (adr r3, 8014798 <atan+0x2f0>)
 801460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460e:	f7eb fe3b 	bl	8000288 <__aeabi_dsub>
 8014612:	4632      	mov	r2, r6
 8014614:	463b      	mov	r3, r7
 8014616:	f7eb ffef 	bl	80005f8 <__aeabi_dmul>
 801461a:	a361      	add	r3, pc, #388	; (adr r3, 80147a0 <atan+0x2f8>)
 801461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014620:	f7eb fe32 	bl	8000288 <__aeabi_dsub>
 8014624:	4632      	mov	r2, r6
 8014626:	463b      	mov	r3, r7
 8014628:	f7eb ffe6 	bl	80005f8 <__aeabi_dmul>
 801462c:	a35e      	add	r3, pc, #376	; (adr r3, 80147a8 <atan+0x300>)
 801462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014632:	f7eb fe29 	bl	8000288 <__aeabi_dsub>
 8014636:	4632      	mov	r2, r6
 8014638:	463b      	mov	r3, r7
 801463a:	f7eb ffdd 	bl	80005f8 <__aeabi_dmul>
 801463e:	a35c      	add	r3, pc, #368	; (adr r3, 80147b0 <atan+0x308>)
 8014640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014644:	f7eb fe20 	bl	8000288 <__aeabi_dsub>
 8014648:	4632      	mov	r2, r6
 801464a:	463b      	mov	r3, r7
 801464c:	f7eb ffd4 	bl	80005f8 <__aeabi_dmul>
 8014650:	4602      	mov	r2, r0
 8014652:	460b      	mov	r3, r1
 8014654:	4640      	mov	r0, r8
 8014656:	4649      	mov	r1, r9
 8014658:	f7eb fe18 	bl	800028c <__adddf3>
 801465c:	4622      	mov	r2, r4
 801465e:	462b      	mov	r3, r5
 8014660:	f7eb ffca 	bl	80005f8 <__aeabi_dmul>
 8014664:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014668:	4602      	mov	r2, r0
 801466a:	460b      	mov	r3, r1
 801466c:	d14b      	bne.n	8014706 <atan+0x25e>
 801466e:	4620      	mov	r0, r4
 8014670:	4629      	mov	r1, r5
 8014672:	f7eb fe09 	bl	8000288 <__aeabi_dsub>
 8014676:	e72c      	b.n	80144d2 <atan+0x2a>
 8014678:	ee10 0a10 	vmov	r0, s0
 801467c:	4b53      	ldr	r3, [pc, #332]	; (80147cc <atan+0x324>)
 801467e:	2200      	movs	r2, #0
 8014680:	4629      	mov	r1, r5
 8014682:	f7eb fe01 	bl	8000288 <__aeabi_dsub>
 8014686:	4b51      	ldr	r3, [pc, #324]	; (80147cc <atan+0x324>)
 8014688:	4606      	mov	r6, r0
 801468a:	460f      	mov	r7, r1
 801468c:	2200      	movs	r2, #0
 801468e:	4620      	mov	r0, r4
 8014690:	4629      	mov	r1, r5
 8014692:	f7eb fdfb 	bl	800028c <__adddf3>
 8014696:	4602      	mov	r2, r0
 8014698:	460b      	mov	r3, r1
 801469a:	4630      	mov	r0, r6
 801469c:	4639      	mov	r1, r7
 801469e:	f7ec f8d5 	bl	800084c <__aeabi_ddiv>
 80146a2:	f04f 0a01 	mov.w	sl, #1
 80146a6:	4604      	mov	r4, r0
 80146a8:	460d      	mov	r5, r1
 80146aa:	e764      	b.n	8014576 <atan+0xce>
 80146ac:	4b49      	ldr	r3, [pc, #292]	; (80147d4 <atan+0x32c>)
 80146ae:	429e      	cmp	r6, r3
 80146b0:	da1d      	bge.n	80146ee <atan+0x246>
 80146b2:	ee10 0a10 	vmov	r0, s0
 80146b6:	4b48      	ldr	r3, [pc, #288]	; (80147d8 <atan+0x330>)
 80146b8:	2200      	movs	r2, #0
 80146ba:	4629      	mov	r1, r5
 80146bc:	f7eb fde4 	bl	8000288 <__aeabi_dsub>
 80146c0:	4b45      	ldr	r3, [pc, #276]	; (80147d8 <atan+0x330>)
 80146c2:	4606      	mov	r6, r0
 80146c4:	460f      	mov	r7, r1
 80146c6:	2200      	movs	r2, #0
 80146c8:	4620      	mov	r0, r4
 80146ca:	4629      	mov	r1, r5
 80146cc:	f7eb ff94 	bl	80005f8 <__aeabi_dmul>
 80146d0:	4b3e      	ldr	r3, [pc, #248]	; (80147cc <atan+0x324>)
 80146d2:	2200      	movs	r2, #0
 80146d4:	f7eb fdda 	bl	800028c <__adddf3>
 80146d8:	4602      	mov	r2, r0
 80146da:	460b      	mov	r3, r1
 80146dc:	4630      	mov	r0, r6
 80146de:	4639      	mov	r1, r7
 80146e0:	f7ec f8b4 	bl	800084c <__aeabi_ddiv>
 80146e4:	f04f 0a02 	mov.w	sl, #2
 80146e8:	4604      	mov	r4, r0
 80146ea:	460d      	mov	r5, r1
 80146ec:	e743      	b.n	8014576 <atan+0xce>
 80146ee:	462b      	mov	r3, r5
 80146f0:	ee10 2a10 	vmov	r2, s0
 80146f4:	4939      	ldr	r1, [pc, #228]	; (80147dc <atan+0x334>)
 80146f6:	2000      	movs	r0, #0
 80146f8:	f7ec f8a8 	bl	800084c <__aeabi_ddiv>
 80146fc:	f04f 0a03 	mov.w	sl, #3
 8014700:	4604      	mov	r4, r0
 8014702:	460d      	mov	r5, r1
 8014704:	e737      	b.n	8014576 <atan+0xce>
 8014706:	4b36      	ldr	r3, [pc, #216]	; (80147e0 <atan+0x338>)
 8014708:	4e36      	ldr	r6, [pc, #216]	; (80147e4 <atan+0x33c>)
 801470a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801470e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8014712:	e9da 2300 	ldrd	r2, r3, [sl]
 8014716:	f7eb fdb7 	bl	8000288 <__aeabi_dsub>
 801471a:	4622      	mov	r2, r4
 801471c:	462b      	mov	r3, r5
 801471e:	f7eb fdb3 	bl	8000288 <__aeabi_dsub>
 8014722:	4602      	mov	r2, r0
 8014724:	460b      	mov	r3, r1
 8014726:	e9d6 0100 	ldrd	r0, r1, [r6]
 801472a:	f7eb fdad 	bl	8000288 <__aeabi_dsub>
 801472e:	f1bb 0f00 	cmp.w	fp, #0
 8014732:	4604      	mov	r4, r0
 8014734:	460d      	mov	r5, r1
 8014736:	f6bf aed6 	bge.w	80144e6 <atan+0x3e>
 801473a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801473e:	461d      	mov	r5, r3
 8014740:	e6d1      	b.n	80144e6 <atan+0x3e>
 8014742:	a51d      	add	r5, pc, #116	; (adr r5, 80147b8 <atan+0x310>)
 8014744:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014748:	e6cd      	b.n	80144e6 <atan+0x3e>
 801474a:	bf00      	nop
 801474c:	f3af 8000 	nop.w
 8014750:	54442d18 	.word	0x54442d18
 8014754:	bff921fb 	.word	0xbff921fb
 8014758:	8800759c 	.word	0x8800759c
 801475c:	7e37e43c 	.word	0x7e37e43c
 8014760:	e322da11 	.word	0xe322da11
 8014764:	3f90ad3a 	.word	0x3f90ad3a
 8014768:	24760deb 	.word	0x24760deb
 801476c:	3fa97b4b 	.word	0x3fa97b4b
 8014770:	a0d03d51 	.word	0xa0d03d51
 8014774:	3fb10d66 	.word	0x3fb10d66
 8014778:	c54c206e 	.word	0xc54c206e
 801477c:	3fb745cd 	.word	0x3fb745cd
 8014780:	920083ff 	.word	0x920083ff
 8014784:	3fc24924 	.word	0x3fc24924
 8014788:	5555550d 	.word	0x5555550d
 801478c:	3fd55555 	.word	0x3fd55555
 8014790:	2c6a6c2f 	.word	0x2c6a6c2f
 8014794:	bfa2b444 	.word	0xbfa2b444
 8014798:	52defd9a 	.word	0x52defd9a
 801479c:	3fadde2d 	.word	0x3fadde2d
 80147a0:	af749a6d 	.word	0xaf749a6d
 80147a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80147a8:	fe231671 	.word	0xfe231671
 80147ac:	3fbc71c6 	.word	0x3fbc71c6
 80147b0:	9998ebc4 	.word	0x9998ebc4
 80147b4:	3fc99999 	.word	0x3fc99999
 80147b8:	54442d18 	.word	0x54442d18
 80147bc:	3ff921fb 	.word	0x3ff921fb
 80147c0:	440fffff 	.word	0x440fffff
 80147c4:	7ff00000 	.word	0x7ff00000
 80147c8:	3fdbffff 	.word	0x3fdbffff
 80147cc:	3ff00000 	.word	0x3ff00000
 80147d0:	3ff2ffff 	.word	0x3ff2ffff
 80147d4:	40038000 	.word	0x40038000
 80147d8:	3ff80000 	.word	0x3ff80000
 80147dc:	bff00000 	.word	0xbff00000
 80147e0:	08015520 	.word	0x08015520
 80147e4:	08015500 	.word	0x08015500

080147e8 <fabs>:
 80147e8:	ec51 0b10 	vmov	r0, r1, d0
 80147ec:	ee10 2a10 	vmov	r2, s0
 80147f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80147f4:	ec43 2b10 	vmov	d0, r2, r3
 80147f8:	4770      	bx	lr

080147fa <fabsf>:
 80147fa:	ee10 3a10 	vmov	r3, s0
 80147fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014802:	ee00 3a10 	vmov	s0, r3
 8014806:	4770      	bx	lr

08014808 <finitef>:
 8014808:	b082      	sub	sp, #8
 801480a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801480e:	9801      	ldr	r0, [sp, #4]
 8014810:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014814:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014818:	bfac      	ite	ge
 801481a:	2000      	movge	r0, #0
 801481c:	2001      	movlt	r0, #1
 801481e:	b002      	add	sp, #8
 8014820:	4770      	bx	lr
	...

08014824 <rintf>:
 8014824:	ee10 2a10 	vmov	r2, s0
 8014828:	b513      	push	{r0, r1, r4, lr}
 801482a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801482e:	397f      	subs	r1, #127	; 0x7f
 8014830:	2916      	cmp	r1, #22
 8014832:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8014836:	dc47      	bgt.n	80148c8 <rintf+0xa4>
 8014838:	b32b      	cbz	r3, 8014886 <rintf+0x62>
 801483a:	2900      	cmp	r1, #0
 801483c:	ee10 3a10 	vmov	r3, s0
 8014840:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8014844:	da21      	bge.n	801488a <rintf+0x66>
 8014846:	f3c2 0316 	ubfx	r3, r2, #0, #23
 801484a:	425b      	negs	r3, r3
 801484c:	4921      	ldr	r1, [pc, #132]	; (80148d4 <rintf+0xb0>)
 801484e:	0a5b      	lsrs	r3, r3, #9
 8014850:	0d12      	lsrs	r2, r2, #20
 8014852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014856:	0512      	lsls	r2, r2, #20
 8014858:	4313      	orrs	r3, r2
 801485a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 801485e:	ee07 3a90 	vmov	s15, r3
 8014862:	edd1 6a00 	vldr	s13, [r1]
 8014866:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801486a:	ed8d 7a01 	vstr	s14, [sp, #4]
 801486e:	eddd 7a01 	vldr	s15, [sp, #4]
 8014872:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014876:	ee17 3a90 	vmov	r3, s15
 801487a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801487e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8014882:	ee00 3a10 	vmov	s0, r3
 8014886:	b002      	add	sp, #8
 8014888:	bd10      	pop	{r4, pc}
 801488a:	4a13      	ldr	r2, [pc, #76]	; (80148d8 <rintf+0xb4>)
 801488c:	410a      	asrs	r2, r1
 801488e:	4213      	tst	r3, r2
 8014890:	d0f9      	beq.n	8014886 <rintf+0x62>
 8014892:	0854      	lsrs	r4, r2, #1
 8014894:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8014898:	d006      	beq.n	80148a8 <rintf+0x84>
 801489a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801489e:	ea23 0304 	bic.w	r3, r3, r4
 80148a2:	fa42 f101 	asr.w	r1, r2, r1
 80148a6:	430b      	orrs	r3, r1
 80148a8:	4a0a      	ldr	r2, [pc, #40]	; (80148d4 <rintf+0xb0>)
 80148aa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80148ae:	ed90 7a00 	vldr	s14, [r0]
 80148b2:	ee07 3a90 	vmov	s15, r3
 80148b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148ba:	edcd 7a01 	vstr	s15, [sp, #4]
 80148be:	ed9d 0a01 	vldr	s0, [sp, #4]
 80148c2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80148c6:	e7de      	b.n	8014886 <rintf+0x62>
 80148c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80148cc:	d3db      	bcc.n	8014886 <rintf+0x62>
 80148ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80148d2:	e7d8      	b.n	8014886 <rintf+0x62>
 80148d4:	08015540 	.word	0x08015540
 80148d8:	007fffff 	.word	0x007fffff

080148dc <scalbnf>:
 80148dc:	ee10 3a10 	vmov	r3, s0
 80148e0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80148e4:	d025      	beq.n	8014932 <scalbnf+0x56>
 80148e6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80148ea:	d302      	bcc.n	80148f2 <scalbnf+0x16>
 80148ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80148f0:	4770      	bx	lr
 80148f2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80148f6:	d122      	bne.n	801493e <scalbnf+0x62>
 80148f8:	4b2a      	ldr	r3, [pc, #168]	; (80149a4 <scalbnf+0xc8>)
 80148fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80149a8 <scalbnf+0xcc>
 80148fe:	4298      	cmp	r0, r3
 8014900:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014904:	db16      	blt.n	8014934 <scalbnf+0x58>
 8014906:	ee10 3a10 	vmov	r3, s0
 801490a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801490e:	3a19      	subs	r2, #25
 8014910:	4402      	add	r2, r0
 8014912:	2afe      	cmp	r2, #254	; 0xfe
 8014914:	dd15      	ble.n	8014942 <scalbnf+0x66>
 8014916:	ee10 3a10 	vmov	r3, s0
 801491a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80149ac <scalbnf+0xd0>
 801491e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80149b0 <scalbnf+0xd4>
 8014922:	2b00      	cmp	r3, #0
 8014924:	eeb0 7a67 	vmov.f32	s14, s15
 8014928:	bfb8      	it	lt
 801492a:	eef0 7a66 	vmovlt.f32	s15, s13
 801492e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014932:	4770      	bx	lr
 8014934:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80149b4 <scalbnf+0xd8>
 8014938:	ee20 0a27 	vmul.f32	s0, s0, s15
 801493c:	4770      	bx	lr
 801493e:	0dd2      	lsrs	r2, r2, #23
 8014940:	e7e6      	b.n	8014910 <scalbnf+0x34>
 8014942:	2a00      	cmp	r2, #0
 8014944:	dd06      	ble.n	8014954 <scalbnf+0x78>
 8014946:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801494a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801494e:	ee00 3a10 	vmov	s0, r3
 8014952:	4770      	bx	lr
 8014954:	f112 0f16 	cmn.w	r2, #22
 8014958:	da1a      	bge.n	8014990 <scalbnf+0xb4>
 801495a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801495e:	4298      	cmp	r0, r3
 8014960:	ee10 3a10 	vmov	r3, s0
 8014964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014968:	dd0a      	ble.n	8014980 <scalbnf+0xa4>
 801496a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80149ac <scalbnf+0xd0>
 801496e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80149b0 <scalbnf+0xd4>
 8014972:	eef0 7a40 	vmov.f32	s15, s0
 8014976:	2b00      	cmp	r3, #0
 8014978:	bf18      	it	ne
 801497a:	eeb0 0a47 	vmovne.f32	s0, s14
 801497e:	e7db      	b.n	8014938 <scalbnf+0x5c>
 8014980:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80149b4 <scalbnf+0xd8>
 8014984:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80149b8 <scalbnf+0xdc>
 8014988:	eef0 7a40 	vmov.f32	s15, s0
 801498c:	2b00      	cmp	r3, #0
 801498e:	e7f3      	b.n	8014978 <scalbnf+0x9c>
 8014990:	3219      	adds	r2, #25
 8014992:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014996:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801499a:	eddf 7a08 	vldr	s15, [pc, #32]	; 80149bc <scalbnf+0xe0>
 801499e:	ee07 3a10 	vmov	s14, r3
 80149a2:	e7c4      	b.n	801492e <scalbnf+0x52>
 80149a4:	ffff3cb0 	.word	0xffff3cb0
 80149a8:	4c000000 	.word	0x4c000000
 80149ac:	7149f2ca 	.word	0x7149f2ca
 80149b0:	f149f2ca 	.word	0xf149f2ca
 80149b4:	0da24260 	.word	0x0da24260
 80149b8:	8da24260 	.word	0x8da24260
 80149bc:	33000000 	.word	0x33000000

080149c0 <_init>:
 80149c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149c2:	bf00      	nop
 80149c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149c6:	bc08      	pop	{r3}
 80149c8:	469e      	mov	lr, r3
 80149ca:	4770      	bx	lr

080149cc <_fini>:
 80149cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ce:	bf00      	nop
 80149d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149d2:	bc08      	pop	{r3}
 80149d4:	469e      	mov	lr, r3
 80149d6:	4770      	bx	lr
