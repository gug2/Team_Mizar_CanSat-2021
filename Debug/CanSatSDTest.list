
CanSatSDTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  08014fe0  08014fe0  00024fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b48  08015b48  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  08015b48  08015b48  00025b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b50  08015b50  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b50  08015b50  00025b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b54  08015b54  00025b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08015b58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004924  20000230  08015d88  00030230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b54  08015d88  00034b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c6ae  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056d9  00000000  00000000  0005c90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002238  00000000  00000000  00061fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002010  00000000  00000000  00064220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ac0  00000000  00000000  00066230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b86b  00000000  00000000  0008ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6cf5  00000000  00000000  000ba55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a1250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a818  00000000  00000000  001a12a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014fc8 	.word	0x08014fc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08014fc8 	.word	0x08014fc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9ef 	b.w	8001088 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9a4 	b.w	8001088 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468c      	mov	ip, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 8083 	bne.w	8000eda <__udivmoddi4+0x116>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	d947      	bls.n	8000e6a <__udivmoddi4+0xa6>
 8000dda:	fab2 f282 	clz	r2, r2
 8000dde:	b142      	cbz	r2, 8000df2 <__udivmoddi4+0x2e>
 8000de0:	f1c2 0020 	rsb	r0, r2, #32
 8000de4:	fa24 f000 	lsr.w	r0, r4, r0
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4097      	lsls	r7, r2
 8000dec:	ea40 0c01 	orr.w	ip, r0, r1
 8000df0:	4094      	lsls	r4, r2
 8000df2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000df6:	0c23      	lsrs	r3, r4, #16
 8000df8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dfc:	fa1f fe87 	uxth.w	lr, r7
 8000e00:	fb08 c116 	mls	r1, r8, r6, ip
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb06 f10e 	mul.w	r1, r6, lr
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x60>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e16:	f080 8119 	bcs.w	800104c <__udivmoddi4+0x288>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 8116 	bls.w	800104c <__udivmoddi4+0x288>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d909      	bls.n	8000e50 <__udivmoddi4+0x8c>
 8000e3c:	193c      	adds	r4, r7, r4
 8000e3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e42:	f080 8105 	bcs.w	8001050 <__udivmoddi4+0x28c>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f240 8102 	bls.w	8001050 <__udivmoddi4+0x28c>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	443c      	add	r4, r7
 8000e50:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e54:	eba4 040e 	sub.w	r4, r4, lr
 8000e58:	2600      	movs	r6, #0
 8000e5a:	b11d      	cbz	r5, 8000e64 <__udivmoddi4+0xa0>
 8000e5c:	40d4      	lsrs	r4, r2
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e9c5 4300 	strd	r4, r3, [r5]
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	b902      	cbnz	r2, 8000e6e <__udivmoddi4+0xaa>
 8000e6c:	deff      	udf	#255	; 0xff
 8000e6e:	fab2 f282 	clz	r2, r2
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d150      	bne.n	8000f18 <__udivmoddi4+0x154>
 8000e76:	1bcb      	subs	r3, r1, r7
 8000e78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e7c:	fa1f f887 	uxth.w	r8, r7
 8000e80:	2601      	movs	r6, #1
 8000e82:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e86:	0c21      	lsrs	r1, r4, #16
 8000e88:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e90:	fb08 f30c 	mul.w	r3, r8, ip
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0xe4>
 8000e98:	1879      	adds	r1, r7, r1
 8000e9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0xe2>
 8000ea0:	428b      	cmp	r3, r1
 8000ea2:	f200 80e9 	bhi.w	8001078 <__udivmoddi4+0x2b4>
 8000ea6:	4684      	mov	ip, r0
 8000ea8:	1ac9      	subs	r1, r1, r3
 8000eaa:	b2a3      	uxth	r3, r4
 8000eac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000eb8:	fb08 f800 	mul.w	r8, r8, r0
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	d907      	bls.n	8000ed0 <__udivmoddi4+0x10c>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec6:	d202      	bcs.n	8000ece <__udivmoddi4+0x10a>
 8000ec8:	45a0      	cmp	r8, r4
 8000eca:	f200 80d9 	bhi.w	8001080 <__udivmoddi4+0x2bc>
 8000ece:	4618      	mov	r0, r3
 8000ed0:	eba4 0408 	sub.w	r4, r4, r8
 8000ed4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ed8:	e7bf      	b.n	8000e5a <__udivmoddi4+0x96>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d909      	bls.n	8000ef2 <__udivmoddi4+0x12e>
 8000ede:	2d00      	cmp	r5, #0
 8000ee0:	f000 80b1 	beq.w	8001046 <__udivmoddi4+0x282>
 8000ee4:	2600      	movs	r6, #0
 8000ee6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eea:	4630      	mov	r0, r6
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	fab3 f683 	clz	r6, r3
 8000ef6:	2e00      	cmp	r6, #0
 8000ef8:	d14a      	bne.n	8000f90 <__udivmoddi4+0x1cc>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d302      	bcc.n	8000f04 <__udivmoddi4+0x140>
 8000efe:	4282      	cmp	r2, r0
 8000f00:	f200 80b8 	bhi.w	8001074 <__udivmoddi4+0x2b0>
 8000f04:	1a84      	subs	r4, r0, r2
 8000f06:	eb61 0103 	sbc.w	r1, r1, r3
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	468c      	mov	ip, r1
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	d0a8      	beq.n	8000e64 <__udivmoddi4+0xa0>
 8000f12:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f16:	e7a5      	b.n	8000e64 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f20:	4097      	lsls	r7, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f2a:	40d9      	lsrs	r1, r3
 8000f2c:	4330      	orrs	r0, r6
 8000f2e:	0c03      	lsrs	r3, r0, #16
 8000f30:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f34:	fa1f f887 	uxth.w	r8, r7
 8000f38:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f40:	fb06 f108 	mul.w	r1, r6, r8
 8000f44:	4299      	cmp	r1, r3
 8000f46:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4a:	d909      	bls.n	8000f60 <__udivmoddi4+0x19c>
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f52:	f080 808d 	bcs.w	8001070 <__udivmoddi4+0x2ac>
 8000f56:	4299      	cmp	r1, r3
 8000f58:	f240 808a 	bls.w	8001070 <__udivmoddi4+0x2ac>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	443b      	add	r3, r7
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b281      	uxth	r1, r0
 8000f64:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f68:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f70:	fb00 f308 	mul.w	r3, r0, r8
 8000f74:	428b      	cmp	r3, r1
 8000f76:	d907      	bls.n	8000f88 <__udivmoddi4+0x1c4>
 8000f78:	1879      	adds	r1, r7, r1
 8000f7a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7e:	d273      	bcs.n	8001068 <__udivmoddi4+0x2a4>
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d971      	bls.n	8001068 <__udivmoddi4+0x2a4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	4439      	add	r1, r7
 8000f88:	1acb      	subs	r3, r1, r3
 8000f8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f8e:	e778      	b.n	8000e82 <__udivmoddi4+0xbe>
 8000f90:	f1c6 0c20 	rsb	ip, r6, #32
 8000f94:	fa03 f406 	lsl.w	r4, r3, r6
 8000f98:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f9c:	431c      	orrs	r4, r3
 8000f9e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fa2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fa6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000faa:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fae:	431f      	orrs	r7, r3
 8000fb0:	0c3b      	lsrs	r3, r7, #16
 8000fb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb6:	fa1f f884 	uxth.w	r8, r4
 8000fba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fc2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fc6:	458a      	cmp	sl, r1
 8000fc8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fcc:	fa00 f306 	lsl.w	r3, r0, r6
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x220>
 8000fd2:	1861      	adds	r1, r4, r1
 8000fd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fd8:	d248      	bcs.n	800106c <__udivmoddi4+0x2a8>
 8000fda:	458a      	cmp	sl, r1
 8000fdc:	d946      	bls.n	800106c <__udivmoddi4+0x2a8>
 8000fde:	f1a9 0902 	sub.w	r9, r9, #2
 8000fe2:	4421      	add	r1, r4
 8000fe4:	eba1 010a 	sub.w	r1, r1, sl
 8000fe8:	b2bf      	uxth	r7, r7
 8000fea:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fee:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ff2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ff6:	fb00 f808 	mul.w	r8, r0, r8
 8000ffa:	45b8      	cmp	r8, r7
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x24a>
 8000ffe:	19e7      	adds	r7, r4, r7
 8001000:	f100 31ff 	add.w	r1, r0, #4294967295
 8001004:	d22e      	bcs.n	8001064 <__udivmoddi4+0x2a0>
 8001006:	45b8      	cmp	r8, r7
 8001008:	d92c      	bls.n	8001064 <__udivmoddi4+0x2a0>
 800100a:	3802      	subs	r0, #2
 800100c:	4427      	add	r7, r4
 800100e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001012:	eba7 0708 	sub.w	r7, r7, r8
 8001016:	fba0 8902 	umull	r8, r9, r0, r2
 800101a:	454f      	cmp	r7, r9
 800101c:	46c6      	mov	lr, r8
 800101e:	4649      	mov	r1, r9
 8001020:	d31a      	bcc.n	8001058 <__udivmoddi4+0x294>
 8001022:	d017      	beq.n	8001054 <__udivmoddi4+0x290>
 8001024:	b15d      	cbz	r5, 800103e <__udivmoddi4+0x27a>
 8001026:	ebb3 020e 	subs.w	r2, r3, lr
 800102a:	eb67 0701 	sbc.w	r7, r7, r1
 800102e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001032:	40f2      	lsrs	r2, r6
 8001034:	ea4c 0202 	orr.w	r2, ip, r2
 8001038:	40f7      	lsrs	r7, r6
 800103a:	e9c5 2700 	strd	r2, r7, [r5]
 800103e:	2600      	movs	r6, #0
 8001040:	4631      	mov	r1, r6
 8001042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001046:	462e      	mov	r6, r5
 8001048:	4628      	mov	r0, r5
 800104a:	e70b      	b.n	8000e64 <__udivmoddi4+0xa0>
 800104c:	4606      	mov	r6, r0
 800104e:	e6e9      	b.n	8000e24 <__udivmoddi4+0x60>
 8001050:	4618      	mov	r0, r3
 8001052:	e6fd      	b.n	8000e50 <__udivmoddi4+0x8c>
 8001054:	4543      	cmp	r3, r8
 8001056:	d2e5      	bcs.n	8001024 <__udivmoddi4+0x260>
 8001058:	ebb8 0e02 	subs.w	lr, r8, r2
 800105c:	eb69 0104 	sbc.w	r1, r9, r4
 8001060:	3801      	subs	r0, #1
 8001062:	e7df      	b.n	8001024 <__udivmoddi4+0x260>
 8001064:	4608      	mov	r0, r1
 8001066:	e7d2      	b.n	800100e <__udivmoddi4+0x24a>
 8001068:	4660      	mov	r0, ip
 800106a:	e78d      	b.n	8000f88 <__udivmoddi4+0x1c4>
 800106c:	4681      	mov	r9, r0
 800106e:	e7b9      	b.n	8000fe4 <__udivmoddi4+0x220>
 8001070:	4666      	mov	r6, ip
 8001072:	e775      	b.n	8000f60 <__udivmoddi4+0x19c>
 8001074:	4630      	mov	r0, r6
 8001076:	e74a      	b.n	8000f0e <__udivmoddi4+0x14a>
 8001078:	f1ac 0c02 	sub.w	ip, ip, #2
 800107c:	4439      	add	r1, r7
 800107e:	e713      	b.n	8000ea8 <__udivmoddi4+0xe4>
 8001080:	3802      	subs	r0, #2
 8001082:	443c      	add	r4, r7
 8001084:	e724      	b.n	8000ed0 <__udivmoddi4+0x10c>
 8001086:	bf00      	nop

08001088 <__aeabi_idiv0>:
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_ADC2_Init+0x98>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <MX_ADC2_Init+0x9c>)
 80010a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_ADC2_Init+0x98>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_ADC2_Init+0x98>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_ADC2_Init+0x98>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MX_ADC2_Init+0x98>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010bc:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_ADC2_Init+0x98>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_ADC2_Init+0x98>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_ADC2_Init+0x98>)
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <MX_ADC2_Init+0xa0>)
 80010ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_ADC2_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_ADC2_Init+0x98>)
 80010d8:	2201      	movs	r2, #1
 80010da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_ADC2_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_ADC2_Init+0x98>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010ea:	480e      	ldr	r0, [pc, #56]	; (8001124 <MX_ADC2_Init+0x98>)
 80010ec:	f004 f8c0 	bl	8005270 <HAL_ADC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f003 f8db 	bl	80042b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_ADC2_Init+0x98>)
 800110c:	f004 fa92 	bl	8005634 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001116:	f003 f8cb 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200004a0 	.word	0x200004a0
 8001128:	40012100 	.word	0x40012100
 800112c:	0f000001 	.word	0x0f000001

08001130 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_ADC_MspInit+0x7c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d127      	bne.n	80011a2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 800115c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_ADC_MspInit+0x80>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118a:	2304      	movs	r3, #4
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118e:	2303      	movs	r3, #3
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_ADC_MspInit+0x84>)
 800119e:	f004 fe91 	bl	8005ec4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40012100 	.word	0x40012100
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020000 	.word	0x40020000

080011b8 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
 80011c6:	4613      	mov	r3, r2
 80011c8:	81bb      	strh	r3, [r7, #12]
 80011ca:	466b      	mov	r3, sp
 80011cc:	461d      	mov	r5, r3
    int8_t rslt = BMI160_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	777b      	strb	r3, [r7, #29]

    /* Variable to define temporary length */
    uint16_t temp_len = len + dev->dummy_byte;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80011d8:	b29a      	uxth	r2, r3
 80011da:	89bb      	ldrh	r3, [r7, #12]
 80011dc:	4413      	add	r3, r2
 80011de:	837b      	strh	r3, [r7, #26]

    /* Variable to define temporary buffer */
    uint8_t temp_buf[temp_len];
 80011e0:	8b7c      	ldrh	r4, [r7, #26]
 80011e2:	4623      	mov	r3, r4
 80011e4:	3b01      	subs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	b2a0      	uxth	r0, r4
 80011ea:	f04f 0100 	mov.w	r1, #0
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	00cb      	lsls	r3, r1, #3
 80011f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011fc:	00c2      	lsls	r2, r0, #3
 80011fe:	b2a0      	uxth	r0, r4
 8001200:	f04f 0100 	mov.w	r1, #0
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	00cb      	lsls	r3, r1, #3
 800120e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001212:	00c2      	lsls	r2, r0, #3
 8001214:	4623      	mov	r3, r4
 8001216:	3307      	adds	r3, #7
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	ebad 0d03 	sub.w	sp, sp, r3
 8001220:	466b      	mov	r3, sp
 8001222:	3300      	adds	r3, #0
 8001224:	613b      	str	r3, [r7, #16]

    /* Variable to define loop */
    uint16_t indx = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	83fb      	strh	r3, [r7, #30]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <bmi160_get_regs+0x80>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <bmi160_get_regs+0x86>
    {
        rslt = BMI160_E_NULL_PTR;
 8001238:	23ff      	movs	r3, #255	; 0xff
 800123a:	777b      	strb	r3, [r7, #29]
 800123c:	e02d      	b.n	800129a <bmi160_get_regs+0xe2>
    }
    else if (len == 0)
 800123e:	89bb      	ldrh	r3, [r7, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <bmi160_get_regs+0x92>
    {
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
 8001244:	23f4      	movs	r3, #244	; 0xf4
 8001246:	777b      	strb	r3, [r7, #29]
 8001248:	e027      	b.n	800129a <bmi160_get_regs+0xe2>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->interface == BMI160_SPI_INTF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	789b      	ldrb	r3, [r3, #2]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d103      	bne.n	800125a <bmi160_get_regs+0xa2>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001258:	73fb      	strb	r3, [r7, #15]
        }
        rslt = dev->read(dev->id, reg_addr, temp_buf, temp_len);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69dc      	ldr	r4, [r3, #28]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7858      	ldrb	r0, [r3, #1]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	8b7b      	ldrh	r3, [r7, #26]
 8001266:	7bf9      	ldrb	r1, [r7, #15]
 8001268:	47a0      	blx	r4
 800126a:	4603      	mov	r3, r0
 800126c:	777b      	strb	r3, [r7, #29]

        if (rslt == BMI160_OK)
 800126e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <bmi160_get_regs+0xde>
        {
            /* Read the data from the position next to dummy byte */
            while (indx < len)
 8001276:	e009      	b.n	800128c <bmi160_get_regs+0xd4>
            {
                data[indx] = temp_buf[indx];
 8001278:	8bfa      	ldrh	r2, [r7, #30]
 800127a:	8bfb      	ldrh	r3, [r7, #30]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	440b      	add	r3, r1
 8001280:	6939      	ldr	r1, [r7, #16]
 8001282:	5c8a      	ldrb	r2, [r1, r2]
 8001284:	701a      	strb	r2, [r3, #0]
                indx++;
 8001286:	8bfb      	ldrh	r3, [r7, #30]
 8001288:	3301      	adds	r3, #1
 800128a:	83fb      	strh	r3, [r7, #30]
            while (indx < len)
 800128c:	8bfa      	ldrh	r2, [r7, #30]
 800128e:	89bb      	ldrh	r3, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d3f1      	bcc.n	8001278 <bmi160_get_regs+0xc0>
 8001294:	e001      	b.n	800129a <bmi160_get_regs+0xe2>
            }
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001296:	23fe      	movs	r3, #254	; 0xfe
 8001298:	777b      	strb	r3, [r7, #29]
        }
    }

    return rslt;
 800129a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800129e:	46ad      	mov	sp, r5
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdb0      	pop	{r4, r5, r7, pc}

080012a8 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]
 80012b6:	4613      	mov	r3, r2
 80012b8:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <bmi160_set_regs+0x28>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80012d0:	23ff      	movs	r3, #255	; 0xff
 80012d2:	75fb      	strb	r3, [r7, #23]
 80012d4:	e045      	b.n	8001362 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 80012d6:	89bb      	ldrh	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_READ_WRITE_LENGHT_INVALID;
 80012dc:	23f4      	movs	r3, #244	; 0xf4
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	e03f      	b.n	8001362 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->interface == BMI160_SPI_INTF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	789b      	ldrb	r3, [r3, #2]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d103      	bne.n	80012f2 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012f0:	73fb      	strb	r3, [r7, #15]
        }
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7a1b      	ldrb	r3, [r3, #8]
 80012f6:	2b11      	cmp	r3, #17
 80012f8:	d003      	beq.n	8001302 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80012fe:	2b15      	cmp	r3, #21
 8001300:	d124      	bne.n	800134c <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1c      	ldr	r4, [r3, #32]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7858      	ldrb	r0, [r3, #1]
 800130a:	89bb      	ldrh	r3, [r7, #12]
 800130c:	7bf9      	ldrb	r1, [r7, #15]
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	47a0      	blx	r4
 8001312:	4603      	mov	r3, r0
 8001314:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2001      	movs	r0, #1
 800131c:	4798      	blx	r3
 800131e:	e01a      	b.n	8001356 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1c      	ldr	r4, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7858      	ldrb	r0, [r3, #1]
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	441a      	add	r2, r3
 800132e:	7bf9      	ldrb	r1, [r7, #15]
 8001330:	2301      	movs	r3, #1
 8001332:	47a0      	blx	r4
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3301      	adds	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	2001      	movs	r0, #1
 8001344:	4798      	blx	r3
            for (; count < len; count++)
 8001346:	7dbb      	ldrb	r3, [r7, #22]
 8001348:	3301      	adds	r3, #1
 800134a:	75bb      	strb	r3, [r7, #22]
 800134c:	7dbb      	ldrb	r3, [r7, #22]
 800134e:	b29b      	uxth	r3, r3
 8001350:	89ba      	ldrh	r2, [r7, #12]
 8001352:	429a      	cmp	r2, r3
 8001354:	d8e4      	bhi.n	8001320 <bmi160_set_regs+0x78>

            }
        }
        if (rslt != BMI160_OK)
 8001356:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 800135e:	23fe      	movs	r3, #254	; 0xfe
 8001360:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001362:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001366:	4618      	mov	r0, r3
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}

0800136e <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8001376:	2303      	movs	r3, #3
 8001378:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f94e 	bl	800161c <null_ptr_check>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]

    /* An extra dummy byte is read during SPI read */
    if (dev->interface == BMI160_SPI_INTF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	789b      	ldrb	r3, [r3, #2]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d104      	bne.n	8001396 <bmi160_init+0x28>
    {
        dev->dummy_byte = 1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001394:	e003      	b.n	800139e <bmi160_init+0x30>
    }
    else
    {
        dev->dummy_byte = 0;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    }

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
 800139e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10c      	bne.n	80013c0 <bmi160_init+0x52>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <bmi160_init+0x52>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80013ae:	f107 010d 	add.w	r1, r7, #13
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	207f      	movs	r0, #127	; 0x7f
 80013b8:	f7ff fefe 	bl	80011b8 <bmi160_get_regs>
 80013bc:	4603      	mov	r3, r0
 80013be:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d127      	bne.n	8001418 <bmi160_init+0xaa>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80013ce:	e007      	b.n	80013e0 <bmi160_init+0x72>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	2000      	movs	r0, #0
 80013d8:	f7ff feee 	bl	80011b8 <bmi160_get_regs>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	1e5a      	subs	r2, r3, #1
 80013e4:	73ba      	strb	r2, [r7, #14]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <bmi160_init+0x84>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2bd1      	cmp	r3, #209	; 0xd1
 80013f0:	d1ee      	bne.n	80013d0 <bmi160_init+0x62>
        }
        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <bmi160_init+0xa6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2bd1      	cmp	r3, #209	; 0xd1
 8001400:	d108      	bne.n	8001414 <bmi160_init+0xa6>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	22ff      	movs	r2, #255	; 0xff
 8001406:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f80b 	bl	8001424 <bmi160_soft_reset>
 800140e:	4603      	mov	r3, r0
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e001      	b.n	8001418 <bmi160_init+0xaa>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001414:	23fd      	movs	r3, #253	; 0xfd
 8001416:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001418:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 800142c:	23b6      	movs	r3, #182	; 0xb6
 800142e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <bmi160_soft_reset+0x1a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800143e:	23ff      	movs	r3, #255	; 0xff
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	e024      	b.n	800148e <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001444:	f107 010e 	add.w	r1, r7, #14
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	207e      	movs	r0, #126	; 0x7e
 800144e:	f7ff ff2b 	bl	80012a8 <bmi160_set_regs>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	2001      	movs	r0, #1
 800145c:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <bmi160_soft_reset+0x5c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d108      	bne.n	8001480 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800146e:	f107 010e 	add.w	r1, r7, #14
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	207f      	movs	r0, #127	; 0x7f
 8001478:	f7ff fe9e 	bl	80011b8 <bmi160_get_regs>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8001480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f8e7 	bl	800165c <default_param_settg>
        }
    }

    return rslt;
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b084      	sub	sp, #16
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 80014a2:	2300      	movs	r3, #0
 80014a4:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <bmi160_set_sens_conf+0x1a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80014b4:	23ff      	movs	r3, #255	; 0xff
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e01f      	b.n	80014fa <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f8f8 	bl	80016b0 <set_accel_conf>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d116      	bne.n	80014fa <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 fa29 	bl	8001924 <set_gyro_conf>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f811 	bl	8001506 <bmi160_set_power_mode>
 80014e4:	4603      	mov	r3, r0
 80014e6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d104      	bne.n	80014fa <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f9e2 	bl	80018ba <check_invalid_settg>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80014fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <bmi160_set_power_mode+0x1a>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8001520:	23ff      	movs	r3, #255	; 0xff
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e00d      	b.n	8001542 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fb05 	bl	8001b36 <set_accel_pwr>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fb93 	bl	8001c64 <set_gyro_pwr>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4603      	mov	r3, r0
 800155c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 800156e:	7d7b      	ldrb	r3, [r7, #21]
 8001570:	109b      	asrs	r3, r3, #2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8001582:	7d3b      	ldrb	r3, [r7, #20]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8001588:	2303      	movs	r3, #3
 800158a:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d03c      	beq.n	800160c <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d024      	beq.n	80015e2 <bmi160_get_sensor_data+0x94>
 8001598:	2b03      	cmp	r3, #3
 800159a:	dc34      	bgt.n	8001606 <bmi160_get_sensor_data+0xb8>
 800159c:	2b01      	cmp	r3, #1
 800159e:	d002      	beq.n	80015a6 <bmi160_get_sensor_data+0x58>
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d00f      	beq.n	80015c4 <bmi160_get_sensor_data+0x76>
 80015a4:	e02f      	b.n	8001606 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 80015ac:	23ff      	movs	r3, #255	; 0xff
 80015ae:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }
                break;
 80015b0:	e02e      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 80015b2:	7dbb      	ldrb	r3, [r7, #22]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fb97 	bl	8001cec <get_accel_data>
 80015be:	4603      	mov	r3, r0
 80015c0:	75fb      	strb	r3, [r7, #23]
                break;
 80015c2:	e025      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 80015ca:	23ff      	movs	r3, #255	; 0xff
 80015cc:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }
                break;
 80015ce:	e01f      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 80015d0:	7dbb      	ldrb	r3, [r7, #22]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 fc5c 	bl	8001e94 <get_gyro_data>
 80015dc:	4603      	mov	r3, r0
 80015de:	75fb      	strb	r3, [r7, #23]
                break;
 80015e0:	e016      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <bmi160_get_sensor_data+0xa0>
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 80015ee:	23ff      	movs	r3, #255	; 0xff
 80015f0:	75fb      	strb	r3, [r7, #23]
                }
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }
                break;
 80015f2:	e00d      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 80015f4:	7db8      	ldrb	r0, [r7, #22]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	f000 fda4 	bl	8002148 <get_accel_gyro_data>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]
                break;
 8001604:	e004      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8001606:	23fb      	movs	r3, #251	; 0xfb
 8001608:	75fb      	strb	r3, [r7, #23]
                break;
 800160a:	e001      	b.n	8001610 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 800160c:	23ff      	movs	r3, #255	; 0xff
 800160e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001610:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <null_ptr_check+0x26>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <null_ptr_check+0x26>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <null_ptr_check+0x26>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001642:	23ff      	movs	r3, #255	; 0xff
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e001      	b.n	800164c <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2208      	movs	r2, #8
 800166e:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2210      	movs	r2, #16
 8001674:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2203      	movs	r2, #3
 800167a:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2202      	movs	r2, #2
 8001680:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2208      	movs	r2, #8
 8001686:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2214      	movs	r2, #20
 800168c:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6852      	ldr	r2, [r2, #4]
 800169a:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	611a      	str	r2, [r3, #16]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80016b8:	2300      	movs	r3, #0
 80016ba:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f833 	bl	800172e <check_accel_config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80016cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d126      	bne.n	8001722 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80016d4:	f107 010c 	add.w	r1, r7, #12
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	2040      	movs	r0, #64	; 0x40
 80016de:	f7ff fde3 	bl	80012a8 <bmi160_set_regs>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d119      	bne.n	8001722 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	795a      	ldrb	r2, [r3, #5]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	79da      	ldrb	r2, [r3, #7]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	1c59      	adds	r1, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	2041      	movs	r0, #65	; 0x41
 800170a:	f7ff fdcd 	bl	80012a8 <bmi160_set_regs>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	799a      	ldrb	r2, [r3, #6]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	2202      	movs	r2, #2
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	2040      	movs	r0, #64	; 0x40
 8001740:	f7ff fd3a 	bl	80011b8 <bmi160_get_regs>
 8001744:	4603      	mov	r3, r0
 8001746:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d11b      	bne.n	8001788 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001750:	6839      	ldr	r1, [r7, #0]
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f81e 	bl	8001794 <process_accel_odr>
 8001758:	4603      	mov	r3, r0
 800175a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800175c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d111      	bne.n	8001788 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f848 	bl	80017fc <process_accel_bw>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3301      	adds	r3, #1
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f867 	bl	8001852 <process_accel_range>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_MAX)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	795b      	ldrb	r3, [r3, #5]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d81a      	bhi.n	80017e8 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	795a      	ldrb	r2, [r3, #5]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7a5b      	ldrb	r3, [r3, #9]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d016      	beq.n	80017ec <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f023 030f 	bic.w	r3, r3, #15
 80017cc:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80017ce:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	b25a      	sxtb	r2, r3
 80017d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017dc:	4313      	orrs	r3, r2
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	e001      	b.n	80017ec <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80017e8:	23fc      	movs	r3, #252	; 0xfc
 80017ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_MAX)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	79db      	ldrb	r3, [r3, #7]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d811      	bhi.n	800183e <process_accel_bw+0x42>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	79da      	ldrb	r2, [r3, #7]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	7adb      	ldrb	r3, [r3, #11]
 8001822:	429a      	cmp	r2, r3
 8001824:	d00d      	beq.n	8001842 <process_accel_bw+0x46>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	79db      	ldrb	r3, [r3, #7]
 800182a:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001834:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	7bba      	ldrb	r2, [r7, #14]
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e001      	b.n	8001842 <process_accel_bw+0x46>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800183e:	23fc      	movs	r3, #252	; 0xfc
 8001840:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	799b      	ldrb	r3, [r3, #6]
 800186c:	2b0c      	cmp	r3, #12
 800186e:	d81a      	bhi.n	80018a6 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	799a      	ldrb	r2, [r3, #6]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7a9b      	ldrb	r3, [r3, #10]
 8001878:	429a      	cmp	r2, r3
 800187a:	d016      	beq.n	80018aa <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	799b      	ldrb	r3, [r3, #6]
 8001880:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f023 030f 	bic.w	r3, r3, #15
 800188a:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 800188c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	b25a      	sxtb	r2, r3
 8001896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800189a:	4313      	orrs	r3, r2
 800189c:	b25b      	sxtb	r3, r3
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e001      	b.n	80018aa <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80018a6:	23fc      	movs	r3, #252	; 0xfc
 80018a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff fc72 	bl	80011b8 <bmi160_get_regs>
 80018d4:	4603      	mov	r3, r0
 80018d6:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 80018f0:	23fa      	movs	r3, #250	; 0xfa
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e010      	b.n	8001918 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d102      	bne.n	8001902 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 80018fc:	23f9      	movs	r3, #249	; 0xf9
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e00a      	b.n	8001918 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d102      	bne.n	800190e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001908:	23f8      	movs	r3, #248	; 0xf8
 800190a:	73fb      	strb	r3, [r7, #15]
 800190c:	e004      	b.n	8001918 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	2b07      	cmp	r3, #7
 8001912:	d101      	bne.n	8001918 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001914:	23f7      	movs	r3, #247	; 0xf7
 8001916:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800192c:	2300      	movs	r3, #0
 800192e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f000 f833 	bl	80019a2 <check_gyro_config>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d126      	bne.n	8001996 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001948:	f107 010c 	add.w	r1, r7, #12
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	2042      	movs	r0, #66	; 0x42
 8001952:	f7ff fca9 	bl	80012a8 <bmi160_set_regs>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d119      	bne.n	8001996 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7b5a      	ldrb	r2, [r3, #13]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7bda      	ldrb	r2, [r3, #15]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	2043      	movs	r0, #67	; 0x43
 800197e:	f7ff fc93 	bl	80012a8 <bmi160_set_regs>
 8001982:	4603      	mov	r3, r0
 8001984:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d103      	bne.n	8001996 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7b9a      	ldrb	r2, [r3, #14]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2202      	movs	r2, #2
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	2042      	movs	r0, #66	; 0x42
 80019b4:	f7ff fc00 	bl	80011b8 <bmi160_get_regs>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80019bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11b      	bne.n	80019fc <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f81e 	bl	8001a08 <process_gyro_odr>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 80019d8:	6839      	ldr	r1, [r7, #0]
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f848 	bl	8001a70 <process_gyro_bw>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80019e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f86b 	bl	8001ace <process_gyro_range>
 80019f8:	4603      	mov	r3, r0
 80019fa:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80019fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_MAX)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	7b5b      	ldrb	r3, [r3, #13]
 8001a22:	2b0d      	cmp	r3, #13
 8001a24:	d81a      	bhi.n	8001a5c <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	7b5a      	ldrb	r2, [r3, #13]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	7c5b      	ldrb	r3, [r3, #17]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d016      	beq.n	8001a60 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	7b5b      	ldrb	r3, [r3, #13]
 8001a36:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001a42:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	b25a      	sxtb	r2, r3
 8001a4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	e001      	b.n	8001a60 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001a5c:	23fc      	movs	r3, #252	; 0xfc
 8001a5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_MAX)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7bdb      	ldrb	r3, [r3, #15]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d815      	bhi.n	8001aba <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	7bdb      	ldrb	r3, [r3, #15]
 8001a92:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a9c:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001a9e:	7b7b      	ldrb	r3, [r7, #13]
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	b25b      	sxtb	r3, r3
 8001aa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001aa8:	b25a      	sxtb	r2, r3
 8001aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b25b      	sxtb	r3, r3
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e001      	b.n	8001abe <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001aba:	23fc      	movs	r3, #252	; 0xfc
 8001abc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_MAX)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	7b9b      	ldrb	r3, [r3, #14]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d81a      	bhi.n	8001b22 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7b9a      	ldrb	r2, [r3, #14]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7c9b      	ldrb	r3, [r3, #18]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d016      	beq.n	8001b26 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7b9b      	ldrb	r3, [r3, #14]
 8001afc:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MSK;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f023 0307 	bic.w	r3, r3, #7
 8001b06:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MSK);
 8001b08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	b25a      	sxtb	r2, r3
 8001b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e001      	b.n	8001b26 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001b22:	23fc      	movs	r3, #252	; 0xfc
 8001b24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	791b      	ldrb	r3, [r3, #4]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	d92b      	bls.n	8001ba6 <set_accel_pwr+0x70>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d827      	bhi.n	8001ba6 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	791a      	ldrb	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7a1b      	ldrb	r3, [r3, #8]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d024      	beq.n	8001bac <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001b62:	f107 030e 	add.w	r3, r7, #14
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f826 	bl	8001bba <process_under_sampling>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	1d19      	adds	r1, r3, #4
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	207e      	movs	r0, #126	; 0x7e
 8001b84:	f7ff fb90 	bl	80012a8 <bmi160_set_regs>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7a1b      	ldrb	r3, [r3, #8]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d103      	bne.n	8001b9c <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	2005      	movs	r0, #5
 8001b9a:	4798      	blx	r3
                }
                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791a      	ldrb	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ba4:	e002      	b.n	8001bac <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001ba6:	23fc      	movs	r3, #252	; 0xfc
 8001ba8:	73fb      	strb	r3, [r7, #15]
 8001baa:	e000      	b.n	8001bae <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001bac:	bf00      	nop
    }

    return rslt;
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	737b      	strb	r3, [r7, #13]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	2040      	movs	r0, #64	; 0x40
 8001bd4:	f7ff faf0 	bl	80011b8 <bmi160_get_regs>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d139      	bne.n	8001c58 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	2b12      	cmp	r3, #18
 8001bea:	d120      	bne.n	8001c2e <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bf4:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	2040      	movs	r0, #64	; 0x40
 8001c0a:	f7ff fb4d 	bl	80012a8 <bmi160_set_regs>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]

            /* disable the pre-filter data in
             * low power mode */
            if (rslt == BMI160_OK)
 8001c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d11e      	bne.n	8001c58 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
 8001c1a:	f107 010d 	add.w	r1, r7, #13
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2202      	movs	r2, #2
 8001c22:	2058      	movs	r0, #88	; 0x58
 8001c24:	f7ff fb40 	bl	80012a8 <bmi160_set_regs>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e014      	b.n	8001c58 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	da0f      	bge.n	8001c58 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c40:	73bb      	strb	r3, [r7, #14]

            /* disable under-sampling parameter
             * if already enabled */
            *data = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7bba      	ldrb	r2, [r7, #14]
 8001c46:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	2040      	movs	r0, #64	; 0x40
 8001c50:	f7ff fb2a 	bl	80012a8 <bmi160_set_regs>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7b1b      	ldrb	r3, [r3, #12]
 8001c74:	2b14      	cmp	r3, #20
 8001c76:	d007      	beq.n	8001c88 <set_gyro_pwr+0x24>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7b1b      	ldrb	r3, [r3, #12]
 8001c7c:	2b15      	cmp	r3, #21
 8001c7e:	d003      	beq.n	8001c88 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001c84:	2b17      	cmp	r3, #23
 8001c86:	d129      	bne.n	8001cdc <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7b1a      	ldrb	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7c1b      	ldrb	r3, [r3, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d025      	beq.n	8001ce0 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f103 010c 	add.w	r1, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	207e      	movs	r0, #126	; 0x7e
 8001ca0:	f7ff fb02 	bl	80012a8 <bmi160_set_regs>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7c1b      	ldrb	r3, [r3, #16]
 8001cac:	2b14      	cmp	r3, #20
 8001cae:	d104      	bne.n	8001cba <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2051      	movs	r0, #81	; 0x51
 8001cb6:	4798      	blx	r3
 8001cb8:	e00b      	b.n	8001cd2 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7c1b      	ldrb	r3, [r3, #16]
 8001cbe:	2b17      	cmp	r3, #23
 8001cc0:	d107      	bne.n	8001cd2 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001cc6:	2b15      	cmp	r3, #21
 8001cc8:	d103      	bne.n	8001cd2 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	200a      	movs	r0, #10
 8001cd0:	4798      	blx	r3
            }
            else
            {
                /* do nothing */
            }
            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7b1a      	ldrb	r2, [r3, #12]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001cda:	e001      	b.n	8001ce0 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001cdc:	23fc      	movs	r3, #252	; 0xfc
 8001cde:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
 8001cf8:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[9] = { 0 };
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	f107 0318 	add.w	r3, r7, #24
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3306      	adds	r3, #6
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f107 0114 	add.w	r1, r7, #20
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2012      	movs	r0, #18
 8001d2c:	f7ff fa44 	bl	80011b8 <bmi160_get_regs>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8001d36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f040 80a1 	bne.w	8001e82 <get_accel_data+0x196>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8001d40:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001d4a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d4e:	4413      	add	r3, r2
 8001d50:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8001d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001d62:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d66:	4413      	add	r3, r2
 8001d68:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001d6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001d70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	8c3a      	ldrh	r2, [r7, #32]
 8001d86:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001d88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001d92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d96:	4413      	add	r3, r2
 8001d98:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8001da0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001daa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dae:	4413      	add	r3, r2
 8001db0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001db8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001dbc:	021b      	lsls	r3, r3, #8
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	8c3a      	ldrh	r2, [r7, #32]
 8001dce:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8001dd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001dda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dde:	4413      	add	r3, r2
 8001de0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8001de8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001df2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001df6:	4413      	add	r3, r2
 8001df8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001dfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001e00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	b21a      	sxth	r2, r3
 8001e08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	8c3a      	ldrh	r2, [r7, #32]
 8001e16:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d12d      	bne.n	8001e7a <get_accel_data+0x18e>
        {
            time_0 = data_array[idx++];
 8001e1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001e28:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001e36:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001e40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e44:	4413      	add	r3, r2
 8001e46:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001e50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001e5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e5e:	4413      	add	r3, r2
 8001e60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001e68:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	e006      	b.n	8001e88 <get_accel_data+0x19c>
        }
        else
        {
            accel->sensortime = 0;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	e002      	b.n	8001e88 <get_accel_data+0x19c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8001e82:	23fe      	movs	r3, #254	; 0xfe
 8001e84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 8001e88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3730      	adds	r7, #48	; 0x30
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 8082 	bne.w	8001fd4 <get_gyro_data+0x140>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8001ed0:	f107 0110 	add.w	r1, r7, #16
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2206      	movs	r2, #6
 8001ed8:	200c      	movs	r0, #12
 8001eda:	f7ff f96d 	bl	80011b8 <bmi160_get_regs>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8001ee4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d16f      	bne.n	8001fcc <get_gyro_data+0x138>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8001eec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001ef6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001efa:	4413      	add	r3, r2
 8001efc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8001f04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f0e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f12:	4413      	add	r3, r2
 8001f14:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b21a      	sxth	r2, r3
 8001f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	8c3a      	ldrh	r2, [r7, #32]
 8001f32:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8001f34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f42:	4413      	add	r3, r2
 8001f44:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8001f4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f56:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001f64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	b21a      	sxth	r2, r3
 8001f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	8c3a      	ldrh	r2, [r7, #32]
 8001f7a:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8001f7c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8001f94:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001f9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8001fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8001fac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fb0:	021b      	lsls	r3, r3, #8
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	8c3a      	ldrh	r2, [r7, #32]
 8001fc2:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	e0b7      	b.n	800213c <get_gyro_data+0x2a8>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8001fcc:	23fe      	movs	r3, #254	; 0xfe
 8001fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fd2:	e0b3      	b.n	800213c <get_gyro_data+0x2a8>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	330c      	adds	r3, #12
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f107 0110 	add.w	r1, r7, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	200c      	movs	r0, #12
 8001fe4:	f7ff f8e8 	bl	80011b8 <bmi160_get_regs>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rslt == BMI160_OK)
 8001fee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f040 809f 	bne.w	8002136 <get_gyro_data+0x2a2>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8001ff8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002002:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002006:	4413      	add	r3, r2
 8002008:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800200c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002010:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800201a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800201e:	4413      	add	r3, r2
 8002020:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002028:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	8c3a      	ldrh	r2, [r7, #32]
 800203e:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8002040:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800204a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800204e:	4413      	add	r3, r2
 8002050:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002054:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 8002058:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002062:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002066:	4413      	add	r3, r2
 8002068:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800206c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8002070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	8c3a      	ldrh	r2, [r7, #32]
 8002086:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8002088:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002092:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002096:	4413      	add	r3, r2
 8002098:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800209c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            msb = data_array[idx++];
 80020a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80020aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80020b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80020b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	b21a      	sxth	r2, r3
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c4:	b21b      	sxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	8c3a      	ldrh	r2, [r7, #32]
 80020ce:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 80020d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020d4:	3306      	adds	r3, #6
 80020d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            time_0 = data_array[idx++];
 80020da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80020e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020e8:	4413      	add	r3, r2
 80020ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80020ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80020f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80020fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002100:	4413      	add	r3, r2
 8002102:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002106:	b29b      	uxth	r3, r3
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800210c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002116:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800211a:	4413      	add	r3, r2
 800211c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002120:	041b      	lsls	r3, r3, #16
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002124:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	431a      	orrs	r2, r3
 800212a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212e:	431a      	orrs	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	e002      	b.n	800213c <get_gyro_data+0x2a8>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8002136:	23fe      	movs	r3, #254	; 0xfe
 8002138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
    }

    return rslt;
 800213c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8002140:	4618      	mov	r0, r3
 8002142:	3730      	adds	r7, #48	; 0x30
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint8_t data_array[15] = { 0 };
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	f107 0314 	add.w	r3, r7, #20
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint16_t time_1 = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint32_t time_2 = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	b29b      	uxth	r3, r3
 8002182:	330c      	adds	r3, #12
 8002184:	b29a      	uxth	r2, r3
 8002186:	f107 0110 	add.w	r1, r7, #16
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	200c      	movs	r0, #12
 800218e:	f7ff f813 	bl	80011b8 <bmi160_get_regs>
 8002192:	4603      	mov	r3, r0
 8002194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (rslt == BMI160_OK)
 8002198:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 8118 	bne.w	80023d2 <get_accel_gyro_data+0x28a>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 80021a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021b0:	4413      	add	r3, r2
 80021b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80021ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021c8:	4413      	add	r3, r2
 80021ca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80021d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80021d6:	021b      	lsls	r3, r3, #8
 80021d8:	b21a      	sxth	r2, r3
 80021da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021de:	b21b      	sxth	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8c3a      	ldrh	r2, [r7, #32]
 80021e8:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80021ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80021f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80021f8:	4413      	add	r3, r2
 80021fa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002202:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800220c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002210:	4413      	add	r3, r2
 8002212:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002216:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800221a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002226:	b21b      	sxth	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8c3a      	ldrh	r2, [r7, #32]
 8002230:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8002232:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800223c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002240:	4413      	add	r3, r2
 8002242:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 800224a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002254:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002258:	4413      	add	r3, r2
 800225a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800225e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002262:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b21a      	sxth	r2, r3
 800226a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	8c3a      	ldrh	r2, [r7, #32]
 8002278:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800227a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002284:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002288:	4413      	add	r3, r2
 800228a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800228e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002292:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800229c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022a0:	4413      	add	r3, r2
 80022a2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	4313      	orrs	r3, r2
 80022ba:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	8c3a      	ldrh	r2, [r7, #32]
 80022c0:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80022c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022d0:	4413      	add	r3, r2
 80022d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 80022da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80022e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022e8:	4413      	add	r3, r2
 80022ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022fe:	b21b      	sxth	r3, r3
 8002300:	4313      	orrs	r3, r2
 8002302:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	8c3a      	ldrh	r2, [r7, #32]
 8002308:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800230a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002314:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002318:	4413      	add	r3, r2
 800231a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800231e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        msb = data_array[idx++];
 8002322:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800232c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002330:	4413      	add	r3, r2
 8002332:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002336:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800233a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21a      	sxth	r2, r3
 8002342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002346:	b21b      	sxth	r3, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	8c3a      	ldrh	r2, [r7, #32]
 8002350:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d135      	bne.n	80023c4 <get_accel_gyro_data+0x27c>
        {
            time_0 = data_array[idx++];
 8002358:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002362:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002366:	4413      	add	r3, r2
 8002368:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800236c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8002370:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800237a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800237e:	4413      	add	r3, r2
 8002380:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002384:	b29b      	uxth	r3, r3
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	857b      	strh	r3, [r7, #42]	; 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800238a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8002394:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002398:	4413      	add	r3, r2
 800239a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80023a2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	431a      	orrs	r2, r3
 80023a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80023b2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	431a      	orrs	r2, r3
 80023b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]
 80023c2:	e009      	b.n	80023d8 <get_accel_gyro_data+0x290>
        }
        else
        {
            accel->sensortime = 0;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e002      	b.n	80023d8 <get_accel_gyro_data+0x290>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 80023d2:	23fe      	movs	r3, #254	; 0xfe
 80023d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return rslt;
 80023d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3730      	adds	r7, #48	; 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2203      	movs	r2, #3
 80023fc:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2203      	movs	r2, #3
 8002408:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	715a      	strb	r2, [r3, #5]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af04      	add	r7, sp, #16
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	460b      	mov	r3, r1
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002436:	7afb      	ldrb	r3, [r7, #11]
 8002438:	b29a      	uxth	r2, r3
 800243a:	8af9      	ldrh	r1, [r7, #22]
 800243c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	2302      	movs	r3, #2
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	2301      	movs	r3, #1
 800244e:	f004 f95d 	bl	800670c <HAL_I2C_Mem_Read>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10b      	bne.n	8002470 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8002458:	7d7b      	ldrb	r3, [r7, #21]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	b21a      	sxth	r2, r3
 800245e:	7d3b      	ldrb	r3, [r7, #20]
 8002460:	b21b      	sxth	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	b21b      	sxth	r3, r3
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	801a      	strh	r2, [r3, #0]
		return true;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <read_register16+0x56>
	} else
		return false;
 8002470:	2300      	movs	r3, #0

}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800247a:	b590      	push	{r4, r7, lr}
 800247c:	b08b      	sub	sp, #44	; 0x2c
 800247e:	af04      	add	r7, sp, #16
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	461a      	mov	r2, r3
 8002486:	460b      	mov	r3, r1
 8002488:	72fb      	strb	r3, [r7, #11]
 800248a:	4613      	mov	r3, r2
 800248c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	b29a      	uxth	r2, r3
 800249e:	7abb      	ldrb	r3, [r7, #10]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	8af9      	ldrh	r1, [r7, #22]
 80024a4:	f241 3488 	movw	r4, #5000	; 0x1388
 80024a8:	9402      	str	r4, [sp, #8]
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	f004 f92b 	bl	800670c <HAL_I2C_Mem_Read>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <read_data+0x46>
		return 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <read_data+0x48>
	else
		return 1;
 80024c0:	2301      	movs	r3, #1

}
 80024c2:	4618      	mov	r0, r3
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}

080024ca <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	461a      	mov	r2, r3
 80024d6:	2188      	movs	r1, #136	; 0x88
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff9f 	bl	800241c <read_register16>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d06f      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3302      	adds	r3, #2
 80024e8:	461a      	mov	r2, r3
 80024ea:	218a      	movs	r1, #138	; 0x8a
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff95 	bl	800241c <read_register16>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d065      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3304      	adds	r3, #4
 80024fc:	461a      	mov	r2, r3
 80024fe:	218c      	movs	r1, #140	; 0x8c
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff8b 	bl	800241c <read_register16>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d05b      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3306      	adds	r3, #6
 8002510:	461a      	mov	r2, r3
 8002512:	218e      	movs	r1, #142	; 0x8e
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff81 	bl	800241c <read_register16>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d051      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3308      	adds	r3, #8
 8002524:	461a      	mov	r2, r3
 8002526:	2190      	movs	r1, #144	; 0x90
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff77 	bl	800241c <read_register16>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d047      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	330a      	adds	r3, #10
 8002538:	461a      	mov	r2, r3
 800253a:	2192      	movs	r1, #146	; 0x92
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff6d 	bl	800241c <read_register16>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d03d      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	330c      	adds	r3, #12
 800254c:	461a      	mov	r2, r3
 800254e:	2194      	movs	r1, #148	; 0x94
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff63 	bl	800241c <read_register16>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d033      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	330e      	adds	r3, #14
 8002560:	461a      	mov	r2, r3
 8002562:	2196      	movs	r1, #150	; 0x96
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff59 	bl	800241c <read_register16>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d029      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3310      	adds	r3, #16
 8002574:	461a      	mov	r2, r3
 8002576:	2198      	movs	r1, #152	; 0x98
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff4f 	bl	800241c <read_register16>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01f      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3312      	adds	r3, #18
 8002588:	461a      	mov	r2, r3
 800258a:	219a      	movs	r1, #154	; 0x9a
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff45 	bl	800241c <read_register16>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d015      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3314      	adds	r3, #20
 800259c:	461a      	mov	r2, r3
 800259e:	219c      	movs	r1, #156	; 0x9c
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff3b 	bl	800241c <read_register16>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80025b0:	461a      	mov	r2, r3
 80025b2:	219e      	movs	r1, #158	; 0x9e
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ff31 	bl	800241c <read_register16>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <read_calibration_data+0xfa>

		return true;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <read_calibration_data+0xfc>
	}

	return false;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f103 0218 	add.w	r2, r3, #24
 80025dc:	2301      	movs	r3, #1
 80025de:	21a1      	movs	r1, #161	; 0xa1
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff4a 	bl	800247a <read_data>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d14b      	bne.n	8002684 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	331a      	adds	r3, #26
 80025f0:	461a      	mov	r2, r3
 80025f2:	21e1      	movs	r1, #225	; 0xe1
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff11 	bl	800241c <read_register16>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d041      	beq.n	8002684 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f103 021c 	add.w	r2, r3, #28
 8002606:	2301      	movs	r3, #1
 8002608:	21e3      	movs	r1, #227	; 0xe3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ff35 	bl	800247a <read_data>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d136      	bne.n	8002684 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8002616:	f107 030e 	add.w	r3, r7, #14
 800261a:	461a      	mov	r2, r3
 800261c:	21e4      	movs	r1, #228	; 0xe4
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fefc 	bl	800241c <read_register16>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02c      	beq.n	8002684 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	461a      	mov	r2, r3
 8002630:	21e5      	movs	r1, #229	; 0xe5
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fef2 	bl	800241c <read_register16>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d022      	beq.n	8002684 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8002644:	2301      	movs	r3, #1
 8002646:	21e7      	movs	r1, #231	; 0xe7
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff16 	bl	800247a <read_data>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d117      	bne.n	8002684 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8002654:	89fb      	ldrh	r3, [r7, #14]
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	b21b      	sxth	r3, r3
 800265a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 800265e:	b21a      	sxth	r2, r3
 8002660:	89fb      	ldrh	r3, [r7, #14]
 8002662:	121b      	asrs	r3, r3, #8
 8002664:	b21b      	sxth	r3, r3
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	b21b      	sxth	r3, r3
 800266c:	4313      	orrs	r3, r2
 800266e:	b21a      	sxth	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8002674:	89bb      	ldrh	r3, [r7, #12]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	b29b      	uxth	r3, r3
 800267a:	b21a      	sxth	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	841a      	strh	r2, [r3, #32]

		return true;
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <read_hum_calibration_data+0xb8>
	}

	return false;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800268e:	b580      	push	{r7, lr}
 8002690:	b088      	sub	sp, #32
 8002692:	af04      	add	r7, sp, #16
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
 800269a:	4613      	mov	r3, r2
 800269c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	89f9      	ldrh	r1, [r7, #14]
 80026b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80026b4:	9302      	str	r3, [sp, #8]
 80026b6:	2301      	movs	r3, #1
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	1cbb      	adds	r3, r7, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2301      	movs	r3, #1
 80026c0:	f003 ff2a 	bl	8006518 <HAL_I2C_Mem_Write>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <write_register8+0x40>
		return false;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <write_register8+0x42>
	else
		return true;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026e6:	2b76      	cmp	r3, #118	; 0x76
 80026e8:	d005      	beq.n	80026f6 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026ee:	2b77      	cmp	r3, #119	; 0x77
 80026f0:	d001      	beq.n	80026f6 <bmp280_init+0x1e>

		return false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e099      	b.n	800282a <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80026fc:	2301      	movs	r3, #1
 80026fe:	21d0      	movs	r1, #208	; 0xd0
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff feba 	bl	800247a <read_data>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <bmp280_init+0x38>
		return false;
 800270c:	2300      	movs	r3, #0
 800270e:	e08c      	b.n	800282a <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002716:	2b58      	cmp	r3, #88	; 0x58
 8002718:	d006      	beq.n	8002728 <bmp280_init+0x50>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002720:	2b60      	cmp	r3, #96	; 0x60
 8002722:	d001      	beq.n	8002728 <bmp280_init+0x50>

		return false;
 8002724:	2300      	movs	r3, #0
 8002726:	e080      	b.n	800282a <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8002728:	22b6      	movs	r2, #182	; 0xb6
 800272a:	21e0      	movs	r1, #224	; 0xe0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ffae 	bl	800268e <write_register8>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <bmp280_init+0x64>
		return false;
 8002738:	2300      	movs	r3, #0
 800273a:	e076      	b.n	800282a <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800273c:	f107 020c 	add.w	r2, r7, #12
 8002740:	2301      	movs	r3, #1
 8002742:	21f3      	movs	r1, #243	; 0xf3
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fe98 	bl	800247a <read_data>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f5      	bne.n	800273c <bmp280_init+0x64>
				&& (status & 1) == 0)
 8002750:	7b3b      	ldrb	r3, [r7, #12]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff feb5 	bl	80024ca <read_calibration_data>
 8002760:	4603      	mov	r3, r0
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d100      	bne.n	800276e <bmp280_init+0x96>
 800276c:	e001      	b.n	8002772 <bmp280_init+0x9a>
		return false;
 800276e:	2300      	movs	r3, #0
 8002770:	e05b      	b.n	800282a <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002778:	2b60      	cmp	r3, #96	; 0x60
 800277a:	d10a      	bne.n	8002792 <bmp280_init+0xba>
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff26 	bl	80025ce <read_hum_calibration_data>
 8002782:	4603      	mov	r3, r0
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <bmp280_init+0xba>
		return false;
 800278e:	2300      	movs	r3, #0
 8002790:	e04b      	b.n	800282a <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	795b      	ldrb	r3, [r3, #5]
 8002796:	015b      	lsls	r3, r3, #5
 8002798:	b25a      	sxtb	r2, r3
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	785b      	ldrb	r3, [r3, #1]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	4313      	orrs	r3, r2
 80027a4:	b25b      	sxtb	r3, r3
 80027a6:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	461a      	mov	r2, r3
 80027ac:	21f5      	movs	r1, #245	; 0xf5
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ff6d 	bl	800268e <write_register8>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <bmp280_init+0xe6>
		return false;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e035      	b.n	800282a <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	78db      	ldrb	r3, [r3, #3]
 80027d0:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80027d2:	b25a      	sxtb	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	789b      	ldrb	r3, [r3, #2]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	b25b      	sxtb	r3, r3
 80027dc:	4313      	orrs	r3, r2
 80027de:	b25a      	sxtb	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4313      	orrs	r3, r2
 80027e8:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80027ea:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80027f2:	2b60      	cmp	r3, #96	; 0x60
 80027f4:	d10d      	bne.n	8002812 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	791b      	ldrb	r3, [r3, #4]
 80027fa:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80027fc:	7b7b      	ldrb	r3, [r7, #13]
 80027fe:	461a      	mov	r2, r3
 8002800:	21f2      	movs	r1, #242	; 0xf2
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7ff ff43 	bl	800268e <write_register8>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <bmp280_init+0x13a>
			return false;
 800280e:	2300      	movs	r3, #0
 8002810:	e00b      	b.n	800282a <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	461a      	mov	r2, r3
 8002816:	21f4      	movs	r1, #244	; 0xf4
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff38 	bl	800268e <write_register8>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <bmp280_init+0x150>
		return false;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <bmp280_init+0x152>
	}

	return true;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	10da      	asrs	r2, r3, #3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002850:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8002854:	12db      	asrs	r3, r3, #11
 8002856:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	111b      	asrs	r3, r3, #4
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	8812      	ldrh	r2, [r2, #0]
 8002860:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	1112      	asrs	r2, r2, #4
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	8809      	ldrh	r1, [r1, #0]
 800286a:	1a52      	subs	r2, r2, r1
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002878:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800287c:	139b      	asrs	r3, r3, #14
 800287e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	3380      	adds	r3, #128	; 0x80
 8002896:	121b      	asrs	r3, r3, #8
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b09c      	sub	sp, #112	; 0x70
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6578      	str	r0, [r7, #84]	; 0x54
 80028ae:	6539      	str	r1, [r7, #80]	; 0x50
 80028b0:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	461a      	mov	r2, r3
 80028b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028ba:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80028be:	f143 35ff 	adc.w	r5, r3, #4294967295
 80028c2:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80028c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ca:	fb03 f102 	mul.w	r1, r3, r2
 80028ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d2:	fb03 f302 	mul.w	r3, r3, r2
 80028d6:	18ca      	adds	r2, r1, r3
 80028d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028da:	fba3 4503 	umull	r4, r5, r3, r3
 80028de:	1953      	adds	r3, r2, r5
 80028e0:	461d      	mov	r5, r3
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80028ee:	fb02 f005 	mul.w	r0, r2, r5
 80028f2:	fb04 f103 	mul.w	r1, r4, r3
 80028f6:	4401      	add	r1, r0
 80028f8:	fba4 2302 	umull	r2, r3, r4, r2
 80028fc:	4419      	add	r1, r3
 80028fe:	460b      	mov	r3, r1
 8002900:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8002904:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8002908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800290e:	b21a      	sxth	r2, r3
 8002910:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002916:	fb03 f001 	mul.w	r0, r3, r1
 800291a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800291c:	fb02 f101 	mul.w	r1, r2, r1
 8002920:	4408      	add	r0, r1
 8002922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002924:	fba1 2302 	umull	r2, r3, r1, r2
 8002928:	18c1      	adds	r1, r0, r3
 800292a:	460b      	mov	r3, r1
 800292c:	f04f 0000 	mov.w	r0, #0
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	0459      	lsls	r1, r3, #17
 8002936:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 800293a:	0450      	lsls	r0, r2, #17
 800293c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002940:	eb12 0800 	adds.w	r8, r2, r0
 8002944:	eb43 0901 	adc.w	r9, r3, r1
 8002948:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800294c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800294e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002952:	b21a      	sxth	r2, r3
 8002954:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	00d1      	lsls	r1, r2, #3
 8002962:	2000      	movs	r0, #0
 8002964:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002968:	1814      	adds	r4, r2, r0
 800296a:	61bc      	str	r4, [r7, #24]
 800296c:	414b      	adcs	r3, r1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002974:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8002978:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800297a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800297c:	fb03 f102 	mul.w	r1, r3, r2
 8002980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002984:	fb03 f302 	mul.w	r3, r3, r2
 8002988:	18ca      	adds	r2, r1, r3
 800298a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800298c:	fba3 4503 	umull	r4, r5, r3, r3
 8002990:	1953      	adds	r3, r2, r5
 8002992:	461d      	mov	r5, r3
 8002994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002996:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800299a:	b21a      	sxth	r2, r3
 800299c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029a0:	fb02 f005 	mul.w	r0, r2, r5
 80029a4:	fb04 f103 	mul.w	r1, r4, r3
 80029a8:	4401      	add	r1, r0
 80029aa:	fba4 2302 	umull	r2, r3, r4, r2
 80029ae:	4419      	add	r1, r3
 80029b0:	460b      	mov	r3, r1
 80029b2:	f04f 0800 	mov.w	r8, #0
 80029b6:	f04f 0900 	mov.w	r9, #0
 80029ba:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80029be:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80029c2:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80029c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80029d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029d4:	fb03 f001 	mul.w	r0, r3, r1
 80029d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80029da:	fb02 f101 	mul.w	r1, r2, r1
 80029de:	1844      	adds	r4, r0, r1
 80029e0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029e2:	fba1 0102 	umull	r0, r1, r1, r2
 80029e6:	1863      	adds	r3, r4, r1
 80029e8:	4619      	mov	r1, r3
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	030b      	lsls	r3, r1, #12
 80029f4:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80029f8:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80029fa:	eb18 0102 	adds.w	r1, r8, r2
 80029fe:	6139      	str	r1, [r7, #16]
 8002a00:	eb49 0303 	adc.w	r3, r9, r3
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a0a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8002a0e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a12:	1c11      	adds	r1, r2, #0
 8002a14:	6439      	str	r1, [r7, #64]	; 0x40
 8002a16:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1e:	88db      	ldrh	r3, [r3, #6]
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	fb02 f001 	mul.w	r0, r2, r1
 8002a30:	4621      	mov	r1, r4
 8002a32:	fb01 f103 	mul.w	r1, r1, r3
 8002a36:	4401      	add	r1, r0
 8002a38:	4620      	mov	r0, r4
 8002a3a:	fba0 2302 	umull	r2, r3, r0, r2
 8002a3e:	4419      	add	r1, r3
 8002a40:	460b      	mov	r3, r1
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	1058      	asrs	r0, r3, #1
 8002a4c:	17d9      	asrs	r1, r3, #31
 8002a4e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8002a52:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002a56:	4313      	orrs	r3, r2
 8002a58:	d101      	bne.n	8002a5e <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e0e1      	b.n	8002c22 <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002a64:	461a      	mov	r2, r3
 8002a66:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002a6a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a70:	105b      	asrs	r3, r3, #1
 8002a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	07db      	lsls	r3, r3, #31
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002a7e:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002a82:	4621      	mov	r1, r4
 8002a84:	ebb1 0a02 	subs.w	sl, r1, r2
 8002a88:	4629      	mov	r1, r5
 8002a8a:	eb61 0b03 	sbc.w	fp, r1, r3
 8002a8e:	4652      	mov	r2, sl
 8002a90:	465b      	mov	r3, fp
 8002a92:	1891      	adds	r1, r2, r2
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	415b      	adcs	r3, r3
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a9e:	eb12 020a 	adds.w	r2, r2, sl
 8002aa2:	eb43 030b 	adc.w	r3, r3, fp
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	0199      	lsls	r1, r3, #6
 8002ab0:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8002ab4:	0190      	lsls	r0, r2, #6
 8002ab6:	1812      	adds	r2, r2, r0
 8002ab8:	eb41 0303 	adc.w	r3, r1, r3
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0099      	lsls	r1, r3, #2
 8002ac6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002aca:	0090      	lsls	r0, r2, #2
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	eb12 020a 	adds.w	r2, r2, sl
 8002ad4:	eb43 030b 	adc.w	r3, r3, fp
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	0099      	lsls	r1, r3, #2
 8002ae2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002ae6:	0090      	lsls	r0, r2, #2
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	eb12 010a 	adds.w	r1, r2, sl
 8002af0:	6339      	str	r1, [r7, #48]	; 0x30
 8002af2:	eb43 030b 	adc.w	r3, r3, fp
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
 8002af8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002afc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b00:	f7fe f8c2 	bl	8000c88 <__aeabi_ldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8002b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002b12:	b218      	sxth	r0, r3
 8002b14:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002b18:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	0b62      	lsrs	r2, r4, #13
 8002b26:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8002b2a:	136b      	asrs	r3, r5, #13
 8002b2c:	fb02 f501 	mul.w	r5, r2, r1
 8002b30:	fb00 f403 	mul.w	r4, r0, r3
 8002b34:	442c      	add	r4, r5
 8002b36:	fba0 0102 	umull	r0, r1, r0, r2
 8002b3a:	1863      	adds	r3, r4, r1
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	0b62      	lsrs	r2, r4, #13
 8002b4c:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8002b50:	136b      	asrs	r3, r5, #13
 8002b52:	fb02 f501 	mul.w	r5, r2, r1
 8002b56:	fb00 f403 	mul.w	r4, r0, r3
 8002b5a:	442c      	add	r4, r5
 8002b5c:	fba0 0102 	umull	r0, r1, r0, r2
 8002b60:	1863      	adds	r3, r4, r1
 8002b62:	4619      	mov	r1, r3
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	0e42      	lsrs	r2, r0, #25
 8002b6e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002b72:	164b      	asrs	r3, r1, #25
 8002b74:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8002b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b7a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002b84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b86:	fb03 f001 	mul.w	r0, r3, r1
 8002b8a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b8c:	fb02 f101 	mul.w	r1, r2, r1
 8002b90:	1844      	adds	r4, r0, r1
 8002b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002b94:	fba1 0102 	umull	r0, r1, r1, r2
 8002b98:	1863      	adds	r3, r4, r1
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	0cc2      	lsrs	r2, r0, #19
 8002ba6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002baa:	14cb      	asrs	r3, r1, #19
 8002bac:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8002bb0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002bb4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002bb8:	1884      	adds	r4, r0, r2
 8002bba:	62bc      	str	r4, [r7, #40]	; 0x28
 8002bbc:	eb41 0303 	adc.w	r3, r1, r3
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002bc6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002bca:	4621      	mov	r1, r4
 8002bcc:	1889      	adds	r1, r1, r2
 8002bce:	6239      	str	r1, [r7, #32]
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	eb43 0101 	adc.w	r1, r3, r1
 8002bd6:	6279      	str	r1, [r7, #36]	; 0x24
 8002bd8:	f04f 0000 	mov.w	r0, #0
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002be4:	4623      	mov	r3, r4
 8002be6:	0a18      	lsrs	r0, r3, #8
 8002be8:	462b      	mov	r3, r5
 8002bea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002bee:	462b      	mov	r3, r5
 8002bf0:	1219      	asrs	r1, r3, #8
 8002bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002bf8:	b21c      	sxth	r4, r3
 8002bfa:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	012b      	lsls	r3, r5, #4
 8002c08:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002c0c:	0122      	lsls	r2, r4, #4
 8002c0e:	1884      	adds	r4, r0, r2
 8002c10:	603c      	str	r4, [r7, #0]
 8002c12:	eb41 0303 	adc.w	r3, r1, r3
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c1c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8002c20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3770      	adds	r7, #112	; 0x70
 8002c26:	46bd      	mov	sp, r7
 8002c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c2c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002c3e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	039a      	lsls	r2, r3, #14
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002c4a:	051b      	lsls	r3, r3, #20
 8002c4c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002c54:	4619      	mov	r1, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	fb03 f301 	mul.w	r3, r3, r1
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002c62:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb02 f201 	mul.w	r2, r2, r1
 8002c72:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002c74:	68f9      	ldr	r1, [r7, #12]
 8002c76:	7f09      	ldrb	r1, [r1, #28]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	fb01 f100 	mul.w	r1, r1, r0
 8002c80:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002c82:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8002c86:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8002c8a:	1292      	asrs	r2, r2, #10
 8002c8c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8002c90:	68f9      	ldr	r1, [r7, #12]
 8002c92:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8002c96:	fb01 f202 	mul.w	r2, r1, r2
 8002c9a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002c9e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002ca0:	fb02 f303 	mul.w	r3, r2, r3
 8002ca4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	13db      	asrs	r3, r3, #15
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	13d2      	asrs	r2, r2, #15
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	7e12      	ldrb	r2, [r2, #24]
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cca:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002cd2:	bfa8      	it	ge
 8002cd4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002cd8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	131b      	asrs	r3, r3, #12
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b08c      	sub	sp, #48	; 0x30
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002cfe:	2b60      	cmp	r3, #96	; 0x60
 8002d00:	d007      	beq.n	8002d12 <bmp280_read_fixed+0x28>
		if (humidity)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <bmp280_read_fixed+0x24>
			*humidity = 0;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <bmp280_read_fixed+0x32>
 8002d18:	2308      	movs	r3, #8
 8002d1a:	e000      	b.n	8002d1e <bmp280_read_fixed+0x34>
 8002d1c:	2306      	movs	r3, #6
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f107 0218 	add.w	r2, r7, #24
 8002d28:	21f7      	movs	r1, #247	; 0xf7
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f7ff fba5 	bl	800247a <read_data>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <bmp280_read_fixed+0x50>
		return false;
 8002d36:	2300      	movs	r3, #0
 8002d38:	e038      	b.n	8002dac <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8002d3a:	7e3b      	ldrb	r3, [r7, #24]
 8002d3c:	031a      	lsls	r2, r3, #12
 8002d3e:	7e7b      	ldrb	r3, [r7, #25]
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4313      	orrs	r3, r2
 8002d44:	7eba      	ldrb	r2, [r7, #26]
 8002d46:	0912      	lsrs	r2, r2, #4
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8002d4e:	7efb      	ldrb	r3, [r7, #27]
 8002d50:	031a      	lsls	r2, r3, #12
 8002d52:	7f3b      	ldrb	r3, [r7, #28]
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	4313      	orrs	r3, r2
 8002d58:	7f7a      	ldrb	r2, [r7, #29]
 8002d5a:	0912      	lsrs	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8002d62:	f107 0314 	add.w	r3, r7, #20
 8002d66:	461a      	mov	r2, r3
 8002d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff fd61 	bl	8002832 <compensate_temperature>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fd91 	bl	80028a4 <compensate_pressure>
 8002d82:	4602      	mov	r2, r0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00d      	beq.n	8002daa <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8002d8e:	7fbb      	ldrb	r3, [r7, #30]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	7ffa      	ldrb	r2, [r7, #31]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6a39      	ldr	r1, [r7, #32]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff ff44 	bl	8002c2c <compensate_humidity>
 8002da4:	4602      	mov	r2, r0
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002daa:	2301      	movs	r3, #1
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3730      	adds	r7, #48	; 0x30
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <bmp280_read_float+0x1a>
 8002dc8:	f107 0314 	add.w	r3, r7, #20
 8002dcc:	e000      	b.n	8002dd0 <bmp280_read_float+0x1c>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f107 0218 	add.w	r2, r7, #24
 8002dd4:	f107 011c 	add.w	r1, r7, #28
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff ff86 	bl	8002cea <bmp280_read_fixed>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d028      	beq.n	8002e36 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002e40 <bmp280_read_float+0x8c>
 8002df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e06:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002e44 <bmp280_read_float+0x90>
 8002e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e24:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002e48 <bmp280_read_float+0x94>
 8002e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <bmp280_read_float+0x84>
	}

	return false;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	42c80000 	.word	0x42c80000
 8002e44:	43800000 	.word	0x43800000
 8002e48:	44800000 	.word	0x44800000

08002e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08a      	sub	sp, #40	; 0x28
 8002e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e52:	f107 0314 	add.w	r3, r7, #20
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	4b47      	ldr	r3, [pc, #284]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a46      	ldr	r2, [pc, #280]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b44      	ldr	r3, [pc, #272]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a38      	ldr	r2, [pc, #224]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a31      	ldr	r2, [pc, #196]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <MX_GPIO_Init+0x138>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	482c      	ldr	r0, [pc, #176]	; (8002f88 <MX_GPIO_Init+0x13c>)
 8002ed8:	f003 f9a8 	bl	800622c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2150      	movs	r1, #80	; 0x50
 8002ee0:	482a      	ldr	r0, [pc, #168]	; (8002f8c <MX_GPIO_Init+0x140>)
 8002ee2:	f003 f9a3 	bl	800622c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2104      	movs	r1, #4
 8002eea:	4829      	ldr	r0, [pc, #164]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002eec:	f003 f99e 	bl	800622c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_8, GPIO_PIN_SET);
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002ef6:	4826      	ldr	r0, [pc, #152]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002ef8:	f003 f998 	bl	800622c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002efc:	2310      	movs	r3, #16
 8002efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	481d      	ldr	r0, [pc, #116]	; (8002f88 <MX_GPIO_Init+0x13c>)
 8002f14:	f002 ffd6 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002f18:	2350      	movs	r3, #80	; 0x50
 8002f1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	2303      	movs	r3, #3
 8002f26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4817      	ldr	r0, [pc, #92]	; (8002f8c <MX_GPIO_Init+0x140>)
 8002f30:	f002 ffc8 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f34:	2301      	movs	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <MX_GPIO_Init+0x148>)
 8002f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4812      	ldr	r0, [pc, #72]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002f48:	f002 ffbc 	bl	8005ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_8;
 8002f4c:	f640 1304 	movw	r3, #2308	; 0x904
 8002f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	480a      	ldr	r0, [pc, #40]	; (8002f90 <MX_GPIO_Init+0x144>)
 8002f66:	f002 ffad 	bl	8005ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	2006      	movs	r0, #6
 8002f70:	f002 fe59 	bl	8005c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002f74:	2006      	movs	r0, #6
 8002f76:	f002 fe72 	bl	8005c5e <HAL_NVIC_EnableIRQ>

}
 8002f7a:	bf00      	nop
 8002f7c:	3728      	adds	r7, #40	; 0x28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40020000 	.word	0x40020000
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020400 	.word	0x40020400
 8002f94:	10310000 	.word	0x10310000

08002f98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <MX_I2C1_Init+0x54>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fa2:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fa4:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <MX_I2C1_Init+0x58>)
 8002fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fd4:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <MX_I2C1_Init+0x50>)
 8002fd6:	f003 f95b 	bl	8006290 <HAL_I2C_Init>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002fe0:	f001 f966 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200004e8 	.word	0x200004e8
 8002fec:	40005400 	.word	0x40005400
 8002ff0:	000186a0 	.word	0x000186a0

08002ff4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_I2C_MspInit+0x84>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12b      	bne.n	800306e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_I2C_MspInit+0x88>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003032:	23c0      	movs	r3, #192	; 0xc0
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003036:	2312      	movs	r3, #18
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800303a:	2301      	movs	r3, #1
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303e:	2303      	movs	r3, #3
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003042:	2304      	movs	r3, #4
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <HAL_I2C_MspInit+0x8c>)
 800304e:	f002 ff39 	bl	8005ec4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <HAL_I2C_MspInit+0x88>)
 800305c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_I2C_MspInit+0x88>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40005400 	.word	0x40005400
 800307c:	40023800 	.word	0x40023800
 8003080:	40020400 	.word	0x40020400

08003084 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <MX_IWDG_Init+0x2c>)
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <MX_IWDG_Init+0x30>)
 800308c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <MX_IWDG_Init+0x2c>)
 8003090:	2203      	movs	r2, #3
 8003092:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 500;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <MX_IWDG_Init+0x2c>)
 8003096:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800309a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800309c:	4804      	ldr	r0, [pc, #16]	; (80030b0 <MX_IWDG_Init+0x2c>)
 800309e:	f004 f8b6 	bl	800720e <HAL_IWDG_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80030a8:	f001 f902 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	2000053c 	.word	0x2000053c
 80030b4:	40003000 	.word	0x40003000

080030b8 <validate>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t validate(char* nmeastr) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	char check[3];
	char checkcalcstr[3];
	int i;
	int calculated_check;

	i = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
	calculated_check = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	613b      	str	r3, [r7, #16]

	    // check to ensure that the string starts with a $
	if(nmeastr[i] == '$')
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b24      	cmp	r3, #36	; 0x24
 80030d2:	d103      	bne.n	80030dc <validate+0x24>
	    i++;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3301      	adds	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
	else
	    return 0;

	//No NULL reached, 75 char largest possible NMEA message, no '*' reached
	while(nmeastr[i] != 0 && nmeastr[i] != '*' && i < 75){
 80030da:	e00c      	b.n	80030f6 <validate+0x3e>
	    return 0;
 80030dc:	2300      	movs	r3, #0
 80030de:	e048      	b.n	8003172 <validate+0xba>
	    calculated_check ^= nmeastr[i];// calculate the checksum
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4053      	eors	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
	    i++;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3301      	adds	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
	while(nmeastr[i] != 0 && nmeastr[i] != '*' && i < 75){
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <validate+0x5c>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b2a      	cmp	r3, #42	; 0x2a
 800310c:	d002      	beq.n	8003114 <validate+0x5c>
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b4a      	cmp	r3, #74	; 0x4a
 8003112:	dde5      	ble.n	80030e0 <validate+0x28>
	}

	if(i >= 75){
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2b4a      	cmp	r3, #74	; 0x4a
 8003118:	dd01      	ble.n	800311e <validate+0x66>
	    return 0;// the string was too long so return an error
 800311a:	2300      	movs	r3, #0
 800311c:	e029      	b.n	8003172 <validate+0xba>
	}

	if(nmeastr[i] == '*'){
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b2a      	cmp	r3, #42	; 0x2a
 8003128:	d119      	bne.n	800315e <validate+0xa6>
	    check[0] = nmeastr[i+1];    //put hex chars in check string
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	733b      	strb	r3, [r7, #12]
	    check[1] = nmeastr[i+2];
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3302      	adds	r3, #2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	737b      	strb	r3, [r7, #13]
	    check[2] = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	73bb      	strb	r3, [r7, #14]
	} else
	    return 0;// no checksum separator found there for invalid

	sprintf(checkcalcstr,"%02X",calculated_check);
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	490b      	ldr	r1, [pc, #44]	; (800317c <validate+0xc4>)
 800314e:	4618      	mov	r0, r3
 8003150:	f00d f9f6 	bl	8010540 <siprintf>
	return (checkcalcstr[0] == check[0] && checkcalcstr[1] == check[1]) ? 1 : 0;
 8003154:	7a3a      	ldrb	r2, [r7, #8]
 8003156:	7b3b      	ldrb	r3, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d108      	bne.n	800316e <validate+0xb6>
 800315c:	e001      	b.n	8003162 <validate+0xaa>
	    return 0;// no checksum separator found there for invalid
 800315e:	2300      	movs	r3, #0
 8003160:	e007      	b.n	8003172 <validate+0xba>
	return (checkcalcstr[0] == check[0] && checkcalcstr[1] == check[1]) ? 1 : 0;
 8003162:	7a7a      	ldrb	r2, [r7, #9]
 8003164:	7b7b      	ldrb	r3, [r7, #13]
 8003166:	429a      	cmp	r2, r3
 8003168:	d101      	bne.n	800316e <validate+0xb6>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <validate+0xb8>
 800316e:	2300      	movs	r3, #0
 8003170:	b2db      	uxtb	r3, r3
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	08014fe0 	.word	0x08014fe0

08003180 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
	if(huart == &huart4) {
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <HAL_UART_RxCpltCallback+0x4c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d119      	bne.n	80031c4 <HAL_UART_RxCpltCallback+0x44>
		// TODO: any task
		if(gpsRxIndex < 128) {
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <HAL_UART_RxCpltCallback+0x50>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	b25b      	sxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	db14      	blt.n	80031c4 <HAL_UART_RxCpltCallback+0x44>
			gpsRxBuffer[gpsRxIndex] = gpsRx;
 800319a:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_UART_RxCpltCallback+0x50>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_UART_RxCpltCallback+0x54>)
 80031a2:	7819      	ldrb	r1, [r3, #0]
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_UART_RxCpltCallback+0x58>)
 80031a6:	5499      	strb	r1, [r3, r2]
			gpsRxIndex += 1;
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_UART_RxCpltCallback+0x50>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	3301      	adds	r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_UART_RxCpltCallback+0x50>)
 80031b2:	701a      	strb	r2, [r3, #0]

			gpsRx = 0;
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <HAL_UART_RxCpltCallback+0x54>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart4, &gpsRx, 1);
 80031ba:	2201      	movs	r2, #1
 80031bc:	4905      	ldr	r1, [pc, #20]	; (80031d4 <HAL_UART_RxCpltCallback+0x54>)
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <HAL_UART_RxCpltCallback+0x4c>)
 80031c0:	f007 fd5b 	bl	800ac7a <HAL_UART_Receive_IT>
		}
	}
}
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20002a8c 	.word	0x20002a8c
 80031d0:	2000054d 	.word	0x2000054d
 80031d4:	200016f4 	.word	0x200016f4
 80031d8:	20000554 	.word	0x20000554

080031dc <increaseEchoDelayTime>:
bool
	markCountDelayTime = false,
	markProcessDelayTime = false
;

void increaseEchoDelayTime(uint32_t increaseValue) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	// try to put pc4 anything...
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80031e4:	2201      	movs	r2, #1
 80031e6:	2110      	movs	r1, #16
 80031e8:	4812      	ldr	r0, [pc, #72]	; (8003234 <increaseEchoDelayTime+0x58>)
 80031ea:	f003 f81f 	bl	800622c <HAL_GPIO_WritePin>
	echoRepeaterDelayTime += increaseValue;
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <increaseEchoDelayTime+0x5c>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <increaseEchoDelayTime+0x5c>)
 80031f8:	6013      	str	r3, [r2, #0]

	// log to sd for debug
	memset(SDmessage, 0, SDmessageWidth);
 80031fa:	4b10      	ldr	r3, [pc, #64]	; (800323c <increaseEchoDelayTime+0x60>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	2100      	movs	r1, #0
 8003202:	480f      	ldr	r0, [pc, #60]	; (8003240 <increaseEchoDelayTime+0x64>)
 8003204:	f00c fb14 	bl	800f830 <memset>
	SDmessageWidth = sprintf(SDmessage, "ECHO increase %d\r\n", echoRepeaterDelayTime);
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <increaseEchoDelayTime+0x5c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	490d      	ldr	r1, [pc, #52]	; (8003244 <increaseEchoDelayTime+0x68>)
 8003210:	480b      	ldr	r0, [pc, #44]	; (8003240 <increaseEchoDelayTime+0x64>)
 8003212:	f00d f995 	bl	8010540 <siprintf>
 8003216:	4603      	mov	r3, r0
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <increaseEchoDelayTime+0x60>)
 800321c:	701a      	strb	r2, [r3, #0]
	writeToSD("Data.txt", SDmessage, SDmessageWidth);
 800321e:	4b07      	ldr	r3, [pc, #28]	; (800323c <increaseEchoDelayTime+0x60>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <increaseEchoDelayTime+0x64>)
 8003226:	4808      	ldr	r0, [pc, #32]	; (8003248 <increaseEchoDelayTime+0x6c>)
 8003228:	f000 f97a 	bl	8003520 <writeToSD>
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40020800 	.word	0x40020800
 8003238:	20000254 	.word	0x20000254
 800323c:	20001634 	.word	0x20001634
 8003240:	2000178c 	.word	0x2000178c
 8003244:	08014fe8 	.word	0x08014fe8
 8003248:	08014ffc 	.word	0x08014ffc

0800324c <startPreEchoDelayTime>:

void startPreEchoDelayTime() {
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8003250:	2200      	movs	r2, #0
 8003252:	2110      	movs	r1, #16
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <startPreEchoDelayTime+0x14>)
 8003256:	f002 ffe9 	bl	800622c <HAL_GPIO_WritePin>
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40020800 	.word	0x40020800

08003264 <startPostEchoDelayTime>:

void startPostEchoDelayTime() {
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8003268:	2200      	movs	r2, #0
 800326a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800326e:	4810      	ldr	r0, [pc, #64]	; (80032b0 <startPostEchoDelayTime+0x4c>)
 8003270:	f002 ffdc 	bl	800622c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8003274:	2201      	movs	r2, #1
 8003276:	2104      	movs	r1, #4
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <startPostEchoDelayTime+0x4c>)
 800327a:	f002 ffd7 	bl	800622c <HAL_GPIO_WritePin>

	// log to sd for debug
	memset(SDmessage, 0, SDmessageWidth);
 800327e:	4b0d      	ldr	r3, [pc, #52]	; (80032b4 <startPostEchoDelayTime+0x50>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	2100      	movs	r1, #0
 8003286:	480c      	ldr	r0, [pc, #48]	; (80032b8 <startPostEchoDelayTime+0x54>)
 8003288:	f00c fad2 	bl	800f830 <memset>
	SDmessageWidth = sprintf(SDmessage, "ECHO started\r\n");
 800328c:	490b      	ldr	r1, [pc, #44]	; (80032bc <startPostEchoDelayTime+0x58>)
 800328e:	480a      	ldr	r0, [pc, #40]	; (80032b8 <startPostEchoDelayTime+0x54>)
 8003290:	f00d f956 	bl	8010540 <siprintf>
 8003294:	4603      	mov	r3, r0
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <startPostEchoDelayTime+0x50>)
 800329a:	701a      	strb	r2, [r3, #0]
	writeToSD("Data.txt", SDmessage, SDmessageWidth);
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <startPostEchoDelayTime+0x50>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	4905      	ldr	r1, [pc, #20]	; (80032b8 <startPostEchoDelayTime+0x54>)
 80032a4:	4806      	ldr	r0, [pc, #24]	; (80032c0 <startPostEchoDelayTime+0x5c>)
 80032a6:	f000 f93b 	bl	8003520 <writeToSD>
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40020400 	.word	0x40020400
 80032b4:	20001634 	.word	0x20001634
 80032b8:	2000178c 	.word	0x2000178c
 80032bc:	08015008 	.word	0x08015008
 80032c0:	08014ffc 	.word	0x08014ffc

080032c4 <endEchoDelayTime>:

void endEchoDelayTime() {
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2104      	movs	r1, #4
 80032cc:	4811      	ldr	r0, [pc, #68]	; (8003314 <endEchoDelayTime+0x50>)
 80032ce:	f002 ffad 	bl	800622c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80032d2:	2201      	movs	r2, #1
 80032d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d8:	480e      	ldr	r0, [pc, #56]	; (8003314 <endEchoDelayTime+0x50>)
 80032da:	f002 ffa7 	bl	800622c <HAL_GPIO_WritePin>

	echoRepeaterDelayTime = 0;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <endEchoDelayTime+0x54>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

	// log to sd for debug
	memset(SDmessage, 0, SDmessageWidth);
 80032e4:	4b0d      	ldr	r3, [pc, #52]	; (800331c <endEchoDelayTime+0x58>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	2100      	movs	r1, #0
 80032ec:	480c      	ldr	r0, [pc, #48]	; (8003320 <endEchoDelayTime+0x5c>)
 80032ee:	f00c fa9f 	bl	800f830 <memset>
	SDmessageWidth = sprintf(SDmessage, "ECHO complete\r\n");
 80032f2:	490c      	ldr	r1, [pc, #48]	; (8003324 <endEchoDelayTime+0x60>)
 80032f4:	480a      	ldr	r0, [pc, #40]	; (8003320 <endEchoDelayTime+0x5c>)
 80032f6:	f00d f923 	bl	8010540 <siprintf>
 80032fa:	4603      	mov	r3, r0
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	4b07      	ldr	r3, [pc, #28]	; (800331c <endEchoDelayTime+0x58>)
 8003300:	701a      	strb	r2, [r3, #0]
	writeToSD("Data.txt", SDmessage, SDmessageWidth);
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <endEchoDelayTime+0x58>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4905      	ldr	r1, [pc, #20]	; (8003320 <endEchoDelayTime+0x5c>)
 800330a:	4807      	ldr	r0, [pc, #28]	; (8003328 <endEchoDelayTime+0x64>)
 800330c:	f000 f908 	bl	8003520 <writeToSD>
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40020400 	.word	0x40020400
 8003318:	20000254 	.word	0x20000254
 800331c:	20001634 	.word	0x20001634
 8003320:	2000178c 	.word	0x2000178c
 8003324:	08015018 	.word	0x08015018
 8003328:	08014ffc 	.word	0x08014ffc

0800332c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0 && echoAllowed == true) { // if signal in PB0 falling... & echo allowed
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d12f      	bne.n	800339c <HAL_GPIO_EXTI_Callback+0x70>
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_GPIO_EXTI_Callback+0x78>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02b      	beq.n	800339c <HAL_GPIO_EXTI_Callback+0x70>

		// log to sd for debug
		memset(SDmessage, 0, SDmessageWidth);
 8003344:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	4817      	ldr	r0, [pc, #92]	; (80033ac <HAL_GPIO_EXTI_Callback+0x80>)
 800334e:	f00c fa6f 	bl	800f830 <memset>
		SDmessageWidth = sprintf(SDmessage, "Echo interrupt, pin state: %d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0));
 8003352:	2101      	movs	r1, #1
 8003354:	4816      	ldr	r0, [pc, #88]	; (80033b0 <HAL_GPIO_EXTI_Callback+0x84>)
 8003356:	f002 ff51 	bl	80061fc <HAL_GPIO_ReadPin>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	4915      	ldr	r1, [pc, #84]	; (80033b4 <HAL_GPIO_EXTI_Callback+0x88>)
 8003360:	4812      	ldr	r0, [pc, #72]	; (80033ac <HAL_GPIO_EXTI_Callback+0x80>)
 8003362:	f00d f8ed 	bl	8010540 <siprintf>
 8003366:	4603      	mov	r3, r0
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800336c:	701a      	strb	r2, [r3, #0]
		writeToSD("Data.txt", SDmessage, SDmessageWidth);
 800336e:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	490d      	ldr	r1, [pc, #52]	; (80033ac <HAL_GPIO_EXTI_Callback+0x80>)
 8003376:	4810      	ldr	r0, [pc, #64]	; (80033b8 <HAL_GPIO_EXTI_Callback+0x8c>)
 8003378:	f000 f8d2 	bl	8003520 <writeToSD>

		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 800337c:	2101      	movs	r1, #1
 800337e:	480c      	ldr	r0, [pc, #48]	; (80033b0 <HAL_GPIO_EXTI_Callback+0x84>)
 8003380:	f002 ff3c 	bl	80061fc <HAL_GPIO_ReadPin>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <HAL_GPIO_EXTI_Callback+0x66>
			markCountDelayTime = true;
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <HAL_GPIO_EXTI_Callback+0x90>)
 800338c:	2201      	movs	r2, #1
 800338e:	701a      	strb	r2, [r3, #0]
		} else {
			markProcessDelayTime = true;
			startPreEchoDelayTime();
		}
	}
}
 8003390:	e004      	b.n	800339c <HAL_GPIO_EXTI_Callback+0x70>
			markProcessDelayTime = true;
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_GPIO_EXTI_Callback+0x94>)
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
			startPreEchoDelayTime();
 8003398:	f7ff ff58 	bl	800324c <startPreEchoDelayTime>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000250 	.word	0x20000250
 80033a8:	20001634 	.word	0x20001634
 80033ac:	2000178c 	.word	0x2000178c
 80033b0:	40020400 	.word	0x40020400
 80033b4:	08015028 	.word	0x08015028
 80033b8:	08014ffc 	.word	0x08014ffc
 80033bc:	2000025c 	.word	0x2000025c
 80033c0:	2000025d 	.word	0x2000025d

080033c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1) { //check if the interrupt comes from TIM1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d10d      	bne.n	80033f2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		// task every 250 ms
		// if gps packet has been processed - being receive new packet
		if(gpsRxIndex == 0) HAL_UART_Receive_IT(&huart4, &gpsRx, 1);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d104      	bne.n	80033e8 <HAL_TIM_PeriodElapsedCallback+0x24>
 80033de:	2201      	movs	r2, #1
 80033e0:	4908      	ldr	r1, [pc, #32]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80033e2:	4809      	ldr	r0, [pc, #36]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80033e4:	f007 fc49 	bl	800ac7a <HAL_UART_Receive_IT>
		taskCounter += 1;
 80033e8:	4b08      	ldr	r3, [pc, #32]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	4a07      	ldr	r2, [pc, #28]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80033f0:	6013      	str	r3, [r2, #0]
	}
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40010000 	.word	0x40010000
 8003400:	2000054d 	.word	0x2000054d
 8003404:	200016f4 	.word	0x200016f4
 8003408:	20002a8c 	.word	0x20002a8c
 800340c:	200016bc 	.word	0x200016bc

08003410 <bmi160_I2Cwrite>:


//// ------  Util methods  ------ ////
uint8_t bmi160_I2Cwrite(uint8_t addr, uint8_t reg, uint8_t* data, uint16_t len) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af04      	add	r7, sp, #16
 8003416:	603a      	str	r2, [r7, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	4603      	mov	r3, r0
 800341c:	71fb      	strb	r3, [r7, #7]
 800341e:	460b      	mov	r3, r1
 8003420:	71bb      	strb	r3, [r7, #6]
 8003422:	4613      	mov	r3, r2
 8003424:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, addr << 1, reg, 1, (uint8_t*)data, len, 1000);
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	b29b      	uxth	r3, r3
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	b299      	uxth	r1, r3
 800342e:	79bb      	ldrb	r3, [r7, #6]
 8003430:	b29a      	uxth	r2, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	88bb      	ldrh	r3, [r7, #4]
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2301      	movs	r3, #1
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <bmi160_I2Cwrite+0x48>)
 8003444:	f003 f868 	bl	8006518 <HAL_I2C_Mem_Write>
 8003448:	4603      	mov	r3, r0
 800344a:	73fb      	strb	r3, [r7, #15]
	return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200004e8 	.word	0x200004e8

0800345c <bmi160_I2Cread>:

uint8_t bmi160_I2Cread(uint8_t addr, uint8_t reg, uint8_t* data, uint16_t len) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af04      	add	r7, sp, #16
 8003462:	603a      	str	r2, [r7, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
 800346a:	460b      	mov	r3, r1
 800346c:	71bb      	strb	r3, [r7, #6]
 800346e:	4613      	mov	r3, r2
 8003470:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, addr << 1, reg, 1, (uint8_t*)data, len, 1000);
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	b29b      	uxth	r3, r3
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	b299      	uxth	r1, r3
 800347a:	79bb      	ldrb	r3, [r7, #6]
 800347c:	b29a      	uxth	r2, r3
 800347e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003482:	9302      	str	r3, [sp, #8]
 8003484:	88bb      	ldrh	r3, [r7, #4]
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2301      	movs	r3, #1
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <bmi160_I2Cread+0x48>)
 8003490:	f003 f93c 	bl	800670c <HAL_I2C_Mem_Read>
 8003494:	4603      	mov	r3, r0
 8003496:	73fb      	strb	r3, [r7, #15]
	return status;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200004e8 	.word	0x200004e8

080034a8 <altitude>:

float altitude(float pressure, bool isRelative) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80034b2:	4603      	mov	r3, r0
 80034b4:	70fb      	strb	r3, [r7, #3]
	float ref = 0.0F;
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]

	if(isRelative == true) {
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <altitude+0x22>
		ref = reference_pressure;
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <altitude+0x68>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e007      	b.n	80034da <altitude+0x32>
	} else if(isRelative == false) {
 80034ca:	78fb      	ldrb	r3, [r7, #3]
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <altitude+0x32>
		ref = 101325.0F; // Sea level pressure in [Pa]
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <altitude+0x6c>)
 80034d8:	60fb      	str	r3, [r7, #12]
	}

	return 44300.0F * (1.0F - powf(pressure / ref, 1.0F / 5.255F));
 80034da:	ed97 7a01 	vldr	s14, [r7, #4]
 80034de:	edd7 7a03 	vldr	s15, [r7, #12]
 80034e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034e6:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003518 <altitude+0x70>
 80034ea:	eeb0 0a66 	vmov.f32	s0, s13
 80034ee:	f010 fe01 	bl	80140f4 <powf>
 80034f2:	eef0 7a40 	vmov.f32	s15, s0
 80034f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034fe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800351c <altitude+0x74>
 8003502:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003506:	eeb0 0a67 	vmov.f32	s0, s15
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200005d4 	.word	0x200005d4
 8003514:	47c5e680 	.word	0x47c5e680
 8003518:	3e42dcae 	.word	0x3e42dcae
 800351c:	472d0c00 	.word	0x472d0c00

08003520 <writeToSD>:

// ВАЖНО! Запись на SD производится ТОЛЬКО ПР�? ОТКЛЮЧЕННОМ ОТ СЕТ�? �? ОТ STM программаторе
void writeToSD(char* filename, uint8_t* buf, uint8_t width) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	4613      	mov	r3, r2
 800352c:	71fb      	strb	r3, [r7, #7]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800352e:	b672      	cpsid	i
}
 8003530:	bf00      	nop
	// возможно из-за этого эхо репитер иногда долго раздупляется
	__disable_irq();
	open = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8003532:	2212      	movs	r2, #18
 8003534:	68f9      	ldr	r1, [r7, #12]
 8003536:	4814      	ldr	r0, [pc, #80]	; (8003588 <writeToSD+0x68>)
 8003538:	f00b fa02 	bl	800e940 <f_open>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <writeToSD+0x6c>)
 8003542:	701a      	strb	r2, [r3, #0]
	seek = f_lseek(&file, f_size(&file));
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <writeToSD+0x68>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4619      	mov	r1, r3
 800354a:	480f      	ldr	r0, [pc, #60]	; (8003588 <writeToSD+0x68>)
 800354c:	f00b fe00 	bl	800f150 <f_lseek>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <writeToSD+0x70>)
 8003556:	701a      	strb	r2, [r3, #0]
	write = f_write(&file, buf, width, &SDmessageBW);
 8003558:	79fa      	ldrb	r2, [r7, #7]
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <writeToSD+0x74>)
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	480a      	ldr	r0, [pc, #40]	; (8003588 <writeToSD+0x68>)
 8003560:	f00b fbba 	bl	800ecd8 <f_write>
 8003564:	4603      	mov	r3, r0
 8003566:	461a      	mov	r2, r3
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <writeToSD+0x78>)
 800356a:	701a      	strb	r2, [r3, #0]
	close = f_close(&file);
 800356c:	4806      	ldr	r0, [pc, #24]	; (8003588 <writeToSD+0x68>)
 800356e:	f00b fdc5 	bl	800f0fc <f_close>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <writeToSD+0x7c>)
 8003578:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800357a:	b662      	cpsie	i
}
 800357c:	bf00      	nop
	__enable_irq();
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200005fc 	.word	0x200005fc
 800358c:	20000045 	.word	0x20000045
 8003590:	20000046 	.word	0x20000046
 8003594:	20000548 	.word	0x20000548
 8003598:	20000047 	.word	0x20000047
 800359c:	20000048 	.word	0x20000048

080035a0 <crc16>:

uint16_t crc16(uint8_t* bytes) {
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	uint16_t crc = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i = 0; i < sizeof(bytes); i++) {
 80035ac:	2300      	movs	r3, #0
 80035ae:	737b      	strb	r3, [r7, #13]
 80035b0:	e026      	b.n	8003600 <crc16+0x60>
		crc ^= bytes[i];
 80035b2:	7b7b      	ldrb	r3, [r7, #13]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	89fb      	ldrh	r3, [r7, #14]
 80035be:	4053      	eors	r3, r2
 80035c0:	81fb      	strh	r3, [r7, #14]
		for(uint8_t n = 0; n < 8; n++) {
 80035c2:	2300      	movs	r3, #0
 80035c4:	733b      	strb	r3, [r7, #12]
 80035c6:	e015      	b.n	80035f4 <crc16+0x54>
			if(crc & 0x01) {
 80035c8:	89fb      	ldrh	r3, [r7, #14]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <crc16+0x48>
				crc >>= 1;
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 80035d8:	89fb      	ldrh	r3, [r7, #14]
 80035da:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80035de:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80035e2:	43db      	mvns	r3, r3
 80035e4:	81fb      	strh	r3, [r7, #14]
 80035e6:	e002      	b.n	80035ee <crc16+0x4e>
			} else {
				crc >>= 1;
 80035e8:	89fb      	ldrh	r3, [r7, #14]
 80035ea:	085b      	lsrs	r3, r3, #1
 80035ec:	81fb      	strh	r3, [r7, #14]
		for(uint8_t n = 0; n < 8; n++) {
 80035ee:	7b3b      	ldrb	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	733b      	strb	r3, [r7, #12]
 80035f4:	7b3b      	ldrb	r3, [r7, #12]
 80035f6:	2b07      	cmp	r3, #7
 80035f8:	d9e6      	bls.n	80035c8 <crc16+0x28>
	for(uint8_t i = 0; i < sizeof(bytes); i++) {
 80035fa:	7b7b      	ldrb	r3, [r7, #13]
 80035fc:	3301      	adds	r3, #1
 80035fe:	737b      	strb	r3, [r7, #13]
 8003600:	7b7b      	ldrb	r3, [r7, #13]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d9d5      	bls.n	80035b2 <crc16+0x12>
			}
		}
	}
	return crc;
 8003606:	89fb      	ldrh	r3, [r7, #14]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <bmp280__init>:
//// ------  ------------  ------ ////


//// ======  Barometer  ====== ////
bool bmp280__init() {
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
	bmp280_init_default_params(&bmp280.params);
 8003618:	4807      	ldr	r0, [pc, #28]	; (8003638 <bmp280__init+0x24>)
 800361a:	f7fe fee3 	bl	80023e4 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <bmp280__init+0x28>)
 8003620:	2276      	movs	r2, #118	; 0x76
 8003622:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <bmp280__init+0x28>)
 8003626:	4a06      	ldr	r2, [pc, #24]	; (8003640 <bmp280__init+0x2c>)
 8003628:	629a      	str	r2, [r3, #40]	; 0x28
	return bmp280_init(&bmp280, &bmp280.params);
 800362a:	4903      	ldr	r1, [pc, #12]	; (8003638 <bmp280__init+0x24>)
 800362c:	4803      	ldr	r0, [pc, #12]	; (800363c <bmp280__init+0x28>)
 800362e:	f7ff f853 	bl	80026d8 <bmp280_init>
 8003632:	4603      	mov	r3, r0
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	200016ec 	.word	0x200016ec
 800363c:	200016c0 	.word	0x200016c0
 8003640:	200004e8 	.word	0x200004e8

08003644 <bmi160__init>:


//// ======  IMU sensor  ====== ////
int8_t bmi160__init() {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
	bmi160.id = BMI160_I2C_ADDR;
 800364a:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <bmi160__init+0x78>)
 800364c:	2268      	movs	r2, #104	; 0x68
 800364e:	705a      	strb	r2, [r3, #1]
	bmi160.interface = BMI160_I2C_INTF;
 8003650:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <bmi160__init+0x78>)
 8003652:	2200      	movs	r2, #0
 8003654:	709a      	strb	r2, [r3, #2]
	bmi160.read = bmi160_I2Cread;
 8003656:	4b19      	ldr	r3, [pc, #100]	; (80036bc <bmi160__init+0x78>)
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <bmi160__init+0x7c>)
 800365a:	61da      	str	r2, [r3, #28]
	bmi160.write = bmi160_I2Cwrite;
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <bmi160__init+0x78>)
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <bmi160__init+0x80>)
 8003660:	621a      	str	r2, [r3, #32]
	bmi160.delay_ms = HAL_Delay;
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <bmi160__init+0x78>)
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <bmi160__init+0x84>)
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
	int8_t result = BMI160_E_DEV_NOT_FOUND;
 8003668:	23fd      	movs	r3, #253	; 0xfd
 800366a:	71fb      	strb	r3, [r7, #7]
	result = bmi160_init(&bmi160);
 800366c:	4813      	ldr	r0, [pc, #76]	; (80036bc <bmi160__init+0x78>)
 800366e:	f7fd fe7e 	bl	800136e <bmi160_init>
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]

	bmi160.accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <bmi160__init+0x78>)
 8003678:	220c      	movs	r2, #12
 800367a:	715a      	strb	r2, [r3, #5]
	bmi160.accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <bmi160__init+0x78>)
 800367e:	2203      	movs	r2, #3
 8003680:	719a      	strb	r2, [r3, #6]
	bmi160.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <bmi160__init+0x78>)
 8003684:	2202      	movs	r2, #2
 8003686:	71da      	strb	r2, [r3, #7]
	bmi160.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <bmi160__init+0x78>)
 800368a:	2211      	movs	r2, #17
 800368c:	711a      	strb	r2, [r3, #4]
	bmi160.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <bmi160__init+0x78>)
 8003690:	220d      	movs	r2, #13
 8003692:	735a      	strb	r2, [r3, #13]
	bmi160.gyro_cfg.range = BMI160_GYRO_RANGE_250_DPS;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <bmi160__init+0x78>)
 8003696:	2203      	movs	r2, #3
 8003698:	739a      	strb	r2, [r3, #14]
	bmi160.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <bmi160__init+0x78>)
 800369c:	2202      	movs	r2, #2
 800369e:	73da      	strb	r2, [r3, #15]
	bmi160.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <bmi160__init+0x78>)
 80036a2:	2215      	movs	r2, #21
 80036a4:	731a      	strb	r2, [r3, #12]
	result = bmi160_set_sens_conf(&bmi160);
 80036a6:	4805      	ldr	r0, [pc, #20]	; (80036bc <bmi160__init+0x78>)
 80036a8:	f7fd fef7 	bl	800149a <bmi160_set_sens_conf>
 80036ac:	4603      	mov	r3, r0
 80036ae:	71fb      	strb	r3, [r7, #7]

	return result;
 80036b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20001660 	.word	0x20001660
 80036c0:	0800345d 	.word	0x0800345d
 80036c4:	08003411 	.word	0x08003411
 80036c8:	08005229 	.word	0x08005229
 80036cc:	00000000 	.word	0x00000000

080036d0 <lora__init>:


//// ======  LoRa radio  ====== ////
uint8_t* lora__init() {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af02      	add	r7, sp, #8
	lora.spi = &hspi1;
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <lora__init+0x88>)
 80036d8:	4a20      	ldr	r2, [pc, #128]	; (800375c <lora__init+0x8c>)
 80036da:	601a      	str	r2, [r3, #0]
	lora.nss_port = GPIOA;
 80036dc:	4b1e      	ldr	r3, [pc, #120]	; (8003758 <lora__init+0x88>)
 80036de:	4a20      	ldr	r2, [pc, #128]	; (8003760 <lora__init+0x90>)
 80036e0:	605a      	str	r2, [r3, #4]
	lora.nss_pin = GPIO_PIN_4;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <lora__init+0x88>)
 80036e4:	2210      	movs	r2, #16
 80036e6:	811a      	strh	r2, [r3, #8]
	lora.frequency = 434000000; // 434 Mhz
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <lora__init+0x88>)
 80036ea:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <lora__init+0x94>)
 80036ec:	611a      	str	r2, [r3, #16]
	lora.pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <lora__init+0x88>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	615a      	str	r2, [r3, #20]
	lora.rx_base_addr = LORA_DEFAULT_RX_ADDR;
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <lora__init+0x88>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	765a      	strb	r2, [r3, #25]
	lora.tx_base_addr = LORA_DEFAULT_TX_ADDR;
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <lora__init+0x88>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	761a      	strb	r2, [r3, #24]
	lora.spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8003700:	4b15      	ldr	r3, [pc, #84]	; (8003758 <lora__init+0x88>)
 8003702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003706:	60da      	str	r2, [r3, #12]

	// hardware reset
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370e:	4816      	ldr	r0, [pc, #88]	; (8003768 <lora__init+0x98>)
 8003710:	f002 fd8c 	bl	800622c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003714:	2001      	movs	r0, #1
 8003716:	f001 fd87 	bl	8005228 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800371a:	2201      	movs	r2, #1
 800371c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003720:	4811      	ldr	r0, [pc, #68]	; (8003768 <lora__init+0x98>)
 8003722:	f002 fd83 	bl	800622c <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003726:	20fa      	movs	r0, #250	; 0xfa
 8003728:	f001 fd7e 	bl	8005228 <HAL_Delay>
	//

	return lora_init(&lora, &hspi1, GPIOA, GPIO_PIN_4, 434000000);
 800372c:	a308      	add	r3, pc, #32	; (adr r3, 8003750 <lora__init+0x80>)
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	e9cd 2300 	strd	r2, r3, [sp]
 8003736:	2310      	movs	r3, #16
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <lora__init+0x90>)
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <lora__init+0x8c>)
 800373c:	4806      	ldr	r0, [pc, #24]	; (8003758 <lora__init+0x88>)
 800373e:	f001 faae 	bl	8004c9e <lora_init>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	f3af 8000 	nop.w
 8003750:	19de5080 	.word	0x19de5080
 8003754:	00000000 	.word	0x00000000
 8003758:	2000169c 	.word	0x2000169c
 800375c:	200029ec 	.word	0x200029ec
 8003760:	40020000 	.word	0x40020000
 8003764:	19de5080 	.word	0x19de5080
 8003768:	40020400 	.word	0x40020400
 800376c:	00000000 	.word	0x00000000

08003770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003774:	b0b9      	sub	sp, #228	; 0xe4
 8003776:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003778:	f001 fce4 	bl	8005144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800377c:	f000 fd16 	bl	80041ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // before-start delay for photoresist
  HAL_Delay(30000);
 8003780:	f247 5030 	movw	r0, #30000	; 0x7530
 8003784:	f001 fd50 	bl	8005228 <HAL_Delay>
  //
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003788:	f7ff fb60 	bl	8002e4c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800378c:	f000 fe06 	bl	800439c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8003790:	f008 fd26 	bl	800c1e0 <MX_FATFS_Init>
  MX_UART4_Init();
 8003794:	f001 fc32 	bl	8004ffc <MX_UART4_Init>
  MX_RTC_Init();
 8003798:	f000 fd90 	bl	80042bc <MX_RTC_Init>
  MX_TIM1_Init();
 800379c:	f001 fbb6 	bl	8004f0c <MX_TIM1_Init>
  MX_I2C1_Init();
 80037a0:	f7ff fbfa 	bl	8002f98 <MX_I2C1_Init>
  MX_SPI1_Init();
 80037a4:	f000 fe94 	bl	80044d0 <MX_SPI1_Init>
  MX_IWDG_Init();
 80037a8:	f7ff fc6c 	bl	8003084 <MX_IWDG_Init>
  MX_ADC2_Init();
 80037ac:	f7fd fc6e 	bl	800108c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  // watchdog init \start
  HAL_IWDG_Init(&hiwdg);
 80037b0:	4885      	ldr	r0, [pc, #532]	; (80039c8 <main+0x258>)
 80037b2:	f003 fd2c 	bl	800720e <HAL_IWDG_Init>
  // watchdog init \end

  bmp280__init_STATUS = bmp280__init();
 80037b6:	f7ff ff2d 	bl	8003614 <bmp280__init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461a      	mov	r2, r3
 80037be:	4b83      	ldr	r3, [pc, #524]	; (80039cc <main+0x25c>)
 80037c0:	701a      	strb	r2, [r3, #0]
  bmi160__init_STATUS = bmi160__init();
 80037c2:	f7ff ff3f 	bl	8003644 <bmi160__init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b81      	ldr	r3, [pc, #516]	; (80039d0 <main+0x260>)
 80037cc:	701a      	strb	r2, [r3, #0]
  lora__init_STATUS = lora__init();
 80037ce:	f7ff ff7f 	bl	80036d0 <lora__init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4b7f      	ldr	r3, [pc, #508]	; (80039d4 <main+0x264>)
 80037d8:	701a      	strb	r2, [r3, #0]

  // mount sd card
  mount = f_mount(&fatfs, "", 1);
 80037da:	2201      	movs	r2, #1
 80037dc:	497e      	ldr	r1, [pc, #504]	; (80039d8 <main+0x268>)
 80037de:	487f      	ldr	r0, [pc, #508]	; (80039dc <main+0x26c>)
 80037e0:	f00b f868 	bl	800e8b4 <f_mount>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b7d      	ldr	r3, [pc, #500]	; (80039e0 <main+0x270>)
 80037ea:	701a      	strb	r2, [r3, #0]

  // read reference pressure
  bmp280_read_float(&bmp280, NULL, &reference_pressure, NULL);
 80037ec:	2300      	movs	r3, #0
 80037ee:	4a7d      	ldr	r2, [pc, #500]	; (80039e4 <main+0x274>)
 80037f0:	2100      	movs	r1, #0
 80037f2:	487d      	ldr	r0, [pc, #500]	; (80039e8 <main+0x278>)
 80037f4:	f7ff fade 	bl	8002db4 <bmp280_read_float>
  //

  // write header to SD card
  // Data header
  memset(SDmessage, 0, SDmessageWidth);
 80037f8:	4b7c      	ldr	r3, [pc, #496]	; (80039ec <main+0x27c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	2100      	movs	r1, #0
 8003800:	487b      	ldr	r0, [pc, #492]	; (80039f0 <main+0x280>)
 8003802:	f00c f815 	bl	800f830 <memset>
  SDmessageWidth = sprintf(SDmessage, "T+,Ax,y,z,Gx,y,z,Pres,Humi,Temp,AltiAbs,AltiRel,P,R,Y,Light|CRC\r\n");
 8003806:	497b      	ldr	r1, [pc, #492]	; (80039f4 <main+0x284>)
 8003808:	4879      	ldr	r0, [pc, #484]	; (80039f0 <main+0x280>)
 800380a:	f00c fe99 	bl	8010540 <siprintf>
 800380e:	4603      	mov	r3, r0
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4b76      	ldr	r3, [pc, #472]	; (80039ec <main+0x27c>)
 8003814:	701a      	strb	r2, [r3, #0]
  writeToSD("Data.txt", SDmessage, SDmessageWidth);
 8003816:	4b75      	ldr	r3, [pc, #468]	; (80039ec <main+0x27c>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	4974      	ldr	r1, [pc, #464]	; (80039f0 <main+0x280>)
 800381e:	4876      	ldr	r0, [pc, #472]	; (80039f8 <main+0x288>)
 8003820:	f7ff fe7e 	bl	8003520 <writeToSD>
  // Gps header
  memset(GPSmessage, 0, GPSmessageWidth);
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <main+0x28c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	2100      	movs	r1, #0
 800382c:	4874      	ldr	r0, [pc, #464]	; (8003a00 <main+0x290>)
 800382e:	f00b ffff 	bl	800f830 <memset>
  GPSmessageWidth = sprintf(GPSmessage, "T+,GNRMC|CRC\r\n");
 8003832:	4974      	ldr	r1, [pc, #464]	; (8003a04 <main+0x294>)
 8003834:	4872      	ldr	r0, [pc, #456]	; (8003a00 <main+0x290>)
 8003836:	f00c fe83 	bl	8010540 <siprintf>
 800383a:	4603      	mov	r3, r0
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <main+0x28c>)
 8003840:	701a      	strb	r2, [r3, #0]
  writeToSD("Gps.txt", GPSmessage, GPSmessageWidth);
 8003842:	4b6e      	ldr	r3, [pc, #440]	; (80039fc <main+0x28c>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	496d      	ldr	r1, [pc, #436]	; (8003a00 <main+0x290>)
 800384a:	486f      	ldr	r0, [pc, #444]	; (8003a08 <main+0x298>)
 800384c:	f7ff fe68 	bl	8003520 <writeToSD>
  //

  // start timer 1
  HAL_TIM_Base_Start_IT(&htim1);
 8003850:	486e      	ldr	r0, [pc, #440]	; (8003a0c <main+0x29c>)
 8003852:	f006 fd97 	bl	800a384 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startProgramTime = HAL_GetTick();
 8003856:	f001 fcdb 	bl	8005210 <HAL_GetTick>
 800385a:	4603      	mov	r3, r0
 800385c:	4a6c      	ldr	r2, [pc, #432]	; (8003a10 <main+0x2a0>)
 800385e:	6013      	str	r3, [r2, #0]
	  //// ==== ////

	  // watchdog \refresh start
	  HAL_IWDG_Refresh(&hiwdg);
 8003860:	4859      	ldr	r0, [pc, #356]	; (80039c8 <main+0x258>)
 8003862:	f003 fd16 	bl	8007292 <HAL_IWDG_Refresh>
	  // watchdog \refresh end

	  if(gpsRxIndex > 0) {
 8003866:	4b6b      	ldr	r3, [pc, #428]	; (8003a14 <main+0x2a4>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8131 	beq.w	8003ad2 <main+0x362>
		  char* nmea = (char*)gpsRxBuffer;
 8003870:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <main+0x2a8>)
 8003872:	663b      	str	r3, [r7, #96]	; 0x60

		  if(validate(nmea)) {
 8003874:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003876:	f7ff fc1f 	bl	80030b8 <validate>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d079      	beq.n	8003974 <main+0x204>
			  for(uint8_t i = 0; i < strlen(nmea) - 5; i++) {
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003886:	e06c      	b.n	8003962 <main+0x1f2>
				  if(nmea[i] == '$'
 8003888:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800388c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b24      	cmp	r3, #36	; 0x24
 8003894:	d12c      	bne.n	80038f0 <main+0x180>
				  && nmea[i+1] == 'G'
 8003896:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800389a:	3301      	adds	r3, #1
 800389c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b47      	cmp	r3, #71	; 0x47
 80038a4:	d124      	bne.n	80038f0 <main+0x180>
			      && nmea[i+2] == 'N'
 80038a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038aa:	3302      	adds	r3, #2
 80038ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ae:	4413      	add	r3, r2
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b4e      	cmp	r3, #78	; 0x4e
 80038b4:	d11c      	bne.n	80038f0 <main+0x180>
			      && nmea[i+3] == 'R'
 80038b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038ba:	3303      	adds	r3, #3
 80038bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b52      	cmp	r3, #82	; 0x52
 80038c4:	d114      	bne.n	80038f0 <main+0x180>
			      && nmea[i+4] == 'M'
 80038c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038ca:	3304      	adds	r3, #4
 80038cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ce:	4413      	add	r3, r2
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b4d      	cmp	r3, #77	; 0x4d
 80038d4:	d10c      	bne.n	80038f0 <main+0x180>
		          && nmea[i+5] == 'C') gnrmcCounter = i;
 80038d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038da:	3305      	adds	r3, #5
 80038dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038de:	4413      	add	r3, r2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b43      	cmp	r3, #67	; 0x43
 80038e4:	d104      	bne.n	80038f0 <main+0x180>
 80038e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	4b4b      	ldr	r3, [pc, #300]	; (8003a1c <main+0x2ac>)
 80038ee:	801a      	strh	r2, [r3, #0]

				  if(nmea[i] == '$'
 80038f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b24      	cmp	r3, #36	; 0x24
 80038fc:	d12c      	bne.n	8003958 <main+0x1e8>
			      && nmea[i+1] == 'G'
 80038fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003902:	3301      	adds	r3, #1
 8003904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003906:	4413      	add	r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b47      	cmp	r3, #71	; 0x47
 800390c:	d124      	bne.n	8003958 <main+0x1e8>
			      && nmea[i+2] == 'N'
 800390e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003912:	3302      	adds	r3, #2
 8003914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003916:	4413      	add	r3, r2
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b4e      	cmp	r3, #78	; 0x4e
 800391c:	d11c      	bne.n	8003958 <main+0x1e8>
			      && nmea[i+3] == 'V'
 800391e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003922:	3303      	adds	r3, #3
 8003924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b56      	cmp	r3, #86	; 0x56
 800392c:	d114      	bne.n	8003958 <main+0x1e8>
			      && nmea[i+4] == 'T'
 800392e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003932:	3304      	adds	r3, #4
 8003934:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003936:	4413      	add	r3, r2
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b54      	cmp	r3, #84	; 0x54
 800393c:	d10c      	bne.n	8003958 <main+0x1e8>
			      && nmea[i+5] == 'G') gnvtgCounter = i;
 800393e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003942:	3305      	adds	r3, #5
 8003944:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003946:	4413      	add	r3, r2
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b47      	cmp	r3, #71	; 0x47
 800394c:	d104      	bne.n	8003958 <main+0x1e8>
 800394e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b32      	ldr	r3, [pc, #200]	; (8003a20 <main+0x2b0>)
 8003956:	801a      	strh	r2, [r3, #0]
			  for(uint8_t i = 0; i < strlen(nmea) - 5; i++) {
 8003958:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800395c:	3301      	adds	r3, #1
 800395e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003962:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 8003966:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003968:	f7fc fc32 	bl	80001d0 <strlen>
 800396c:	4603      	mov	r3, r0
 800396e:	3b05      	subs	r3, #5
 8003970:	429c      	cmp	r4, r3
 8003972:	d389      	bcc.n	8003888 <main+0x118>
			  }
		  }

		  if(gnvtgCounter - gnrmcCounter > 12) {
 8003974:	4b2a      	ldr	r3, [pc, #168]	; (8003a20 <main+0x2b0>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <main+0x2ac>)
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b0c      	cmp	r3, #12
 8003982:	dd1c      	ble.n	80039be <main+0x24e>
			  for(uint8_t i = gnrmcCounter; i < gnvtgCounter; i++) {
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <main+0x2ac>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800398c:	e010      	b.n	80039b0 <main+0x240>
			  	  gnrmcString[i - gnrmcCounter] = nmea[i];
 800398e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003992:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003994:	441a      	add	r2, r3
 8003996:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800399a:	4920      	ldr	r1, [pc, #128]	; (8003a1c <main+0x2ac>)
 800399c:	8809      	ldrh	r1, [r1, #0]
 800399e:	1a5b      	subs	r3, r3, r1
 80039a0:	7811      	ldrb	r1, [r2, #0]
 80039a2:	4a20      	ldr	r2, [pc, #128]	; (8003a24 <main+0x2b4>)
 80039a4:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t i = gnrmcCounter; i < gnvtgCounter; i++) {
 80039a6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80039aa:	3301      	adds	r3, #1
 80039ac:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80039b0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <main+0x2b0>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3e7      	bcc.n	800398e <main+0x21e>
		  	  }
		  }

		  // remove \r\n in gnrmcString
		  for(uint8_t i = 0; i < strlen(gnrmcString); i++) {
 80039be:	2300      	movs	r3, #0
 80039c0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80039c4:	e046      	b.n	8003a54 <main+0x2e4>
 80039c6:	bf00      	nop
 80039c8:	2000053c 	.word	0x2000053c
 80039cc:	2000054e 	.word	0x2000054e
 80039d0:	2000188c 	.word	0x2000188c
 80039d4:	20001690 	.word	0x20001690
 80039d8:	08015048 	.word	0x08015048
 80039dc:	20001890 	.word	0x20001890
 80039e0:	20000044 	.word	0x20000044
 80039e4:	200005d4 	.word	0x200005d4
 80039e8:	200016c0 	.word	0x200016c0
 80039ec:	20001634 	.word	0x20001634
 80039f0:	2000178c 	.word	0x2000178c
 80039f4:	0801504c 	.word	0x0801504c
 80039f8:	08014ffc 	.word	0x08014ffc
 80039fc:	20001699 	.word	0x20001699
 8003a00:	20001700 	.word	0x20001700
 8003a04:	08015090 	.word	0x08015090
 8003a08:	080150a0 	.word	0x080150a0
 8003a0c:	20002a44 	.word	0x20002a44
 8003a10:	200005f0 	.word	0x200005f0
 8003a14:	2000054d 	.word	0x2000054d
 8003a18:	20000554 	.word	0x20000554
 8003a1c:	20001658 	.word	0x20001658
 8003a20:	20000550 	.word	0x20000550
 8003a24:	20000000 	.word	0x20000000
			  if(gnrmcString[i] == '\r' || gnrmcString[i] == '\n') gnrmcString[i] = '\0';
 8003a28:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a2c:	4acc      	ldr	r2, [pc, #816]	; (8003d60 <main+0x5f0>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	2b0d      	cmp	r3, #13
 8003a32:	d005      	beq.n	8003a40 <main+0x2d0>
 8003a34:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a38:	4ac9      	ldr	r2, [pc, #804]	; (8003d60 <main+0x5f0>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	2b0a      	cmp	r3, #10
 8003a3e:	d104      	bne.n	8003a4a <main+0x2da>
 8003a40:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a44:	4ac6      	ldr	r2, [pc, #792]	; (8003d60 <main+0x5f0>)
 8003a46:	2100      	movs	r1, #0
 8003a48:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0; i < strlen(gnrmcString); i++) {
 8003a4a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003a4e:	3301      	adds	r3, #1
 8003a50:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8003a54:	f897 4065 	ldrb.w	r4, [r7, #101]	; 0x65
 8003a58:	48c1      	ldr	r0, [pc, #772]	; (8003d60 <main+0x5f0>)
 8003a5a:	f7fc fbb9 	bl	80001d0 <strlen>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	429c      	cmp	r4, r3
 8003a62:	d3e1      	bcc.n	8003a28 <main+0x2b8>
		  }
		  //

	  	  memset(GPSmessage, 0, GPSmessageWidth);
 8003a64:	4bbf      	ldr	r3, [pc, #764]	; (8003d64 <main+0x5f4>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	48be      	ldr	r0, [pc, #760]	; (8003d68 <main+0x5f8>)
 8003a6e:	f00b fedf 	bl	800f830 <memset>
	  	  sprintf(GPSmessage, "%d,%s", startProgramTime, (char*)gnrmcString);
 8003a72:	4bbe      	ldr	r3, [pc, #760]	; (8003d6c <main+0x5fc>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4bba      	ldr	r3, [pc, #744]	; (8003d60 <main+0x5f0>)
 8003a78:	49bd      	ldr	r1, [pc, #756]	; (8003d70 <main+0x600>)
 8003a7a:	48bb      	ldr	r0, [pc, #748]	; (8003d68 <main+0x5f8>)
 8003a7c:	f00c fd60 	bl	8010540 <siprintf>
	  	  // calculate gps crc16
	  	  uint16_t crc = crc16(GPSmessage);
 8003a80:	48b9      	ldr	r0, [pc, #740]	; (8003d68 <main+0x5f8>)
 8003a82:	f7ff fd8d 	bl	80035a0 <crc16>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  	  //
	  	  GPSmessageWidth = sprintf(GPSmessage, "%s|%04X\r\n", (char*)GPSmessage, crc);
 8003a8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a90:	4ab5      	ldr	r2, [pc, #724]	; (8003d68 <main+0x5f8>)
 8003a92:	49b8      	ldr	r1, [pc, #736]	; (8003d74 <main+0x604>)
 8003a94:	48b4      	ldr	r0, [pc, #720]	; (8003d68 <main+0x5f8>)
 8003a96:	f00c fd53 	bl	8010540 <siprintf>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4bb1      	ldr	r3, [pc, #708]	; (8003d64 <main+0x5f4>)
 8003aa0:	701a      	strb	r2, [r3, #0]
	  	  writeToSD("Gps.txt", GPSmessage, GPSmessageWidth);
 8003aa2:	4bb0      	ldr	r3, [pc, #704]	; (8003d64 <main+0x5f4>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	49af      	ldr	r1, [pc, #700]	; (8003d68 <main+0x5f8>)
 8003aaa:	48b3      	ldr	r0, [pc, #716]	; (8003d78 <main+0x608>)
 8003aac:	f7ff fd38 	bl	8003520 <writeToSD>

	      validCounter += 1;
 8003ab0:	4bb2      	ldr	r3, [pc, #712]	; (8003d7c <main+0x60c>)
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	4bb0      	ldr	r3, [pc, #704]	; (8003d7c <main+0x60c>)
 8003aba:	801a      	strh	r2, [r3, #0]

	      memset(gpsRxBuffer, 0, 128);
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	2100      	movs	r1, #0
 8003ac0:	48af      	ldr	r0, [pc, #700]	; (8003d80 <main+0x610>)
 8003ac2:	f00b feb5 	bl	800f830 <memset>
	      gpsRxIndex = 0;
 8003ac6:	4baf      	ldr	r3, [pc, #700]	; (8003d84 <main+0x614>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
	      gpsRx = 0;
 8003acc:	4bae      	ldr	r3, [pc, #696]	; (8003d88 <main+0x618>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
	  }

	  ////HAL_RTC_GetTime(&hrtc, &RTC__Time, RTC_FORMAT_BIN);
	  ////HAL_RTC_GetDate(&hrtc, &RTC__Date, RTC_FORMAT_BIN);

	  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8003ad2:	4bae      	ldr	r3, [pc, #696]	; (8003d8c <main+0x61c>)
 8003ad4:	4aae      	ldr	r2, [pc, #696]	; (8003d90 <main+0x620>)
 8003ad6:	49af      	ldr	r1, [pc, #700]	; (8003d94 <main+0x624>)
 8003ad8:	48af      	ldr	r0, [pc, #700]	; (8003d98 <main+0x628>)
 8003ada:	f7ff f96b 	bl	8002db4 <bmp280_read_float>
	  relativeAltitude = altitude(pressure, true);
 8003ade:	4bac      	ldr	r3, [pc, #688]	; (8003d90 <main+0x620>)
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aea:	f7ff fcdd 	bl	80034a8 <altitude>
 8003aee:	eef0 7a40 	vmov.f32	s15, s0
 8003af2:	4baa      	ldr	r3, [pc, #680]	; (8003d9c <main+0x62c>)
 8003af4:	edc3 7a00 	vstr	s15, [r3]
	  absoluteAltitude = altitude(pressure, false);
 8003af8:	4ba5      	ldr	r3, [pc, #660]	; (8003d90 <main+0x620>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	2000      	movs	r0, #0
 8003b00:	eeb0 0a67 	vmov.f32	s0, s15
 8003b04:	f7ff fcd0 	bl	80034a8 <altitude>
 8003b08:	eef0 7a40 	vmov.f32	s15, s0
 8003b0c:	4ba4      	ldr	r3, [pc, #656]	; (8003da0 <main+0x630>)
 8003b0e:	edc3 7a00 	vstr	s15, [r3]

	  bmi160_get_sensor_data(BMI160_BOTH_ACCEL_AND_GYRO, &accel, &gyro, &bmi160);
 8003b12:	4ba4      	ldr	r3, [pc, #656]	; (8003da4 <main+0x634>)
 8003b14:	4aa4      	ldr	r2, [pc, #656]	; (8003da8 <main+0x638>)
 8003b16:	49a5      	ldr	r1, [pc, #660]	; (8003dac <main+0x63c>)
 8003b18:	2003      	movs	r0, #3
 8003b1a:	f7fd fd18 	bl	800154e <bmi160_get_sensor_data>
	  ax = accel.x / 32768.0F * 2.0F * 9.81F;
 8003b1e:	4ba3      	ldr	r3, [pc, #652]	; (8003dac <main+0x63c>)
 8003b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2c:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8003db0 <main+0x640>
 8003b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b34:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b38:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003db4 <main+0x644>
 8003b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b40:	4b9d      	ldr	r3, [pc, #628]	; (8003db8 <main+0x648>)
 8003b42:	edc3 7a00 	vstr	s15, [r3]
	  ay = accel.y / 32768.0F * 2.0F * 9.81F;
 8003b46:	4b99      	ldr	r3, [pc, #612]	; (8003dac <main+0x63c>)
 8003b48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b54:	eddf 6a96 	vldr	s13, [pc, #600]	; 8003db0 <main+0x640>
 8003b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b60:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003db4 <main+0x644>
 8003b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b68:	4b94      	ldr	r3, [pc, #592]	; (8003dbc <main+0x64c>)
 8003b6a:	edc3 7a00 	vstr	s15, [r3]
	  az = accel.z / 32768.0F * 2.0F * 9.81F;
 8003b6e:	4b8f      	ldr	r3, [pc, #572]	; (8003dac <main+0x63c>)
 8003b70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b74:	ee07 3a90 	vmov	s15, r3
 8003b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b7c:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8003db0 <main+0x640>
 8003b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b88:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8003db4 <main+0x644>
 8003b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b90:	4b8b      	ldr	r3, [pc, #556]	; (8003dc0 <main+0x650>)
 8003b92:	edc3 7a00 	vstr	s15, [r3]
	  gx = gyro.x / 32768.0F * 250.0F;
 8003b96:	4b84      	ldr	r3, [pc, #528]	; (8003da8 <main+0x638>)
 8003b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b9c:	ee07 3a90 	vmov	s15, r3
 8003ba0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ba4:	eddf 6a82 	vldr	s13, [pc, #520]	; 8003db0 <main+0x640>
 8003ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bac:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003dc4 <main+0x654>
 8003bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bb4:	4b84      	ldr	r3, [pc, #528]	; (8003dc8 <main+0x658>)
 8003bb6:	edc3 7a00 	vstr	s15, [r3]
	  gy = gyro.y / 32768.0F * 250.0F;
 8003bba:	4b7b      	ldr	r3, [pc, #492]	; (8003da8 <main+0x638>)
 8003bbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003bc0:	ee07 3a90 	vmov	s15, r3
 8003bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc8:	eddf 6a79 	vldr	s13, [pc, #484]	; 8003db0 <main+0x640>
 8003bcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bd0:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8003dc4 <main+0x654>
 8003bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bd8:	4b7c      	ldr	r3, [pc, #496]	; (8003dcc <main+0x65c>)
 8003bda:	edc3 7a00 	vstr	s15, [r3]
	  gz = gyro.z / 32768.0F * 250.0F;
 8003bde:	4b72      	ldr	r3, [pc, #456]	; (8003da8 <main+0x638>)
 8003be0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bec:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003db0 <main+0x640>
 8003bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bf4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003dc4 <main+0x654>
 8003bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfc:	4b74      	ldr	r3, [pc, #464]	; (8003dd0 <main+0x660>)
 8003bfe:	edc3 7a00 	vstr	s15, [r3]

	  pitch = atan2(ay, sqrt(ax*ax + az*az)) * (180.0F / 3.14F);
 8003c02:	4b6e      	ldr	r3, [pc, #440]	; (8003dbc <main+0x64c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc fc9e 	bl	8000548 <__aeabi_f2d>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	460d      	mov	r5, r1
 8003c10:	4b69      	ldr	r3, [pc, #420]	; (8003db8 <main+0x648>)
 8003c12:	ed93 7a00 	vldr	s14, [r3]
 8003c16:	4b68      	ldr	r3, [pc, #416]	; (8003db8 <main+0x648>)
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c20:	4b67      	ldr	r3, [pc, #412]	; (8003dc0 <main+0x650>)
 8003c22:	edd3 6a00 	vldr	s13, [r3]
 8003c26:	4b66      	ldr	r3, [pc, #408]	; (8003dc0 <main+0x650>)
 8003c28:	edd3 7a00 	vldr	s15, [r3]
 8003c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c34:	ee17 0a90 	vmov	r0, s15
 8003c38:	f7fc fc86 	bl	8000548 <__aeabi_f2d>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	ec43 2b10 	vmov	d0, r2, r3
 8003c44:	f010 fa22 	bl	801408c <sqrt>
 8003c48:	eeb0 7a40 	vmov.f32	s14, s0
 8003c4c:	eef0 7a60 	vmov.f32	s15, s1
 8003c50:	eeb0 1a47 	vmov.f32	s2, s14
 8003c54:	eef0 1a67 	vmov.f32	s3, s15
 8003c58:	ec45 4b10 	vmov	d0, r4, r5
 8003c5c:	f010 fa14 	bl	8014088 <atan2>
 8003c60:	ec51 0b10 	vmov	r0, r1, d0
 8003c64:	a33c      	add	r3, pc, #240	; (adr r3, 8003d58 <main+0x5e8>)
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f7fc fcc5 	bl	80005f8 <__aeabi_dmul>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	f7fc ffb7 	bl	8000be8 <__aeabi_d2f>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4a55      	ldr	r2, [pc, #340]	; (8003dd4 <main+0x664>)
 8003c7e:	6013      	str	r3, [r2, #0]
	  roll = atan2(-ax, sqrt(ay*ay + az*az)) * (180.0F / 3.14F);
 8003c80:	4b4d      	ldr	r3, [pc, #308]	; (8003db8 <main+0x648>)
 8003c82:	edd3 7a00 	vldr	s15, [r3]
 8003c86:	eef1 7a67 	vneg.f32	s15, s15
 8003c8a:	ee17 3a90 	vmov	r3, s15
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fc fc5a 	bl	8000548 <__aeabi_f2d>
 8003c94:	4604      	mov	r4, r0
 8003c96:	460d      	mov	r5, r1
 8003c98:	4b48      	ldr	r3, [pc, #288]	; (8003dbc <main+0x64c>)
 8003c9a:	ed93 7a00 	vldr	s14, [r3]
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <main+0x64c>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ca8:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <main+0x650>)
 8003caa:	edd3 6a00 	vldr	s13, [r3]
 8003cae:	4b44      	ldr	r3, [pc, #272]	; (8003dc0 <main+0x650>)
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbc:	ee17 0a90 	vmov	r0, s15
 8003cc0:	f7fc fc42 	bl	8000548 <__aeabi_f2d>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	ec43 2b10 	vmov	d0, r2, r3
 8003ccc:	f010 f9de 	bl	801408c <sqrt>
 8003cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8003cd4:	eef0 7a60 	vmov.f32	s15, s1
 8003cd8:	eeb0 1a47 	vmov.f32	s2, s14
 8003cdc:	eef0 1a67 	vmov.f32	s3, s15
 8003ce0:	ec45 4b10 	vmov	d0, r4, r5
 8003ce4:	f010 f9d0 	bl	8014088 <atan2>
 8003ce8:	ec51 0b10 	vmov	r0, r1, d0
 8003cec:	a31a      	add	r3, pc, #104	; (adr r3, 8003d58 <main+0x5e8>)
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	f7fc fc81 	bl	80005f8 <__aeabi_dmul>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f7fc ff73 	bl	8000be8 <__aeabi_d2f>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4a34      	ldr	r2, [pc, #208]	; (8003dd8 <main+0x668>)
 8003d06:	6013      	str	r3, [r2, #0]
	  yaw = gz;
 8003d08:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <main+0x660>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <main+0x66c>)
 8003d0e:	6013      	str	r3, [r2, #0]

	  HAL_ADC_Start(&hadc2);
 8003d10:	4833      	ldr	r0, [pc, #204]	; (8003de0 <main+0x670>)
 8003d12:	f001 faf1 	bl	80052f8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 250);
 8003d16:	21fa      	movs	r1, #250	; 0xfa
 8003d18:	4831      	ldr	r0, [pc, #196]	; (8003de0 <main+0x670>)
 8003d1a:	f001 fbf2 	bl	8005502 <HAL_ADC_PollForConversion>
	  photoResistorValue = HAL_ADC_GetValue(&hadc2);
 8003d1e:	4830      	ldr	r0, [pc, #192]	; (8003de0 <main+0x670>)
 8003d20:	f001 fc7a 	bl	8005618 <HAL_ADC_GetValue>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <main+0x674>)
 8003d28:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc2);
 8003d2a:	482d      	ldr	r0, [pc, #180]	; (8003de0 <main+0x670>)
 8003d2c:	f001 fbb6 	bl	800549c <HAL_ADC_Stop>
	  if(photoResistorValue >= photoResistorThreshold) {
 8003d30:	4b2c      	ldr	r3, [pc, #176]	; (8003de4 <main+0x674>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <main+0x678>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d307      	bcc.n	8003d4c <main+0x5dc>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	482a      	ldr	r0, [pc, #168]	; (8003dec <main+0x67c>)
 8003d42:	f002 fa73 	bl	800622c <HAL_GPIO_WritePin>

		  // allow echo-repeater
		  echoAllowed = true;
 8003d46:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <main+0x680>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
	  }

	  // sd
	  memset(SDmessage, 0, SDmessageWidth);
 8003d4c:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <main+0x684>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	2100      	movs	r1, #0
 8003d54:	e050      	b.n	8003df8 <main+0x688>
 8003d56:	bf00      	nop
 8003d58:	60000000 	.word	0x60000000
 8003d5c:	404ca994 	.word	0x404ca994
 8003d60:	20000000 	.word	0x20000000
 8003d64:	20001699 	.word	0x20001699
 8003d68:	20001700 	.word	0x20001700
 8003d6c:	200005f0 	.word	0x200005f0
 8003d70:	080150a8 	.word	0x080150a8
 8003d74:	080150b0 	.word	0x080150b0
 8003d78:	080150a0 	.word	0x080150a0
 8003d7c:	20001784 	.word	0x20001784
 8003d80:	20000554 	.word	0x20000554
 8003d84:	2000054d 	.word	0x2000054d
 8003d88:	200016f4 	.word	0x200016f4
 8003d8c:	20001630 	.word	0x20001630
 8003d90:	200005f8 	.word	0x200005f8
 8003d94:	200005ec 	.word	0x200005ec
 8003d98:	200016c0 	.word	0x200016c0
 8003d9c:	2000168c 	.word	0x2000168c
 8003da0:	200005f4 	.word	0x200005f4
 8003da4:	20001660 	.word	0x20001660
 8003da8:	20001638 	.word	0x20001638
 8003dac:	200005d8 	.word	0x200005d8
 8003db0:	47000000 	.word	0x47000000
 8003db4:	411cf5c3 	.word	0x411cf5c3
 8003db8:	2000162c 	.word	0x2000162c
 8003dbc:	20001788 	.word	0x20001788
 8003dc0:	200005e8 	.word	0x200005e8
 8003dc4:	437a0000 	.word	0x437a0000
 8003dc8:	20001780 	.word	0x20001780
 8003dcc:	200005e4 	.word	0x200005e4
 8003dd0:	20001694 	.word	0x20001694
 8003dd4:	200016f8 	.word	0x200016f8
 8003dd8:	200016fc 	.word	0x200016fc
 8003ddc:	200016b8 	.word	0x200016b8
 8003de0:	200004a0 	.word	0x200004a0
 8003de4:	2000024c 	.word	0x2000024c
 8003de8:	20000040 	.word	0x20000040
 8003dec:	40020800 	.word	0x40020800
 8003df0:	20000250 	.word	0x20000250
 8003df4:	20001634 	.word	0x20001634
 8003df8:	48a7      	ldr	r0, [pc, #668]	; (8004098 <main+0x928>)
 8003dfa:	f00b fd19 	bl	800f830 <memset>
	  sprintf(SDmessage,
 8003dfe:	4ba7      	ldr	r3, [pc, #668]	; (800409c <main+0x92c>)
 8003e00:	681e      	ldr	r6, [r3, #0]
 8003e02:	4ba7      	ldr	r3, [pc, #668]	; (80040a0 <main+0x930>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc fb9e 	bl	8000548 <__aeabi_f2d>
 8003e0c:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8003e10:	4ba4      	ldr	r3, [pc, #656]	; (80040a4 <main+0x934>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7fc fb97 	bl	8000548 <__aeabi_f2d>
 8003e1a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8003e1e:	4ba2      	ldr	r3, [pc, #648]	; (80040a8 <main+0x938>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fb90 	bl	8000548 <__aeabi_f2d>
 8003e28:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8003e2c:	4b9f      	ldr	r3, [pc, #636]	; (80040ac <main+0x93c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fc fb89 	bl	8000548 <__aeabi_f2d>
 8003e36:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8003e3a:	4b9d      	ldr	r3, [pc, #628]	; (80040b0 <main+0x940>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc fb82 	bl	8000548 <__aeabi_f2d>
 8003e44:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8003e48:	4b9a      	ldr	r3, [pc, #616]	; (80040b4 <main+0x944>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fb7b 	bl	8000548 <__aeabi_f2d>
 8003e52:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003e56:	4b98      	ldr	r3, [pc, #608]	; (80040b8 <main+0x948>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fc fb74 	bl	8000548 <__aeabi_f2d>
 8003e60:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003e64:	4b95      	ldr	r3, [pc, #596]	; (80040bc <main+0x94c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fc fb6d 	bl	8000548 <__aeabi_f2d>
 8003e6e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003e72:	4b93      	ldr	r3, [pc, #588]	; (80040c0 <main+0x950>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fb66 	bl	8000548 <__aeabi_f2d>
 8003e7c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003e80:	4b90      	ldr	r3, [pc, #576]	; (80040c4 <main+0x954>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fb5f 	bl	8000548 <__aeabi_f2d>
 8003e8a:	e9c7 0100 	strd	r0, r1, [r7]
 8003e8e:	4b8e      	ldr	r3, [pc, #568]	; (80040c8 <main+0x958>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb58 	bl	8000548 <__aeabi_f2d>
 8003e98:	4682      	mov	sl, r0
 8003e9a:	468b      	mov	fp, r1
 8003e9c:	4b8b      	ldr	r3, [pc, #556]	; (80040cc <main+0x95c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7fc fb51 	bl	8000548 <__aeabi_f2d>
 8003ea6:	4680      	mov	r8, r0
 8003ea8:	4689      	mov	r9, r1
 8003eaa:	4b89      	ldr	r3, [pc, #548]	; (80040d0 <main+0x960>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fc fb4a 	bl	8000548 <__aeabi_f2d>
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	460d      	mov	r5, r1
 8003eb8:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <main+0x964>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fc fb43 	bl	8000548 <__aeabi_f2d>
 8003ec2:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <main+0x968>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	931c      	str	r3, [sp, #112]	; 0x70
 8003ec8:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8003ecc:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8003ed0:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8003ed4:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8003ed8:	ed97 7b00 	vldr	d7, [r7]
 8003edc:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8003ee0:	ed97 7b02 	vldr	d7, [r7, #8]
 8003ee4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003ee8:	ed97 7b04 	vldr	d7, [r7, #16]
 8003eec:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003ef0:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ef4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003ef8:	ed97 7b08 	vldr	d7, [r7, #32]
 8003efc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003f00:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003f04:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f08:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003f0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003f10:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8003f14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f18:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8003f1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003f20:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8003f24:	ed8d 7b00 	vstr	d7, [sp]
 8003f28:	4632      	mov	r2, r6
 8003f2a:	496c      	ldr	r1, [pc, #432]	; (80040dc <main+0x96c>)
 8003f2c:	485a      	ldr	r0, [pc, #360]	; (8004098 <main+0x928>)
 8003f2e:	f00c fb07 	bl	8010540 <siprintf>
	      "%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.1f,%.1f,%.2f,%.2f,%.2f,%.1f,%.1f,%.1f,%d",
		  startProgramTime, ax, ay, az, gx, gy, gz, pressure, humidity, temperature, absoluteAltitude, relativeAltitude, pitch, roll, yaw, photoResistorValue
	  );
	  // calculate crc16
	  uint16_t crc = crc16(SDmessage);
 8003f32:	4859      	ldr	r0, [pc, #356]	; (8004098 <main+0x928>)
 8003f34:	f7ff fb34 	bl	80035a0 <crc16>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	  //
	  SDmessageWidth = sprintf(SDmessage, "%s|%04X\r\n", (char*)SDmessage, crc);
 8003f3e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003f42:	4a55      	ldr	r2, [pc, #340]	; (8004098 <main+0x928>)
 8003f44:	4966      	ldr	r1, [pc, #408]	; (80040e0 <main+0x970>)
 8003f46:	4854      	ldr	r0, [pc, #336]	; (8004098 <main+0x928>)
 8003f48:	f00c fafa 	bl	8010540 <siprintf>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b64      	ldr	r3, [pc, #400]	; (80040e4 <main+0x974>)
 8003f52:	701a      	strb	r2, [r3, #0]
	  writeToSD("Data.txt", SDmessage, SDmessageWidth);
 8003f54:	4b63      	ldr	r3, [pc, #396]	; (80040e4 <main+0x974>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	494f      	ldr	r1, [pc, #316]	; (8004098 <main+0x928>)
 8003f5c:	4862      	ldr	r0, [pc, #392]	; (80040e8 <main+0x978>)
 8003f5e:	f7ff fadf 	bl	8003520 <writeToSD>

	  /*** ** LoRa ** ***/
	  memset(LoRaMessage, 0, LoRaMessageWidth);
 8003f62:	4b62      	ldr	r3, [pc, #392]	; (80040ec <main+0x97c>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4861      	ldr	r0, [pc, #388]	; (80040f0 <main+0x980>)
 8003f6c:	f00b fc60 	bl	800f830 <memset>
	  // T+,Ax,y,z,Gx,y,z,Pres,Temp,AltiRel,Light,**GPS_STRING**
	  sprintf(LoRaMessage, "%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.1f,%.2f,%.2f,%d",
 8003f70:	4b4a      	ldr	r3, [pc, #296]	; (800409c <main+0x92c>)
 8003f72:	681e      	ldr	r6, [r3, #0]
 8003f74:	4b4a      	ldr	r3, [pc, #296]	; (80040a0 <main+0x930>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc fae5 	bl	8000548 <__aeabi_f2d>
 8003f7e:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8003f82:	4b48      	ldr	r3, [pc, #288]	; (80040a4 <main+0x934>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fade 	bl	8000548 <__aeabi_f2d>
 8003f8c:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8003f90:	4b45      	ldr	r3, [pc, #276]	; (80040a8 <main+0x938>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fc fad7 	bl	8000548 <__aeabi_f2d>
 8003f9a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8003f9e:	4b43      	ldr	r3, [pc, #268]	; (80040ac <main+0x93c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc fad0 	bl	8000548 <__aeabi_f2d>
 8003fa8:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8003fac:	4b40      	ldr	r3, [pc, #256]	; (80040b0 <main+0x940>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fac9 	bl	8000548 <__aeabi_f2d>
 8003fb6:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8003fba:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <main+0x944>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fac2 	bl	8000548 <__aeabi_f2d>
 8003fc4:	4682      	mov	sl, r0
 8003fc6:	468b      	mov	fp, r1
 8003fc8:	4b3b      	ldr	r3, [pc, #236]	; (80040b8 <main+0x948>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fabb 	bl	8000548 <__aeabi_f2d>
 8003fd2:	4680      	mov	r8, r0
 8003fd4:	4689      	mov	r9, r1
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <main+0x950>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fab4 	bl	8000548 <__aeabi_f2d>
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	460d      	mov	r5, r1
 8003fe4:	4b38      	ldr	r3, [pc, #224]	; (80040c8 <main+0x958>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc faad 	bl	8000548 <__aeabi_f2d>
 8003fee:	4b3a      	ldr	r3, [pc, #232]	; (80040d8 <main+0x968>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	9312      	str	r3, [sp, #72]	; 0x48
 8003ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ff8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003ffc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004000:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004004:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004008:	ed8d 7b08 	vstr	d7, [sp, #32]
 800400c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004010:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004014:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004018:	ed8d 7b04 	vstr	d7, [sp, #16]
 800401c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004020:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004024:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8004028:	ed8d 7b00 	vstr	d7, [sp]
 800402c:	4632      	mov	r2, r6
 800402e:	4931      	ldr	r1, [pc, #196]	; (80040f4 <main+0x984>)
 8004030:	482f      	ldr	r0, [pc, #188]	; (80040f0 <main+0x980>)
 8004032:	f00c fa85 	bl	8010540 <siprintf>
	      startProgramTime, ax, ay, az, gx, gy, gz, pressure, temperature, relativeAltitude, photoResistorValue
	  );
	  // calculate crc16
	  uint16_t crcLoRa = crc16(LoRaMessage);
 8004036:	482e      	ldr	r0, [pc, #184]	; (80040f0 <main+0x980>)
 8004038:	f7ff fab2 	bl	80035a0 <crc16>
 800403c:	4603      	mov	r3, r0
 800403e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  //
	  LoRaMessageWidth = sprintf(LoRaMessage, "%s|%04X.%s\r\n", (char*)LoRaMessage, crcLoRa, (char*)gnrmcString);
 8004042:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004046:	4a2c      	ldr	r2, [pc, #176]	; (80040f8 <main+0x988>)
 8004048:	9200      	str	r2, [sp, #0]
 800404a:	4a29      	ldr	r2, [pc, #164]	; (80040f0 <main+0x980>)
 800404c:	492b      	ldr	r1, [pc, #172]	; (80040fc <main+0x98c>)
 800404e:	4828      	ldr	r0, [pc, #160]	; (80040f0 <main+0x980>)
 8004050:	f00c fa76 	bl	8010540 <siprintf>
 8004054:	4603      	mov	r3, r0
 8004056:	b2da      	uxtb	r2, r3
 8004058:	4b24      	ldr	r3, [pc, #144]	; (80040ec <main+0x97c>)
 800405a:	701a      	strb	r2, [r3, #0]
	  lora__send_STATUS = lora_send_packet_blocking(&lora, LoRaMessage, LoRaMessageWidth, 250);
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <main+0x97c>)
 800405e:	781a      	ldrb	r2, [r3, #0]
 8004060:	23fa      	movs	r3, #250	; 0xfa
 8004062:	4923      	ldr	r1, [pc, #140]	; (80040f0 <main+0x980>)
 8004064:	4826      	ldr	r0, [pc, #152]	; (8004100 <main+0x990>)
 8004066:	f000 fde1 	bl	8004c2c <lora_send_packet_blocking>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	4b25      	ldr	r3, [pc, #148]	; (8004104 <main+0x994>)
 8004070:	701a      	strb	r2, [r3, #0]
	  memset(gnrmcString, 0, 64);
 8004072:	2240      	movs	r2, #64	; 0x40
 8004074:	2100      	movs	r1, #0
 8004076:	4820      	ldr	r0, [pc, #128]	; (80040f8 <main+0x988>)
 8004078:	f00b fbda 	bl	800f830 <memset>
	  /*** ** ==== ** ***/

	  // start Echo repeater
	  if(markCountDelayTime == true && markProcessDelayTime == true) {
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <main+0x998>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d051      	beq.n	8004128 <main+0x9b8>
 8004084:	4b21      	ldr	r3, [pc, #132]	; (800410c <main+0x99c>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d04d      	beq.n	8004128 <main+0x9b8>
		  if(echoRepeaterStartTime == 0) {
 800408c:	4b20      	ldr	r3, [pc, #128]	; (8004110 <main+0x9a0>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d149      	bne.n	8004128 <main+0x9b8>
 8004094:	e03e      	b.n	8004114 <main+0x9a4>
 8004096:	bf00      	nop
 8004098:	2000178c 	.word	0x2000178c
 800409c:	200005f0 	.word	0x200005f0
 80040a0:	2000162c 	.word	0x2000162c
 80040a4:	20001788 	.word	0x20001788
 80040a8:	200005e8 	.word	0x200005e8
 80040ac:	20001780 	.word	0x20001780
 80040b0:	200005e4 	.word	0x200005e4
 80040b4:	20001694 	.word	0x20001694
 80040b8:	200005f8 	.word	0x200005f8
 80040bc:	20001630 	.word	0x20001630
 80040c0:	200005ec 	.word	0x200005ec
 80040c4:	200005f4 	.word	0x200005f4
 80040c8:	2000168c 	.word	0x2000168c
 80040cc:	200016f8 	.word	0x200016f8
 80040d0:	200016fc 	.word	0x200016fc
 80040d4:	200016b8 	.word	0x200016b8
 80040d8:	2000024c 	.word	0x2000024c
 80040dc:	080150bc 	.word	0x080150bc
 80040e0:	080150b0 	.word	0x080150b0
 80040e4:	20001634 	.word	0x20001634
 80040e8:	08014ffc 	.word	0x08014ffc
 80040ec:	20001698 	.word	0x20001698
 80040f0:	200028c8 	.word	0x200028c8
 80040f4:	08015108 	.word	0x08015108
 80040f8:	20000000 	.word	0x20000000
 80040fc:	0801513c 	.word	0x0801513c
 8004100:	2000169c 	.word	0x2000169c
 8004104:	2000054c 	.word	0x2000054c
 8004108:	2000025c 	.word	0x2000025c
 800410c:	2000025d 	.word	0x2000025d
 8004110:	20000258 	.word	0x20000258
			  startPostEchoDelayTime();
 8004114:	f7ff f8a6 	bl	8003264 <startPostEchoDelayTime>

			  echoRepeaterStartTime = HAL_GetTick();
 8004118:	f001 f87a 	bl	8005210 <HAL_GetTick>
 800411c:	4603      	mov	r3, r0
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <main+0xa28>)
 8004120:	6013      	str	r3, [r2, #0]

			  markCountDelayTime = false;
 8004122:	4b1e      	ldr	r3, [pc, #120]	; (800419c <main+0xa2c>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(markProcessDelayTime == true) {
 8004128:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <main+0xa30>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d012      	beq.n	8004156 <main+0x9e6>
		  if(HAL_GetTick() - echoRepeaterStartTime >= echoRepeaterDelayTime * 2) {
 8004130:	f001 f86e 	bl	8005210 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	4b18      	ldr	r3, [pc, #96]	; (8004198 <main+0xa28>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <main+0xa34>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	429a      	cmp	r2, r3
 8004144:	d307      	bcc.n	8004156 <main+0x9e6>
			  endEchoDelayTime();
 8004146:	f7ff f8bd 	bl	80032c4 <endEchoDelayTime>

			  echoRepeaterStartTime = 0;
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <main+0xa28>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

			  markProcessDelayTime = false;
 8004150:	4b13      	ldr	r3, [pc, #76]	; (80041a0 <main+0xa30>)
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  if(markCountDelayTime == true) {
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <main+0xa2c>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d008      	beq.n	8004170 <main+0xa00>
		  increaseEchoDelayTime( HAL_GetTick() - startProgramTime );
 800415e:	f001 f857 	bl	8005210 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <main+0xa38>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff f836 	bl	80031dc <increaseEchoDelayTime>
		  // repeatable event while mark is true
	  }
	  // end Echo repeater

	  //// ==== ////
	  uint32_t loopTime = HAL_GetTick() - startProgramTime;
 8004170:	f001 f84e 	bl	8005210 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <main+0xa38>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	657b      	str	r3, [r7, #84]	; 0x54
	  if(loopTime < 250) HAL_Delay(250 - 1 - loopTime);
 800417e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004180:	2bf9      	cmp	r3, #249	; 0xf9
 8004182:	f63f ab68 	bhi.w	8003856 <main+0xe6>
 8004186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004188:	f1c3 03f9 	rsb	r3, r3, #249	; 0xf9
 800418c:	4618      	mov	r0, r3
 800418e:	f001 f84b 	bl	8005228 <HAL_Delay>
  {
 8004192:	f7ff bb60 	b.w	8003856 <main+0xe6>
 8004196:	bf00      	nop
 8004198:	20000258 	.word	0x20000258
 800419c:	2000025c 	.word	0x2000025c
 80041a0:	2000025d 	.word	0x2000025d
 80041a4:	20000254 	.word	0x20000254
 80041a8:	200005f0 	.word	0x200005f0

080041ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b098      	sub	sp, #96	; 0x60
 80041b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041b6:	2230      	movs	r2, #48	; 0x30
 80041b8:	2100      	movs	r1, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f00b fb38 	bl	800f830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041c0:	f107 031c 	add.w	r3, r7, #28
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	605a      	str	r2, [r3, #4]
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	60da      	str	r2, [r3, #12]
 80041ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041d0:	f107 030c 	add.w	r3, r7, #12
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <SystemClock_Config+0xfc>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a30      	ldr	r2, [pc, #192]	; (80042a8 <SystemClock_Config+0xfc>)
 80041e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <SystemClock_Config+0xfc>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	60bb      	str	r3, [r7, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041fa:	2300      	movs	r3, #0
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <SystemClock_Config+0x100>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2a      	ldr	r2, [pc, #168]	; (80042ac <SystemClock_Config+0x100>)
 8004204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	4b28      	ldr	r3, [pc, #160]	; (80042ac <SystemClock_Config+0x100>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004216:	230a      	movs	r3, #10
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800421a:	2301      	movs	r3, #1
 800421c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800421e:	2310      	movs	r3, #16
 8004220:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004222:	2301      	movs	r3, #1
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004226:	2302      	movs	r3, #2
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800422a:	2300      	movs	r3, #0
 800422c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800422e:	2310      	movs	r3, #16
 8004230:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8004232:	23c0      	movs	r3, #192	; 0xc0
 8004234:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004236:	2302      	movs	r3, #2
 8004238:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800423a:	2304      	movs	r3, #4
 800423c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800423e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004242:	4618      	mov	r0, r3
 8004244:	f003 f836 	bl	80072b4 <HAL_RCC_OscConfig>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800424e:	f000 f82f 	bl	80042b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004252:	230f      	movs	r3, #15
 8004254:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004256:	2302      	movs	r3, #2
 8004258:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800425a:	2300      	movs	r3, #0
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800425e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004264:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004268:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800426a:	f107 031c 	add.w	r3, r7, #28
 800426e:	2103      	movs	r1, #3
 8004270:	4618      	mov	r0, r3
 8004272:	f003 fa97 	bl	80077a4 <HAL_RCC_ClockConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800427c:	f000 f818 	bl	80042b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004280:	2302      	movs	r3, #2
 8004282:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004288:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800428a:	f107 030c 	add.w	r3, r7, #12
 800428e:	4618      	mov	r0, r3
 8004290:	f003 fc58 	bl	8007b44 <HAL_RCCEx_PeriphCLKConfig>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800429a:	f000 f809 	bl	80042b0 <Error_Handler>
  }
}
 800429e:	bf00      	nop
 80042a0:	3760      	adds	r7, #96	; 0x60
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000

080042b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80042b4:	b672      	cpsid	i
}
 80042b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042b8:	e7fe      	b.n	80042b8 <Error_Handler+0x8>
	...

080042bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80042d0:	2300      	movs	r3, #0
 80042d2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <MX_RTC_Init+0xac>)
 80042d6:	4a25      	ldr	r2, [pc, #148]	; (800436c <MX_RTC_Init+0xb0>)
 80042d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042da:	4b23      	ldr	r3, [pc, #140]	; (8004368 <MX_RTC_Init+0xac>)
 80042dc:	2200      	movs	r2, #0
 80042de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <MX_RTC_Init+0xac>)
 80042e2:	227f      	movs	r2, #127	; 0x7f
 80042e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <MX_RTC_Init+0xac>)
 80042e8:	22f9      	movs	r2, #249	; 0xf9
 80042ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042ec:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <MX_RTC_Init+0xac>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042f2:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <MX_RTC_Init+0xac>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042f8:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <MX_RTC_Init+0xac>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042fe:	481a      	ldr	r0, [pc, #104]	; (8004368 <MX_RTC_Init+0xac>)
 8004300:	f003 fd02 	bl	8007d08 <HAL_RTC_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800430a:	f7ff ffd1 	bl	80042b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 16;
 800430e:	2310      	movs	r3, #16
 8004310:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 44;
 8004312:	232c      	movs	r3, #44	; 0x2c
 8004314:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	2200      	movs	r2, #0
 8004326:	4619      	mov	r1, r3
 8004328:	480f      	ldr	r0, [pc, #60]	; (8004368 <MX_RTC_Init+0xac>)
 800432a:	f003 fd7e 	bl	8007e2a <HAL_RTC_SetTime>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004334:	f7ff ffbc 	bl	80042b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8004338:	2304      	movs	r3, #4
 800433a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800433c:	2307      	movs	r3, #7
 800433e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8004340:	2301      	movs	r3, #1
 8004342:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 21;
 8004344:	2315      	movs	r3, #21
 8004346:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004348:	463b      	mov	r3, r7
 800434a:	2200      	movs	r2, #0
 800434c:	4619      	mov	r1, r3
 800434e:	4806      	ldr	r0, [pc, #24]	; (8004368 <MX_RTC_Init+0xac>)
 8004350:	f003 fe28 	bl	8007fa4 <HAL_RTC_SetDate>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800435a:	f7ff ffa9 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800435e:	bf00      	nop
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20002948 	.word	0x20002948
 800436c:	40002800 	.word	0x40002800

08004370 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a05      	ldr	r2, [pc, #20]	; (8004394 <HAL_RTC_MspInit+0x24>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d102      	bne.n	8004388 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004382:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RTC_MspInit+0x28>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40002800 	.word	0x40002800
 8004398:	42470e3c 	.word	0x42470e3c

0800439c <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <MX_SDIO_SD_Init+0x38>)
 80043a2:	4a0d      	ldr	r2, [pc, #52]	; (80043d8 <MX_SDIO_SD_Init+0x3c>)
 80043a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <MX_SDIO_SD_Init+0x38>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <MX_SDIO_SD_Init+0x38>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <MX_SDIO_SD_Init+0x38>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <MX_SDIO_SD_Init+0x38>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <MX_SDIO_SD_Init+0x38>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 8;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <MX_SDIO_SD_Init+0x38>)
 80043c6:	2208      	movs	r2, #8
 80043c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	20002968 	.word	0x20002968
 80043d8:	40012c00 	.word	0x40012c00

080043dc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a31      	ldr	r2, [pc, #196]	; (80044c0 <HAL_SD_MspInit+0xe4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d15b      	bne.n	80044b6 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 8004408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800440c:	6453      	str	r3, [r2, #68]	; 0x44
 800440e:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b29      	ldr	r3, [pc, #164]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a28      	ldr	r2, [pc, #160]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 8004424:	f043 0304 	orr.w	r3, r3, #4
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	4b22      	ldr	r3, [pc, #136]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 8004440:	f043 0308 	orr.w	r3, r3, #8
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <HAL_SD_MspInit+0xe8>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004452:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004458:	2302      	movs	r3, #2
 800445a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800445c:	2301      	movs	r3, #1
 800445e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004460:	2303      	movs	r3, #3
 8004462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004464:	230c      	movs	r3, #12
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004468:	f107 0314 	add.w	r3, r7, #20
 800446c:	4619      	mov	r1, r3
 800446e:	4816      	ldr	r0, [pc, #88]	; (80044c8 <HAL_SD_MspInit+0xec>)
 8004470:	f001 fd28 	bl	8005ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004482:	2303      	movs	r3, #3
 8004484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004486:	230c      	movs	r3, #12
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	4619      	mov	r1, r3
 8004490:	480d      	ldr	r0, [pc, #52]	; (80044c8 <HAL_SD_MspInit+0xec>)
 8004492:	f001 fd17 	bl	8005ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004496:	2304      	movs	r3, #4
 8004498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449a:	2302      	movs	r3, #2
 800449c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800449e:	2301      	movs	r3, #1
 80044a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a2:	2303      	movs	r3, #3
 80044a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80044a6:	230c      	movs	r3, #12
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044aa:	f107 0314 	add.w	r3, r7, #20
 80044ae:	4619      	mov	r1, r3
 80044b0:	4806      	ldr	r0, [pc, #24]	; (80044cc <HAL_SD_MspInit+0xf0>)
 80044b2:	f001 fd07 	bl	8005ec4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80044b6:	bf00      	nop
 80044b8:	3728      	adds	r7, #40	; 0x28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40023800 	.word	0x40023800
 80044c8:	40020800 	.word	0x40020800
 80044cc:	40020c00 	.word	0x40020c00

080044d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80044d4:	4b17      	ldr	r3, [pc, #92]	; (8004534 <MX_SPI1_Init+0x64>)
 80044d6:	4a18      	ldr	r2, [pc, #96]	; (8004538 <MX_SPI1_Init+0x68>)
 80044d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <MX_SPI1_Init+0x64>)
 80044dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044e2:	4b14      	ldr	r3, [pc, #80]	; (8004534 <MX_SPI1_Init+0x64>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <MX_SPI1_Init+0x64>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <MX_SPI1_Init+0x64>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <MX_SPI1_Init+0x64>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044fa:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <MX_SPI1_Init+0x64>)
 80044fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004500:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <MX_SPI1_Init+0x64>)
 8004504:	2200      	movs	r2, #0
 8004506:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <MX_SPI1_Init+0x64>)
 800450a:	2200      	movs	r2, #0
 800450c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <MX_SPI1_Init+0x64>)
 8004510:	2200      	movs	r2, #0
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004514:	4b07      	ldr	r3, [pc, #28]	; (8004534 <MX_SPI1_Init+0x64>)
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <MX_SPI1_Init+0x64>)
 800451c:	220a      	movs	r2, #10
 800451e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004520:	4804      	ldr	r0, [pc, #16]	; (8004534 <MX_SPI1_Init+0x64>)
 8004522:	f004 ffe0 	bl	80094e6 <HAL_SPI_Init>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800452c:	f7ff fec0 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004530:	bf00      	nop
 8004532:	bd80      	pop	{r7, pc}
 8004534:	200029ec 	.word	0x200029ec
 8004538:	40013000 	.word	0x40013000

0800453c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <HAL_SPI_MspInit+0x84>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d12b      	bne.n	80045b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	4b18      	ldr	r3, [pc, #96]	; (80045c4 <HAL_SPI_MspInit+0x88>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <HAL_SPI_MspInit+0x88>)
 8004568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800456c:	6453      	str	r3, [r2, #68]	; 0x44
 800456e:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <HAL_SPI_MspInit+0x88>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_SPI_MspInit+0x88>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <HAL_SPI_MspInit+0x88>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6313      	str	r3, [r2, #48]	; 0x30
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <HAL_SPI_MspInit+0x88>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004596:	23e0      	movs	r3, #224	; 0xe0
 8004598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459a:	2302      	movs	r3, #2
 800459c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a2:	2303      	movs	r3, #3
 80045a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045a6:	2305      	movs	r3, #5
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045aa:	f107 0314 	add.w	r3, r7, #20
 80045ae:	4619      	mov	r1, r3
 80045b0:	4805      	ldr	r0, [pc, #20]	; (80045c8 <HAL_SPI_MspInit+0x8c>)
 80045b2:	f001 fc87 	bl	8005ec4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80045b6:	bf00      	nop
 80045b8:	3728      	adds	r7, #40	; 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40013000 	.word	0x40013000
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40020000 	.word	0x40020000

080045cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	607b      	str	r3, [r7, #4]
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_MspInit+0x4c>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <HAL_MspInit+0x4c>)
 80045dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045e0:	6453      	str	r3, [r2, #68]	; 0x44
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_MspInit+0x4c>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	2300      	movs	r3, #0
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_MspInit+0x4c>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <HAL_MspInit+0x4c>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6413      	str	r3, [r2, #64]	; 0x40
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_MspInit+0x4c>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800

0800461c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004620:	e7fe      	b.n	8004620 <NMI_Handler+0x4>

08004622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004626:	e7fe      	b.n	8004626 <HardFault_Handler+0x4>

08004628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800462c:	e7fe      	b.n	800462c <MemManage_Handler+0x4>

0800462e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004632:	e7fe      	b.n	8004632 <BusFault_Handler+0x4>

08004634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004638:	e7fe      	b.n	8004638 <UsageFault_Handler+0x4>

0800463a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800463a:	b480      	push	{r7}
 800463c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800463e:	bf00      	nop
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004668:	f000 fdbe 	bl	80051e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}

08004670 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004674:	2001      	movs	r0, #1
 8004676:	f001 fdf3 	bl	8006260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800467a:	bf00      	nop
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004686:	f005 feed 	bl	800a464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20002a44 	.word	0x20002a44

08004694 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <UART4_IRQHandler+0x10>)
 800469a:	f006 fb1f 	bl	800acdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20002a8c 	.word	0x20002a8c

080046a8 <read_register>:

// SPI helpers //

// Reads single register
/*static*/ uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6858      	ldr	r0, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	891b      	ldrh	r3, [r3, #8]
 80046ca:	2200      	movs	r2, #0
 80046cc:	4619      	mov	r1, r3
 80046ce:	f001 fdad 	bl	800622c <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	1cf9      	adds	r1, r7, #3
 80046dc:	2201      	movs	r2, #1
 80046de:	f004 ff8b 	bl	80095f8 <HAL_SPI_Transmit>
 80046e2:	4603      	mov	r3, r0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f107 010f 	add.w	r1, r7, #15
 80046f2:	2201      	movs	r2, #1
 80046f4:	f005 f8bc 	bl	8009870 <HAL_SPI_Receive>
 80046f8:	4603      	mov	r3, r0
 80046fa:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6858      	ldr	r0, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	891b      	ldrh	r3, [r3, #8]
 8004704:	2201      	movs	r2, #1
 8004706:	4619      	mov	r1, r3
 8004708:	f001 fd90 	bl	800622c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <write_register>:

// Writes single register
/*static*/ void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	460b      	mov	r3, r1
 8004720:	70fb      	strb	r3, [r7, #3]
 8004722:	4613      	mov	r3, r2
 8004724:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800472c:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 800472e:	78bb      	ldrb	r3, [r7, #2]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	b21a      	sxth	r2, r3
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	b21b      	sxth	r3, r3
 8004738:	4313      	orrs	r3, r2
 800473a:	b21b      	sxth	r3, r3
 800473c:	b29b      	uxth	r3, r3
 800473e:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6858      	ldr	r0, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	891b      	ldrh	r3, [r3, #8]
 8004748:	2200      	movs	r2, #0
 800474a:	4619      	mov	r1, r3
 800474c:	f001 fd6e 	bl	800622c <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f107 010a 	add.w	r1, r7, #10
 800475c:	2202      	movs	r2, #2
 800475e:	f004 ff4b 	bl	80095f8 <HAL_SPI_Transmit>
 8004762:	4603      	mov	r3, r0
 8004764:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6858      	ldr	r0, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	891b      	ldrh	r3, [r3, #8]
 800476e:	2201      	movs	r2, #1
 8004770:	4619      	mov	r1, r3
 8004772:	f001 fd5b 	bl	800622c <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b088      	sub	sp, #32
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	4611      	mov	r1, r2
 800478a:	461a      	mov	r2, r3
 800478c:	460b      	mov	r3, r1
 800478e:	71fb      	strb	r3, [r7, #7]
 8004790:	4613      	mov	r3, r2
 8004792:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6858      	ldr	r0, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	891b      	ldrh	r3, [r3, #8]
 80047a0:	2200      	movs	r2, #0
 80047a2:	4619      	mov	r1, r3
 80047a4:	f001 fd42 	bl	800622c <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6818      	ldr	r0, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f107 0117 	add.w	r1, r7, #23
 80047b4:	2201      	movs	r2, #1
 80047b6:	f004 ff1f 	bl	80095f8 <HAL_SPI_Transmit>
 80047ba:	4603      	mov	r3, r0
 80047bc:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 80047be:	79bb      	ldrb	r3, [r7, #6]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d108      	bne.n	80047d6 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	79fa      	ldrb	r2, [r7, #7]
 80047ca:	b292      	uxth	r2, r2
 80047cc:	68b9      	ldr	r1, [r7, #8]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f005 fb02 	bl	8009dd8 <HAL_SPI_Transmit_DMA>
 80047d4:	e012      	b.n	80047fc <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	f004 ff08 	bl	80095f8 <HAL_SPI_Transmit>
 80047e8:	4603      	mov	r3, r0
 80047ea:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6858      	ldr	r0, [r3, #4]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	891b      	ldrh	r3, [r3, #8]
 80047f4:	2201      	movs	r2, #1
 80047f6:	4619      	mov	r1, r3
 80047f8:	f001 fd18 	bl	800622c <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004814:	b2db      	uxtb	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	2101      	movs	r1, #1
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ff7b 	bl	8004716 <write_register>
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	2b2c      	cmp	r3, #44	; 0x2c
 8004838:	d801      	bhi.n	800483e <set_OCP+0x16>
    imax = 45;
 800483a:	232d      	movs	r3, #45	; 0x2d
 800483c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 800483e:	78fb      	ldrb	r3, [r7, #3]
 8004840:	2bf0      	cmp	r3, #240	; 0xf0
 8004842:	d901      	bls.n	8004848 <set_OCP+0x20>
    imax = 240;
 8004844:	23f0      	movs	r3, #240	; 0xf0
 8004846:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	2b81      	cmp	r3, #129	; 0x81
 800484c:	d809      	bhi.n	8004862 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	3b2d      	subs	r3, #45	; 0x2d
 8004852:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <set_OCP+0x68>)
 8004854:	fb82 1203 	smull	r1, r2, r2, r3
 8004858:	1052      	asrs	r2, r2, #1
 800485a:	17db      	asrs	r3, r3, #31
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	73fb      	strb	r3, [r7, #15]
 8004860:	e008      	b.n	8004874 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	331e      	adds	r3, #30
 8004866:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <set_OCP+0x68>)
 8004868:	fb82 1203 	smull	r1, r2, r2, r3
 800486c:	1092      	asrs	r2, r2, #2
 800486e:	17db      	asrs	r3, r3, #31
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	f043 0320 	orr.w	r3, r3, #32
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	210b      	movs	r1, #11
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff48 	bl	8004716 <write_register>
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	66666667 	.word	0x66666667

08004894 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 800489c:	211d      	movs	r1, #29
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff02 	bl	80046a8 <read_register>
 80048a4:	4603      	mov	r3, r0
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 80048b4:	211e      	movs	r1, #30
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fef6 	bl	80046a8 <read_register>
 80048bc:	4603      	mov	r3, r0
 80048be:	091b      	lsrs	r3, r3, #4
 80048c0:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 80048c2:	2304      	movs	r3, #4
 80048c4:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 80048c6:	7bfb      	ldrb	r3, [r7, #15]
 80048c8:	2b0a      	cmp	r3, #10
 80048ca:	d909      	bls.n	80048e0 <set_low_data_rate_optimization+0x4c>
 80048cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf08      	it	eq
 80048d4:	2a07      	cmpeq	r2, #7
 80048d6:	d103      	bne.n	80048e0 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 80048d8:	7ffb      	ldrb	r3, [r7, #31]
 80048da:	f043 0308 	orr.w	r3, r3, #8
 80048de:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
 80048e2:	461a      	mov	r2, r3
 80048e4:	2126      	movs	r1, #38	; 0x26
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ff15 	bl	8004716 <write_register>
}
 80048ec:	bf00      	nop
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 80048fc:	2100      	movs	r1, #0
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff ff7f 	bl	8004802 <set_mode>
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8004914:	2101      	movs	r1, #1
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff73 	bl	8004802 <set_mode>
}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 800492c:	211d      	movs	r1, #29
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff feba 	bl	80046a8 <read_register>
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	461a      	mov	r2, r3
 8004944:	211d      	movs	r1, #29
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff fee5 	bl	8004716 <write_register>
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10e      	bne.n	8004986 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	2b0f      	cmp	r3, #15
 800496c:	d901      	bls.n	8004972 <lora_set_tx_power+0x1e>
      level = 15;
 800496e:	230f      	movs	r3, #15
 8004970:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8004972:	78fb      	ldrb	r3, [r7, #3]
 8004974:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8004978:	b2db      	uxtb	r3, r3
 800497a:	461a      	mov	r2, r3
 800497c:	2109      	movs	r1, #9
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fec9 	bl	8004716 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8004984:	e02e      	b.n	80049e4 <lora_set_tx_power+0x90>
    if (level > 20) {
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	2b14      	cmp	r3, #20
 800498a:	d901      	bls.n	8004990 <lora_set_tx_power+0x3c>
      level = 20;
 800498c:	2314      	movs	r3, #20
 800498e:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d801      	bhi.n	800499a <lora_set_tx_power+0x46>
      level = 2;
 8004996:	2302      	movs	r3, #2
 8004998:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	2b11      	cmp	r3, #17
 800499e:	d90c      	bls.n	80049ba <lora_set_tx_power+0x66>
      level -= 3;
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	3b03      	subs	r3, #3
 80049a4:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 80049a6:	2287      	movs	r2, #135	; 0x87
 80049a8:	214d      	movs	r1, #77	; 0x4d
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7ff feb3 	bl	8004716 <write_register>
      set_OCP(lora, 140);
 80049b0:	218c      	movs	r1, #140	; 0x8c
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ff38 	bl	8004828 <set_OCP>
 80049b8:	e008      	b.n	80049cc <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 80049ba:	2284      	movs	r2, #132	; 0x84
 80049bc:	214d      	movs	r1, #77	; 0x4d
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fea9 	bl	8004716 <write_register>
      set_OCP(lora, 97);
 80049c4:	2161      	movs	r1, #97	; 0x61
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ff2e 	bl	8004828 <set_OCP>
    level -= 2;
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	3b02      	subs	r3, #2
 80049d0:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	2109      	movs	r1, #9
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe99 	bl	8004716 <write_register>
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 80049f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049fc:	f04f 0000 	mov.w	r0, #0
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	04d9      	lsls	r1, r3, #19
 8004a06:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8004a0a:	04d0      	lsls	r0, r2, #19
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <lora_set_frequency+0x88>)
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	f7fc f989 	bl	8000d28 <__aeabi_uldivmod>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8004a1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	0c02      	lsrs	r2, r0, #16
 8004a2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004a30:	0c0b      	lsrs	r3, r1, #16
 8004a32:	b2d3      	uxtb	r3, r2
 8004a34:	461a      	mov	r2, r3
 8004a36:	2106      	movs	r1, #6
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f7ff fe6c 	bl	8004716 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8004a3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	0a02      	lsrs	r2, r0, #8
 8004a4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004a50:	0a0b      	lsrs	r3, r1, #8
 8004a52:	b2d3      	uxtb	r3, r2
 8004a54:	461a      	mov	r2, r3
 8004a56:	2107      	movs	r1, #7
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fe5c 	bl	8004716 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8004a5e:	7c3b      	ldrb	r3, [r7, #16]
 8004a60:	461a      	mov	r2, r3
 8004a62:	2108      	movs	r1, #8
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff fe56 	bl	8004716 <write_register>
}
 8004a6a:	bf00      	nop
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	01e84800 	.word	0x01e84800

08004a78 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d802      	bhi.n	8004a90 <lora_set_spreading_factor+0x18>
    sf = 6;
 8004a8a:	2306      	movs	r3, #6
 8004a8c:	70fb      	strb	r3, [r7, #3]
 8004a8e:	e004      	b.n	8004a9a <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d901      	bls.n	8004a9a <lora_set_spreading_factor+0x22>
    sf = 12;
 8004a96:	230c      	movs	r3, #12
 8004a98:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	d10a      	bne.n	8004ab6 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8004aa0:	22c5      	movs	r2, #197	; 0xc5
 8004aa2:	2131      	movs	r1, #49	; 0x31
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff fe36 	bl	8004716 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8004aaa:	220c      	movs	r2, #12
 8004aac:	2137      	movs	r1, #55	; 0x37
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7ff fe31 	bl	8004716 <write_register>
 8004ab4:	e009      	b.n	8004aca <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8004ab6:	22c3      	movs	r2, #195	; 0xc3
 8004ab8:	2131      	movs	r1, #49	; 0x31
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fe2b 	bl	8004716 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8004ac0:	220a      	movs	r2, #10
 8004ac2:	2137      	movs	r1, #55	; 0x37
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fe26 	bl	8004716 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8004aca:	211e      	movs	r1, #30
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7ff fdeb 	bl	80046a8 <read_register>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  mc2 |= sf << 4;
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	b25a      	sxtb	r2, r3
 8004adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	211e      	movs	r1, #30
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f7ff fe12 	bl	8004716 <write_register>

  set_low_data_rate_optimization(lora);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fece 	bl	8004894 <set_low_data_rate_optimization>
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8004b0c:	887b      	ldrh	r3, [r7, #2]
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	2120      	movs	r1, #32
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7ff fdfc 	bl	8004716 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8004b1e:	887b      	ldrh	r3, [r7, #2]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	2121      	movs	r1, #33	; 0x21
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fdf2 	bl	8004716 <write_register>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8004b42:	2142      	movs	r1, #66	; 0x42
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fdaf 	bl	80046a8 <read_register>
 8004b4a:	4603      	mov	r3, r0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fda2 	bl	80046a8 <read_register>
 8004b64:	4603      	mov	r3, r0
 8004b66:	73fb      	strb	r3, [r7, #15]

  return opmode & (1 << OPMODE_TX) ? LORA_BUSY : LORA_OK;
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <lora_is_transmitting+0x22>
 8004b72:	2305      	movs	r3, #5
 8004b74:	e000      	b.n	8004b78 <lora_is_transmitting+0x24>
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	460b      	mov	r3, r1
 8004b90:	71fb      	strb	r3, [r7, #7]
 8004b92:	4613      	mov	r3, r2
 8004b94:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ffdc 	bl	8004b54 <lora_is_transmitting>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8004ba2:	2305      	movs	r3, #5
 8004ba4:	e02c      	b.n	8004c00 <lora_send_packet_base+0x80>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff fe2a 	bl	8004802 <set_mode>

  // Clear TX IRQ flag, to be sure
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8004bae:	2208      	movs	r2, #8
 8004bb0:	2112      	movs	r1, #18
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fdaf 	bl	8004716 <write_register>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	7e1b      	ldrb	r3, [r3, #24]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	210d      	movs	r1, #13
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f7ff fda8 	bl	8004716 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	7e1b      	ldrb	r3, [r3, #24]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	210e      	movs	r1, #14
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f7ff fda1 	bl	8004716 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8004bd4:	79fb      	ldrb	r3, [r7, #7]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2122      	movs	r1, #34	; 0x22
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f7ff fd9b 	bl	8004716 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8004be0:	79bb      	ldrb	r3, [r7, #6]
 8004be2:	79fa      	ldrb	r2, [r7, #7]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fdc9 	bl	800477e <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8004bec:	79bb      	ldrb	r3, [r7, #6]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <lora_send_packet_base+0x76>
    return LORA_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	e004      	b.n	8004c00 <lora_send_packet_base+0x80>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8004bf6:	2103      	movs	r1, #3
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f7ff fe02 	bl	8004802 <set_mode>
  return LORA_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8004c16:	79fa      	ldrb	r2, [r7, #7]
 8004c18:	2302      	movs	r3, #2
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f7ff ffaf 	bl	8004b80 <lora_send_packet_base>
 8004c22:	4603      	mov	r3, r0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <lora_send_packet_blocking>:
  // Send packet
  set_mode(lora, OPMODE_TX);
}

uint8_t lora_send_packet_blocking(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint32_t timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && data && data_len > 0 && timeout > 0);

  uint8_t res = lora_send_packet(lora, data, data_len);
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff ffe0 	bl	8004c08 <lora_send_packet>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	74fb      	strb	r3, [r7, #19]

  uint8_t state = 0x00;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	74bb      	strb	r3, [r7, #18]

  if (res == LORA_OK) {
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11e      	bne.n	8004c94 <lora_send_packet_blocking+0x68>
    // Wait until packet gets transmitted
    uint32_t elapsed = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
    while (elapsed < timeout) {
 8004c5a:	e017      	b.n	8004c8c <lora_send_packet_blocking+0x60>
      state = read_register(lora, REG_IRQ_FLAGS);
 8004c5c:	2112      	movs	r1, #18
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7ff fd22 	bl	80046a8 <read_register>
 8004c64:	4603      	mov	r3, r0
 8004c66:	74bb      	strb	r3, [r7, #18]
      if (state & IRQ_FLAGS_TX_DONE) {
 8004c68:	7cbb      	ldrb	r3, [r7, #18]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d006      	beq.n	8004c80 <lora_send_packet_blocking+0x54>
        // Packet sent
        write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8004c72:	2208      	movs	r2, #8
 8004c74:	2112      	movs	r1, #18
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7ff fd4d 	bl	8004716 <write_register>
        return LORA_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e00a      	b.n	8004c96 <lora_send_packet_blocking+0x6a>
      }
      HAL_Delay(1);
 8004c80:	2001      	movs	r0, #1
 8004c82:	f000 fad1 	bl	8005228 <HAL_Delay>
      elapsed++;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
    while (elapsed < timeout) {
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d3e3      	bcc.n	8004c5c <lora_send_packet_blocking+0x30>
    }
  }

  return LORA_TIMEOUT;
 8004c94:	2302      	movs	r3, #2
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <lora_init>:
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
 8004ca6:	60b9      	str	r1, [r7, #8]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	811a      	strh	r2, [r3, #8]
  lora->frequency = freq;
 8004cbe:	6a3a      	ldr	r2, [r7, #32]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	611a      	str	r2, [r3, #16]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	615a      	str	r2, [r3, #20]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	761a      	strb	r2, [r3, #24]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	765a      	strb	r2, [r3, #25]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cdc:	60da      	str	r2, [r3, #12]

  // Check version
  uint8_t ver = lora_version(lora);
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff ff2b 	bl	8004b3a <lora_version>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
 8004cea:	2b12      	cmp	r3, #18
 8004cec:	d001      	beq.n	8004cf2 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	e031      	b.n	8004d56 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7ff fdfe 	bl	80048f4 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff fdfb 	bl	80048f4 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8004cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fe72 	bl	80049ec <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8004d08:	2107      	movs	r1, #7
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff feb4 	bl	8004a78 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8004d10:	210a      	movs	r1, #10
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fef4 	bl	8004b00 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff fe03 	bl	8004924 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8004d1e:	210c      	movs	r1, #12
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff fcc1 	bl	80046a8 <read_register>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8004d2a:	7dbb      	ldrb	r3, [r7, #22]
 8004d2c:	f043 0303 	orr.w	r3, r3, #3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	210c      	movs	r1, #12
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f7ff fced 	bl	8004716 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	2126      	movs	r1, #38	; 0x26
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7ff fce8 	bl	8004716 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8004d46:	2111      	movs	r1, #17
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff fe03 	bl	8004954 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff fddc 	bl	800490c <lora_mode_standby>

  return LORA_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0
	return 1;
 8004d62:	2301      	movs	r3, #1
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <_kill>:

int _kill(int pid, int sig)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b082      	sub	sp, #8
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
 8004d76:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d78:	f00a fd30 	bl	800f7dc <__errno>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2216      	movs	r2, #22
 8004d80:	601a      	str	r2, [r3, #0]
	return -1;
 8004d82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <_exit>:

void _exit (int status)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d96:	f04f 31ff 	mov.w	r1, #4294967295
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff ffe7 	bl	8004d6e <_kill>
	while (1) {}		/* Make sure we hang here */
 8004da0:	e7fe      	b.n	8004da0 <_exit+0x12>

08004da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b086      	sub	sp, #24
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e00a      	b.n	8004dca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004db4:	f3af 8000 	nop.w
 8004db8:	4601      	mov	r1, r0
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	60ba      	str	r2, [r7, #8]
 8004dc0:	b2ca      	uxtb	r2, r1
 8004dc2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	dbf0      	blt.n	8004db4 <_read+0x12>
	}

return len;
 8004dd2:	687b      	ldr	r3, [r7, #4]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e009      	b.n	8004e02 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	60ba      	str	r2, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	dbf1      	blt.n	8004dee <_write+0x12>
	}
	return len;
 8004e0a:	687b      	ldr	r3, [r7, #4]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <_close>:

int _close(int file)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	return -1;
 8004e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e3c:	605a      	str	r2, [r3, #4]
	return 0;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <_isatty>:

int _isatty(int file)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
	return 1;
 8004e54:	2301      	movs	r3, #1
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
	return 0;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <_sbrk+0x5c>)
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <_sbrk+0x60>)
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <_sbrk+0x64>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <_sbrk+0x64>)
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <_sbrk+0x68>)
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <_sbrk+0x64>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d207      	bcs.n	8004ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004eac:	f00a fc96 	bl	800f7dc <__errno>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	220c      	movs	r2, #12
 8004eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	e009      	b.n	8004ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <_sbrk+0x64>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <_sbrk+0x64>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	4a05      	ldr	r2, [pc, #20]	; (8004ee0 <_sbrk+0x64>)
 8004ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3718      	adds	r7, #24
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20020000 	.word	0x20020000
 8004edc:	00000400 	.word	0x00000400
 8004ee0:	20000260 	.word	0x20000260
 8004ee4:	20004b58 	.word	0x20004b58

08004ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <SystemInit+0x20>)
 8004eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef2:	4a05      	ldr	r2, [pc, #20]	; (8004f08 <SystemInit+0x20>)
 8004ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000ed00 	.word	0xe000ed00

08004f0c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f12:	f107 0308 	add.w	r3, r7, #8
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f20:	463b      	mov	r3, r7
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f2a:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <MX_TIM1_Init+0x9c>)
 8004f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 8004f2e:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f30:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8004f34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f3e:	22f9      	movs	r2, #249	; 0xf9
 8004f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f42:	4b18      	ldr	r3, [pc, #96]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f48:	4b16      	ldr	r3, [pc, #88]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f4e:	4b15      	ldr	r3, [pc, #84]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f54:	4813      	ldr	r0, [pc, #76]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f56:	f005 f9c5 	bl	800a2e4 <HAL_TIM_Base_Init>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004f60:	f7ff f9a6 	bl	80042b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f6a:	f107 0308 	add.w	r3, r7, #8
 8004f6e:	4619      	mov	r1, r3
 8004f70:	480c      	ldr	r0, [pc, #48]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f72:	f005 fb7f 	bl	800a674 <HAL_TIM_ConfigClockSource>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004f7c:	f7ff f998 	bl	80042b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f80:	2300      	movs	r3, #0
 8004f82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f84:	2300      	movs	r3, #0
 8004f86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <MX_TIM1_Init+0x98>)
 8004f8e:	f005 fd97 	bl	800aac0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004f98:	f7ff f98a 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20002a44 	.word	0x20002a44
 8004fa8:	40010000 	.word	0x40010000

08004fac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a0e      	ldr	r2, [pc, #56]	; (8004ff4 <HAL_TIM_Base_MspInit+0x48>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d115      	bne.n	8004fea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <HAL_TIM_Base_MspInit+0x4c>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	4a0c      	ldr	r2, [pc, #48]	; (8004ff8 <HAL_TIM_Base_MspInit+0x4c>)
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_TIM_Base_MspInit+0x4c>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2019      	movs	r0, #25
 8004fe0:	f000 fe21 	bl	8005c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004fe4:	2019      	movs	r0, #25
 8004fe6:	f000 fe3a 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004fea:	bf00      	nop
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40023800 	.word	0x40023800

08004ffc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <MX_UART4_Init+0x4c>)
 8005002:	4a12      	ldr	r2, [pc, #72]	; (800504c <MX_UART4_Init+0x50>)
 8005004:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <MX_UART4_Init+0x4c>)
 8005008:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800500c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800500e:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <MX_UART4_Init+0x4c>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <MX_UART4_Init+0x4c>)
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <MX_UART4_Init+0x4c>)
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005020:	4b09      	ldr	r3, [pc, #36]	; (8005048 <MX_UART4_Init+0x4c>)
 8005022:	220c      	movs	r2, #12
 8005024:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <MX_UART4_Init+0x4c>)
 8005028:	2200      	movs	r2, #0
 800502a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <MX_UART4_Init+0x4c>)
 800502e:	2200      	movs	r2, #0
 8005030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005032:	4805      	ldr	r0, [pc, #20]	; (8005048 <MX_UART4_Init+0x4c>)
 8005034:	f005 fdd4 	bl	800abe0 <HAL_UART_Init>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800503e:	f7ff f937 	bl	80042b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20002a8c 	.word	0x20002a8c
 800504c:	40004c00 	.word	0x40004c00

08005050 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	60da      	str	r2, [r3, #12]
 8005066:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <HAL_UART_MspInit+0x94>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d133      	bne.n	80050da <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	4b1c      	ldr	r3, [pc, #112]	; (80050e8 <HAL_UART_MspInit+0x98>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <HAL_UART_MspInit+0x98>)
 800507c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
 8005082:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <HAL_UART_MspInit+0x98>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	4b15      	ldr	r3, [pc, #84]	; (80050e8 <HAL_UART_MspInit+0x98>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <HAL_UART_MspInit+0x98>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <HAL_UART_MspInit+0x98>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050aa:	2303      	movs	r3, #3
 80050ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ae:	2302      	movs	r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b6:	2303      	movs	r3, #3
 80050b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050ba:	2308      	movs	r3, #8
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050be:	f107 0314 	add.w	r3, r7, #20
 80050c2:	4619      	mov	r1, r3
 80050c4:	4809      	ldr	r0, [pc, #36]	; (80050ec <HAL_UART_MspInit+0x9c>)
 80050c6:	f000 fefd 	bl	8005ec4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80050ca:	2200      	movs	r2, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	2034      	movs	r0, #52	; 0x34
 80050d0:	f000 fda9 	bl	8005c26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80050d4:	2034      	movs	r0, #52	; 0x34
 80050d6:	f000 fdc2 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80050da:	bf00      	nop
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	40004c00 	.word	0x40004c00
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40020000 	.word	0x40020000

080050f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005128 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050f4:	480d      	ldr	r0, [pc, #52]	; (800512c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050f6:	490e      	ldr	r1, [pc, #56]	; (8005130 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050f8:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050fc:	e002      	b.n	8005104 <LoopCopyDataInit>

080050fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005102:	3304      	adds	r3, #4

08005104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005108:	d3f9      	bcc.n	80050fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800510a:	4a0b      	ldr	r2, [pc, #44]	; (8005138 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800510c:	4c0b      	ldr	r4, [pc, #44]	; (800513c <LoopFillZerobss+0x26>)
  movs r3, #0
 800510e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005110:	e001      	b.n	8005116 <LoopFillZerobss>

08005112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005114:	3204      	adds	r2, #4

08005116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005118:	d3fb      	bcc.n	8005112 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800511a:	f7ff fee5 	bl	8004ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800511e:	f00a fb63 	bl	800f7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005122:	f7fe fb25 	bl	8003770 <main>
  bx  lr    
 8005126:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800512c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005130:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8005134:	08015b58 	.word	0x08015b58
  ldr r2, =_sbss
 8005138:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800513c:	20004b54 	.word	0x20004b54

08005140 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005140:	e7fe      	b.n	8005140 <ADC_IRQHandler>
	...

08005144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <HAL_Init+0x40>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0d      	ldr	r2, [pc, #52]	; (8005184 <HAL_Init+0x40>)
 800514e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_Init+0x40>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <HAL_Init+0x40>)
 800515a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800515e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005160:	4b08      	ldr	r3, [pc, #32]	; (8005184 <HAL_Init+0x40>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a07      	ldr	r2, [pc, #28]	; (8005184 <HAL_Init+0x40>)
 8005166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800516a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800516c:	2003      	movs	r0, #3
 800516e:	f000 fd4f 	bl	8005c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005172:	2000      	movs	r0, #0
 8005174:	f000 f808 	bl	8005188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005178:	f7ff fa28 	bl	80045cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023c00 	.word	0x40023c00

08005188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005190:	4b12      	ldr	r3, [pc, #72]	; (80051dc <HAL_InitTick+0x54>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <HAL_InitTick+0x58>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	4619      	mov	r1, r3
 800519a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800519e:	fbb3 f3f1 	udiv	r3, r3, r1
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fd67 	bl	8005c7a <HAL_SYSTICK_Config>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e00e      	b.n	80051d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d80a      	bhi.n	80051d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051bc:	2200      	movs	r2, #0
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	f000 fd2f 	bl	8005c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051c8:	4a06      	ldr	r2, [pc, #24]	; (80051e4 <HAL_InitTick+0x5c>)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	2000004c 	.word	0x2000004c
 80051e0:	20000054 	.word	0x20000054
 80051e4:	20000050 	.word	0x20000050

080051e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_IncTick+0x20>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <HAL_IncTick+0x24>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	4a04      	ldr	r2, [pc, #16]	; (800520c <HAL_IncTick+0x24>)
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000054 	.word	0x20000054
 800520c:	20002ad0 	.word	0x20002ad0

08005210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return uwTick;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_GetTick+0x14>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20002ad0 	.word	0x20002ad0

08005228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005230:	f7ff ffee 	bl	8005210 <HAL_GetTick>
 8005234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d005      	beq.n	800524e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <HAL_Delay+0x44>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800524e:	bf00      	nop
 8005250:	f7ff ffde 	bl	8005210 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	429a      	cmp	r2, r3
 800525e:	d8f7      	bhi.n	8005250 <HAL_Delay+0x28>
  {
  }
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000054 	.word	0x20000054

08005270 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e033      	b.n	80052ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fb ff4e 	bl	8001130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 0310 	and.w	r3, r3, #16
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d118      	bne.n	80052e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052b6:	f023 0302 	bic.w	r3, r3, #2
 80052ba:	f043 0202 	orr.w	r2, r3, #2
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fad8 	bl	8005878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	f023 0303 	bic.w	r3, r3, #3
 80052d6:	f043 0201 	orr.w	r2, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
 80052de:	e001      	b.n	80052e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_ADC_Start+0x1a>
 800530e:	2302      	movs	r3, #2
 8005310:	e0b2      	b.n	8005478 <HAL_ADC_Start+0x180>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d018      	beq.n	800535a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005338:	4b52      	ldr	r3, [pc, #328]	; (8005484 <HAL_ADC_Start+0x18c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a52      	ldr	r2, [pc, #328]	; (8005488 <HAL_ADC_Start+0x190>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	0c9a      	lsrs	r2, r3, #18
 8005344:	4613      	mov	r3, r2
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800534c:	e002      	b.n	8005354 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	3b01      	subs	r3, #1
 8005352:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f9      	bne.n	800534e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d17a      	bne.n	800545e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005392:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	d106      	bne.n	80053b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ac:	f023 0206 	bic.w	r2, r3, #6
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	645a      	str	r2, [r3, #68]	; 0x44
 80053b4:	e002      	b.n	80053bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053c4:	4b31      	ldr	r3, [pc, #196]	; (800548c <HAL_ADC_Start+0x194>)
 80053c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d12a      	bne.n	8005434 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2b      	ldr	r2, [pc, #172]	; (8005490 <HAL_ADC_Start+0x198>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d015      	beq.n	8005414 <HAL_ADC_Start+0x11c>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a29      	ldr	r2, [pc, #164]	; (8005494 <HAL_ADC_Start+0x19c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d105      	bne.n	80053fe <HAL_ADC_Start+0x106>
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <HAL_ADC_Start+0x194>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 031f 	and.w	r3, r3, #31
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a25      	ldr	r2, [pc, #148]	; (8005498 <HAL_ADC_Start+0x1a0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d136      	bne.n	8005476 <HAL_ADC_Start+0x17e>
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_ADC_Start+0x194>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d130      	bne.n	8005476 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d129      	bne.n	8005476 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	e020      	b.n	8005476 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a15      	ldr	r2, [pc, #84]	; (8005490 <HAL_ADC_Start+0x198>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d11b      	bne.n	8005476 <HAL_ADC_Start+0x17e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d114      	bne.n	8005476 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800545a:	609a      	str	r2, [r3, #8]
 800545c:	e00b      	b.n	8005476 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	f043 0210 	orr.w	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	f043 0201 	orr.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	2000004c 	.word	0x2000004c
 8005488:	431bde83 	.word	0x431bde83
 800548c:	40012300 	.word	0x40012300
 8005490:	40012000 	.word	0x40012000
 8005494:	40012100 	.word	0x40012100
 8005498:	40012200 	.word	0x40012200

0800549c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_ADC_Stop+0x16>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e021      	b.n	80054f6 <HAL_ADC_Stop+0x5a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d109      	bne.n	80054ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	f043 0201 	orr.w	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800551e:	d113      	bne.n	8005548 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d10b      	bne.n	8005548 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	f043 0220 	orr.w	r2, r3, #32
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e063      	b.n	8005610 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005548:	f7ff fe62 	bl	8005210 <HAL_GetTick>
 800554c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800554e:	e021      	b.n	8005594 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d01d      	beq.n	8005594 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <HAL_ADC_PollForConversion+0x6c>
 800555e:	f7ff fe57 	bl	8005210 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d212      	bcs.n	8005594 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b02      	cmp	r3, #2
 800557a:	d00b      	beq.n	8005594 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	f043 0204 	orr.w	r2, r3, #4
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e03d      	b.n	8005610 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d1d6      	bne.n	8005550 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f06f 0212 	mvn.w	r2, #18
 80055aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d123      	bne.n	800560e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d11f      	bne.n	800560e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d111      	bne.n	800560e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d105      	bne.n	800560e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_ADC_ConfigChannel+0x1c>
 800564c:	2302      	movs	r3, #2
 800564e:	e105      	b.n	800585c <HAL_ADC_ConfigChannel+0x228>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b09      	cmp	r3, #9
 800565e:	d925      	bls.n	80056ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68d9      	ldr	r1, [r3, #12]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	b29b      	uxth	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	3b1e      	subs	r3, #30
 8005676:	2207      	movs	r2, #7
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	43da      	mvns	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	400a      	ands	r2, r1
 8005684:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68d9      	ldr	r1, [r3, #12]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	4618      	mov	r0, r3
 8005698:	4603      	mov	r3, r0
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4403      	add	r3, r0
 800569e:	3b1e      	subs	r3, #30
 80056a0:	409a      	lsls	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	e022      	b.n	80056f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6919      	ldr	r1, [r3, #16]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	4613      	mov	r3, r2
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	4413      	add	r3, r2
 80056c0:	2207      	movs	r2, #7
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43da      	mvns	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	400a      	ands	r2, r1
 80056ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6919      	ldr	r1, [r3, #16]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	4618      	mov	r0, r3
 80056e2:	4603      	mov	r3, r0
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	4403      	add	r3, r0
 80056e8:	409a      	lsls	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	d824      	bhi.n	8005744 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	3b05      	subs	r3, #5
 800570c:	221f      	movs	r2, #31
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43da      	mvns	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	400a      	ands	r2, r1
 800571a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	b29b      	uxth	r3, r3
 8005728:	4618      	mov	r0, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	3b05      	subs	r3, #5
 8005736:	fa00 f203 	lsl.w	r2, r0, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	635a      	str	r2, [r3, #52]	; 0x34
 8005742:	e04c      	b.n	80057de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b0c      	cmp	r3, #12
 800574a:	d824      	bhi.n	8005796 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	3b23      	subs	r3, #35	; 0x23
 800575e:	221f      	movs	r2, #31
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43da      	mvns	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	400a      	ands	r2, r1
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	4618      	mov	r0, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	3b23      	subs	r3, #35	; 0x23
 8005788:	fa00 f203 	lsl.w	r2, r0, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
 8005794:	e023      	b.n	80057de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	3b41      	subs	r3, #65	; 0x41
 80057a8:	221f      	movs	r2, #31
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43da      	mvns	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	400a      	ands	r2, r1
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	4618      	mov	r0, r3
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	3b41      	subs	r3, #65	; 0x41
 80057d2:	fa00 f203 	lsl.w	r2, r0, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_ADC_ConfigChannel+0x234>)
 80057e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a21      	ldr	r2, [pc, #132]	; (800586c <HAL_ADC_ConfigChannel+0x238>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d109      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x1cc>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b12      	cmp	r3, #18
 80057f2:	d105      	bne.n	8005800 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_ADC_ConfigChannel+0x238>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d123      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x21e>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b10      	cmp	r3, #16
 8005810:	d003      	beq.n	800581a <HAL_ADC_ConfigChannel+0x1e6>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b11      	cmp	r3, #17
 8005818:	d11b      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b10      	cmp	r3, #16
 800582c:	d111      	bne.n	8005852 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <HAL_ADC_ConfigChannel+0x23c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a10      	ldr	r2, [pc, #64]	; (8005874 <HAL_ADC_ConfigChannel+0x240>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	0c9a      	lsrs	r2, r3, #18
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005844:	e002      	b.n	800584c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	3b01      	subs	r3, #1
 800584a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f9      	bne.n	8005846 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012300 	.word	0x40012300
 800586c:	40012000 	.word	0x40012000
 8005870:	2000004c 	.word	0x2000004c
 8005874:	431bde83 	.word	0x431bde83

08005878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005880:	4b79      	ldr	r3, [pc, #484]	; (8005a68 <ADC_Init+0x1f0>)
 8005882:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	431a      	orrs	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6859      	ldr	r1, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	021a      	lsls	r2, r3, #8
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689a      	ldr	r2, [r3, #8]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <ADC_Init+0x1f4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d022      	beq.n	8005956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800591e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6899      	ldr	r1, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6899      	ldr	r1, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	430a      	orrs	r2, r1
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	e00f      	b.n	8005976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0202 	bic.w	r2, r2, #2
 8005984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6899      	ldr	r1, [r3, #8]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7e1b      	ldrb	r3, [r3, #24]
 8005990:	005a      	lsls	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6859      	ldr	r1, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	3b01      	subs	r3, #1
 80059d0:	035a      	lsls	r2, r3, #13
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	e007      	b.n	80059ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80059fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	051a      	lsls	r2, r3, #20
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6899      	ldr	r1, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a2e:	025a      	lsls	r2, r3, #9
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	6899      	ldr	r1, [r3, #8]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	029a      	lsls	r2, r3, #10
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	609a      	str	r2, [r3, #8]
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	40012300 	.word	0x40012300
 8005a6c:	0f000001 	.word	0x0f000001

08005a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a80:	4b0c      	ldr	r3, [pc, #48]	; (8005ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aa2:	4a04      	ldr	r2, [pc, #16]	; (8005ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	60d3      	str	r3, [r2, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	e000ed00 	.word	0xe000ed00

08005ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005abc:	4b04      	ldr	r3, [pc, #16]	; (8005ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	0a1b      	lsrs	r3, r3, #8
 8005ac2:	f003 0307 	and.w	r3, r3, #7
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	e000ed00 	.word	0xe000ed00

08005ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	db0b      	blt.n	8005afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	4907      	ldr	r1, [pc, #28]	; (8005b0c <__NVIC_EnableIRQ+0x38>)
 8005aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	2001      	movs	r0, #1
 8005af6:	fa00 f202 	lsl.w	r2, r0, r2
 8005afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	e000e100 	.word	0xe000e100

08005b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db0a      	blt.n	8005b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	490c      	ldr	r1, [pc, #48]	; (8005b5c <__NVIC_SetPriority+0x4c>)
 8005b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b2e:	0112      	lsls	r2, r2, #4
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	440b      	add	r3, r1
 8005b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b38:	e00a      	b.n	8005b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4908      	ldr	r1, [pc, #32]	; (8005b60 <__NVIC_SetPriority+0x50>)
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	3b04      	subs	r3, #4
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	761a      	strb	r2, [r3, #24]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000e100 	.word	0xe000e100
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	; 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f1c3 0307 	rsb	r3, r3, #7
 8005b7e:	2b04      	cmp	r3, #4
 8005b80:	bf28      	it	cs
 8005b82:	2304      	movcs	r3, #4
 8005b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	2b06      	cmp	r3, #6
 8005b8c:	d902      	bls.n	8005b94 <NVIC_EncodePriority+0x30>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3b03      	subs	r3, #3
 8005b92:	e000      	b.n	8005b96 <NVIC_EncodePriority+0x32>
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba2:	43da      	mvns	r2, r3
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bac:	f04f 31ff 	mov.w	r1, #4294967295
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb6:	43d9      	mvns	r1, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bbc:	4313      	orrs	r3, r2
         );
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3724      	adds	r7, #36	; 0x24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bdc:	d301      	bcc.n	8005be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bde:	2301      	movs	r3, #1
 8005be0:	e00f      	b.n	8005c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005be2:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <SysTick_Config+0x40>)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bea:	210f      	movs	r1, #15
 8005bec:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf0:	f7ff ff8e 	bl	8005b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <SysTick_Config+0x40>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bfa:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <SysTick_Config+0x40>)
 8005bfc:	2207      	movs	r2, #7
 8005bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	e000e010 	.word	0xe000e010

08005c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff ff29 	bl	8005a70 <__NVIC_SetPriorityGrouping>
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c38:	f7ff ff3e 	bl	8005ab8 <__NVIC_GetPriorityGrouping>
 8005c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	6978      	ldr	r0, [r7, #20]
 8005c44:	f7ff ff8e 	bl	8005b64 <NVIC_EncodePriority>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff ff5d 	bl	8005b10 <__NVIC_SetPriority>
}
 8005c56:	bf00      	nop
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	4603      	mov	r3, r0
 8005c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff ff31 	bl	8005ad4 <__NVIC_EnableIRQ>
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff ffa2 	bl	8005bcc <SysTick_Config>
 8005c88:	4603      	mov	r3, r0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_DMA_Start_IT+0x26>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e040      	b.n	8005d3a <HAL_DMA_Start_IT+0xa8>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d12f      	bne.n	8005d2c <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f8c0 	bl	8005e66 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cea:	223f      	movs	r2, #63	; 0x3f
 8005cec:	409a      	lsls	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0216 	orr.w	r2, r2, #22
 8005d00:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0208 	orr.w	r2, r2, #8
 8005d18:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	e005      	b.n	8005d38 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
 8005d36:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d50:	f7ff fa5e 	bl	8005210 <HAL_GetTick>
 8005d54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d008      	beq.n	8005d74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e052      	b.n	8005e1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0216 	bic.w	r2, r2, #22
 8005d82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d103      	bne.n	8005da4 <HAL_DMA_Abort+0x62>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0208 	bic.w	r2, r2, #8
 8005db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dc4:	e013      	b.n	8005dee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dc6:	f7ff fa23 	bl	8005210 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b05      	cmp	r3, #5
 8005dd2:	d90c      	bls.n	8005dee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2203      	movs	r2, #3
 8005de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e015      	b.n	8005e1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e4      	bne.n	8005dc6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	223f      	movs	r2, #63	; 0x3f
 8005e02:	409a      	lsls	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d004      	beq.n	8005e40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2280      	movs	r2, #128	; 0x80
 8005e3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e00c      	b.n	8005e5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2205      	movs	r2, #5
 8005e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0201 	bic.w	r2, r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e82:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d108      	bne.n	8005ea6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ea4:	e007      	b.n	8005eb6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	60da      	str	r2, [r3, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
	...

08005ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b089      	sub	sp, #36	; 0x24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
 8005ede:	e16b      	b.n	80061b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	f040 815a 	bne.w	80061b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d005      	beq.n	8005f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d130      	bne.n	8005f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	2203      	movs	r2, #3
 8005f22:	fa02 f303 	lsl.w	r3, r2, r3
 8005f26:	43db      	mvns	r3, r3
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 0201 	and.w	r2, r3, #1
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d017      	beq.n	8005fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	2203      	movs	r2, #3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d123      	bne.n	8006008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	08da      	lsrs	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3208      	adds	r2, #8
 8005fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	220f      	movs	r2, #15
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	08da      	lsrs	r2, r3, #3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3208      	adds	r2, #8
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	2203      	movs	r2, #3
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f003 0203 	and.w	r2, r3, #3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80b4 	beq.w	80061b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	4b60      	ldr	r3, [pc, #384]	; (80061d0 <HAL_GPIO_Init+0x30c>)
 8006050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006052:	4a5f      	ldr	r2, [pc, #380]	; (80061d0 <HAL_GPIO_Init+0x30c>)
 8006054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006058:	6453      	str	r3, [r2, #68]	; 0x44
 800605a:	4b5d      	ldr	r3, [pc, #372]	; (80061d0 <HAL_GPIO_Init+0x30c>)
 800605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006066:	4a5b      	ldr	r2, [pc, #364]	; (80061d4 <HAL_GPIO_Init+0x310>)
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	3302      	adds	r3, #2
 800606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	220f      	movs	r2, #15
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a52      	ldr	r2, [pc, #328]	; (80061d8 <HAL_GPIO_Init+0x314>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d02b      	beq.n	80060ea <HAL_GPIO_Init+0x226>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a51      	ldr	r2, [pc, #324]	; (80061dc <HAL_GPIO_Init+0x318>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d025      	beq.n	80060e6 <HAL_GPIO_Init+0x222>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a50      	ldr	r2, [pc, #320]	; (80061e0 <HAL_GPIO_Init+0x31c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d01f      	beq.n	80060e2 <HAL_GPIO_Init+0x21e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a4f      	ldr	r2, [pc, #316]	; (80061e4 <HAL_GPIO_Init+0x320>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d019      	beq.n	80060de <HAL_GPIO_Init+0x21a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a4e      	ldr	r2, [pc, #312]	; (80061e8 <HAL_GPIO_Init+0x324>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_GPIO_Init+0x216>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a4d      	ldr	r2, [pc, #308]	; (80061ec <HAL_GPIO_Init+0x328>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00d      	beq.n	80060d6 <HAL_GPIO_Init+0x212>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a4c      	ldr	r2, [pc, #304]	; (80061f0 <HAL_GPIO_Init+0x32c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d007      	beq.n	80060d2 <HAL_GPIO_Init+0x20e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a4b      	ldr	r2, [pc, #300]	; (80061f4 <HAL_GPIO_Init+0x330>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d101      	bne.n	80060ce <HAL_GPIO_Init+0x20a>
 80060ca:	2307      	movs	r3, #7
 80060cc:	e00e      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060ce:	2308      	movs	r3, #8
 80060d0:	e00c      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060d2:	2306      	movs	r3, #6
 80060d4:	e00a      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060d6:	2305      	movs	r3, #5
 80060d8:	e008      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060da:	2304      	movs	r3, #4
 80060dc:	e006      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060de:	2303      	movs	r3, #3
 80060e0:	e004      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e002      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <HAL_GPIO_Init+0x228>
 80060ea:	2300      	movs	r3, #0
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	f002 0203 	and.w	r2, r2, #3
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	4093      	lsls	r3, r2
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060fc:	4935      	ldr	r1, [pc, #212]	; (80061d4 <HAL_GPIO_Init+0x310>)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	3302      	adds	r3, #2
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800610a:	4b3b      	ldr	r3, [pc, #236]	; (80061f8 <HAL_GPIO_Init+0x334>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800612e:	4a32      	ldr	r2, [pc, #200]	; (80061f8 <HAL_GPIO_Init+0x334>)
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006134:	4b30      	ldr	r3, [pc, #192]	; (80061f8 <HAL_GPIO_Init+0x334>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006158:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <HAL_GPIO_Init+0x334>)
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800615e:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <HAL_GPIO_Init+0x334>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	43db      	mvns	r3, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006182:	4a1d      	ldr	r2, [pc, #116]	; (80061f8 <HAL_GPIO_Init+0x334>)
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006188:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <HAL_GPIO_Init+0x334>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	43db      	mvns	r3, r3
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	4013      	ands	r3, r2
 8006196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061ac:	4a12      	ldr	r2, [pc, #72]	; (80061f8 <HAL_GPIO_Init+0x334>)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	3301      	adds	r3, #1
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	f67f ae90 	bls.w	8005ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061c0:	bf00      	nop
 80061c2:	bf00      	nop
 80061c4:	3724      	adds	r7, #36	; 0x24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40023800 	.word	0x40023800
 80061d4:	40013800 	.word	0x40013800
 80061d8:	40020000 	.word	0x40020000
 80061dc:	40020400 	.word	0x40020400
 80061e0:	40020800 	.word	0x40020800
 80061e4:	40020c00 	.word	0x40020c00
 80061e8:	40021000 	.word	0x40021000
 80061ec:	40021400 	.word	0x40021400
 80061f0:	40021800 	.word	0x40021800
 80061f4:	40021c00 	.word	0x40021c00
 80061f8:	40013c00 	.word	0x40013c00

080061fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	460b      	mov	r3, r1
 8006206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	887b      	ldrh	r3, [r7, #2]
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006214:	2301      	movs	r3, #1
 8006216:	73fb      	strb	r3, [r7, #15]
 8006218:	e001      	b.n	800621e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3714      	adds	r7, #20
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	807b      	strh	r3, [r7, #2]
 8006238:	4613      	mov	r3, r2
 800623a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800623c:	787b      	ldrb	r3, [r7, #1]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d003      	beq.n	800624a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006242:	887a      	ldrh	r2, [r7, #2]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006248:	e003      	b.n	8006252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800624a:	887b      	ldrh	r3, [r7, #2]
 800624c:	041a      	lsls	r2, r3, #16
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	619a      	str	r2, [r3, #24]
}
 8006252:	bf00      	nop
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800626a:	4b08      	ldr	r3, [pc, #32]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	4013      	ands	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d006      	beq.n	8006284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006276:	4a05      	ldr	r2, [pc, #20]	; (800628c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800627c:	88fb      	ldrh	r3, [r7, #6]
 800627e:	4618      	mov	r0, r3
 8006280:	f7fd f854 	bl	800332c <HAL_GPIO_EXTI_Callback>
  }
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40013c00 	.word	0x40013c00

08006290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e12b      	b.n	80064fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fc fe9c 	bl	8002ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	; 0x24
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0201 	bic.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062f4:	f001 fbfe 	bl	8007af4 <HAL_RCC_GetPCLK1Freq>
 80062f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	4a81      	ldr	r2, [pc, #516]	; (8006504 <HAL_I2C_Init+0x274>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d807      	bhi.n	8006314 <HAL_I2C_Init+0x84>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4a80      	ldr	r2, [pc, #512]	; (8006508 <HAL_I2C_Init+0x278>)
 8006308:	4293      	cmp	r3, r2
 800630a:	bf94      	ite	ls
 800630c:	2301      	movls	r3, #1
 800630e:	2300      	movhi	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e006      	b.n	8006322 <HAL_I2C_Init+0x92>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a7d      	ldr	r2, [pc, #500]	; (800650c <HAL_I2C_Init+0x27c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	bf94      	ite	ls
 800631c:	2301      	movls	r3, #1
 800631e:	2300      	movhi	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e0e7      	b.n	80064fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a78      	ldr	r2, [pc, #480]	; (8006510 <HAL_I2C_Init+0x280>)
 800632e:	fba2 2303 	umull	r2, r3, r2, r3
 8006332:	0c9b      	lsrs	r3, r3, #18
 8006334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a6a      	ldr	r2, [pc, #424]	; (8006504 <HAL_I2C_Init+0x274>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d802      	bhi.n	8006364 <HAL_I2C_Init+0xd4>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	3301      	adds	r3, #1
 8006362:	e009      	b.n	8006378 <HAL_I2C_Init+0xe8>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	4a69      	ldr	r2, [pc, #420]	; (8006514 <HAL_I2C_Init+0x284>)
 8006370:	fba2 2303 	umull	r2, r3, r2, r3
 8006374:	099b      	lsrs	r3, r3, #6
 8006376:	3301      	adds	r3, #1
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	430b      	orrs	r3, r1
 800637e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800638a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	495c      	ldr	r1, [pc, #368]	; (8006504 <HAL_I2C_Init+0x274>)
 8006394:	428b      	cmp	r3, r1
 8006396:	d819      	bhi.n	80063cc <HAL_I2C_Init+0x13c>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	1e59      	subs	r1, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063ac:	400b      	ands	r3, r1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <HAL_I2C_Init+0x138>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1e59      	subs	r1, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c6:	e051      	b.n	800646c <HAL_I2C_Init+0x1dc>
 80063c8:	2304      	movs	r3, #4
 80063ca:	e04f      	b.n	800646c <HAL_I2C_Init+0x1dc>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d111      	bne.n	80063f8 <HAL_I2C_Init+0x168>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	1e58      	subs	r0, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6859      	ldr	r1, [r3, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	440b      	add	r3, r1
 80063e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063e6:	3301      	adds	r3, #1
 80063e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e012      	b.n	800641e <HAL_I2C_Init+0x18e>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	1e58      	subs	r0, r3, #1
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6859      	ldr	r1, [r3, #4]
 8006400:	460b      	mov	r3, r1
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	0099      	lsls	r1, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	fbb0 f3f3 	udiv	r3, r0, r3
 800640e:	3301      	adds	r3, #1
 8006410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf0c      	ite	eq
 8006418:	2301      	moveq	r3, #1
 800641a:	2300      	movne	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_I2C_Init+0x196>
 8006422:	2301      	movs	r3, #1
 8006424:	e022      	b.n	800646c <HAL_I2C_Init+0x1dc>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10e      	bne.n	800644c <HAL_I2C_Init+0x1bc>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1e58      	subs	r0, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	440b      	add	r3, r1
 800643c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006440:	3301      	adds	r3, #1
 8006442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	e00f      	b.n	800646c <HAL_I2C_Init+0x1dc>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1e58      	subs	r0, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6859      	ldr	r1, [r3, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	0099      	lsls	r1, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006462:	3301      	adds	r3, #1
 8006464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	6809      	ldr	r1, [r1, #0]
 8006470:	4313      	orrs	r3, r2
 8006472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69da      	ldr	r2, [r3, #28]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800649a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6911      	ldr	r1, [r2, #16]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	68d2      	ldr	r2, [r2, #12]
 80064a6:	4311      	orrs	r1, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6812      	ldr	r2, [r2, #0]
 80064ac:	430b      	orrs	r3, r1
 80064ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f042 0201 	orr.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	000186a0 	.word	0x000186a0
 8006508:	001e847f 	.word	0x001e847f
 800650c:	003d08ff 	.word	0x003d08ff
 8006510:	431bde83 	.word	0x431bde83
 8006514:	10624dd3 	.word	0x10624dd3

08006518 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af02      	add	r7, sp, #8
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	817b      	strh	r3, [r7, #10]
 800652a:	460b      	mov	r3, r1
 800652c:	813b      	strh	r3, [r7, #8]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006532:	f7fe fe6d 	bl	8005210 <HAL_GetTick>
 8006536:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b20      	cmp	r3, #32
 8006542:	f040 80d9 	bne.w	80066f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	2319      	movs	r3, #25
 800654c:	2201      	movs	r2, #1
 800654e:	496d      	ldr	r1, [pc, #436]	; (8006704 <HAL_I2C_Mem_Write+0x1ec>)
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fc7f 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d001      	beq.n	8006560 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
 800655e:	e0cc      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_I2C_Mem_Write+0x56>
 800656a:	2302      	movs	r3, #2
 800656c:	e0c5      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b01      	cmp	r3, #1
 8006582:	d007      	beq.n	8006594 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0201 	orr.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2221      	movs	r2, #33	; 0x21
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2240      	movs	r2, #64	; 0x40
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a4d      	ldr	r2, [pc, #308]	; (8006708 <HAL_I2C_Mem_Write+0x1f0>)
 80065d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065d6:	88f8      	ldrh	r0, [r7, #6]
 80065d8:	893a      	ldrh	r2, [r7, #8]
 80065da:	8979      	ldrh	r1, [r7, #10]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	4603      	mov	r3, r0
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fab6 	bl	8006b58 <I2C_RequestMemoryWrite>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d052      	beq.n	8006698 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e081      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 fd00 	bl	8007000 <I2C_WaitOnTXEFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	2b04      	cmp	r3, #4
 800660c:	d107      	bne.n	800661e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800661c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e06b      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b04      	cmp	r3, #4
 800665e:	d11b      	bne.n	8006698 <HAL_I2C_Mem_Write+0x180>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006664:	2b00      	cmp	r3, #0
 8006666:	d017      	beq.n	8006698 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1aa      	bne.n	80065f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 fcec 	bl	8007082 <I2C_WaitOnBTFFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d107      	bne.n	80066c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e016      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	00100002 	.word	0x00100002
 8006708:	ffff0000 	.word	0xffff0000

0800670c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08c      	sub	sp, #48	; 0x30
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	461a      	mov	r2, r3
 800671a:	4603      	mov	r3, r0
 800671c:	817b      	strh	r3, [r7, #10]
 800671e:	460b      	mov	r3, r1
 8006720:	813b      	strh	r3, [r7, #8]
 8006722:	4613      	mov	r3, r2
 8006724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006726:	f7fe fd73 	bl	8005210 <HAL_GetTick>
 800672a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b20      	cmp	r3, #32
 8006736:	f040 8208 	bne.w	8006b4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	2319      	movs	r3, #25
 8006740:	2201      	movs	r2, #1
 8006742:	497b      	ldr	r1, [pc, #492]	; (8006930 <HAL_I2C_Mem_Read+0x224>)
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 fb85 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
 8006752:	e1fb      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_I2C_Mem_Read+0x56>
 800675e:	2302      	movs	r3, #2
 8006760:	e1f4      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d007      	beq.n	8006788 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2222      	movs	r2, #34	; 0x22
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2240      	movs	r2, #64	; 0x40
 80067a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a5b      	ldr	r2, [pc, #364]	; (8006934 <HAL_I2C_Mem_Read+0x228>)
 80067c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067ca:	88f8      	ldrh	r0, [r7, #6]
 80067cc:	893a      	ldrh	r2, [r7, #8]
 80067ce:	8979      	ldrh	r1, [r7, #10]
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	4603      	mov	r3, r0
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 fa52 	bl	8006c84 <I2C_RequestMemoryRead>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e1b0      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d113      	bne.n	800681a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067f2:	2300      	movs	r3, #0
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695b      	ldr	r3, [r3, #20]
 80067fc:	623b      	str	r3, [r7, #32]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	623b      	str	r3, [r7, #32]
 8006806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	e184      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	2b01      	cmp	r3, #1
 8006820:	d11b      	bne.n	800685a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e164      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685e:	2b02      	cmp	r3, #2
 8006860:	d11b      	bne.n	800689a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006882:	2300      	movs	r3, #0
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	e144      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80068b0:	e138      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	f200 80f1 	bhi.w	8006a9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d123      	bne.n	800690c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fc1b 	bl	8007104 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e139      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	691a      	ldr	r2, [r3, #16]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e2:	b2d2      	uxtb	r2, r2
 80068e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006900:	b29b      	uxth	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800690a:	e10b      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006910:	2b02      	cmp	r3, #2
 8006912:	d14e      	bne.n	80069b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691a:	2200      	movs	r2, #0
 800691c:	4906      	ldr	r1, [pc, #24]	; (8006938 <HAL_I2C_Mem_Read+0x22c>)
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 fa98 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e10e      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
 800692e:	bf00      	nop
 8006930:	00100002 	.word	0x00100002
 8006934:	ffff0000 	.word	0xffff0000
 8006938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800694a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699a:	3b01      	subs	r3, #1
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069b0:	e0b8      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b8:	2200      	movs	r2, #0
 80069ba:	4966      	ldr	r1, [pc, #408]	; (8006b54 <HAL_I2C_Mem_Read+0x448>)
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fa49 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0bf      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	2200      	movs	r2, #0
 8006a16:	494f      	ldr	r1, [pc, #316]	; (8006b54 <HAL_I2C_Mem_Read+0x448>)
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 fa1b 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e091      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691a      	ldr	r2, [r3, #16]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a54:	3b01      	subs	r3, #1
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691a      	ldr	r2, [r3, #16]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a9c:	e042      	b.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fb2e 	bl	8007104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e04c      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	1c5a      	adds	r2, r3, #1
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0304 	and.w	r3, r3, #4
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d118      	bne.n	8006b24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f47f aec2 	bne.w	80068b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	e000      	b.n	8006b4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b4a:	2302      	movs	r3, #2
  }
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3728      	adds	r7, #40	; 0x28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	00010004 	.word	0x00010004

08006b58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af02      	add	r7, sp, #8
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	4608      	mov	r0, r1
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	817b      	strh	r3, [r7, #10]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	813b      	strh	r3, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f960 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00d      	beq.n	8006bb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ba8:	d103      	bne.n	8006bb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e05f      	b.n	8006c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bb6:	897b      	ldrh	r3, [r7, #10]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006bc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	6a3a      	ldr	r2, [r7, #32]
 8006bca:	492d      	ldr	r1, [pc, #180]	; (8006c80 <I2C_RequestMemoryWrite+0x128>)
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f998 	bl	8006f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e04c      	b.n	8006c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf4:	6a39      	ldr	r1, [r7, #32]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 fa02 	bl	8007000 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00d      	beq.n	8006c1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d107      	bne.n	8006c1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e02b      	b.n	8006c76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c24:	893b      	ldrh	r3, [r7, #8]
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	611a      	str	r2, [r3, #16]
 8006c2e:	e021      	b.n	8006c74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c30:	893b      	ldrh	r3, [r7, #8]
 8006c32:	0a1b      	lsrs	r3, r3, #8
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c40:	6a39      	ldr	r1, [r7, #32]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f9dc 	bl	8007000 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00d      	beq.n	8006c6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	d107      	bne.n	8006c66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e005      	b.n	8006c76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c6a:	893b      	ldrh	r3, [r7, #8]
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	00010002 	.word	0x00010002

08006c84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	4603      	mov	r3, r0
 8006c94:	817b      	strh	r3, [r7, #10]
 8006c96:	460b      	mov	r3, r1
 8006c98:	813b      	strh	r3, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f8c2 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce4:	d103      	bne.n	8006cee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	e0aa      	b.n	8006e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cf2:	897b      	ldrh	r3, [r7, #10]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	6a3a      	ldr	r2, [r7, #32]
 8006d06:	4952      	ldr	r1, [pc, #328]	; (8006e50 <I2C_RequestMemoryRead+0x1cc>)
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 f8fa 	bl	8006f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d001      	beq.n	8006d18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e097      	b.n	8006e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d30:	6a39      	ldr	r1, [r7, #32]
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f964 	bl	8007000 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00d      	beq.n	8006d5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d107      	bne.n	8006d56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e076      	b.n	8006e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d105      	bne.n	8006d6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006d60:	893b      	ldrh	r3, [r7, #8]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	611a      	str	r2, [r3, #16]
 8006d6a:	e021      	b.n	8006db0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006d6c:	893b      	ldrh	r3, [r7, #8]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7c:	6a39      	ldr	r1, [r7, #32]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f93e 	bl	8007000 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00d      	beq.n	8006da6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	2b04      	cmp	r3, #4
 8006d90:	d107      	bne.n	8006da2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e050      	b.n	8006e48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006da6:	893b      	ldrh	r3, [r7, #8]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db2:	6a39      	ldr	r1, [r7, #32]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f923 	bl	8007000 <I2C_WaitOnTXEFlagUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00d      	beq.n	8006ddc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d107      	bne.n	8006dd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e035      	b.n	8006e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f82b 	bl	8006e54 <I2C_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e12:	d103      	bne.n	8006e1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e013      	b.n	8006e48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006e20:	897b      	ldrh	r3, [r7, #10]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	f043 0301 	orr.w	r3, r3, #1
 8006e28:	b2da      	uxtb	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	6a3a      	ldr	r2, [r7, #32]
 8006e34:	4906      	ldr	r1, [pc, #24]	; (8006e50 <I2C_RequestMemoryRead+0x1cc>)
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f863 	bl	8006f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	00010002 	.word	0x00010002

08006e54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	4613      	mov	r3, r2
 8006e62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e64:	e025      	b.n	8006eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d021      	beq.n	8006eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e6e:	f7fe f9cf 	bl	8005210 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d302      	bcc.n	8006e84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d116      	bne.n	8006eb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f043 0220 	orr.w	r2, r3, #32
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e023      	b.n	8006efa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	0c1b      	lsrs	r3, r3, #16
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d10d      	bne.n	8006ed8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	43da      	mvns	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	e00c      	b.n	8006ef2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	43da      	mvns	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	bf0c      	ite	eq
 8006eea:	2301      	moveq	r3, #1
 8006eec:	2300      	movne	r3, #0
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d0b6      	beq.n	8006e66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f10:	e051      	b.n	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	695b      	ldr	r3, [r3, #20]
 8006f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f20:	d123      	bne.n	8006f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e046      	b.n	8006ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d021      	beq.n	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f72:	f7fe f94d 	bl	8005210 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d302      	bcc.n	8006f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d116      	bne.n	8006fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	f043 0220 	orr.w	r2, r3, #32
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e020      	b.n	8006ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d10c      	bne.n	8006fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	43da      	mvns	r2, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf14      	ite	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	2300      	moveq	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	e00b      	b.n	8006ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	43da      	mvns	r2, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d18d      	bne.n	8006f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800700c:	e02d      	b.n	800706a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f8ce 	bl	80071b0 <I2C_IsAcknowledgeFailed>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e02d      	b.n	800707a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d021      	beq.n	800706a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fe f8f3 	bl	8005210 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d116      	bne.n	800706a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e007      	b.n	800707a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007074:	2b80      	cmp	r3, #128	; 0x80
 8007076:	d1ca      	bne.n	800700e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800708e:	e02d      	b.n	80070ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f88d 	bl	80071b0 <I2C_IsAcknowledgeFailed>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e02d      	b.n	80070fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d021      	beq.n	80070ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a8:	f7fe f8b2 	bl	8005210 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d302      	bcc.n	80070be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d116      	bne.n	80070ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f043 0220 	orr.w	r2, r3, #32
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e007      	b.n	80070fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f003 0304 	and.w	r3, r3, #4
 80070f6:	2b04      	cmp	r3, #4
 80070f8:	d1ca      	bne.n	8007090 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007110:	e042      	b.n	8007198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b10      	cmp	r3, #16
 800711e:	d119      	bne.n	8007154 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f06f 0210 	mvn.w	r2, #16
 8007128:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e029      	b.n	80071a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007154:	f7fe f85c 	bl	8005210 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	d302      	bcc.n	800716a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d116      	bne.n	8007198 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e007      	b.n	80071a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b40      	cmp	r3, #64	; 0x40
 80071a4:	d1b5      	bne.n	8007112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071c6:	d11b      	bne.n	8007200 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	f043 0204 	orr.w	r2, r3, #4
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e034      	b.n	800728a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007228:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f245 5255 	movw	r2, #21845	; 0x5555
 8007232:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6852      	ldr	r2, [r2, #4]
 800723c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6892      	ldr	r2, [r2, #8]
 8007246:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007248:	f7fd ffe2 	bl	8005210 <HAL_GetTick>
 800724c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800724e:	e00f      	b.n	8007270 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8007250:	f7fd ffde 	bl	8005210 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b30      	cmp	r3, #48	; 0x30
 800725c:	d908      	bls.n	8007270 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e00c      	b.n	800728a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e8      	bne.n	8007250 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007286:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80072a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e264      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d075      	beq.n	80073be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072d2:	4ba3      	ldr	r3, [pc, #652]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 030c 	and.w	r3, r3, #12
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d00c      	beq.n	80072f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072de:	4ba0      	ldr	r3, [pc, #640]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d112      	bne.n	8007310 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072ea:	4b9d      	ldr	r3, [pc, #628]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072f6:	d10b      	bne.n	8007310 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f8:	4b99      	ldr	r3, [pc, #612]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d05b      	beq.n	80073bc <HAL_RCC_OscConfig+0x108>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d157      	bne.n	80073bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e23f      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007318:	d106      	bne.n	8007328 <HAL_RCC_OscConfig+0x74>
 800731a:	4b91      	ldr	r3, [pc, #580]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a90      	ldr	r2, [pc, #576]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	e01d      	b.n	8007364 <HAL_RCC_OscConfig+0xb0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007330:	d10c      	bne.n	800734c <HAL_RCC_OscConfig+0x98>
 8007332:	4b8b      	ldr	r3, [pc, #556]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a8a      	ldr	r2, [pc, #552]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	4b88      	ldr	r3, [pc, #544]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a87      	ldr	r2, [pc, #540]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	e00b      	b.n	8007364 <HAL_RCC_OscConfig+0xb0>
 800734c:	4b84      	ldr	r3, [pc, #528]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a83      	ldr	r2, [pc, #524]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	4b81      	ldr	r3, [pc, #516]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a80      	ldr	r2, [pc, #512]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 800735e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007362:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d013      	beq.n	8007394 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736c:	f7fd ff50 	bl	8005210 <HAL_GetTick>
 8007370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007372:	e008      	b.n	8007386 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007374:	f7fd ff4c 	bl	8005210 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b64      	cmp	r3, #100	; 0x64
 8007380:	d901      	bls.n	8007386 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e204      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007386:	4b76      	ldr	r3, [pc, #472]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d0f0      	beq.n	8007374 <HAL_RCC_OscConfig+0xc0>
 8007392:	e014      	b.n	80073be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007394:	f7fd ff3c 	bl	8005210 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800739c:	f7fd ff38 	bl	8005210 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b64      	cmp	r3, #100	; 0x64
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e1f0      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ae:	4b6c      	ldr	r3, [pc, #432]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1f0      	bne.n	800739c <HAL_RCC_OscConfig+0xe8>
 80073ba:	e000      	b.n	80073be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d063      	beq.n	8007492 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073ca:	4b65      	ldr	r3, [pc, #404]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 030c 	and.w	r3, r3, #12
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00b      	beq.n	80073ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073d6:	4b62      	ldr	r3, [pc, #392]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073de:	2b08      	cmp	r3, #8
 80073e0:	d11c      	bne.n	800741c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073e2:	4b5f      	ldr	r3, [pc, #380]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d116      	bne.n	800741c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ee:	4b5c      	ldr	r3, [pc, #368]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <HAL_RCC_OscConfig+0x152>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d001      	beq.n	8007406 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e1c4      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007406:	4b56      	ldr	r3, [pc, #344]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4952      	ldr	r1, [pc, #328]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007416:	4313      	orrs	r3, r2
 8007418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800741a:	e03a      	b.n	8007492 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d020      	beq.n	8007466 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007424:	4b4f      	ldr	r3, [pc, #316]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742a:	f7fd fef1 	bl	8005210 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007430:	e008      	b.n	8007444 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007432:	f7fd feed 	bl	8005210 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d901      	bls.n	8007444 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e1a5      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007444:	4b46      	ldr	r3, [pc, #280]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0f0      	beq.n	8007432 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007450:	4b43      	ldr	r3, [pc, #268]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	4940      	ldr	r1, [pc, #256]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007460:	4313      	orrs	r3, r2
 8007462:	600b      	str	r3, [r1, #0]
 8007464:	e015      	b.n	8007492 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007466:	4b3f      	ldr	r3, [pc, #252]	; (8007564 <HAL_RCC_OscConfig+0x2b0>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746c:	f7fd fed0 	bl	8005210 <HAL_GetTick>
 8007470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007472:	e008      	b.n	8007486 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007474:	f7fd fecc 	bl	8005210 <HAL_GetTick>
 8007478:	4602      	mov	r2, r0
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	2b02      	cmp	r3, #2
 8007480:	d901      	bls.n	8007486 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e184      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007486:	4b36      	ldr	r3, [pc, #216]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1f0      	bne.n	8007474 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	d030      	beq.n	8007500 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d016      	beq.n	80074d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074a6:	4b30      	ldr	r3, [pc, #192]	; (8007568 <HAL_RCC_OscConfig+0x2b4>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ac:	f7fd feb0 	bl	8005210 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074b4:	f7fd feac 	bl	8005210 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e164      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c6:	4b26      	ldr	r3, [pc, #152]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80074c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x200>
 80074d2:	e015      	b.n	8007500 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <HAL_RCC_OscConfig+0x2b4>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074da:	f7fd fe99 	bl	8005210 <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074e2:	f7fd fe95 	bl	8005210 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e14d      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074f4:	4b1a      	ldr	r3, [pc, #104]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 80074f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1f0      	bne.n	80074e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 80a0 	beq.w	800764e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800750e:	2300      	movs	r3, #0
 8007510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007512:	4b13      	ldr	r3, [pc, #76]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	4a0e      	ldr	r2, [pc, #56]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800752c:	6413      	str	r3, [r2, #64]	; 0x40
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <HAL_RCC_OscConfig+0x2ac>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800753e:	4b0b      	ldr	r3, [pc, #44]	; (800756c <HAL_RCC_OscConfig+0x2b8>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d121      	bne.n	800758e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800754a:	4b08      	ldr	r3, [pc, #32]	; (800756c <HAL_RCC_OscConfig+0x2b8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a07      	ldr	r2, [pc, #28]	; (800756c <HAL_RCC_OscConfig+0x2b8>)
 8007550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007556:	f7fd fe5b 	bl	8005210 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755c:	e011      	b.n	8007582 <HAL_RCC_OscConfig+0x2ce>
 800755e:	bf00      	nop
 8007560:	40023800 	.word	0x40023800
 8007564:	42470000 	.word	0x42470000
 8007568:	42470e80 	.word	0x42470e80
 800756c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007570:	f7fd fe4e 	bl	8005210 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e106      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007582:	4b85      	ldr	r3, [pc, #532]	; (8007798 <HAL_RCC_OscConfig+0x4e4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0f0      	beq.n	8007570 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d106      	bne.n	80075a4 <HAL_RCC_OscConfig+0x2f0>
 8007596:	4b81      	ldr	r3, [pc, #516]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	4a80      	ldr	r2, [pc, #512]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 800759c:	f043 0301 	orr.w	r3, r3, #1
 80075a0:	6713      	str	r3, [r2, #112]	; 0x70
 80075a2:	e01c      	b.n	80075de <HAL_RCC_OscConfig+0x32a>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	d10c      	bne.n	80075c6 <HAL_RCC_OscConfig+0x312>
 80075ac:	4b7b      	ldr	r3, [pc, #492]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	4a7a      	ldr	r2, [pc, #488]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075b2:	f043 0304 	orr.w	r3, r3, #4
 80075b6:	6713      	str	r3, [r2, #112]	; 0x70
 80075b8:	4b78      	ldr	r3, [pc, #480]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075bc:	4a77      	ldr	r2, [pc, #476]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075be:	f043 0301 	orr.w	r3, r3, #1
 80075c2:	6713      	str	r3, [r2, #112]	; 0x70
 80075c4:	e00b      	b.n	80075de <HAL_RCC_OscConfig+0x32a>
 80075c6:	4b75      	ldr	r3, [pc, #468]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ca:	4a74      	ldr	r2, [pc, #464]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075cc:	f023 0301 	bic.w	r3, r3, #1
 80075d0:	6713      	str	r3, [r2, #112]	; 0x70
 80075d2:	4b72      	ldr	r3, [pc, #456]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d6:	4a71      	ldr	r2, [pc, #452]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80075d8:	f023 0304 	bic.w	r3, r3, #4
 80075dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d015      	beq.n	8007612 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e6:	f7fd fe13 	bl	8005210 <HAL_GetTick>
 80075ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ec:	e00a      	b.n	8007604 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ee:	f7fd fe0f 	bl	8005210 <HAL_GetTick>
 80075f2:	4602      	mov	r2, r0
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d901      	bls.n	8007604 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e0c5      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007604:	4b65      	ldr	r3, [pc, #404]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 8007606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0ee      	beq.n	80075ee <HAL_RCC_OscConfig+0x33a>
 8007610:	e014      	b.n	800763c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007612:	f7fd fdfd 	bl	8005210 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007618:	e00a      	b.n	8007630 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fd fdf9 	bl	8005210 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e0af      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007630:	4b5a      	ldr	r3, [pc, #360]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1ee      	bne.n	800761a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d105      	bne.n	800764e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007642:	4b56      	ldr	r3, [pc, #344]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	4a55      	ldr	r2, [pc, #340]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 8007648:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800764c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 809b 	beq.w	800778e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007658:	4b50      	ldr	r3, [pc, #320]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 030c 	and.w	r3, r3, #12
 8007660:	2b08      	cmp	r3, #8
 8007662:	d05c      	beq.n	800771e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d141      	bne.n	80076f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800766c:	4b4c      	ldr	r3, [pc, #304]	; (80077a0 <HAL_RCC_OscConfig+0x4ec>)
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007672:	f7fd fdcd 	bl	8005210 <HAL_GetTick>
 8007676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800767a:	f7fd fdc9 	bl	8005210 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e081      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768c:	4b43      	ldr	r3, [pc, #268]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1f0      	bne.n	800767a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	019b      	lsls	r3, r3, #6
 80076a8:	431a      	orrs	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	3b01      	subs	r3, #1
 80076b2:	041b      	lsls	r3, r3, #16
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	061b      	lsls	r3, r3, #24
 80076bc:	4937      	ldr	r1, [pc, #220]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076c2:	4b37      	ldr	r3, [pc, #220]	; (80077a0 <HAL_RCC_OscConfig+0x4ec>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c8:	f7fd fda2 	bl	8005210 <HAL_GetTick>
 80076cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ce:	e008      	b.n	80076e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076d0:	f7fd fd9e 	bl	8005210 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e056      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e2:	4b2e      	ldr	r3, [pc, #184]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0f0      	beq.n	80076d0 <HAL_RCC_OscConfig+0x41c>
 80076ee:	e04e      	b.n	800778e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076f0:	4b2b      	ldr	r3, [pc, #172]	; (80077a0 <HAL_RCC_OscConfig+0x4ec>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f6:	f7fd fd8b 	bl	8005210 <HAL_GetTick>
 80076fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076fc:	e008      	b.n	8007710 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076fe:	f7fd fd87 	bl	8005210 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e03f      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007710:	4b22      	ldr	r3, [pc, #136]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f0      	bne.n	80076fe <HAL_RCC_OscConfig+0x44a>
 800771c:	e037      	b.n	800778e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e032      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800772a:	4b1c      	ldr	r3, [pc, #112]	; (800779c <HAL_RCC_OscConfig+0x4e8>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d028      	beq.n	800778a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007742:	429a      	cmp	r2, r3
 8007744:	d121      	bne.n	800778a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007750:	429a      	cmp	r2, r3
 8007752:	d11a      	bne.n	800778a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800775a:	4013      	ands	r3, r2
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007760:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007762:	4293      	cmp	r3, r2
 8007764:	d111      	bne.n	800778a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	3b01      	subs	r3, #1
 8007774:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007776:	429a      	cmp	r2, r3
 8007778:	d107      	bne.n	800778a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007786:	429a      	cmp	r2, r3
 8007788:	d001      	beq.n	800778e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	40007000 	.word	0x40007000
 800779c:	40023800 	.word	0x40023800
 80077a0:	42470060 	.word	0x42470060

080077a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e0cc      	b.n	8007952 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077b8:	4b68      	ldr	r3, [pc, #416]	; (800795c <HAL_RCC_ClockConfig+0x1b8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0307 	and.w	r3, r3, #7
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d90c      	bls.n	80077e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077c6:	4b65      	ldr	r3, [pc, #404]	; (800795c <HAL_RCC_ClockConfig+0x1b8>)
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ce:	4b63      	ldr	r3, [pc, #396]	; (800795c <HAL_RCC_ClockConfig+0x1b8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0307 	and.w	r3, r3, #7
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d001      	beq.n	80077e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0b8      	b.n	8007952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0302 	and.w	r3, r3, #2
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d020      	beq.n	800782e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077f8:	4b59      	ldr	r3, [pc, #356]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	4a58      	ldr	r2, [pc, #352]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007802:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007810:	4b53      	ldr	r3, [pc, #332]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	4a52      	ldr	r2, [pc, #328]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800781a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800781c:	4b50      	ldr	r3, [pc, #320]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	494d      	ldr	r1, [pc, #308]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	4313      	orrs	r3, r2
 800782c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d044      	beq.n	80078c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d107      	bne.n	8007852 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007842:	4b47      	ldr	r3, [pc, #284]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d119      	bne.n	8007882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e07f      	b.n	8007952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b02      	cmp	r3, #2
 8007858:	d003      	beq.n	8007862 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800785e:	2b03      	cmp	r3, #3
 8007860:	d107      	bne.n	8007872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007862:	4b3f      	ldr	r3, [pc, #252]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d109      	bne.n	8007882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e06f      	b.n	8007952 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007872:	4b3b      	ldr	r3, [pc, #236]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e067      	b.n	8007952 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007882:	4b37      	ldr	r3, [pc, #220]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f023 0203 	bic.w	r2, r3, #3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	4934      	ldr	r1, [pc, #208]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	4313      	orrs	r3, r2
 8007892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007894:	f7fd fcbc 	bl	8005210 <HAL_GetTick>
 8007898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800789a:	e00a      	b.n	80078b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800789c:	f7fd fcb8 	bl	8005210 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d901      	bls.n	80078b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e04f      	b.n	8007952 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b2:	4b2b      	ldr	r3, [pc, #172]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f003 020c 	and.w	r2, r3, #12
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d1eb      	bne.n	800789c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078c4:	4b25      	ldr	r3, [pc, #148]	; (800795c <HAL_RCC_ClockConfig+0x1b8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d20c      	bcs.n	80078ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078d2:	4b22      	ldr	r3, [pc, #136]	; (800795c <HAL_RCC_ClockConfig+0x1b8>)
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078da:	4b20      	ldr	r3, [pc, #128]	; (800795c <HAL_RCC_ClockConfig+0x1b8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d001      	beq.n	80078ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e032      	b.n	8007952 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078f8:	4b19      	ldr	r3, [pc, #100]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	4916      	ldr	r1, [pc, #88]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007906:	4313      	orrs	r3, r2
 8007908:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007916:	4b12      	ldr	r3, [pc, #72]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	490e      	ldr	r1, [pc, #56]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007926:	4313      	orrs	r3, r2
 8007928:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800792a:	f000 f821 	bl	8007970 <HAL_RCC_GetSysClockFreq>
 800792e:	4602      	mov	r2, r0
 8007930:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	490a      	ldr	r1, [pc, #40]	; (8007964 <HAL_RCC_ClockConfig+0x1c0>)
 800793c:	5ccb      	ldrb	r3, [r1, r3]
 800793e:	fa22 f303 	lsr.w	r3, r2, r3
 8007942:	4a09      	ldr	r2, [pc, #36]	; (8007968 <HAL_RCC_ClockConfig+0x1c4>)
 8007944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007946:	4b09      	ldr	r3, [pc, #36]	; (800796c <HAL_RCC_ClockConfig+0x1c8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd fc1c 	bl	8005188 <HAL_InitTick>

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	40023c00 	.word	0x40023c00
 8007960:	40023800 	.word	0x40023800
 8007964:	08015194 	.word	0x08015194
 8007968:	2000004c 	.word	0x2000004c
 800796c:	20000050 	.word	0x20000050

08007970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007970:	b5b0      	push	{r4, r5, r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007976:	2100      	movs	r1, #0
 8007978:	6079      	str	r1, [r7, #4]
 800797a:	2100      	movs	r1, #0
 800797c:	60f9      	str	r1, [r7, #12]
 800797e:	2100      	movs	r1, #0
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007982:	2100      	movs	r1, #0
 8007984:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007986:	4952      	ldr	r1, [pc, #328]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007988:	6889      	ldr	r1, [r1, #8]
 800798a:	f001 010c 	and.w	r1, r1, #12
 800798e:	2908      	cmp	r1, #8
 8007990:	d00d      	beq.n	80079ae <HAL_RCC_GetSysClockFreq+0x3e>
 8007992:	2908      	cmp	r1, #8
 8007994:	f200 8094 	bhi.w	8007ac0 <HAL_RCC_GetSysClockFreq+0x150>
 8007998:	2900      	cmp	r1, #0
 800799a:	d002      	beq.n	80079a2 <HAL_RCC_GetSysClockFreq+0x32>
 800799c:	2904      	cmp	r1, #4
 800799e:	d003      	beq.n	80079a8 <HAL_RCC_GetSysClockFreq+0x38>
 80079a0:	e08e      	b.n	8007ac0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079a2:	4b4c      	ldr	r3, [pc, #304]	; (8007ad4 <HAL_RCC_GetSysClockFreq+0x164>)
 80079a4:	60bb      	str	r3, [r7, #8]
       break;
 80079a6:	e08e      	b.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079a8:	4b4b      	ldr	r3, [pc, #300]	; (8007ad8 <HAL_RCC_GetSysClockFreq+0x168>)
 80079aa:	60bb      	str	r3, [r7, #8]
      break;
 80079ac:	e08b      	b.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079ae:	4948      	ldr	r1, [pc, #288]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x160>)
 80079b0:	6849      	ldr	r1, [r1, #4]
 80079b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80079b6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079b8:	4945      	ldr	r1, [pc, #276]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x160>)
 80079ba:	6849      	ldr	r1, [r1, #4]
 80079bc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80079c0:	2900      	cmp	r1, #0
 80079c2:	d024      	beq.n	8007a0e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079c4:	4942      	ldr	r1, [pc, #264]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x160>)
 80079c6:	6849      	ldr	r1, [r1, #4]
 80079c8:	0989      	lsrs	r1, r1, #6
 80079ca:	4608      	mov	r0, r1
 80079cc:	f04f 0100 	mov.w	r1, #0
 80079d0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80079d4:	f04f 0500 	mov.w	r5, #0
 80079d8:	ea00 0204 	and.w	r2, r0, r4
 80079dc:	ea01 0305 	and.w	r3, r1, r5
 80079e0:	493d      	ldr	r1, [pc, #244]	; (8007ad8 <HAL_RCC_GetSysClockFreq+0x168>)
 80079e2:	fb01 f003 	mul.w	r0, r1, r3
 80079e6:	2100      	movs	r1, #0
 80079e8:	fb01 f102 	mul.w	r1, r1, r2
 80079ec:	1844      	adds	r4, r0, r1
 80079ee:	493a      	ldr	r1, [pc, #232]	; (8007ad8 <HAL_RCC_GetSysClockFreq+0x168>)
 80079f0:	fba2 0101 	umull	r0, r1, r2, r1
 80079f4:	1863      	adds	r3, r4, r1
 80079f6:	4619      	mov	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f04f 0300 	mov.w	r3, #0
 8007a00:	f7f9 f992 	bl	8000d28 <__aeabi_uldivmod>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4613      	mov	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e04a      	b.n	8007aa4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a0e:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	099b      	lsrs	r3, r3, #6
 8007a14:	461a      	mov	r2, r3
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007a1e:	f04f 0100 	mov.w	r1, #0
 8007a22:	ea02 0400 	and.w	r4, r2, r0
 8007a26:	ea03 0501 	and.w	r5, r3, r1
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	f04f 0300 	mov.w	r3, #0
 8007a36:	014b      	lsls	r3, r1, #5
 8007a38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007a3c:	0142      	lsls	r2, r0, #5
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	1b00      	subs	r0, r0, r4
 8007a44:	eb61 0105 	sbc.w	r1, r1, r5
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	018b      	lsls	r3, r1, #6
 8007a52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007a56:	0182      	lsls	r2, r0, #6
 8007a58:	1a12      	subs	r2, r2, r0
 8007a5a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a5e:	f04f 0000 	mov.w	r0, #0
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	00d9      	lsls	r1, r3, #3
 8007a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a6c:	00d0      	lsls	r0, r2, #3
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	1912      	adds	r2, r2, r4
 8007a74:	eb45 0303 	adc.w	r3, r5, r3
 8007a78:	f04f 0000 	mov.w	r0, #0
 8007a7c:	f04f 0100 	mov.w	r1, #0
 8007a80:	0299      	lsls	r1, r3, #10
 8007a82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007a86:	0290      	lsls	r0, r2, #10
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4619      	mov	r1, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	f7f9 f946 	bl	8000d28 <__aeabi_uldivmod>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007aa4:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	0c1b      	lsrs	r3, r3, #16
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	3301      	adds	r3, #1
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abc:	60bb      	str	r3, [r7, #8]
      break;
 8007abe:	e002      	b.n	8007ac6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ac0:	4b04      	ldr	r3, [pc, #16]	; (8007ad4 <HAL_RCC_GetSysClockFreq+0x164>)
 8007ac2:	60bb      	str	r3, [r7, #8]
      break;
 8007ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	00f42400 	.word	0x00f42400
 8007ad8:	017d7840 	.word	0x017d7840

08007adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007adc:	b480      	push	{r7}
 8007ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ae0:	4b03      	ldr	r3, [pc, #12]	; (8007af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	2000004c 	.word	0x2000004c

08007af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007af8:	f7ff fff0 	bl	8007adc <HAL_RCC_GetHCLKFreq>
 8007afc:	4602      	mov	r2, r0
 8007afe:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	0a9b      	lsrs	r3, r3, #10
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	4903      	ldr	r1, [pc, #12]	; (8007b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b0a:	5ccb      	ldrb	r3, [r1, r3]
 8007b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40023800 	.word	0x40023800
 8007b18:	080151a4 	.word	0x080151a4

08007b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b20:	f7ff ffdc 	bl	8007adc <HAL_RCC_GetHCLKFreq>
 8007b24:	4602      	mov	r2, r0
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	0b5b      	lsrs	r3, r3, #13
 8007b2c:	f003 0307 	and.w	r3, r3, #7
 8007b30:	4903      	ldr	r1, [pc, #12]	; (8007b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b32:	5ccb      	ldrb	r3, [r1, r3]
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	080151a4 	.word	0x080151a4

08007b44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d105      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d035      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b6c:	4b62      	ldr	r3, [pc, #392]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b72:	f7fd fb4d 	bl	8005210 <HAL_GetTick>
 8007b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b78:	e008      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b7a:	f7fd fb49 	bl	8005210 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d901      	bls.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e0b0      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b8c:	4b5b      	ldr	r3, [pc, #364]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1f0      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	019a      	lsls	r2, r3, #6
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	071b      	lsls	r3, r3, #28
 8007ba4:	4955      	ldr	r1, [pc, #340]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007bac:	4b52      	ldr	r3, [pc, #328]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007bae:	2201      	movs	r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bb2:	f7fd fb2d 	bl	8005210 <HAL_GetTick>
 8007bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bb8:	e008      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007bba:	f7fd fb29 	bl	8005210 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e090      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bcc:	4b4b      	ldr	r3, [pc, #300]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0f0      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 8083 	beq.w	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	4b44      	ldr	r3, [pc, #272]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bee:	4a43      	ldr	r2, [pc, #268]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8007bf6:	4b41      	ldr	r3, [pc, #260]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c02:	4b3f      	ldr	r3, [pc, #252]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a3e      	ldr	r2, [pc, #248]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c0e:	f7fd faff 	bl	8005210 <HAL_GetTick>
 8007c12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c14:	e008      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c16:	f7fd fafb 	bl	8005210 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e062      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c28:	4b35      	ldr	r3, [pc, #212]	; (8007d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0f0      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c34:	4b31      	ldr	r3, [pc, #196]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02f      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d028      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c52:	4b2a      	ldr	r3, [pc, #168]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c5c:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c62:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c68:	4a24      	ldr	r2, [pc, #144]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c6e:	4b23      	ldr	r3, [pc, #140]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d114      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c7a:	f7fd fac9 	bl	8005210 <HAL_GetTick>
 8007c7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c80:	e00a      	b.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c82:	f7fd fac5 	bl	8005210 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d901      	bls.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e02a      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c98:	4b18      	ldr	r3, [pc, #96]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9c:	f003 0302 	and.w	r3, r3, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0ee      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb0:	d10d      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc6:	490d      	ldr	r1, [pc, #52]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	608b      	str	r3, [r1, #8]
 8007ccc:	e005      	b.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007cce:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cd8:	6093      	str	r3, [r2, #8]
 8007cda:	4b08      	ldr	r3, [pc, #32]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce6:	4905      	ldr	r1, [pc, #20]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	42470068 	.word	0x42470068
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	40007000 	.word	0x40007000
 8007d04:	42470e40 	.word	0x42470e40

08007d08 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e083      	b.n	8007e22 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7f5b      	ldrb	r3, [r3, #29]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d105      	bne.n	8007d30 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7fc fb20 	bl	8004370 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2202      	movs	r2, #2
 8007d34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	22ca      	movs	r2, #202	; 0xca
 8007d3c:	625a      	str	r2, [r3, #36]	; 0x24
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2253      	movs	r2, #83	; 0x53
 8007d44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f9fb 	bl	8008142 <RTC_EnterInitMode>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d008      	beq.n	8007d64 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	22ff      	movs	r2, #255	; 0xff
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e05e      	b.n	8007e22 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d76:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6899      	ldr	r1, [r3, #8]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	68d2      	ldr	r2, [r2, #12]
 8007d9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6919      	ldr	r1, [r3, #16]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	041a      	lsls	r2, r3, #16
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dc2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10e      	bne.n	8007df0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f98d 	bl	80080f2 <HAL_RTC_WaitForSynchro>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d008      	beq.n	8007df0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	22ff      	movs	r2, #255	; 0xff
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2204      	movs	r2, #4
 8007dea:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e018      	b.n	8007e22 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dfe:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	22ff      	movs	r2, #255	; 0xff
 8007e18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007e20:	2300      	movs	r3, #0
  }
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007e2a:	b590      	push	{r4, r7, lr}
 8007e2c:	b087      	sub	sp, #28
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007e36:	2300      	movs	r3, #0
 8007e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	7f1b      	ldrb	r3, [r3, #28]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_RTC_SetTime+0x1c>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e0aa      	b.n	8007f9c <HAL_RTC_SetTime+0x172>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d126      	bne.n	8007ea6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d102      	bne.n	8007e6c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 f992 	bl	800819a <RTC_ByteToBcd2>
 8007e76:	4603      	mov	r3, r0
 8007e78:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	785b      	ldrb	r3, [r3, #1]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f98b 	bl	800819a <RTC_ByteToBcd2>
 8007e84:	4603      	mov	r3, r0
 8007e86:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e88:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	789b      	ldrb	r3, [r3, #2]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f983 	bl	800819a <RTC_ByteToBcd2>
 8007e94:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007e96:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	78db      	ldrb	r3, [r3, #3]
 8007e9e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	e018      	b.n	8007ed8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d102      	bne.n	8007eba <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ec6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ecc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	22ca      	movs	r2, #202	; 0xca
 8007ede:	625a      	str	r2, [r3, #36]	; 0x24
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2253      	movs	r2, #83	; 0x53
 8007ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f92a 	bl	8008142 <RTC_EnterInitMode>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	22ff      	movs	r2, #255	; 0xff
 8007efa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2204      	movs	r2, #4
 8007f00:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e047      	b.n	8007f9c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007f16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007f1a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007f2a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6899      	ldr	r1, [r3, #8]
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	430a      	orrs	r2, r1
 8007f42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f52:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	f003 0320 	and.w	r3, r3, #32
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d111      	bne.n	8007f86 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f000 f8c5 	bl	80080f2 <HAL_RTC_WaitForSynchro>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00b      	beq.n	8007f86 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	22ff      	movs	r2, #255	; 0xff
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e00a      	b.n	8007f9c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	22ff      	movs	r2, #255	; 0xff
 8007f8c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2201      	movs	r2, #1
 8007f92:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
  }
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	371c      	adds	r7, #28
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd90      	pop	{r4, r7, pc}

08007fa4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007fa4:	b590      	push	{r4, r7, lr}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	7f1b      	ldrb	r3, [r3, #28]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d101      	bne.n	8007fc0 <HAL_RTC_SetDate+0x1c>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	e094      	b.n	80080ea <HAL_RTC_SetDate+0x146>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10e      	bne.n	8007ff0 <HAL_RTC_SetDate+0x4c>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	f003 0310 	and.w	r3, r3, #16
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	785b      	ldrb	r3, [r3, #1]
 8007fe2:	f023 0310 	bic.w	r3, r3, #16
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	330a      	adds	r3, #10
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d11c      	bne.n	8008030 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	78db      	ldrb	r3, [r3, #3]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f8cd 	bl	800819a <RTC_ByteToBcd2>
 8008000:	4603      	mov	r3, r0
 8008002:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	785b      	ldrb	r3, [r3, #1]
 8008008:	4618      	mov	r0, r3
 800800a:	f000 f8c6 	bl	800819a <RTC_ByteToBcd2>
 800800e:	4603      	mov	r3, r0
 8008010:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008012:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	789b      	ldrb	r3, [r3, #2]
 8008018:	4618      	mov	r0, r3
 800801a:	f000 f8be 	bl	800819a <RTC_ByteToBcd2>
 800801e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008020:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800802a:	4313      	orrs	r3, r2
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e00e      	b.n	800804e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	78db      	ldrb	r3, [r3, #3]
 8008034:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800803c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008042:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	22ca      	movs	r2, #202	; 0xca
 8008054:	625a      	str	r2, [r3, #36]	; 0x24
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2253      	movs	r2, #83	; 0x53
 800805c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f000 f86f 	bl	8008142 <RTC_EnterInitMode>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00b      	beq.n	8008082 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	22ff      	movs	r2, #255	; 0xff
 8008070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2204      	movs	r2, #4
 8008076:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e033      	b.n	80080ea <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800808c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008090:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080a0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d111      	bne.n	80080d4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f81e 	bl	80080f2 <HAL_RTC_WaitForSynchro>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00b      	beq.n	80080d4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	22ff      	movs	r2, #255	; 0xff
 80080c2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2204      	movs	r2, #4
 80080c8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e00a      	b.n	80080ea <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	22ff      	movs	r2, #255	; 0xff
 80080da:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2201      	movs	r2, #1
 80080e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80080e8:	2300      	movs	r3, #0
  }
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd90      	pop	{r4, r7, pc}

080080f2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800810c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800810e:	f7fd f87f 	bl	8005210 <HAL_GetTick>
 8008112:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008114:	e009      	b.n	800812a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008116:	f7fd f87b 	bl	8005210 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008124:	d901      	bls.n	800812a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e007      	b.n	800813a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f003 0320 	and.w	r3, r3, #32
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0ee      	beq.n	8008116 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d119      	bne.n	8008190 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f04f 32ff 	mov.w	r2, #4294967295
 8008164:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008166:	f7fd f853 	bl	8005210 <HAL_GetTick>
 800816a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800816c:	e009      	b.n	8008182 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800816e:	f7fd f84f 	bl	8005210 <HAL_GetTick>
 8008172:	4602      	mov	r2, r0
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800817c:	d901      	bls.n	8008182 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e007      	b.n	8008192 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0ee      	beq.n	800816e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	4603      	mov	r3, r0
 80081a2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80081a8:	e005      	b.n	80081b6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	3301      	adds	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	3b0a      	subs	r3, #10
 80081b4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	2b09      	cmp	r3, #9
 80081ba:	d8f6      	bhi.n	80081aa <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b2db      	uxtb	r3, r3
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e022      	b.n	800822e <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d105      	bne.n	8008200 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fc f8ee 	bl	80043dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2203      	movs	r2, #3
 8008204:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f815 	bl	8008238 <HAL_SD_InitCard>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e00a      	b.n	800822e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3708      	adds	r7, #8
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008238:	b5b0      	push	{r4, r5, r7, lr}
 800823a:	b08e      	sub	sp, #56	; 0x38
 800823c:	af04      	add	r7, sp, #16
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008240:	2300      	movs	r3, #0
 8008242:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008250:	2300      	movs	r3, #0
 8008252:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008254:	2376      	movs	r3, #118	; 0x76
 8008256:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681d      	ldr	r5, [r3, #0]
 800825c:	466c      	mov	r4, sp
 800825e:	f107 0314 	add.w	r3, r7, #20
 8008262:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008266:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008270:	4628      	mov	r0, r5
 8008272:	f003 fa41 	bl	800b6f8 <SDIO_Init>
 8008276:	4603      	mov	r3, r0
 8008278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800827c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e04c      	b.n	8008322 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008288:	4b28      	ldr	r3, [pc, #160]	; (800832c <HAL_SD_InitCard+0xf4>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4618      	mov	r0, r3
 8008294:	f003 fa79 	bl	800b78a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008298:	4b24      	ldr	r3, [pc, #144]	; (800832c <HAL_SD_InitCard+0xf4>)
 800829a:	2201      	movs	r2, #1
 800829c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 ff02 	bl	80090a8 <SD_PowerON>
 80082a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e02e      	b.n	8008322 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fe23 	bl	8008f10 <SD_InitCard>
 80082ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082de:	6a3b      	ldr	r3, [r7, #32]
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	e01b      	b.n	8008322 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082f2:	4618      	mov	r0, r3
 80082f4:	f003 fadc 	bl	800b8b0 <SDMMC_CmdBlockLength>
 80082f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00f      	beq.n	8008320 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <HAL_SD_InitCard+0xf8>)
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3728      	adds	r7, #40	; 0x28
 8008326:	46bd      	mov	sp, r7
 8008328:	bdb0      	pop	{r4, r5, r7, pc}
 800832a:	bf00      	nop
 800832c:	422580a0 	.word	0x422580a0
 8008330:	004005ff 	.word	0x004005ff

08008334 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b092      	sub	sp, #72	; 0x48
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008342:	f7fc ff65 	bl	8005210 <HAL_GetTick>
 8008346:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d107      	bne.n	8008366 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e1bd      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b01      	cmp	r3, #1
 8008370:	f040 81b0 	bne.w	80086d4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800837a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	441a      	add	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008384:	429a      	cmp	r2, r3
 8008386:	d907      	bls.n	8008398 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e1a4      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2203      	movs	r2, #3
 800839c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2200      	movs	r2, #0
 80083a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d002      	beq.n	80083b6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80083b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b2:	025b      	lsls	r3, r3, #9
 80083b4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083b6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	025b      	lsls	r3, r3, #9
 80083c0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80083c2:	2390      	movs	r3, #144	; 0x90
 80083c4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80083c6:	2302      	movs	r3, #2
 80083c8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80083ce:	2301      	movs	r3, #1
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f107 0214 	add.w	r2, r7, #20
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f003 fa3b 	bl	800b858 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d90a      	bls.n	80083fe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2202      	movs	r2, #2
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083f4:	4618      	mov	r0, r3
 80083f6:	f003 fa9f 	bl	800b938 <SDMMC_CmdReadMultiBlock>
 80083fa:	6478      	str	r0, [r7, #68]	; 0x44
 80083fc:	e009      	b.n	8008412 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2201      	movs	r2, #1
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800840a:	4618      	mov	r0, r3
 800840c:	f003 fa72 	bl	800b8f4 <SDMMC_CmdReadSingleBlock>
 8008410:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008414:	2b00      	cmp	r3, #0
 8008416:	d012      	beq.n	800843e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a7a      	ldr	r2, [pc, #488]	; (8008608 <HAL_SD_ReadBlocks+0x2d4>)
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008426:	431a      	orrs	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e151      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008442:	e061      	b.n	8008508 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d03c      	beq.n	80084cc <HAL_SD_ReadBlocks+0x198>
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d039      	beq.n	80084cc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008458:	2300      	movs	r3, #0
 800845a:	643b      	str	r3, [r7, #64]	; 0x40
 800845c:	e033      	b.n	80084c6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f003 f973 	bl	800b74e <SDIO_ReadFIFO>
 8008468:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	b2da      	uxtb	r2, r3
 800846e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008470:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	3301      	adds	r3, #1
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847a:	3b01      	subs	r3, #1
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008480:	0a1b      	lsrs	r3, r3, #8
 8008482:	b2da      	uxtb	r2, r3
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008486:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848a:	3301      	adds	r3, #1
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800848e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008490:	3b01      	subs	r3, #1
 8008492:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	b2da      	uxtb	r2, r3
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	3301      	adds	r3, #1
 80084a2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80084a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a6:	3b01      	subs	r3, #1
 80084a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	0e1b      	lsrs	r3, r3, #24
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	3301      	adds	r3, #1
 80084b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80084ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084bc:	3b01      	subs	r3, #1
 80084be:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80084c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c2:	3301      	adds	r3, #1
 80084c4:	643b      	str	r3, [r7, #64]	; 0x40
 80084c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c8:	2b07      	cmp	r3, #7
 80084ca:	d9c8      	bls.n	800845e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80084cc:	f7fc fea0 	bl	8005210 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084d8:	429a      	cmp	r2, r3
 80084da:	d902      	bls.n	80084e2 <HAL_SD_ReadBlocks+0x1ae>
 80084dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d112      	bne.n	8008508 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a48      	ldr	r2, [pc, #288]	; (8008608 <HAL_SD_ReadBlocks+0x2d4>)
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e0ec      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800850e:	f240 332a 	movw	r3, #810	; 0x32a
 8008512:	4013      	ands	r3, r2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d095      	beq.n	8008444 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800851e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008522:	2b00      	cmp	r3, #0
 8008524:	d022      	beq.n	800856c <HAL_SD_ReadBlocks+0x238>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d91f      	bls.n	800856c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008530:	2b03      	cmp	r3, #3
 8008532:	d01b      	beq.n	800856c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4618      	mov	r0, r3
 800853a:	f003 fa63 	bl	800ba04 <SDMMC_CmdStopTransfer>
 800853e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008542:	2b00      	cmp	r3, #0
 8008544:	d012      	beq.n	800856c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a2f      	ldr	r2, [pc, #188]	; (8008608 <HAL_SD_ReadBlocks+0x2d4>)
 800854c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008554:	431a      	orrs	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e0ba      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b00      	cmp	r3, #0
 8008578:	d012      	beq.n	80085a0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a22      	ldr	r2, [pc, #136]	; (8008608 <HAL_SD_ReadBlocks+0x2d4>)
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	f043 0208 	orr.w	r2, r3, #8
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e0a0      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d012      	beq.n	80085d4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a15      	ldr	r2, [pc, #84]	; (8008608 <HAL_SD_ReadBlocks+0x2d4>)
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	f043 0202 	orr.w	r2, r3, #2
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e086      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d063      	beq.n	80086aa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a08      	ldr	r2, [pc, #32]	; (8008608 <HAL_SD_ReadBlocks+0x2d4>)
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	f043 0220 	orr.w	r2, r3, #32
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e06c      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
 8008608:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f003 f89c 	bl	800b74e <SDIO_ReadFIFO>
 8008616:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800861a:	b2da      	uxtb	r2, r3
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	3301      	adds	r3, #1
 8008624:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008628:	3b01      	subs	r3, #1
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800862c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	b2da      	uxtb	r2, r3
 8008632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008634:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	3301      	adds	r3, #1
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800863c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863e:	3b01      	subs	r3, #1
 8008640:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	0c1b      	lsrs	r3, r3, #16
 8008646:	b2da      	uxtb	r2, r3
 8008648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	3301      	adds	r3, #1
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008654:	3b01      	subs	r3, #1
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	0e1b      	lsrs	r3, r3, #24
 800865c:	b2da      	uxtb	r2, r3
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	3301      	adds	r3, #1
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800866a:	3b01      	subs	r3, #1
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800866e:	f7fc fdcf 	bl	8005210 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800867a:	429a      	cmp	r2, r3
 800867c:	d902      	bls.n	8008684 <HAL_SD_ReadBlocks+0x350>
 800867e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008680:	2b00      	cmp	r3, #0
 8008682:	d112      	bne.n	80086aa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a18      	ldr	r2, [pc, #96]	; (80086ec <HAL_SD_ReadBlocks+0x3b8>)
 800868a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e01b      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d002      	beq.n	80086be <HAL_SD_ReadBlocks+0x38a>
 80086b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1a6      	bne.n	800860c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80086c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	e006      	b.n	80086e2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
  }
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3748      	adds	r7, #72	; 0x48
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	004005ff 	.word	0x004005ff

080086f0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b092      	sub	sp, #72	; 0x48
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80086fe:	f7fc fd87 	bl	8005210 <HAL_GetTick>
 8008702:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d107      	bne.n	8008722 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e166      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b01      	cmp	r3, #1
 800872c:	f040 8159 	bne.w	80089e2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	441a      	add	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008740:	429a      	cmp	r2, r3
 8008742:	d907      	bls.n	8008754 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008748:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e14d      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2203      	movs	r2, #3
 8008758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2200      	movs	r2, #0
 8008762:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	2b01      	cmp	r3, #1
 800876a:	d002      	beq.n	8008772 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	025b      	lsls	r3, r3, #9
 8008770:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	025b      	lsls	r3, r3, #9
 800877c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800877e:	2390      	movs	r3, #144	; 0x90
 8008780:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008782:	2300      	movs	r3, #0
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008786:	2300      	movs	r3, #0
 8008788:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800878a:	2301      	movs	r3, #1
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f107 0218 	add.w	r2, r7, #24
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f003 f85d 	bl	800b858 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d90a      	bls.n	80087ba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2220      	movs	r2, #32
 80087a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087b0:	4618      	mov	r0, r3
 80087b2:	f003 f905 	bl	800b9c0 <SDMMC_CmdWriteMultiBlock>
 80087b6:	6478      	str	r0, [r7, #68]	; 0x44
 80087b8:	e009      	b.n	80087ce <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2210      	movs	r2, #16
 80087be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 f8d8 	bl	800b97c <SDMMC_CmdWriteSingleBlock>
 80087cc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80087ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d012      	beq.n	80087fa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a87      	ldr	r2, [pc, #540]	; (80089f8 <HAL_SD_WriteBlocks+0x308>)
 80087da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e2:	431a      	orrs	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e0fa      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80087fe:	e065      	b.n	80088cc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d040      	beq.n	8008890 <HAL_SD_WriteBlocks+0x1a0>
 800880e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d03d      	beq.n	8008890 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008814:	2300      	movs	r3, #0
 8008816:	643b      	str	r3, [r7, #64]	; 0x40
 8008818:	e037      	b.n	800888a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008822:	3301      	adds	r3, #1
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008828:	3b01      	subs	r3, #1
 800882a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	021a      	lsls	r2, r3, #8
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883a:	3301      	adds	r3, #1
 800883c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800883e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008840:	3b01      	subs	r3, #1
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	041a      	lsls	r2, r3, #16
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	4313      	orrs	r3, r2
 800884e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008852:	3301      	adds	r3, #1
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008858:	3b01      	subs	r3, #1
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800885c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	061a      	lsls	r2, r3, #24
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886a:	3301      	adds	r3, #1
 800886c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800886e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008870:	3b01      	subs	r3, #1
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f107 0214 	add.w	r2, r7, #20
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f002 ff72 	bl	800b768 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008886:	3301      	adds	r3, #1
 8008888:	643b      	str	r3, [r7, #64]	; 0x40
 800888a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800888c:	2b07      	cmp	r3, #7
 800888e:	d9c4      	bls.n	800881a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008890:	f7fc fcbe 	bl	8005210 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800889c:	429a      	cmp	r2, r3
 800889e:	d902      	bls.n	80088a6 <HAL_SD_WriteBlocks+0x1b6>
 80088a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d112      	bne.n	80088cc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a53      	ldr	r2, [pc, #332]	; (80089f8 <HAL_SD_WriteBlocks+0x308>)
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b4:	431a      	orrs	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e091      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088d2:	f240 331a 	movw	r3, #794	; 0x31a
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d091      	beq.n	8008800 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d022      	beq.n	8008930 <HAL_SD_WriteBlocks+0x240>
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d91f      	bls.n	8008930 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d01b      	beq.n	8008930 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f003 f881 	bl	800ba04 <SDMMC_CmdStopTransfer>
 8008902:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008906:	2b00      	cmp	r3, #0
 8008908:	d012      	beq.n	8008930 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a3a      	ldr	r2, [pc, #232]	; (80089f8 <HAL_SD_WriteBlocks+0x308>)
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008918:	431a      	orrs	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e05f      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d012      	beq.n	8008964 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a2d      	ldr	r2, [pc, #180]	; (80089f8 <HAL_SD_WriteBlocks+0x308>)
 8008944:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	f043 0208 	orr.w	r2, r3, #8
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e045      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896a:	f003 0302 	and.w	r3, r3, #2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d012      	beq.n	8008998 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a20      	ldr	r2, [pc, #128]	; (80089f8 <HAL_SD_WriteBlocks+0x308>)
 8008978:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800897e:	f043 0202 	orr.w	r2, r3, #2
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e02b      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899e:	f003 0310 	and.w	r3, r3, #16
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d012      	beq.n	80089cc <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a13      	ldr	r2, [pc, #76]	; (80089f8 <HAL_SD_WriteBlocks+0x308>)
 80089ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b2:	f043 0210 	orr.w	r2, r3, #16
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e011      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	e006      	b.n	80089f0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
  }
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3748      	adds	r7, #72	; 0x48
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	004005ff 	.word	0x004005ff

080089fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a0a:	0f9b      	lsrs	r3, r3, #30
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a16:	0e9b      	lsrs	r3, r3, #26
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a28:	0e1b      	lsrs	r3, r3, #24
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3a:	0c1b      	lsrs	r3, r3, #16
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a46:	0a1b      	lsrs	r3, r3, #8
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a5c:	0d1b      	lsrs	r3, r3, #20
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a68:	0c1b      	lsrs	r3, r3, #16
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a7a:	0bdb      	lsrs	r3, r3, #15
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a8c:	0b9b      	lsrs	r3, r3, #14
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0301 	and.w	r3, r3, #1
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a9e:	0b5b      	lsrs	r3, r3, #13
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab0:	0b1b      	lsrs	r3, r3, #12
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d163      	bne.n	8008b94 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad0:	009a      	lsls	r2, r3, #2
 8008ad2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008adc:	0f92      	lsrs	r2, r2, #30
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae8:	0edb      	lsrs	r3, r3, #27
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	f003 0307 	and.w	r3, r3, #7
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008afa:	0e1b      	lsrs	r3, r3, #24
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0307 	and.w	r3, r3, #7
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b0c:	0d5b      	lsrs	r3, r3, #21
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b1e:	0c9b      	lsrs	r3, r3, #18
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b30:	0bdb      	lsrs	r3, r3, #15
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	7e1b      	ldrb	r3, [r3, #24]
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	3302      	adds	r3, #2
 8008b54:	2201      	movs	r2, #1
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b5e:	fb02 f203 	mul.w	r2, r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	7a1b      	ldrb	r3, [r3, #8]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	2201      	movs	r2, #1
 8008b72:	409a      	lsls	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b80:	0a52      	lsrs	r2, r2, #9
 8008b82:	fb02 f203 	mul.w	r2, r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b90:	661a      	str	r2, [r3, #96]	; 0x60
 8008b92:	e031      	b.n	8008bf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d11d      	bne.n	8008bd8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ba0:	041b      	lsls	r3, r3, #16
 8008ba2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008baa:	0c1b      	lsrs	r3, r3, #16
 8008bac:	431a      	orrs	r2, r3
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	029a      	lsls	r2, r3, #10
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bcc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	661a      	str	r2, [r3, #96]	; 0x60
 8008bd6:	e00f      	b.n	8008bf8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a58      	ldr	r2, [pc, #352]	; (8008d40 <HAL_SD_GetCardCSD+0x344>)
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e09d      	b.n	8008d34 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	0b9b      	lsrs	r3, r3, #14
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 0301 	and.w	r3, r3, #1
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c0e:	09db      	lsrs	r3, r3, #7
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c30:	0fdb      	lsrs	r3, r3, #31
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3c:	0f5b      	lsrs	r3, r3, #29
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0303 	and.w	r3, r3, #3
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4e:	0e9b      	lsrs	r3, r3, #26
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c60:	0d9b      	lsrs	r3, r3, #22
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	0d5b      	lsrs	r3, r3, #21
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	b2da      	uxtb	r2, r3
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	0bdb      	lsrs	r3, r3, #15
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	0b9b      	lsrs	r3, r3, #14
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	0b5b      	lsrs	r3, r3, #13
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	0b1b      	lsrs	r3, r3, #12
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	0a9b      	lsrs	r3, r3, #10
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d32:	2300      	movs	r3, #0
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	004005ff 	.word	0x004005ff

08008d44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008d9c:	b5b0      	push	{r4, r5, r7, lr}
 8008d9e:	b08e      	sub	sp, #56	; 0x38
 8008da0:	af04      	add	r7, sp, #16
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2203      	movs	r2, #3
 8008db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d02e      	beq.n	8008e1a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc2:	d106      	bne.n	8008dd2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38
 8008dd0:	e029      	b.n	8008e26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd8:	d10a      	bne.n	8008df0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa1a 	bl	8009214 <SD_WideBus_Enable>
 8008de0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	431a      	orrs	r2, r3
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	639a      	str	r2, [r3, #56]	; 0x38
 8008dee:	e01a      	b.n	8008e26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10a      	bne.n	8008e0c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa57 	bl	80092aa <SD_WideBus_Disable>
 8008dfc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
 8008e0a:	e00c      	b.n	8008e26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	639a      	str	r2, [r3, #56]	; 0x38
 8008e18:	e005      	b.n	8008e26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a26      	ldr	r2, [pc, #152]	; (8008ecc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008e34:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008e44:	e01f      	b.n	8008e86 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681d      	ldr	r5, [r3, #0]
 8008e6c:	466c      	mov	r4, sp
 8008e6e:	f107 0314 	add.w	r3, r7, #20
 8008e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e7a:	f107 0308 	add.w	r3, r7, #8
 8008e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e80:	4628      	mov	r0, r5
 8008e82:	f002 fc39 	bl	800b6f8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f002 fd0e 	bl	800b8b0 <SDMMC_CmdBlockLength>
 8008e94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00c      	beq.n	8008eb6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a0a      	ldr	r2, [pc, #40]	; (8008ecc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3728      	adds	r7, #40	; 0x28
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	004005ff 	.word	0x004005ff

08008ed0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008edc:	f107 030c 	add.w	r3, r7, #12
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f96e 	bl	80091c4 <SD_SendStatus>
 8008ee8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d005      	beq.n	8008efc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	0a5b      	lsrs	r3, r3, #9
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f06:	693b      	ldr	r3, [r7, #16]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f10:	b5b0      	push	{r4, r5, r7, lr}
 8008f12:	b094      	sub	sp, #80	; 0x50
 8008f14:	af04      	add	r7, sp, #16
 8008f16:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f002 fc41 	bl	800b7a8 <SDIO_GetPowerState>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008f30:	e0b6      	b.n	80090a0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d02f      	beq.n	8008f9a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 fe6a 	bl	800bc18 <SDMMC_CmdSendCID>
 8008f44:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <SD_InitCard+0x40>
    {
      return errorstate;
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4e:	e0a7      	b.n	80090a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2100      	movs	r1, #0
 8008f56:	4618      	mov	r0, r3
 8008f58:	f002 fc6b 	bl	800b832 <SDIO_GetResponse>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2104      	movs	r1, #4
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f002 fc62 	bl	800b832 <SDIO_GetResponse>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2108      	movs	r1, #8
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f002 fc59 	bl	800b832 <SDIO_GetResponse>
 8008f80:	4602      	mov	r2, r0
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	210c      	movs	r1, #12
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f002 fc50 	bl	800b832 <SDIO_GetResponse>
 8008f92:	4602      	mov	r2, r0
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d00d      	beq.n	8008fbe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f107 020e 	add.w	r2, r7, #14
 8008faa:	4611      	mov	r1, r2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 fe70 	bl	800bc92 <SDMMC_CmdSetRelAdd>
 8008fb2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d001      	beq.n	8008fbe <SD_InitCard+0xae>
    {
      return errorstate;
 8008fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fbc:	e070      	b.n	80090a0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d036      	beq.n	8009034 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008fc6:	89fb      	ldrh	r3, [r7, #14]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd6:	041b      	lsls	r3, r3, #16
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f002 fe3a 	bl	800bc54 <SDMMC_CmdSendCSD>
 8008fe0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <SD_InitCard+0xdc>
    {
      return errorstate;
 8008fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fea:	e059      	b.n	80090a0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f002 fc1d 	bl	800b832 <SDIO_GetResponse>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2104      	movs	r1, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f002 fc14 	bl	800b832 <SDIO_GetResponse>
 800900a:	4602      	mov	r2, r0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2108      	movs	r1, #8
 8009016:	4618      	mov	r0, r3
 8009018:	f002 fc0b 	bl	800b832 <SDIO_GetResponse>
 800901c:	4602      	mov	r2, r0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	210c      	movs	r1, #12
 8009028:	4618      	mov	r0, r3
 800902a:	f002 fc02 	bl	800b832 <SDIO_GetResponse>
 800902e:	4602      	mov	r2, r0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2104      	movs	r1, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f002 fbf9 	bl	800b832 <SDIO_GetResponse>
 8009040:	4603      	mov	r3, r0
 8009042:	0d1a      	lsrs	r2, r3, #20
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009048:	f107 0310 	add.w	r3, r7, #16
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7ff fcd4 	bl	80089fc <HAL_SD_GetCardCSD>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800905a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800905e:	e01f      	b.n	80090a0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6819      	ldr	r1, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009068:	041b      	lsls	r3, r3, #16
 800906a:	461a      	mov	r2, r3
 800906c:	f04f 0300 	mov.w	r3, #0
 8009070:	4608      	mov	r0, r1
 8009072:	f002 fce9 	bl	800ba48 <SDMMC_CmdSelDesel>
 8009076:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <SD_InitCard+0x172>
  {
    return errorstate;
 800907e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009080:	e00e      	b.n	80090a0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681d      	ldr	r5, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	466c      	mov	r4, sp
 800908a:	f103 0210 	add.w	r2, r3, #16
 800908e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009090:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009094:	3304      	adds	r3, #4
 8009096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009098:	4628      	mov	r0, r5
 800909a:	f002 fb2d 	bl	800b6f8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3740      	adds	r7, #64	; 0x40
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bdb0      	pop	{r4, r5, r7, pc}

080090a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	2300      	movs	r3, #0
 80090ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f002 fce4 	bl	800ba8e <SDMMC_CmdGoIdleState>
 80090c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d001      	beq.n	80090d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	e072      	b.n	80091b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f002 fcf7 	bl	800baca <SDMMC_CmdOperCond>
 80090dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00d      	beq.n	8009100 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 fccd 	bl	800ba8e <SDMMC_CmdGoIdleState>
 80090f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <SD_PowerON+0x5e>
    {
      return errorstate;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	e05b      	b.n	80091b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800910a:	2b01      	cmp	r3, #1
 800910c:	d137      	bne.n	800917e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2100      	movs	r1, #0
 8009114:	4618      	mov	r0, r3
 8009116:	f002 fcf7 	bl	800bb08 <SDMMC_CmdAppCommand>
 800911a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d02d      	beq.n	800917e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009122:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009126:	e047      	b.n	80091b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2100      	movs	r1, #0
 800912e:	4618      	mov	r0, r3
 8009130:	f002 fcea 	bl	800bb08 <SDMMC_CmdAppCommand>
 8009134:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <SD_PowerON+0x98>
    {
      return errorstate;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	e03b      	b.n	80091b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	491e      	ldr	r1, [pc, #120]	; (80091c0 <SD_PowerON+0x118>)
 8009146:	4618      	mov	r0, r3
 8009148:	f002 fd00 	bl	800bb4c <SDMMC_CmdAppOperCommand>
 800914c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009158:	e02e      	b.n	80091b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f002 fb66 	bl	800b832 <SDIO_GetResponse>
 8009166:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	0fdb      	lsrs	r3, r3, #31
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <SD_PowerON+0xcc>
 8009170:	2301      	movs	r3, #1
 8009172:	e000      	b.n	8009176 <SD_PowerON+0xce>
 8009174:	2300      	movs	r3, #0
 8009176:	613b      	str	r3, [r7, #16]

    count++;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	3301      	adds	r3, #1
 800917c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009184:	4293      	cmp	r3, r2
 8009186:	d802      	bhi.n	800918e <SD_PowerON+0xe6>
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0cc      	beq.n	8009128 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009194:	4293      	cmp	r3, r2
 8009196:	d902      	bls.n	800919e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800919c:	e00c      	b.n	80091b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	645a      	str	r2, [r3, #68]	; 0x44
 80091ae:	e002      	b.n	80091b6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	c1100000 	.word	0xc1100000

080091c4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d102      	bne.n	80091da <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80091d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091d8:	e018      	b.n	800920c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	041b      	lsls	r3, r3, #16
 80091e4:	4619      	mov	r1, r3
 80091e6:	4610      	mov	r0, r2
 80091e8:	f002 fd74 	bl	800bcd4 <SDMMC_CmdSendStatus>
 80091ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	e009      	b.n	800920c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f002 fb17 	bl	800b832 <SDIO_GetResponse>
 8009204:	4602      	mov	r2, r0
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	2300      	movs	r3, #0
 8009222:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2100      	movs	r1, #0
 800922a:	4618      	mov	r0, r3
 800922c:	f002 fb01 	bl	800b832 <SDIO_GetResponse>
 8009230:	4603      	mov	r3, r0
 8009232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800923a:	d102      	bne.n	8009242 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800923c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009240:	e02f      	b.n	80092a2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009242:	f107 030c 	add.w	r3, r7, #12
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f879 	bl	8009340 <SD_FindSCR>
 800924e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	e023      	b.n	80092a2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d01c      	beq.n	800929e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	041b      	lsls	r3, r3, #16
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f002 fc49 	bl	800bb08 <SDMMC_CmdAppCommand>
 8009276:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d001      	beq.n	8009282 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	e00f      	b.n	80092a2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2102      	movs	r1, #2
 8009288:	4618      	mov	r0, r3
 800928a:	f002 fc82 	bl	800bb92 <SDMMC_CmdBusWidth>
 800928e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	e003      	b.n	80092a2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800929a:	2300      	movs	r3, #0
 800929c:	e001      	b.n	80092a2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800929e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3718      	adds	r7, #24
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b086      	sub	sp, #24
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
 80092b6:	2300      	movs	r3, #0
 80092b8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2100      	movs	r1, #0
 80092c0:	4618      	mov	r0, r3
 80092c2:	f002 fab6 	bl	800b832 <SDIO_GetResponse>
 80092c6:	4603      	mov	r3, r0
 80092c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d0:	d102      	bne.n	80092d8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092d6:	e02f      	b.n	8009338 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092d8:	f107 030c 	add.w	r3, r7, #12
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f82e 	bl	8009340 <SD_FindSCR>
 80092e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	e023      	b.n	8009338 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d01c      	beq.n	8009334 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009302:	041b      	lsls	r3, r3, #16
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f002 fbfe 	bl	800bb08 <SDMMC_CmdAppCommand>
 800930c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	e00f      	b.n	8009338 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2100      	movs	r1, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f002 fc37 	bl	800bb92 <SDMMC_CmdBusWidth>
 8009324:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	e003      	b.n	8009338 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009330:	2300      	movs	r3, #0
 8009332:	e001      	b.n	8009338 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009340:	b590      	push	{r4, r7, lr}
 8009342:	b08f      	sub	sp, #60	; 0x3c
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800934a:	f7fb ff61 	bl	8005210 <HAL_GetTick>
 800934e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009354:	2300      	movs	r3, #0
 8009356:	60bb      	str	r3, [r7, #8]
 8009358:	2300      	movs	r3, #0
 800935a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2108      	movs	r1, #8
 8009366:	4618      	mov	r0, r3
 8009368:	f002 faa2 	bl	800b8b0 <SDMMC_CmdBlockLength>
 800936c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	e0b2      	b.n	80094de <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009380:	041b      	lsls	r3, r3, #16
 8009382:	4619      	mov	r1, r3
 8009384:	4610      	mov	r0, r2
 8009386:	f002 fbbf 	bl	800bb08 <SDMMC_CmdAppCommand>
 800938a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	e0a3      	b.n	80094de <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009396:	f04f 33ff 	mov.w	r3, #4294967295
 800939a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800939c:	2308      	movs	r3, #8
 800939e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80093a0:	2330      	movs	r3, #48	; 0x30
 80093a2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80093a4:	2302      	movs	r3, #2
 80093a6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80093ac:	2301      	movs	r3, #1
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f107 0210 	add.w	r2, r7, #16
 80093b8:	4611      	mov	r1, r2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f002 fa4c 	bl	800b858 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4618      	mov	r0, r3
 80093c6:	f002 fc06 	bl	800bbd6 <SDMMC_CmdSendSCR>
 80093ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d02a      	beq.n	8009428 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	e083      	b.n	80094de <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00f      	beq.n	8009404 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6819      	ldr	r1, [r3, #0]
 80093e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	f107 0208 	add.w	r2, r7, #8
 80093f0:	18d4      	adds	r4, r2, r3
 80093f2:	4608      	mov	r0, r1
 80093f4:	f002 f9ab 	bl	800b74e <SDIO_ReadFIFO>
 80093f8:	4603      	mov	r3, r0
 80093fa:	6023      	str	r3, [r4, #0]
      index++;
 80093fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093fe:	3301      	adds	r3, #1
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
 8009402:	e006      	b.n	8009412 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d012      	beq.n	8009438 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009412:	f7fb fefd 	bl	8005210 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d102      	bne.n	8009428 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009422:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009426:	e05a      	b.n	80094de <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0cf      	beq.n	80093d6 <SD_FindSCR+0x96>
 8009436:	e000      	b.n	800943a <SD_FindSCR+0xfa>
      break;
 8009438:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2208      	movs	r2, #8
 800944e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009450:	2308      	movs	r3, #8
 8009452:	e044      	b.n	80094de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2202      	movs	r2, #2
 8009468:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800946a:	2302      	movs	r3, #2
 800946c:	e037      	b.n	80094de <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009474:	f003 0320 	and.w	r3, r3, #32
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2220      	movs	r2, #32
 8009482:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009484:	2320      	movs	r3, #32
 8009486:	e02a      	b.n	80094de <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009490:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	061a      	lsls	r2, r3, #24
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800949e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	0a1b      	lsrs	r3, r3, #8
 80094a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	0e1b      	lsrs	r3, r3, #24
 80094ae:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b2:	601a      	str	r2, [r3, #0]
    scr++;
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	3304      	adds	r3, #4
 80094b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	061a      	lsls	r2, r3, #24
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	0a1b      	lsrs	r3, r3, #8
 80094cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	0e1b      	lsrs	r3, r3, #24
 80094d6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094da:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	373c      	adds	r7, #60	; 0x3c
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd90      	pop	{r4, r7, pc}

080094e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b082      	sub	sp, #8
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e07b      	b.n	80095f0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d108      	bne.n	8009512 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009508:	d009      	beq.n	800951e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	61da      	str	r2, [r3, #28]
 8009510:	e005      	b.n	800951e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fa ffff 	bl	800453c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2202      	movs	r2, #2
 8009542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009554:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	431a      	orrs	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009598:	431a      	orrs	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a2:	ea42 0103 	orr.w	r1, r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	0c1b      	lsrs	r3, r3, #16
 80095bc:	f003 0104 	and.w	r1, r3, #4
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	f003 0210 	and.w	r2, r3, #16
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	69da      	ldr	r2, [r3, #28]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	4613      	mov	r3, r2
 8009606:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009612:	2b01      	cmp	r3, #1
 8009614:	d101      	bne.n	800961a <HAL_SPI_Transmit+0x22>
 8009616:	2302      	movs	r3, #2
 8009618:	e126      	b.n	8009868 <HAL_SPI_Transmit+0x270>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009622:	f7fb fdf5 	bl	8005210 <HAL_GetTick>
 8009626:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009628:	88fb      	ldrh	r3, [r7, #6]
 800962a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d002      	beq.n	800963e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009638:	2302      	movs	r3, #2
 800963a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800963c:	e10b      	b.n	8009856 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <HAL_SPI_Transmit+0x52>
 8009644:	88fb      	ldrh	r3, [r7, #6]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800964a:	2301      	movs	r3, #1
 800964c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800964e:	e102      	b.n	8009856 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2203      	movs	r2, #3
 8009654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	88fa      	ldrh	r2, [r7, #6]
 8009668:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	88fa      	ldrh	r2, [r7, #6]
 800966e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2200      	movs	r2, #0
 8009680:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009696:	d10f      	bne.n	80096b8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	2b40      	cmp	r3, #64	; 0x40
 80096c4:	d007      	beq.n	80096d6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096de:	d14b      	bne.n	8009778 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <HAL_SPI_Transmit+0xf6>
 80096e8:	8afb      	ldrh	r3, [r7, #22]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d13e      	bne.n	800976c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f2:	881a      	ldrh	r2, [r3, #0]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	1c9a      	adds	r2, r3, #2
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009708:	b29b      	uxth	r3, r3
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009712:	e02b      	b.n	800976c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 0302 	and.w	r3, r3, #2
 800971e:	2b02      	cmp	r3, #2
 8009720:	d112      	bne.n	8009748 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009726:	881a      	ldrh	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009732:	1c9a      	adds	r2, r3, #2
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800973c:	b29b      	uxth	r3, r3
 800973e:	3b01      	subs	r3, #1
 8009740:	b29a      	uxth	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	86da      	strh	r2, [r3, #54]	; 0x36
 8009746:	e011      	b.n	800976c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009748:	f7fb fd62 	bl	8005210 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d803      	bhi.n	8009760 <HAL_SPI_Transmit+0x168>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975e:	d102      	bne.n	8009766 <HAL_SPI_Transmit+0x16e>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009766:	2303      	movs	r3, #3
 8009768:	77fb      	strb	r3, [r7, #31]
          goto error;
 800976a:	e074      	b.n	8009856 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009770:	b29b      	uxth	r3, r3
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1ce      	bne.n	8009714 <HAL_SPI_Transmit+0x11c>
 8009776:	e04c      	b.n	8009812 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <HAL_SPI_Transmit+0x18e>
 8009780:	8afb      	ldrh	r3, [r7, #22]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d140      	bne.n	8009808 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	330c      	adds	r3, #12
 8009790:	7812      	ldrb	r2, [r2, #0]
 8009792:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	3b01      	subs	r3, #1
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80097ac:	e02c      	b.n	8009808 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f003 0302 	and.w	r3, r3, #2
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d113      	bne.n	80097e4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	330c      	adds	r3, #12
 80097c6:	7812      	ldrb	r2, [r2, #0]
 80097c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d8:	b29b      	uxth	r3, r3
 80097da:	3b01      	subs	r3, #1
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80097e2:	e011      	b.n	8009808 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097e4:	f7fb fd14 	bl	8005210 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d803      	bhi.n	80097fc <HAL_SPI_Transmit+0x204>
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d102      	bne.n	8009802 <HAL_SPI_Transmit+0x20a>
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d102      	bne.n	8009808 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009806:	e026      	b.n	8009856 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800980c:	b29b      	uxth	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1cd      	bne.n	80097ae <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f000 fd22 	bl	800a260 <SPI_EndRxTxTransaction>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2220      	movs	r2, #32
 8009826:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	613b      	str	r3, [r7, #16]
 8009844:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	77fb      	strb	r3, [r7, #31]
 8009852:	e000      	b.n	8009856 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009854:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009866:	7ffb      	ldrb	r3, [r7, #31]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3720      	adds	r7, #32
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b088      	sub	sp, #32
 8009874:	af02      	add	r7, sp, #8
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	4613      	mov	r3, r2
 800987e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800988c:	d112      	bne.n	80098b4 <HAL_SPI_Receive+0x44>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10e      	bne.n	80098b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2204      	movs	r2, #4
 800989a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800989e:	88fa      	ldrh	r2, [r7, #6]
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	4613      	mov	r3, r2
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f8f1 	bl	8009a92 <HAL_SPI_TransmitReceive>
 80098b0:	4603      	mov	r3, r0
 80098b2:	e0ea      	b.n	8009a8a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d101      	bne.n	80098c2 <HAL_SPI_Receive+0x52>
 80098be:	2302      	movs	r3, #2
 80098c0:	e0e3      	b.n	8009a8a <HAL_SPI_Receive+0x21a>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ca:	f7fb fca1 	bl	8005210 <HAL_GetTick>
 80098ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d002      	beq.n	80098e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80098dc:	2302      	movs	r3, #2
 80098de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098e0:	e0ca      	b.n	8009a78 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <HAL_SPI_Receive+0x7e>
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098f2:	e0c1      	b.n	8009a78 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2204      	movs	r2, #4
 80098f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	88fa      	ldrh	r2, [r7, #6]
 800990c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	88fa      	ldrh	r2, [r7, #6]
 8009912:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800993a:	d10f      	bne.n	800995c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800994a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800995a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009966:	2b40      	cmp	r3, #64	; 0x40
 8009968:	d007      	beq.n	800997a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009978:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d162      	bne.n	8009a48 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009982:	e02e      	b.n	80099e2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	2b01      	cmp	r3, #1
 8009990:	d115      	bne.n	80099be <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f103 020c 	add.w	r2, r3, #12
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999e:	7812      	ldrb	r2, [r2, #0]
 80099a0:	b2d2      	uxtb	r2, r2
 80099a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a8:	1c5a      	adds	r2, r3, #1
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	3b01      	subs	r3, #1
 80099b6:	b29a      	uxth	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099bc:	e011      	b.n	80099e2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099be:	f7fb fc27 	bl	8005210 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d803      	bhi.n	80099d6 <HAL_SPI_Receive+0x166>
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d4:	d102      	bne.n	80099dc <HAL_SPI_Receive+0x16c>
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d102      	bne.n	80099e2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80099e0:	e04a      	b.n	8009a78 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1cb      	bne.n	8009984 <HAL_SPI_Receive+0x114>
 80099ec:	e031      	b.n	8009a52 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d113      	bne.n	8009a24 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	b292      	uxth	r2, r2
 8009a08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	1c9a      	adds	r2, r3, #2
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a22:	e011      	b.n	8009a48 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a24:	f7fb fbf4 	bl	8005210 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	683a      	ldr	r2, [r7, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d803      	bhi.n	8009a3c <HAL_SPI_Receive+0x1cc>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3a:	d102      	bne.n	8009a42 <HAL_SPI_Receive+0x1d2>
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d102      	bne.n	8009a48 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009a46:	e017      	b.n	8009a78 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1cd      	bne.n	80099ee <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 fb9c 	bl	800a194 <SPI_EndRxTransaction>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2220      	movs	r2, #32
 8009a66:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	75fb      	strb	r3, [r7, #23]
 8009a74:	e000      	b.n	8009a78 <HAL_SPI_Receive+0x208>
  }

error :
 8009a76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b08c      	sub	sp, #48	; 0x30
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	60f8      	str	r0, [r7, #12]
 8009a9a:	60b9      	str	r1, [r7, #8]
 8009a9c:	607a      	str	r2, [r7, #4]
 8009a9e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d101      	bne.n	8009ab8 <HAL_SPI_TransmitReceive+0x26>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e18a      	b.n	8009dce <HAL_SPI_TransmitReceive+0x33c>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ac0:	f7fb fba6 	bl	8005210 <HAL_GetTick>
 8009ac4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ad6:	887b      	ldrh	r3, [r7, #2]
 8009ad8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ada:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d00f      	beq.n	8009b02 <HAL_SPI_TransmitReceive+0x70>
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ae8:	d107      	bne.n	8009afa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d103      	bne.n	8009afa <HAL_SPI_TransmitReceive+0x68>
 8009af2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d003      	beq.n	8009b02 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009afa:	2302      	movs	r3, #2
 8009afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b00:	e15b      	b.n	8009dba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d005      	beq.n	8009b14 <HAL_SPI_TransmitReceive+0x82>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <HAL_SPI_TransmitReceive+0x82>
 8009b0e:	887b      	ldrh	r3, [r7, #2]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d103      	bne.n	8009b1c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b1a:	e14e      	b.n	8009dba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d003      	beq.n	8009b30 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2205      	movs	r2, #5
 8009b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2200      	movs	r2, #0
 8009b34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	887a      	ldrh	r2, [r7, #2]
 8009b40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	887a      	ldrh	r2, [r7, #2]
 8009b46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	887a      	ldrh	r2, [r7, #2]
 8009b52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	887a      	ldrh	r2, [r7, #2]
 8009b58:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b40      	cmp	r3, #64	; 0x40
 8009b72:	d007      	beq.n	8009b84 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b8c:	d178      	bne.n	8009c80 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <HAL_SPI_TransmitReceive+0x10a>
 8009b96:	8b7b      	ldrh	r3, [r7, #26]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d166      	bne.n	8009c6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba0:	881a      	ldrh	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bac:	1c9a      	adds	r2, r3, #2
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bc0:	e053      	b.n	8009c6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d11b      	bne.n	8009c08 <HAL_SPI_TransmitReceive+0x176>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d016      	beq.n	8009c08 <HAL_SPI_TransmitReceive+0x176>
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d113      	bne.n	8009c08 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be4:	881a      	ldrh	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	1c9a      	adds	r2, r3, #2
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c04:	2300      	movs	r3, #0
 8009c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d119      	bne.n	8009c4a <HAL_SPI_TransmitReceive+0x1b8>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d014      	beq.n	8009c4a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2a:	b292      	uxth	r2, r2
 8009c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c32:	1c9a      	adds	r2, r3, #2
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c46:	2301      	movs	r3, #1
 8009c48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c4a:	f7fb fae1 	bl	8005210 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d807      	bhi.n	8009c6a <HAL_SPI_TransmitReceive+0x1d8>
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c60:	d003      	beq.n	8009c6a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c68:	e0a7      	b.n	8009dba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1a6      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x130>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1a1      	bne.n	8009bc2 <HAL_SPI_TransmitReceive+0x130>
 8009c7e:	e07c      	b.n	8009d7a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <HAL_SPI_TransmitReceive+0x1fc>
 8009c88:	8b7b      	ldrh	r3, [r7, #26]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d16b      	bne.n	8009d66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	330c      	adds	r3, #12
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cb4:	e057      	b.n	8009d66 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f003 0302 	and.w	r3, r3, #2
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d11c      	bne.n	8009cfe <HAL_SPI_TransmitReceive+0x26c>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d017      	beq.n	8009cfe <HAL_SPI_TransmitReceive+0x26c>
 8009cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d114      	bne.n	8009cfe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	330c      	adds	r3, #12
 8009cde:	7812      	ldrb	r2, [r2, #0]
 8009ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	b29a      	uxth	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d119      	bne.n	8009d40 <HAL_SPI_TransmitReceive+0x2ae>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d014      	beq.n	8009d40 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d20:	b2d2      	uxtb	r2, r2
 8009d22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	3b01      	subs	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d40:	f7fb fa66 	bl	8005210 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d803      	bhi.n	8009d58 <HAL_SPI_TransmitReceive+0x2c6>
 8009d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d56:	d102      	bne.n	8009d5e <HAL_SPI_TransmitReceive+0x2cc>
 8009d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009d64:	e029      	b.n	8009dba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1a2      	bne.n	8009cb6 <HAL_SPI_TransmitReceive+0x224>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d19d      	bne.n	8009cb6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fa6e 	bl	800a260 <SPI_EndRxTxTransaction>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d006      	beq.n	8009d98 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2220      	movs	r2, #32
 8009d94:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009d96:	e010      	b.n	8009dba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d10b      	bne.n	8009db8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	617b      	str	r3, [r7, #20]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	617b      	str	r3, [r7, #20]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	e000      	b.n	8009dba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009db8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009dca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3730      	adds	r7, #48	; 0x30
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
	...

08009dd8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	4613      	mov	r3, r2
 8009de4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <HAL_SPI_Transmit_DMA+0x20>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e09b      	b.n	8009f30 <HAL_SPI_Transmit_DMA+0x158>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d002      	beq.n	8009e12 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009e0c:	2302      	movs	r3, #2
 8009e0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e10:	e089      	b.n	8009f26 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <HAL_SPI_Transmit_DMA+0x46>
 8009e18:	88fb      	ldrh	r3, [r7, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d102      	bne.n	8009e24 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e22:	e080      	b.n	8009f26 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2203      	movs	r2, #3
 8009e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	88fa      	ldrh	r2, [r7, #6]
 8009e3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	88fa      	ldrh	r2, [r7, #6]
 8009e42:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e6a:	d10f      	bne.n	8009e8c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e8a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e90:	4a29      	ldr	r2, [pc, #164]	; (8009f38 <HAL_SPI_Transmit_DMA+0x160>)
 8009e92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e98:	4a28      	ldr	r2, [pc, #160]	; (8009f3c <HAL_SPI_Transmit_DMA+0x164>)
 8009e9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea0:	4a27      	ldr	r2, [pc, #156]	; (8009f40 <HAL_SPI_Transmit_DMA+0x168>)
 8009ea2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	330c      	adds	r3, #12
 8009ebc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ec2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009ec4:	f7fb fee5 	bl	8005c92 <HAL_DMA_Start_IT>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00c      	beq.n	8009ee8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed2:	f043 0210 	orr.w	r2, r3, #16
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009ee6:	e01e      	b.n	8009f26 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef2:	2b40      	cmp	r3, #64	; 0x40
 8009ef4:	d007      	beq.n	8009f06 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f04:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f042 0220 	orr.w	r2, r2, #32
 8009f14:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f042 0202 	orr.w	r2, r2, #2
 8009f24:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3718      	adds	r7, #24
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	0800a029 	.word	0x0800a029
 8009f3c:	08009f81 	.word	0x08009f81
 8009f40:	0800a045 	.word	0x0800a045

08009f44 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009f60:	bf00      	nop
 8009f62:	370c      	adds	r7, #12
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f8e:	f7fb f93f 	bl	8005210 <HAL_GetTick>
 8009f92:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fa2:	d03b      	beq.n	800a01c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0220 	bic.w	r2, r2, #32
 8009fb2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685a      	ldr	r2, [r3, #4]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0202 	bic.w	r2, r2, #2
 8009fc2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	2164      	movs	r1, #100	; 0x64
 8009fc8:	6978      	ldr	r0, [r7, #20]
 8009fca:	f000 f949 	bl	800a260 <SPI_EndRxTxTransaction>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d005      	beq.n	8009fe0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd8:	f043 0220 	orr.w	r2, r3, #32
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10a      	bne.n	8009ffe <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2200      	movs	r2, #0
 800a002:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a010:	2b00      	cmp	r3, #0
 800a012:	d003      	beq.n	800a01c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a014:	6978      	ldr	r0, [r7, #20]
 800a016:	f7ff ffa9 	bl	8009f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a01a:	e002      	b.n	800a022 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a01c:	6978      	ldr	r0, [r7, #20]
 800a01e:	f7ff ff91 	bl	8009f44 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a034:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7ff ff8e 	bl	8009f58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a03c:	bf00      	nop
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 0203 	bic.w	r2, r2, #3
 800a060:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a066:	f043 0210 	orr.w	r2, r3, #16
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a076:	68f8      	ldr	r0, [r7, #12]
 800a078:	f7ff ff78 	bl	8009f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a07c:	bf00      	nop
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	4613      	mov	r3, r2
 800a092:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a094:	f7fb f8bc 	bl	8005210 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	1a9b      	subs	r3, r3, r2
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a0a4:	f7fb f8b4 	bl	8005210 <HAL_GetTick>
 800a0a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a0aa:	4b39      	ldr	r3, [pc, #228]	; (800a190 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	015b      	lsls	r3, r3, #5
 800a0b0:	0d1b      	lsrs	r3, r3, #20
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	fb02 f303 	mul.w	r3, r2, r3
 800a0b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0ba:	e054      	b.n	800a166 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c2:	d050      	beq.n	800a166 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a0c4:	f7fb f8a4 	bl	8005210 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	69fa      	ldr	r2, [r7, #28]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d902      	bls.n	800a0da <SPI_WaitFlagStateUntilTimeout+0x56>
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d13d      	bne.n	800a156 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a0e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0f2:	d111      	bne.n	800a118 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0fc:	d004      	beq.n	800a108 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a106:	d107      	bne.n	800a118 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a116:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a120:	d10f      	bne.n	800a142 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a140:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a152:	2303      	movs	r3, #3
 800a154:	e017      	b.n	800a186 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	3b01      	subs	r3, #1
 800a164:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	4013      	ands	r3, r2
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	429a      	cmp	r2, r3
 800a174:	bf0c      	ite	eq
 800a176:	2301      	moveq	r3, #1
 800a178:	2300      	movne	r3, #0
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	461a      	mov	r2, r3
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	429a      	cmp	r2, r3
 800a182:	d19b      	bne.n	800a0bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	2000004c 	.word	0x2000004c

0800a194 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b086      	sub	sp, #24
 800a198:	af02      	add	r7, sp, #8
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a8:	d111      	bne.n	800a1ce <SPI_EndRxTransaction+0x3a>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1b2:	d004      	beq.n	800a1be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1bc:	d107      	bne.n	800a1ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1d6:	d12a      	bne.n	800a22e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1e0:	d012      	beq.n	800a208 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2180      	movs	r1, #128	; 0x80
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff ff49 	bl	800a084 <SPI_WaitFlagStateUntilTimeout>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d02d      	beq.n	800a254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1fc:	f043 0220 	orr.w	r2, r3, #32
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e026      	b.n	800a256 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	2200      	movs	r2, #0
 800a210:	2101      	movs	r1, #1
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f7ff ff36 	bl	800a084 <SPI_WaitFlagStateUntilTimeout>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d01a      	beq.n	800a254 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a222:	f043 0220 	orr.w	r2, r3, #32
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e013      	b.n	800a256 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2200      	movs	r2, #0
 800a236:	2101      	movs	r1, #1
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f7ff ff23 	bl	800a084 <SPI_WaitFlagStateUntilTimeout>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d007      	beq.n	800a254 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a248:	f043 0220 	orr.w	r2, r3, #32
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e000      	b.n	800a256 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af02      	add	r7, sp, #8
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a26c:	4b1b      	ldr	r3, [pc, #108]	; (800a2dc <SPI_EndRxTxTransaction+0x7c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a1b      	ldr	r2, [pc, #108]	; (800a2e0 <SPI_EndRxTxTransaction+0x80>)
 800a272:	fba2 2303 	umull	r2, r3, r2, r3
 800a276:	0d5b      	lsrs	r3, r3, #21
 800a278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a27c:	fb02 f303 	mul.w	r3, r2, r3
 800a280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a28a:	d112      	bne.n	800a2b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	2200      	movs	r2, #0
 800a294:	2180      	movs	r1, #128	; 0x80
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f7ff fef4 	bl	800a084 <SPI_WaitFlagStateUntilTimeout>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d016      	beq.n	800a2d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2a6:	f043 0220 	orr.w	r2, r3, #32
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e00f      	b.n	800a2d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00a      	beq.n	800a2ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2c8:	2b80      	cmp	r3, #128	; 0x80
 800a2ca:	d0f2      	beq.n	800a2b2 <SPI_EndRxTxTransaction+0x52>
 800a2cc:	e000      	b.n	800a2d0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a2ce:	bf00      	nop
  }

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	2000004c 	.word	0x2000004c
 800a2e0:	165e9f81 	.word	0x165e9f81

0800a2e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e041      	b.n	800a37a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d106      	bne.n	800a310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fa fe4e 	bl	8004fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3304      	adds	r3, #4
 800a320:	4619      	mov	r1, r3
 800a322:	4610      	mov	r0, r2
 800a324:	f000 fa92 	bl	800a84c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
	...

0800a384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a392:	b2db      	uxtb	r3, r3
 800a394:	2b01      	cmp	r3, #1
 800a396:	d001      	beq.n	800a39c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e04e      	b.n	800a43a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68da      	ldr	r2, [r3, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f042 0201 	orr.w	r2, r2, #1
 800a3b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a23      	ldr	r2, [pc, #140]	; (800a448 <HAL_TIM_Base_Start_IT+0xc4>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d022      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x80>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3c6:	d01d      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x80>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a1f      	ldr	r2, [pc, #124]	; (800a44c <HAL_TIM_Base_Start_IT+0xc8>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d018      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x80>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a1e      	ldr	r2, [pc, #120]	; (800a450 <HAL_TIM_Base_Start_IT+0xcc>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d013      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x80>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a1c      	ldr	r2, [pc, #112]	; (800a454 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00e      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x80>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a1b      	ldr	r2, [pc, #108]	; (800a458 <HAL_TIM_Base_Start_IT+0xd4>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d009      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x80>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a19      	ldr	r2, [pc, #100]	; (800a45c <HAL_TIM_Base_Start_IT+0xd8>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d004      	beq.n	800a404 <HAL_TIM_Base_Start_IT+0x80>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a18      	ldr	r2, [pc, #96]	; (800a460 <HAL_TIM_Base_Start_IT+0xdc>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d111      	bne.n	800a428 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f003 0307 	and.w	r3, r3, #7
 800a40e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b06      	cmp	r3, #6
 800a414:	d010      	beq.n	800a438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f042 0201 	orr.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a426:	e007      	b.n	800a438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	40010000 	.word	0x40010000
 800a44c:	40000400 	.word	0x40000400
 800a450:	40000800 	.word	0x40000800
 800a454:	40000c00 	.word	0x40000c00
 800a458:	40010400 	.word	0x40010400
 800a45c:	40014000 	.word	0x40014000
 800a460:	40001800 	.word	0x40001800

0800a464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	2b02      	cmp	r3, #2
 800a478:	d122      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b02      	cmp	r3, #2
 800a486:	d11b      	bne.n	800a4c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f06f 0202 	mvn.w	r2, #2
 800a490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f9b2 	bl	800a810 <HAL_TIM_IC_CaptureCallback>
 800a4ac:	e005      	b.n	800a4ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f9a4 	bl	800a7fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f9b5 	bl	800a824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d122      	bne.n	800a514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d11b      	bne.n	800a514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f06f 0204 	mvn.w	r2, #4
 800a4e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2202      	movs	r2, #2
 800a4ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f988 	bl	800a810 <HAL_TIM_IC_CaptureCallback>
 800a500:	e005      	b.n	800a50e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f97a 	bl	800a7fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f98b 	bl	800a824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b08      	cmp	r3, #8
 800a520:	d122      	bne.n	800a568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	f003 0308 	and.w	r3, r3, #8
 800a52c:	2b08      	cmp	r3, #8
 800a52e:	d11b      	bne.n	800a568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f06f 0208 	mvn.w	r2, #8
 800a538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2204      	movs	r2, #4
 800a53e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	f003 0303 	and.w	r3, r3, #3
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f95e 	bl	800a810 <HAL_TIM_IC_CaptureCallback>
 800a554:	e005      	b.n	800a562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f950 	bl	800a7fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f961 	bl	800a824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f003 0310 	and.w	r3, r3, #16
 800a572:	2b10      	cmp	r3, #16
 800a574:	d122      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f003 0310 	and.w	r3, r3, #16
 800a580:	2b10      	cmp	r3, #16
 800a582:	d11b      	bne.n	800a5bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f06f 0210 	mvn.w	r2, #16
 800a58c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2208      	movs	r2, #8
 800a592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	69db      	ldr	r3, [r3, #28]
 800a59a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d003      	beq.n	800a5aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f934 	bl	800a810 <HAL_TIM_IC_CaptureCallback>
 800a5a8:	e005      	b.n	800a5b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f926 	bl	800a7fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f937 	bl	800a824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f003 0301 	and.w	r3, r3, #1
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d10e      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d107      	bne.n	800a5e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f06f 0201 	mvn.w	r2, #1
 800a5e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7f8 feee 	bl	80033c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f2:	2b80      	cmp	r3, #128	; 0x80
 800a5f4:	d10e      	bne.n	800a614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a600:	2b80      	cmp	r3, #128	; 0x80
 800a602:	d107      	bne.n	800a614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fadc 	bl	800abcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61e:	2b40      	cmp	r3, #64	; 0x40
 800a620:	d10e      	bne.n	800a640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68db      	ldr	r3, [r3, #12]
 800a628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a62c:	2b40      	cmp	r3, #64	; 0x40
 800a62e:	d107      	bne.n	800a640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f8fc 	bl	800a838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f003 0320 	and.w	r3, r3, #32
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	d10e      	bne.n	800a66c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0320 	and.w	r3, r3, #32
 800a658:	2b20      	cmp	r3, #32
 800a65a:	d107      	bne.n	800a66c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f06f 0220 	mvn.w	r2, #32
 800a664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 faa6 	bl	800abb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a684:	2b01      	cmp	r3, #1
 800a686:	d101      	bne.n	800a68c <HAL_TIM_ConfigClockSource+0x18>
 800a688:	2302      	movs	r3, #2
 800a68a:	e0b3      	b.n	800a7f4 <HAL_TIM_ConfigClockSource+0x180>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2201      	movs	r2, #1
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2202      	movs	r2, #2
 800a698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a6aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6c4:	d03e      	beq.n	800a744 <HAL_TIM_ConfigClockSource+0xd0>
 800a6c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ca:	f200 8087 	bhi.w	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6d2:	f000 8085 	beq.w	800a7e0 <HAL_TIM_ConfigClockSource+0x16c>
 800a6d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6da:	d87f      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a6dc:	2b70      	cmp	r3, #112	; 0x70
 800a6de:	d01a      	beq.n	800a716 <HAL_TIM_ConfigClockSource+0xa2>
 800a6e0:	2b70      	cmp	r3, #112	; 0x70
 800a6e2:	d87b      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a6e4:	2b60      	cmp	r3, #96	; 0x60
 800a6e6:	d050      	beq.n	800a78a <HAL_TIM_ConfigClockSource+0x116>
 800a6e8:	2b60      	cmp	r3, #96	; 0x60
 800a6ea:	d877      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a6ec:	2b50      	cmp	r3, #80	; 0x50
 800a6ee:	d03c      	beq.n	800a76a <HAL_TIM_ConfigClockSource+0xf6>
 800a6f0:	2b50      	cmp	r3, #80	; 0x50
 800a6f2:	d873      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a6f4:	2b40      	cmp	r3, #64	; 0x40
 800a6f6:	d058      	beq.n	800a7aa <HAL_TIM_ConfigClockSource+0x136>
 800a6f8:	2b40      	cmp	r3, #64	; 0x40
 800a6fa:	d86f      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a6fc:	2b30      	cmp	r3, #48	; 0x30
 800a6fe:	d064      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x156>
 800a700:	2b30      	cmp	r3, #48	; 0x30
 800a702:	d86b      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a704:	2b20      	cmp	r3, #32
 800a706:	d060      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x156>
 800a708:	2b20      	cmp	r3, #32
 800a70a:	d867      	bhi.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d05c      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x156>
 800a710:	2b10      	cmp	r3, #16
 800a712:	d05a      	beq.n	800a7ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a714:	e062      	b.n	800a7dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6818      	ldr	r0, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	6899      	ldr	r1, [r3, #8]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	685a      	ldr	r2, [r3, #4]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	f000 f9ab 	bl	800aa80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a738:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	609a      	str	r2, [r3, #8]
      break;
 800a742:	e04e      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	6899      	ldr	r1, [r3, #8]
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f000 f994 	bl	800aa80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	689a      	ldr	r2, [r3, #8]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a766:	609a      	str	r2, [r3, #8]
      break;
 800a768:	e03b      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6818      	ldr	r0, [r3, #0]
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	6859      	ldr	r1, [r3, #4]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	461a      	mov	r2, r3
 800a778:	f000 f908 	bl	800a98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2150      	movs	r1, #80	; 0x50
 800a782:	4618      	mov	r0, r3
 800a784:	f000 f961 	bl	800aa4a <TIM_ITRx_SetConfig>
      break;
 800a788:	e02b      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6818      	ldr	r0, [r3, #0]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	6859      	ldr	r1, [r3, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	461a      	mov	r2, r3
 800a798:	f000 f927 	bl	800a9ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2160      	movs	r1, #96	; 0x60
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f000 f951 	bl	800aa4a <TIM_ITRx_SetConfig>
      break;
 800a7a8:	e01b      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	6859      	ldr	r1, [r3, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f000 f8e8 	bl	800a98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2140      	movs	r1, #64	; 0x40
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 f941 	bl	800aa4a <TIM_ITRx_SetConfig>
      break;
 800a7c8:	e00b      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	f000 f938 	bl	800aa4a <TIM_ITRx_SetConfig>
        break;
 800a7da:	e002      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a7dc:	bf00      	nop
 800a7de:	e000      	b.n	800a7e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a7e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a40      	ldr	r2, [pc, #256]	; (800a960 <TIM_Base_SetConfig+0x114>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d013      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a86a:	d00f      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a3d      	ldr	r2, [pc, #244]	; (800a964 <TIM_Base_SetConfig+0x118>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d00b      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a3c      	ldr	r2, [pc, #240]	; (800a968 <TIM_Base_SetConfig+0x11c>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d007      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a3b      	ldr	r2, [pc, #236]	; (800a96c <TIM_Base_SetConfig+0x120>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d003      	beq.n	800a88c <TIM_Base_SetConfig+0x40>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a3a      	ldr	r2, [pc, #232]	; (800a970 <TIM_Base_SetConfig+0x124>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d108      	bne.n	800a89e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a2f      	ldr	r2, [pc, #188]	; (800a960 <TIM_Base_SetConfig+0x114>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d02b      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ac:	d027      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a2c      	ldr	r2, [pc, #176]	; (800a964 <TIM_Base_SetConfig+0x118>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d023      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a2b      	ldr	r2, [pc, #172]	; (800a968 <TIM_Base_SetConfig+0x11c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d01f      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a2a      	ldr	r2, [pc, #168]	; (800a96c <TIM_Base_SetConfig+0x120>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d01b      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a29      	ldr	r2, [pc, #164]	; (800a970 <TIM_Base_SetConfig+0x124>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d017      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a28      	ldr	r2, [pc, #160]	; (800a974 <TIM_Base_SetConfig+0x128>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d013      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a27      	ldr	r2, [pc, #156]	; (800a978 <TIM_Base_SetConfig+0x12c>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d00f      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a26      	ldr	r2, [pc, #152]	; (800a97c <TIM_Base_SetConfig+0x130>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d00b      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4a25      	ldr	r2, [pc, #148]	; (800a980 <TIM_Base_SetConfig+0x134>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d007      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a24      	ldr	r2, [pc, #144]	; (800a984 <TIM_Base_SetConfig+0x138>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d003      	beq.n	800a8fe <TIM_Base_SetConfig+0xb2>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a23      	ldr	r2, [pc, #140]	; (800a988 <TIM_Base_SetConfig+0x13c>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d108      	bne.n	800a910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a0a      	ldr	r2, [pc, #40]	; (800a960 <TIM_Base_SetConfig+0x114>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_Base_SetConfig+0xf8>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a0c      	ldr	r2, [pc, #48]	; (800a970 <TIM_Base_SetConfig+0x124>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d103      	bne.n	800a94c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	691a      	ldr	r2, [r3, #16]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	615a      	str	r2, [r3, #20]
}
 800a952:	bf00      	nop
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	40010000 	.word	0x40010000
 800a964:	40000400 	.word	0x40000400
 800a968:	40000800 	.word	0x40000800
 800a96c:	40000c00 	.word	0x40000c00
 800a970:	40010400 	.word	0x40010400
 800a974:	40014000 	.word	0x40014000
 800a978:	40014400 	.word	0x40014400
 800a97c:	40014800 	.word	0x40014800
 800a980:	40001800 	.word	0x40001800
 800a984:	40001c00 	.word	0x40001c00
 800a988:	40002000 	.word	0x40002000

0800a98c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a1b      	ldr	r3, [r3, #32]
 800a99c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f023 0201 	bic.w	r2, r3, #1
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	f023 030a 	bic.w	r3, r3, #10
 800a9c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	621a      	str	r2, [r3, #32]
}
 800a9de:	bf00      	nop
 800a9e0:	371c      	adds	r7, #28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	60b9      	str	r1, [r7, #8]
 800a9f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	f023 0210 	bic.w	r2, r3, #16
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	031b      	lsls	r3, r3, #12
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	011b      	lsls	r3, r3, #4
 800aa2c:	693a      	ldr	r2, [r7, #16]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	693a      	ldr	r2, [r7, #16]
 800aa3c:	621a      	str	r2, [r3, #32]
}
 800aa3e:	bf00      	nop
 800aa40:	371c      	adds	r7, #28
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	f043 0307 	orr.w	r3, r3, #7
 800aa6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	609a      	str	r2, [r3, #8]
}
 800aa74:	bf00      	nop
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	021a      	lsls	r2, r3, #8
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	609a      	str	r2, [r3, #8]
}
 800aab4:	bf00      	nop
 800aab6:	371c      	adds	r7, #28
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d101      	bne.n	800aad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aad4:	2302      	movs	r3, #2
 800aad6:	e05a      	b.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aafe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a21      	ldr	r2, [pc, #132]	; (800ab9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d022      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab24:	d01d      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a1d      	ldr	r2, [pc, #116]	; (800aba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d018      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1b      	ldr	r2, [pc, #108]	; (800aba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d013      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1a      	ldr	r2, [pc, #104]	; (800aba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d00e      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a18      	ldr	r2, [pc, #96]	; (800abac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d009      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a17      	ldr	r2, [pc, #92]	; (800abb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d004      	beq.n	800ab62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d10c      	bne.n	800ab7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	40010000 	.word	0x40010000
 800aba0:	40000400 	.word	0x40000400
 800aba4:	40000800 	.word	0x40000800
 800aba8:	40000c00 	.word	0x40000c00
 800abac:	40010400 	.word	0x40010400
 800abb0:	40014000 	.word	0x40014000
 800abb4:	40001800 	.word	0x40001800

0800abb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e03f      	b.n	800ac72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d106      	bne.n	800ac0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7fa fa22 	bl	8005050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2224      	movs	r2, #36	; 0x24
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68da      	ldr	r2, [r3, #12]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fb9f 	bl	800b368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	691a      	ldr	r2, [r3, #16]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	695a      	ldr	r2, [r3, #20]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ac70:	2300      	movs	r3, #0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	4613      	mov	r3, r2
 800ac86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	2b20      	cmp	r3, #32
 800ac92:	d11d      	bne.n	800acd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d002      	beq.n	800aca0 <HAL_UART_Receive_IT+0x26>
 800ac9a:	88fb      	ldrh	r3, [r7, #6]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d101      	bne.n	800aca4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e016      	b.n	800acd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d101      	bne.n	800acb2 <HAL_UART_Receive_IT+0x38>
 800acae:	2302      	movs	r3, #2
 800acb0:	e00f      	b.n	800acd2 <HAL_UART_Receive_IT+0x58>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800acc0:	88fb      	ldrh	r3, [r7, #6]
 800acc2:	461a      	mov	r2, r3
 800acc4:	68b9      	ldr	r1, [r7, #8]
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f000 f9d4 	bl	800b074 <UART_Start_Receive_IT>
 800accc:	4603      	mov	r3, r0
 800acce:	e000      	b.n	800acd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800acd0:	2302      	movs	r3, #2
  }
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08a      	sub	sp, #40	; 0x28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800ad00:	2300      	movs	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	f003 030f 	and.w	r3, r3, #15
 800ad0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10d      	bne.n	800ad2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d008      	beq.n	800ad2e <HAL_UART_IRQHandler+0x52>
 800ad1c:	6a3b      	ldr	r3, [r7, #32]
 800ad1e:	f003 0320 	and.w	r3, r3, #32
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d003      	beq.n	800ad2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa87 	bl	800b23a <UART_Receive_IT>
      return;
 800ad2c:	e17c      	b.n	800b028 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80b1 	beq.w	800ae98 <HAL_UART_IRQHandler+0x1bc>
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d105      	bne.n	800ad4c <HAL_UART_IRQHandler+0x70>
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f000 80a6 	beq.w	800ae98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <HAL_UART_IRQHandler+0x90>
 800ad56:	6a3b      	ldr	r3, [r7, #32]
 800ad58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d005      	beq.n	800ad6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad64:	f043 0201 	orr.w	r2, r3, #1
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	f003 0304 	and.w	r3, r3, #4
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00a      	beq.n	800ad8c <HAL_UART_IRQHandler+0xb0>
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	f003 0301 	and.w	r3, r3, #1
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad84:	f043 0202 	orr.w	r2, r3, #2
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	f003 0302 	and.w	r3, r3, #2
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00a      	beq.n	800adac <HAL_UART_IRQHandler+0xd0>
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada4:	f043 0204 	orr.w	r2, r3, #4
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adae:	f003 0308 	and.w	r3, r3, #8
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00f      	beq.n	800add6 <HAL_UART_IRQHandler+0xfa>
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	f003 0320 	and.w	r3, r3, #32
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <HAL_UART_IRQHandler+0xee>
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d005      	beq.n	800add6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	f043 0208 	orr.w	r2, r3, #8
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adda:	2b00      	cmp	r3, #0
 800addc:	f000 811f 	beq.w	800b01e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d007      	beq.n	800adfa <HAL_UART_IRQHandler+0x11e>
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	f003 0320 	and.w	r3, r3, #32
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa20 	bl	800b23a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	695b      	ldr	r3, [r3, #20]
 800ae00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae04:	2b40      	cmp	r3, #64	; 0x40
 800ae06:	bf0c      	ite	eq
 800ae08:	2301      	moveq	r3, #1
 800ae0a:	2300      	movne	r3, #0
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	f003 0308 	and.w	r3, r3, #8
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d102      	bne.n	800ae22 <HAL_UART_IRQHandler+0x146>
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d031      	beq.n	800ae86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f960 	bl	800b0e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae32:	2b40      	cmp	r3, #64	; 0x40
 800ae34:	d123      	bne.n	800ae7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	695a      	ldr	r2, [r3, #20]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d013      	beq.n	800ae76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	4a77      	ldr	r2, [pc, #476]	; (800b030 <HAL_UART_IRQHandler+0x354>)
 800ae54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fa ffe1 	bl	8005e22 <HAL_DMA_Abort_IT>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d016      	beq.n	800ae94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ae70:	4610      	mov	r0, r2
 800ae72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae74:	e00e      	b.n	800ae94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f8e6 	bl	800b048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae7c:	e00a      	b.n	800ae94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f8e2 	bl	800b048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae84:	e006      	b.n	800ae94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f8de 	bl	800b048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800ae92:	e0c4      	b.n	800b01e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae94:	bf00      	nop
    return;
 800ae96:	e0c2      	b.n	800b01e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	f040 80a2 	bne.w	800afe6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	f003 0310 	and.w	r3, r3, #16
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 809c 	beq.w	800afe6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	f000 8096 	beq.w	800afe6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aeba:	2300      	movs	r3, #0
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	60fb      	str	r3, [r7, #12]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	60fb      	str	r3, [r7, #12]
 800aece:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	695b      	ldr	r3, [r3, #20]
 800aed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeda:	2b40      	cmp	r3, #64	; 0x40
 800aedc:	d14f      	bne.n	800af7e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800aee8:	8a3b      	ldrh	r3, [r7, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 8099 	beq.w	800b022 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aef4:	8a3a      	ldrh	r2, [r7, #16]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	f080 8093 	bcs.w	800b022 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8a3a      	ldrh	r2, [r7, #16]
 800af00:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af06:	69db      	ldr	r3, [r3, #28]
 800af08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af0c:	d02b      	beq.n	800af66 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68da      	ldr	r2, [r3, #12]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af1c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	695a      	ldr	r2, [r3, #20]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f022 0201 	bic.w	r2, r2, #1
 800af2c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	695a      	ldr	r2, [r3, #20]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af3c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	68da      	ldr	r2, [r3, #12]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f022 0210 	bic.w	r2, r2, #16
 800af5a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af60:	4618      	mov	r0, r3
 800af62:	f7fa feee 	bl	8005d42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af6e:	b29b      	uxth	r3, r3
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	b29b      	uxth	r3, r3
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f870 	bl	800b05c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800af7c:	e051      	b.n	800b022 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af86:	b29b      	uxth	r3, r3
 800af88:	1ad3      	subs	r3, r2, r3
 800af8a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800af90:	b29b      	uxth	r3, r3
 800af92:	2b00      	cmp	r3, #0
 800af94:	d047      	beq.n	800b026 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800af96:	8a7b      	ldrh	r3, [r7, #18]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d044      	beq.n	800b026 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68da      	ldr	r2, [r3, #12]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800afaa:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	695a      	ldr	r2, [r3, #20]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0201 	bic.w	r2, r2, #1
 800afba:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68da      	ldr	r2, [r3, #12]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f022 0210 	bic.w	r2, r2, #16
 800afd8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800afda:	8a7b      	ldrh	r3, [r7, #18]
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f83c 	bl	800b05c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800afe4:	e01f      	b.n	800b026 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afec:	2b00      	cmp	r3, #0
 800afee:	d008      	beq.n	800b002 <HAL_UART_IRQHandler+0x326>
 800aff0:	6a3b      	ldr	r3, [r7, #32]
 800aff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f8b5 	bl	800b16a <UART_Transmit_IT>
    return;
 800b000:	e012      	b.n	800b028 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00d      	beq.n	800b028 <HAL_UART_IRQHandler+0x34c>
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b012:	2b00      	cmp	r3, #0
 800b014:	d008      	beq.n	800b028 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 f8f7 	bl	800b20a <UART_EndTransmit_IT>
    return;
 800b01c:	e004      	b.n	800b028 <HAL_UART_IRQHandler+0x34c>
    return;
 800b01e:	bf00      	nop
 800b020:	e002      	b.n	800b028 <HAL_UART_IRQHandler+0x34c>
      return;
 800b022:	bf00      	nop
 800b024:	e000      	b.n	800b028 <HAL_UART_IRQHandler+0x34c>
      return;
 800b026:	bf00      	nop
  }
}
 800b028:	3728      	adds	r7, #40	; 0x28
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	0800b143 	.word	0x0800b143

0800b034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b068:	bf00      	nop
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	4613      	mov	r3, r2
 800b080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	88fa      	ldrh	r2, [r7, #6]
 800b08c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	88fa      	ldrh	r2, [r7, #6]
 800b092:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2222      	movs	r2, #34	; 0x22
 800b09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68da      	ldr	r2, [r3, #12]
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0b8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	695a      	ldr	r2, [r3, #20]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f042 0201 	orr.w	r2, r2, #1
 800b0c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68da      	ldr	r2, [r3, #12]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f042 0220 	orr.w	r2, r2, #32
 800b0d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3714      	adds	r7, #20
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68da      	ldr	r2, [r3, #12]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f022 0201 	bic.w	r2, r2, #1
 800b10e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b114:	2b01      	cmp	r3, #1
 800b116:	d107      	bne.n	800b128 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	68da      	ldr	r2, [r3, #12]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f022 0210 	bic.w	r2, r2, #16
 800b126:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2220      	movs	r2, #32
 800b12c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	f7ff ff73 	bl	800b048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b162:	bf00      	nop
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b085      	sub	sp, #20
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b21      	cmp	r3, #33	; 0x21
 800b17c:	d13e      	bne.n	800b1fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b186:	d114      	bne.n	800b1b2 <UART_Transmit_IT+0x48>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d110      	bne.n	800b1b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	461a      	mov	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	1c9a      	adds	r2, r3, #2
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	621a      	str	r2, [r3, #32]
 800b1b0:	e008      	b.n	800b1c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	1c59      	adds	r1, r3, #1
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	6211      	str	r1, [r2, #32]
 800b1bc:	781a      	ldrb	r2, [r3, #0]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10f      	bne.n	800b1f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68da      	ldr	r2, [r3, #12]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	e000      	b.n	800b1fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b1fc:	2302      	movs	r3, #2
  }
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2220      	movs	r2, #32
 800b226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff ff02 	bl	800b034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	2b22      	cmp	r3, #34	; 0x22
 800b24c:	f040 8087 	bne.w	800b35e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b258:	d117      	bne.n	800b28a <UART_Receive_IT+0x50>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d113      	bne.n	800b28a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	b29b      	uxth	r3, r3
 800b274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b278:	b29a      	uxth	r2, r3
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b282:	1c9a      	adds	r2, r3, #2
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	629a      	str	r2, [r3, #40]	; 0x28
 800b288:	e026      	b.n	800b2d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b28e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b290:	2300      	movs	r3, #0
 800b292:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b29c:	d007      	beq.n	800b2ae <UART_Receive_IT+0x74>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10a      	bne.n	800b2bc <UART_Receive_IT+0x82>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	701a      	strb	r2, [r3, #0]
 800b2ba:	e008      	b.n	800b2ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d136      	bne.n	800b35a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68da      	ldr	r2, [r3, #12]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f022 0220 	bic.w	r2, r2, #32
 800b2fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	68da      	ldr	r2, [r3, #12]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b30a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	695a      	ldr	r2, [r3, #20]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0201 	bic.w	r2, r2, #1
 800b31a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2220      	movs	r2, #32
 800b320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d10e      	bne.n	800b34a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f022 0210 	bic.w	r2, r2, #16
 800b33a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff fe8a 	bl	800b05c <HAL_UARTEx_RxEventCallback>
 800b348:	e002      	b.n	800b350 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7f7 ff18 	bl	8003180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b356:	2300      	movs	r3, #0
 800b358:	e002      	b.n	800b360 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	e000      	b.n	800b360 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b35e:	2302      	movs	r3, #2
  }
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	b09f      	sub	sp, #124	; 0x7c
 800b36e:	af00      	add	r7, sp, #0
 800b370:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b37c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b37e:	68d9      	ldr	r1, [r3, #12]
 800b380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	ea40 0301 	orr.w	r3, r0, r1
 800b388:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b38c:	689a      	ldr	r2, [r3, #8]
 800b38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	431a      	orrs	r2, r3
 800b394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	431a      	orrs	r2, r3
 800b39a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b39c:	69db      	ldr	r3, [r3, #28]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b3ac:	f021 010c 	bic.w	r1, r1, #12
 800b3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3b6:	430b      	orrs	r3, r1
 800b3b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	695b      	ldr	r3, [r3, #20]
 800b3c0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b3c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3c6:	6999      	ldr	r1, [r3, #24]
 800b3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	ea40 0301 	orr.w	r3, r0, r1
 800b3d0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	4bc5      	ldr	r3, [pc, #788]	; (800b6ec <UART_SetConfig+0x384>)
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d004      	beq.n	800b3e6 <UART_SetConfig+0x7e>
 800b3dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	4bc3      	ldr	r3, [pc, #780]	; (800b6f0 <UART_SetConfig+0x388>)
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d103      	bne.n	800b3ee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b3e6:	f7fc fb99 	bl	8007b1c <HAL_RCC_GetPCLK2Freq>
 800b3ea:	6778      	str	r0, [r7, #116]	; 0x74
 800b3ec:	e002      	b.n	800b3f4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b3ee:	f7fc fb81 	bl	8007af4 <HAL_RCC_GetPCLK1Freq>
 800b3f2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3f6:	69db      	ldr	r3, [r3, #28]
 800b3f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3fc:	f040 80b6 	bne.w	800b56c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b402:	461c      	mov	r4, r3
 800b404:	f04f 0500 	mov.w	r5, #0
 800b408:	4622      	mov	r2, r4
 800b40a:	462b      	mov	r3, r5
 800b40c:	1891      	adds	r1, r2, r2
 800b40e:	6439      	str	r1, [r7, #64]	; 0x40
 800b410:	415b      	adcs	r3, r3
 800b412:	647b      	str	r3, [r7, #68]	; 0x44
 800b414:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b418:	1912      	adds	r2, r2, r4
 800b41a:	eb45 0303 	adc.w	r3, r5, r3
 800b41e:	f04f 0000 	mov.w	r0, #0
 800b422:	f04f 0100 	mov.w	r1, #0
 800b426:	00d9      	lsls	r1, r3, #3
 800b428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b42c:	00d0      	lsls	r0, r2, #3
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	1911      	adds	r1, r2, r4
 800b434:	6639      	str	r1, [r7, #96]	; 0x60
 800b436:	416b      	adcs	r3, r5
 800b438:	667b      	str	r3, [r7, #100]	; 0x64
 800b43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	461a      	mov	r2, r3
 800b440:	f04f 0300 	mov.w	r3, #0
 800b444:	1891      	adds	r1, r2, r2
 800b446:	63b9      	str	r1, [r7, #56]	; 0x38
 800b448:	415b      	adcs	r3, r3
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b44c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b450:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b454:	f7f5 fc68 	bl	8000d28 <__aeabi_uldivmod>
 800b458:	4602      	mov	r2, r0
 800b45a:	460b      	mov	r3, r1
 800b45c:	4ba5      	ldr	r3, [pc, #660]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b45e:	fba3 2302 	umull	r2, r3, r3, r2
 800b462:	095b      	lsrs	r3, r3, #5
 800b464:	011e      	lsls	r6, r3, #4
 800b466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b468:	461c      	mov	r4, r3
 800b46a:	f04f 0500 	mov.w	r5, #0
 800b46e:	4622      	mov	r2, r4
 800b470:	462b      	mov	r3, r5
 800b472:	1891      	adds	r1, r2, r2
 800b474:	6339      	str	r1, [r7, #48]	; 0x30
 800b476:	415b      	adcs	r3, r3
 800b478:	637b      	str	r3, [r7, #52]	; 0x34
 800b47a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b47e:	1912      	adds	r2, r2, r4
 800b480:	eb45 0303 	adc.w	r3, r5, r3
 800b484:	f04f 0000 	mov.w	r0, #0
 800b488:	f04f 0100 	mov.w	r1, #0
 800b48c:	00d9      	lsls	r1, r3, #3
 800b48e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b492:	00d0      	lsls	r0, r2, #3
 800b494:	4602      	mov	r2, r0
 800b496:	460b      	mov	r3, r1
 800b498:	1911      	adds	r1, r2, r4
 800b49a:	65b9      	str	r1, [r7, #88]	; 0x58
 800b49c:	416b      	adcs	r3, r5
 800b49e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	f04f 0300 	mov.w	r3, #0
 800b4aa:	1891      	adds	r1, r2, r2
 800b4ac:	62b9      	str	r1, [r7, #40]	; 0x28
 800b4ae:	415b      	adcs	r3, r3
 800b4b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b4b6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b4ba:	f7f5 fc35 	bl	8000d28 <__aeabi_uldivmod>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4b8c      	ldr	r3, [pc, #560]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4c8:	095b      	lsrs	r3, r3, #5
 800b4ca:	2164      	movs	r1, #100	; 0x64
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	3332      	adds	r3, #50	; 0x32
 800b4d6:	4a87      	ldr	r2, [pc, #540]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4dc:	095b      	lsrs	r3, r3, #5
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b4e4:	441e      	add	r6, r3
 800b4e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f04f 0100 	mov.w	r1, #0
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	1894      	adds	r4, r2, r2
 800b4f4:	623c      	str	r4, [r7, #32]
 800b4f6:	415b      	adcs	r3, r3
 800b4f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b4fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4fe:	1812      	adds	r2, r2, r0
 800b500:	eb41 0303 	adc.w	r3, r1, r3
 800b504:	f04f 0400 	mov.w	r4, #0
 800b508:	f04f 0500 	mov.w	r5, #0
 800b50c:	00dd      	lsls	r5, r3, #3
 800b50e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b512:	00d4      	lsls	r4, r2, #3
 800b514:	4622      	mov	r2, r4
 800b516:	462b      	mov	r3, r5
 800b518:	1814      	adds	r4, r2, r0
 800b51a:	653c      	str	r4, [r7, #80]	; 0x50
 800b51c:	414b      	adcs	r3, r1
 800b51e:	657b      	str	r3, [r7, #84]	; 0x54
 800b520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	461a      	mov	r2, r3
 800b526:	f04f 0300 	mov.w	r3, #0
 800b52a:	1891      	adds	r1, r2, r2
 800b52c:	61b9      	str	r1, [r7, #24]
 800b52e:	415b      	adcs	r3, r3
 800b530:	61fb      	str	r3, [r7, #28]
 800b532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b536:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b53a:	f7f5 fbf5 	bl	8000d28 <__aeabi_uldivmod>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4b6c      	ldr	r3, [pc, #432]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b544:	fba3 1302 	umull	r1, r3, r3, r2
 800b548:	095b      	lsrs	r3, r3, #5
 800b54a:	2164      	movs	r1, #100	; 0x64
 800b54c:	fb01 f303 	mul.w	r3, r1, r3
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	00db      	lsls	r3, r3, #3
 800b554:	3332      	adds	r3, #50	; 0x32
 800b556:	4a67      	ldr	r2, [pc, #412]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b558:	fba2 2303 	umull	r2, r3, r2, r3
 800b55c:	095b      	lsrs	r3, r3, #5
 800b55e:	f003 0207 	and.w	r2, r3, #7
 800b562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4432      	add	r2, r6
 800b568:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b56a:	e0b9      	b.n	800b6e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b56c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b56e:	461c      	mov	r4, r3
 800b570:	f04f 0500 	mov.w	r5, #0
 800b574:	4622      	mov	r2, r4
 800b576:	462b      	mov	r3, r5
 800b578:	1891      	adds	r1, r2, r2
 800b57a:	6139      	str	r1, [r7, #16]
 800b57c:	415b      	adcs	r3, r3
 800b57e:	617b      	str	r3, [r7, #20]
 800b580:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b584:	1912      	adds	r2, r2, r4
 800b586:	eb45 0303 	adc.w	r3, r5, r3
 800b58a:	f04f 0000 	mov.w	r0, #0
 800b58e:	f04f 0100 	mov.w	r1, #0
 800b592:	00d9      	lsls	r1, r3, #3
 800b594:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b598:	00d0      	lsls	r0, r2, #3
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	eb12 0804 	adds.w	r8, r2, r4
 800b5a2:	eb43 0905 	adc.w	r9, r3, r5
 800b5a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f04f 0100 	mov.w	r1, #0
 800b5b0:	f04f 0200 	mov.w	r2, #0
 800b5b4:	f04f 0300 	mov.w	r3, #0
 800b5b8:	008b      	lsls	r3, r1, #2
 800b5ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b5be:	0082      	lsls	r2, r0, #2
 800b5c0:	4640      	mov	r0, r8
 800b5c2:	4649      	mov	r1, r9
 800b5c4:	f7f5 fbb0 	bl	8000d28 <__aeabi_uldivmod>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	4b49      	ldr	r3, [pc, #292]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b5ce:	fba3 2302 	umull	r2, r3, r3, r2
 800b5d2:	095b      	lsrs	r3, r3, #5
 800b5d4:	011e      	lsls	r6, r3, #4
 800b5d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f04f 0100 	mov.w	r1, #0
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	1894      	adds	r4, r2, r2
 800b5e4:	60bc      	str	r4, [r7, #8]
 800b5e6:	415b      	adcs	r3, r3
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5ee:	1812      	adds	r2, r2, r0
 800b5f0:	eb41 0303 	adc.w	r3, r1, r3
 800b5f4:	f04f 0400 	mov.w	r4, #0
 800b5f8:	f04f 0500 	mov.w	r5, #0
 800b5fc:	00dd      	lsls	r5, r3, #3
 800b5fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b602:	00d4      	lsls	r4, r2, #3
 800b604:	4622      	mov	r2, r4
 800b606:	462b      	mov	r3, r5
 800b608:	1814      	adds	r4, r2, r0
 800b60a:	64bc      	str	r4, [r7, #72]	; 0x48
 800b60c:	414b      	adcs	r3, r1
 800b60e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	4618      	mov	r0, r3
 800b616:	f04f 0100 	mov.w	r1, #0
 800b61a:	f04f 0200 	mov.w	r2, #0
 800b61e:	f04f 0300 	mov.w	r3, #0
 800b622:	008b      	lsls	r3, r1, #2
 800b624:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b628:	0082      	lsls	r2, r0, #2
 800b62a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b62e:	f7f5 fb7b 	bl	8000d28 <__aeabi_uldivmod>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	4b2f      	ldr	r3, [pc, #188]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b638:	fba3 1302 	umull	r1, r3, r3, r2
 800b63c:	095b      	lsrs	r3, r3, #5
 800b63e:	2164      	movs	r1, #100	; 0x64
 800b640:	fb01 f303 	mul.w	r3, r1, r3
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	3332      	adds	r3, #50	; 0x32
 800b64a:	4a2a      	ldr	r2, [pc, #168]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b64c:	fba2 2303 	umull	r2, r3, r2, r3
 800b650:	095b      	lsrs	r3, r3, #5
 800b652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b656:	441e      	add	r6, r3
 800b658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b65a:	4618      	mov	r0, r3
 800b65c:	f04f 0100 	mov.w	r1, #0
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	1894      	adds	r4, r2, r2
 800b666:	603c      	str	r4, [r7, #0]
 800b668:	415b      	adcs	r3, r3
 800b66a:	607b      	str	r3, [r7, #4]
 800b66c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b670:	1812      	adds	r2, r2, r0
 800b672:	eb41 0303 	adc.w	r3, r1, r3
 800b676:	f04f 0400 	mov.w	r4, #0
 800b67a:	f04f 0500 	mov.w	r5, #0
 800b67e:	00dd      	lsls	r5, r3, #3
 800b680:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b684:	00d4      	lsls	r4, r2, #3
 800b686:	4622      	mov	r2, r4
 800b688:	462b      	mov	r3, r5
 800b68a:	eb12 0a00 	adds.w	sl, r2, r0
 800b68e:	eb43 0b01 	adc.w	fp, r3, r1
 800b692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	4618      	mov	r0, r3
 800b698:	f04f 0100 	mov.w	r1, #0
 800b69c:	f04f 0200 	mov.w	r2, #0
 800b6a0:	f04f 0300 	mov.w	r3, #0
 800b6a4:	008b      	lsls	r3, r1, #2
 800b6a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b6aa:	0082      	lsls	r2, r0, #2
 800b6ac:	4650      	mov	r0, sl
 800b6ae:	4659      	mov	r1, fp
 800b6b0:	f7f5 fb3a 	bl	8000d28 <__aeabi_uldivmod>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4b0e      	ldr	r3, [pc, #56]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b6ba:	fba3 1302 	umull	r1, r3, r3, r2
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	2164      	movs	r1, #100	; 0x64
 800b6c2:	fb01 f303 	mul.w	r3, r1, r3
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	011b      	lsls	r3, r3, #4
 800b6ca:	3332      	adds	r3, #50	; 0x32
 800b6cc:	4a09      	ldr	r2, [pc, #36]	; (800b6f4 <UART_SetConfig+0x38c>)
 800b6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d2:	095b      	lsrs	r3, r3, #5
 800b6d4:	f003 020f 	and.w	r2, r3, #15
 800b6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4432      	add	r2, r6
 800b6de:	609a      	str	r2, [r3, #8]
}
 800b6e0:	bf00      	nop
 800b6e2:	377c      	adds	r7, #124	; 0x7c
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ea:	bf00      	nop
 800b6ec:	40011000 	.word	0x40011000
 800b6f0:	40011400 	.word	0x40011400
 800b6f4:	51eb851f 	.word	0x51eb851f

0800b6f8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	f107 001c 	add.w	r0, r7, #28
 800b706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b70e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b710:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b712:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b716:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b71a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b71e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b722:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b732:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b736:	68fa      	ldr	r2, [r7, #12]
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	b004      	add	sp, #16
 800b74c:	4770      	bx	lr

0800b74e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b74e:	b480      	push	{r7}
 800b750:	b083      	sub	sp, #12
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	370c      	adds	r7, #12
 800b760:	46bd      	mov	sp, r7
 800b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b766:	4770      	bx	lr

0800b768 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b77c:	2300      	movs	r3, #0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2203      	movs	r2, #3
 800b796:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b798:	2002      	movs	r0, #2
 800b79a:	f7f9 fd45 	bl	8005228 <HAL_Delay>
  
  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 0303 	and.w	r3, r3, #3
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7e2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b7e8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b7ee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b7fe:	f023 030f 	bic.w	r3, r3, #15
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	431a      	orrs	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b80a:	2300      	movs	r3, #0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	b2db      	uxtb	r3, r3
}
 800b826:	4618      	mov	r0, r3
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b832:	b480      	push	{r7}
 800b834:	b085      	sub	sp, #20
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	3314      	adds	r3, #20
 800b840:	461a      	mov	r2, r3
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	4413      	add	r3, r2
 800b846:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
}  
 800b84c:	4618      	mov	r0, r3
 800b84e:	3714      	adds	r7, #20
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	685a      	ldr	r2, [r3, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b87e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b884:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b88a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b896:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	431a      	orrs	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0

}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b8be:	2310      	movs	r3, #16
 800b8c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8c2:	2340      	movs	r3, #64	; 0x40
 800b8c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8d0:	f107 0308 	add.w	r3, r7, #8
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff ff74 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8e0:	2110      	movs	r1, #16
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fa44 	bl	800bd70 <SDMMC_GetCmdResp1>
 800b8e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ea:	69fb      	ldr	r3, [r7, #28]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3720      	adds	r7, #32
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b088      	sub	sp, #32
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b902:	2311      	movs	r3, #17
 800b904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b906:	2340      	movs	r3, #64	; 0x40
 800b908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b90a:	2300      	movs	r3, #0
 800b90c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b912:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b914:	f107 0308 	add.w	r3, r7, #8
 800b918:	4619      	mov	r1, r3
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff ff52 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b920:	f241 3288 	movw	r2, #5000	; 0x1388
 800b924:	2111      	movs	r1, #17
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fa22 	bl	800bd70 <SDMMC_GetCmdResp1>
 800b92c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b92e:	69fb      	ldr	r3, [r7, #28]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3720      	adds	r7, #32
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b088      	sub	sp, #32
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b946:	2312      	movs	r3, #18
 800b948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b94a:	2340      	movs	r3, #64	; 0x40
 800b94c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b958:	f107 0308 	add.w	r3, r7, #8
 800b95c:	4619      	mov	r1, r3
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f7ff ff30 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b964:	f241 3288 	movw	r2, #5000	; 0x1388
 800b968:	2112      	movs	r1, #18
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fa00 	bl	800bd70 <SDMMC_GetCmdResp1>
 800b970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b972:	69fb      	ldr	r3, [r7, #28]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3720      	adds	r7, #32
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b088      	sub	sp, #32
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b98a:	2318      	movs	r3, #24
 800b98c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b98e:	2340      	movs	r3, #64	; 0x40
 800b990:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b99a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b99c:	f107 0308 	add.w	r3, r7, #8
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7ff ff0e 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ac:	2118      	movs	r1, #24
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f9de 	bl	800bd70 <SDMMC_GetCmdResp1>
 800b9b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9b6:	69fb      	ldr	r3, [r7, #28]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3720      	adds	r7, #32
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b088      	sub	sp, #32
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b9ce:	2319      	movs	r3, #25
 800b9d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9d2:	2340      	movs	r3, #64	; 0x40
 800b9d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9e0:	f107 0308 	add.w	r3, r7, #8
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff feec 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f0:	2119      	movs	r1, #25
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f9bc 	bl	800bd70 <SDMMC_GetCmdResp1>
 800b9f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9fa:	69fb      	ldr	r3, [r7, #28]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3720      	adds	r7, #32
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ba10:	230c      	movs	r3, #12
 800ba12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba14:	2340      	movs	r3, #64	; 0x40
 800ba16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba22:	f107 0308 	add.w	r3, r7, #8
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff fecb 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ba2e:	4a05      	ldr	r2, [pc, #20]	; (800ba44 <SDMMC_CmdStopTransfer+0x40>)
 800ba30:	210c      	movs	r1, #12
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f99c 	bl	800bd70 <SDMMC_GetCmdResp1>
 800ba38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba3a:	69fb      	ldr	r3, [r7, #28]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3720      	adds	r7, #32
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	05f5e100 	.word	0x05f5e100

0800ba48 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08a      	sub	sp, #40	; 0x28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ba58:	2307      	movs	r3, #7
 800ba5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba60:	2300      	movs	r3, #0
 800ba62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba68:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba6a:	f107 0310 	add.w	r3, r7, #16
 800ba6e:	4619      	mov	r1, r3
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f7ff fea7 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ba76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba7a:	2107      	movs	r1, #7
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f000 f977 	bl	800bd70 <SDMMC_GetCmdResp1>
 800ba82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ba84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3728      	adds	r7, #40	; 0x28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b088      	sub	sp, #32
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ba96:	2300      	movs	r3, #0
 800ba98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800baa2:	2300      	movs	r3, #0
 800baa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800baa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800baac:	f107 0308 	add.w	r3, r7, #8
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7ff fe86 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f92d 	bl	800bd18 <SDMMC_GetCmdError>
 800babe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bac0:	69fb      	ldr	r3, [r7, #28]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3720      	adds	r7, #32
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b088      	sub	sp, #32
 800bace:	af00      	add	r7, sp, #0
 800bad0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bad2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bad6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bad8:	2308      	movs	r3, #8
 800bada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800badc:	2340      	movs	r3, #64	; 0x40
 800bade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bae0:	2300      	movs	r3, #0
 800bae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800baea:	f107 0308 	add.w	r3, r7, #8
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff fe67 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fb24 	bl	800c144 <SDMMC_GetCmdResp7>
 800bafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bafe:	69fb      	ldr	r3, [r7, #28]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3720      	adds	r7, #32
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bb16:	2337      	movs	r3, #55	; 0x37
 800bb18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb1a:	2340      	movs	r3, #64	; 0x40
 800bb1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb28:	f107 0308 	add.w	r3, r7, #8
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff fe48 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bb34:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb38:	2137      	movs	r1, #55	; 0x37
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 f918 	bl	800bd70 <SDMMC_GetCmdResp1>
 800bb40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb42:	69fb      	ldr	r3, [r7, #28]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3720      	adds	r7, #32
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bb5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bb62:	2329      	movs	r3, #41	; 0x29
 800bb64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb66:	2340      	movs	r3, #64	; 0x40
 800bb68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb74:	f107 0308 	add.w	r3, r7, #8
 800bb78:	4619      	mov	r1, r3
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff fe22 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fa2b 	bl	800bfdc <SDMMC_GetCmdResp3>
 800bb86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb88:	69fb      	ldr	r3, [r7, #28]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3720      	adds	r7, #32
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b088      	sub	sp, #32
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bba0:	2306      	movs	r3, #6
 800bba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bba4:	2340      	movs	r3, #64	; 0x40
 800bba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbb2:	f107 0308 	add.w	r3, r7, #8
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7ff fe03 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800bbbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc2:	2106      	movs	r1, #6
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f8d3 	bl	800bd70 <SDMMC_GetCmdResp1>
 800bbca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3720      	adds	r7, #32
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b088      	sub	sp, #32
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bbe2:	2333      	movs	r3, #51	; 0x33
 800bbe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbe6:	2340      	movs	r3, #64	; 0x40
 800bbe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbea:	2300      	movs	r3, #0
 800bbec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbf4:	f107 0308 	add.w	r3, r7, #8
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff fde2 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bc00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc04:	2133      	movs	r1, #51	; 0x33
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f8b2 	bl	800bd70 <SDMMC_GetCmdResp1>
 800bc0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b088      	sub	sp, #32
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bc20:	2300      	movs	r3, #0
 800bc22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bc24:	2302      	movs	r3, #2
 800bc26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bc28:	23c0      	movs	r3, #192	; 0xc0
 800bc2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc36:	f107 0308 	add.w	r3, r7, #8
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff fdc1 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f000 f982 	bl	800bf4c <SDMMC_GetCmdResp2>
 800bc48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc4a:	69fb      	ldr	r3, [r7, #28]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3720      	adds	r7, #32
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bc62:	2309      	movs	r3, #9
 800bc64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bc66:	23c0      	movs	r3, #192	; 0xc0
 800bc68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc74:	f107 0308 	add.w	r3, r7, #8
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff fda2 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 f963 	bl	800bf4c <SDMMC_GetCmdResp2>
 800bc86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc88:	69fb      	ldr	r3, [r7, #28]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3720      	adds	r7, #32
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b088      	sub	sp, #32
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bca0:	2303      	movs	r3, #3
 800bca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bca4:	2340      	movs	r3, #64	; 0x40
 800bca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcb2:	f107 0308 	add.w	r3, r7, #8
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f7ff fd83 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	2103      	movs	r1, #3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f9c8 	bl	800c058 <SDMMC_GetCmdResp6>
 800bcc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcca:	69fb      	ldr	r3, [r7, #28]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3720      	adds	r7, #32
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b088      	sub	sp, #32
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bce2:	230d      	movs	r3, #13
 800bce4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bce6:	2340      	movs	r3, #64	; 0x40
 800bce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcea:	2300      	movs	r3, #0
 800bcec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcf4:	f107 0308 	add.w	r3, r7, #8
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fd62 	bl	800b7c4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bd00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd04:	210d      	movs	r1, #13
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f832 	bl	800bd70 <SDMMC_GetCmdResp1>
 800bd0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd0e:	69fb      	ldr	r3, [r7, #28]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd20:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <SDMMC_GetCmdError+0x50>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a11      	ldr	r2, [pc, #68]	; (800bd6c <SDMMC_GetCmdError+0x54>)
 800bd26:	fba2 2303 	umull	r2, r3, r2, r3
 800bd2a:	0a5b      	lsrs	r3, r3, #9
 800bd2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd30:	fb02 f303 	mul.w	r3, r2, r3
 800bd34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	1e5a      	subs	r2, r3, #1
 800bd3a:	60fa      	str	r2, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d102      	bne.n	800bd46 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd44:	e009      	b.n	800bd5a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d0f1      	beq.n	800bd36 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	22c5      	movs	r2, #197	; 0xc5
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3714      	adds	r7, #20
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop
 800bd68:	2000004c 	.word	0x2000004c
 800bd6c:	10624dd3 	.word	0x10624dd3

0800bd70 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b088      	sub	sp, #32
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bd7e:	4b70      	ldr	r3, [pc, #448]	; (800bf40 <SDMMC_GetCmdResp1+0x1d0>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a70      	ldr	r2, [pc, #448]	; (800bf44 <SDMMC_GetCmdResp1+0x1d4>)
 800bd84:	fba2 2303 	umull	r2, r3, r2, r3
 800bd88:	0a5a      	lsrs	r2, r3, #9
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	fb02 f303 	mul.w	r3, r2, r3
 800bd90:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	1e5a      	subs	r2, r3, #1
 800bd96:	61fa      	str	r2, [r7, #28]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d102      	bne.n	800bda2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bda0:	e0c9      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bda6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bda8:	69bb      	ldr	r3, [r7, #24]
 800bdaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0ef      	beq.n	800bd92 <SDMMC_GetCmdResp1+0x22>
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1ea      	bne.n	800bd92 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc0:	f003 0304 	and.w	r3, r3, #4
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d004      	beq.n	800bdd2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2204      	movs	r2, #4
 800bdcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdce:	2304      	movs	r3, #4
 800bdd0:	e0b1      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdd6:	f003 0301 	and.w	r3, r3, #1
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d004      	beq.n	800bde8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2201      	movs	r2, #1
 800bde2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e0a6      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	22c5      	movs	r2, #197	; 0xc5
 800bdec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f7ff fd12 	bl	800b818 <SDIO_GetCommandResponse>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	7afb      	ldrb	r3, [r7, #11]
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d001      	beq.n	800be02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdfe:	2301      	movs	r3, #1
 800be00:	e099      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800be02:	2100      	movs	r1, #0
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff fd14 	bl	800b832 <SDIO_GetResponse>
 800be0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800be0c:	697a      	ldr	r2, [r7, #20]
 800be0e:	4b4e      	ldr	r3, [pc, #312]	; (800bf48 <SDMMC_GetCmdResp1+0x1d8>)
 800be10:	4013      	ands	r3, r2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800be16:	2300      	movs	r3, #0
 800be18:	e08d      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	da02      	bge.n	800be26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800be24:	e087      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be30:	2340      	movs	r3, #64	; 0x40
 800be32:	e080      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be3e:	2380      	movs	r3, #128	; 0x80
 800be40:	e079      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be50:	e071      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be60:	e069      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be70:	e061      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be80:	e059      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be90:	e051      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d002      	beq.n	800bea2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bea0:	e049      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d002      	beq.n	800beb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800beac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800beb0:	e041      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d002      	beq.n	800bec2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bec0:	e039      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d002      	beq.n	800bed2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800becc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bed0:	e031      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bedc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bee0:	e029      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800beec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bef0:	e021      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800befc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bf00:	e019      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d002      	beq.n	800bf12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bf0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bf10:	e011      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bf1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bf20:	e009      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f003 0308 	and.w	r3, r3, #8
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d002      	beq.n	800bf32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bf2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bf30:	e001      	b.n	800bf36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3720      	adds	r7, #32
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	2000004c 	.word	0x2000004c
 800bf44:	10624dd3 	.word	0x10624dd3
 800bf48:	fdffe008 	.word	0xfdffe008

0800bf4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf54:	4b1f      	ldr	r3, [pc, #124]	; (800bfd4 <SDMMC_GetCmdResp2+0x88>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a1f      	ldr	r2, [pc, #124]	; (800bfd8 <SDMMC_GetCmdResp2+0x8c>)
 800bf5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5e:	0a5b      	lsrs	r3, r3, #9
 800bf60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf64:	fb02 f303 	mul.w	r3, r2, r3
 800bf68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	1e5a      	subs	r2, r3, #1
 800bf6e:	60fa      	str	r2, [r7, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d102      	bne.n	800bf7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf78:	e026      	b.n	800bfc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d0ef      	beq.n	800bf6a <SDMMC_GetCmdResp2+0x1e>
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1ea      	bne.n	800bf6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2204      	movs	r2, #4
 800bfa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfa6:	2304      	movs	r3, #4
 800bfa8:	e00e      	b.n	800bfc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfae:	f003 0301 	and.w	r3, r3, #1
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d004      	beq.n	800bfc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e003      	b.n	800bfc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	22c5      	movs	r2, #197	; 0xc5
 800bfc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3714      	adds	r7, #20
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	2000004c 	.word	0x2000004c
 800bfd8:	10624dd3 	.word	0x10624dd3

0800bfdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bfe4:	4b1a      	ldr	r3, [pc, #104]	; (800c050 <SDMMC_GetCmdResp3+0x74>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a1a      	ldr	r2, [pc, #104]	; (800c054 <SDMMC_GetCmdResp3+0x78>)
 800bfea:	fba2 2303 	umull	r2, r3, r2, r3
 800bfee:	0a5b      	lsrs	r3, r3, #9
 800bff0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bff4:	fb02 f303 	mul.w	r3, r2, r3
 800bff8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	1e5a      	subs	r2, r3, #1
 800bffe:	60fa      	str	r2, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d102      	bne.n	800c00a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c008:	e01b      	b.n	800c042 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c00e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c016:	2b00      	cmp	r3, #0
 800c018:	d0ef      	beq.n	800bffa <SDMMC_GetCmdResp3+0x1e>
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1ea      	bne.n	800bffa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c028:	f003 0304 	and.w	r3, r3, #4
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d004      	beq.n	800c03a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2204      	movs	r2, #4
 800c034:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c036:	2304      	movs	r3, #4
 800c038:	e003      	b.n	800c042 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	22c5      	movs	r2, #197	; 0xc5
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	2000004c 	.word	0x2000004c
 800c054:	10624dd3 	.word	0x10624dd3

0800c058 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b088      	sub	sp, #32
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	460b      	mov	r3, r1
 800c062:	607a      	str	r2, [r7, #4]
 800c064:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c066:	4b35      	ldr	r3, [pc, #212]	; (800c13c <SDMMC_GetCmdResp6+0xe4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a35      	ldr	r2, [pc, #212]	; (800c140 <SDMMC_GetCmdResp6+0xe8>)
 800c06c:	fba2 2303 	umull	r2, r3, r2, r3
 800c070:	0a5b      	lsrs	r3, r3, #9
 800c072:	f241 3288 	movw	r2, #5000	; 0x1388
 800c076:	fb02 f303 	mul.w	r3, r2, r3
 800c07a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	1e5a      	subs	r2, r3, #1
 800c080:	61fa      	str	r2, [r7, #28]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d102      	bne.n	800c08c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c086:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c08a:	e052      	b.n	800c132 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c090:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d0ef      	beq.n	800c07c <SDMMC_GetCmdResp6+0x24>
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1ea      	bne.n	800c07c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0aa:	f003 0304 	and.w	r3, r3, #4
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d004      	beq.n	800c0bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2204      	movs	r2, #4
 800c0b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0b8:	2304      	movs	r3, #4
 800c0ba:	e03a      	b.n	800c132 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d004      	beq.n	800c0d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e02f      	b.n	800c132 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff fba0 	bl	800b818 <SDIO_GetCommandResponse>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	7afb      	ldrb	r3, [r7, #11]
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d001      	beq.n	800c0e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e025      	b.n	800c132 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	22c5      	movs	r2, #197	; 0xc5
 800c0ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f7ff fb9f 	bl	800b832 <SDIO_GetResponse>
 800c0f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d106      	bne.n	800c10e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	0c1b      	lsrs	r3, r3, #16
 800c104:	b29a      	uxth	r2, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c10a:	2300      	movs	r3, #0
 800c10c:	e011      	b.n	800c132 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c118:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c11c:	e009      	b.n	800c132 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c12c:	e001      	b.n	800c132 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c12e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c132:	4618      	mov	r0, r3
 800c134:	3720      	adds	r7, #32
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	2000004c 	.word	0x2000004c
 800c140:	10624dd3 	.word	0x10624dd3

0800c144 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c14c:	4b22      	ldr	r3, [pc, #136]	; (800c1d8 <SDMMC_GetCmdResp7+0x94>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a22      	ldr	r2, [pc, #136]	; (800c1dc <SDMMC_GetCmdResp7+0x98>)
 800c152:	fba2 2303 	umull	r2, r3, r2, r3
 800c156:	0a5b      	lsrs	r3, r3, #9
 800c158:	f241 3288 	movw	r2, #5000	; 0x1388
 800c15c:	fb02 f303 	mul.w	r3, r2, r3
 800c160:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	1e5a      	subs	r2, r3, #1
 800c166:	60fa      	str	r2, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d102      	bne.n	800c172 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c16c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c170:	e02c      	b.n	800c1cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c176:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0ef      	beq.n	800c162 <SDMMC_GetCmdResp7+0x1e>
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1ea      	bne.n	800c162 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c190:	f003 0304 	and.w	r3, r3, #4
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2204      	movs	r2, #4
 800c19c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c19e:	2304      	movs	r3, #4
 800c1a0:	e014      	b.n	800c1cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d004      	beq.n	800c1b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e009      	b.n	800c1cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2240      	movs	r2, #64	; 0x40
 800c1c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c1ca:	2300      	movs	r3, #0
  
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	2000004c 	.word	0x2000004c
 800c1dc:	10624dd3 	.word	0x10624dd3

0800c1e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c1e4:	4904      	ldr	r1, [pc, #16]	; (800c1f8 <MX_FATFS_Init+0x18>)
 800c1e6:	4805      	ldr	r0, [pc, #20]	; (800c1fc <MX_FATFS_Init+0x1c>)
 800c1e8:	f003 fa22 	bl	800f630 <FATFS_LinkDriver>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	4b03      	ldr	r3, [pc, #12]	; (800c200 <MX_FATFS_Init+0x20>)
 800c1f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c1f4:	bf00      	nop
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20002ad8 	.word	0x20002ad8
 800c1fc:	080151ac 	.word	0x080151ac
 800c200:	20002ad4 	.word	0x20002ad4

0800c204 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c204:	b480      	push	{r7}
 800c206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c208:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	46bd      	mov	sp, r7
 800c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c212:	4770      	bx	lr

0800c214 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c21e:	f000 f879 	bl	800c314 <BSP_SD_IsDetected>
 800c222:	4603      	mov	r3, r0
 800c224:	2b01      	cmp	r3, #1
 800c226:	d001      	beq.n	800c22c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	e012      	b.n	800c252 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c22c:	480b      	ldr	r0, [pc, #44]	; (800c25c <BSP_SD_Init+0x48>)
 800c22e:	f7fb ffd2 	bl	80081d6 <HAL_SD_Init>
 800c232:	4603      	mov	r3, r0
 800c234:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d109      	bne.n	800c250 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c23c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c240:	4806      	ldr	r0, [pc, #24]	; (800c25c <BSP_SD_Init+0x48>)
 800c242:	f7fc fdab 	bl	8008d9c <HAL_SD_ConfigWideBusOperation>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c250:	79fb      	ldrb	r3, [r7, #7]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20002968 	.word	0x20002968

0800c260 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af02      	add	r7, sp, #8
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	68f9      	ldr	r1, [r7, #12]
 800c27c:	4806      	ldr	r0, [pc, #24]	; (800c298 <BSP_SD_ReadBlocks+0x38>)
 800c27e:	f7fc f859 	bl	8008334 <HAL_SD_ReadBlocks>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c288:	2301      	movs	r3, #1
 800c28a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20002968 	.word	0x20002968

0800c29c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b088      	sub	sp, #32
 800c2a0:	af02      	add	r7, sp, #8
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	68f9      	ldr	r1, [r7, #12]
 800c2b8:	4806      	ldr	r0, [pc, #24]	; (800c2d4 <BSP_SD_WriteBlocks+0x38>)
 800c2ba:	f7fc fa19 	bl	80086f0 <HAL_SD_WriteBlocks>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20002968 	.word	0x20002968

0800c2d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c2dc:	4805      	ldr	r0, [pc, #20]	; (800c2f4 <BSP_SD_GetCardState+0x1c>)
 800c2de:	f7fc fdf7 	bl	8008ed0 <HAL_SD_GetCardState>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b04      	cmp	r3, #4
 800c2e6:	bf14      	ite	ne
 800c2e8:	2301      	movne	r3, #1
 800c2ea:	2300      	moveq	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20002968 	.word	0x20002968

0800c2f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c300:	6879      	ldr	r1, [r7, #4]
 800c302:	4803      	ldr	r0, [pc, #12]	; (800c310 <BSP_SD_GetCardInfo+0x18>)
 800c304:	f7fc fd1e 	bl	8008d44 <HAL_SD_GetCardInfo>
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20002968 	.word	0x20002968

0800c314 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c31a:	2301      	movs	r3, #1
 800c31c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800c31e:	79fb      	ldrb	r3, [r7, #7]
 800c320:	b2db      	uxtb	r3, r3
}
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
	...

0800c330 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c33a:	4b0b      	ldr	r3, [pc, #44]	; (800c368 <SD_CheckStatus+0x38>)
 800c33c:	2201      	movs	r2, #1
 800c33e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c340:	f7ff ffca 	bl	800c2d8 <BSP_SD_GetCardState>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d107      	bne.n	800c35a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c34a:	4b07      	ldr	r3, [pc, #28]	; (800c368 <SD_CheckStatus+0x38>)
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	f023 0301 	bic.w	r3, r3, #1
 800c354:	b2da      	uxtb	r2, r3
 800c356:	4b04      	ldr	r3, [pc, #16]	; (800c368 <SD_CheckStatus+0x38>)
 800c358:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c35a:	4b03      	ldr	r3, [pc, #12]	; (800c368 <SD_CheckStatus+0x38>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	b2db      	uxtb	r3, r3
}
 800c360:	4618      	mov	r0, r3
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	20000055 	.word	0x20000055

0800c36c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c376:	4b0b      	ldr	r3, [pc, #44]	; (800c3a4 <SD_initialize+0x38>)
 800c378:	2201      	movs	r2, #1
 800c37a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c37c:	f7ff ff4a 	bl	800c214 <BSP_SD_Init>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d107      	bne.n	800c396 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	4618      	mov	r0, r3
 800c38a:	f7ff ffd1 	bl	800c330 <SD_CheckStatus>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	4b04      	ldr	r3, [pc, #16]	; (800c3a4 <SD_initialize+0x38>)
 800c394:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c396:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <SD_initialize+0x38>)
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	b2db      	uxtb	r3, r3
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	20000055 	.word	0x20000055

0800c3a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c3b2:	79fb      	ldrb	r3, [r7, #7]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7ff ffbb 	bl	800c330 <SD_CheckStatus>
 800c3ba:	4603      	mov	r3, r0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
 800c3ce:	603b      	str	r3, [r7, #0]
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	68b8      	ldr	r0, [r7, #8]
 800c3e2:	f7ff ff3d 	bl	800c260 <BSP_SD_ReadBlocks>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d107      	bne.n	800c3fc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c3ec:	bf00      	nop
 800c3ee:	f7ff ff73 	bl	800c2d8 <BSP_SD_GetCardState>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1fa      	bne.n	800c3ee <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3718      	adds	r7, #24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b086      	sub	sp, #24
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	603b      	str	r3, [r7, #0]
 800c412:	4603      	mov	r3, r0
 800c414:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c41a:	f04f 33ff 	mov.w	r3, #4294967295
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	6879      	ldr	r1, [r7, #4]
 800c422:	68b8      	ldr	r0, [r7, #8]
 800c424:	f7ff ff3a 	bl	800c29c <BSP_SD_WriteBlocks>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d107      	bne.n	800c43e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c42e:	bf00      	nop
 800c430:	f7ff ff52 	bl	800c2d8 <BSP_SD_GetCardState>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1fa      	bne.n	800c430 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3718      	adds	r7, #24
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08c      	sub	sp, #48	; 0x30
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	4603      	mov	r3, r0
 800c450:	603a      	str	r2, [r7, #0]
 800c452:	71fb      	strb	r3, [r7, #7]
 800c454:	460b      	mov	r3, r1
 800c456:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c45e:	4b25      	ldr	r3, [pc, #148]	; (800c4f4 <SD_ioctl+0xac>)
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <SD_ioctl+0x28>
 800c46c:	2303      	movs	r3, #3
 800c46e:	e03c      	b.n	800c4ea <SD_ioctl+0xa2>

  switch (cmd)
 800c470:	79bb      	ldrb	r3, [r7, #6]
 800c472:	2b03      	cmp	r3, #3
 800c474:	d834      	bhi.n	800c4e0 <SD_ioctl+0x98>
 800c476:	a201      	add	r2, pc, #4	; (adr r2, 800c47c <SD_ioctl+0x34>)
 800c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47c:	0800c48d 	.word	0x0800c48d
 800c480:	0800c495 	.word	0x0800c495
 800c484:	0800c4ad 	.word	0x0800c4ad
 800c488:	0800c4c7 	.word	0x0800c4c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c492:	e028      	b.n	800c4e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c494:	f107 030c 	add.w	r3, r7, #12
 800c498:	4618      	mov	r0, r3
 800c49a:	f7ff ff2d 	bl	800c2f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4aa:	e01c      	b.n	800c4e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c4ac:	f107 030c 	add.w	r3, r7, #12
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff ff21 	bl	800c2f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b8:	b29a      	uxth	r2, r3
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4c4:	e00f      	b.n	800c4e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c4c6:	f107 030c 	add.w	r3, r7, #12
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff ff14 	bl	800c2f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d2:	0a5a      	lsrs	r2, r3, #9
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c4de:	e002      	b.n	800c4e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c4e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3730      	adds	r7, #48	; 0x30
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20000055 	.word	0x20000055

0800c4f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c502:	79fb      	ldrb	r3, [r7, #7]
 800c504:	4a08      	ldr	r2, [pc, #32]	; (800c528 <disk_status+0x30>)
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	79fa      	ldrb	r2, [r7, #7]
 800c510:	4905      	ldr	r1, [pc, #20]	; (800c528 <disk_status+0x30>)
 800c512:	440a      	add	r2, r1
 800c514:	7a12      	ldrb	r2, [r2, #8]
 800c516:	4610      	mov	r0, r2
 800c518:	4798      	blx	r3
 800c51a:	4603      	mov	r3, r0
 800c51c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	2000048c 	.word	0x2000048c

0800c52c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	4a0d      	ldr	r2, [pc, #52]	; (800c574 <disk_initialize+0x48>)
 800c53e:	5cd3      	ldrb	r3, [r2, r3]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d111      	bne.n	800c568 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	4a0b      	ldr	r2, [pc, #44]	; (800c574 <disk_initialize+0x48>)
 800c548:	2101      	movs	r1, #1
 800c54a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c54c:	79fb      	ldrb	r3, [r7, #7]
 800c54e:	4a09      	ldr	r2, [pc, #36]	; (800c574 <disk_initialize+0x48>)
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	4413      	add	r3, r2
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	79fa      	ldrb	r2, [r7, #7]
 800c55a:	4906      	ldr	r1, [pc, #24]	; (800c574 <disk_initialize+0x48>)
 800c55c:	440a      	add	r2, r1
 800c55e:	7a12      	ldrb	r2, [r2, #8]
 800c560:	4610      	mov	r0, r2
 800c562:	4798      	blx	r3
 800c564:	4603      	mov	r3, r0
 800c566:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c568:	7bfb      	ldrb	r3, [r7, #15]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	2000048c 	.word	0x2000048c

0800c578 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c578:	b590      	push	{r4, r7, lr}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	607a      	str	r2, [r7, #4]
 800c582:	603b      	str	r3, [r7, #0]
 800c584:	4603      	mov	r3, r0
 800c586:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <disk_read+0x3c>)
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	4413      	add	r3, r2
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	689c      	ldr	r4, [r3, #8]
 800c594:	7bfb      	ldrb	r3, [r7, #15]
 800c596:	4a07      	ldr	r2, [pc, #28]	; (800c5b4 <disk_read+0x3c>)
 800c598:	4413      	add	r3, r2
 800c59a:	7a18      	ldrb	r0, [r3, #8]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	68b9      	ldr	r1, [r7, #8]
 800c5a2:	47a0      	blx	r4
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd90      	pop	{r4, r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	2000048c 	.word	0x2000048c

0800c5b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c5b8:	b590      	push	{r4, r7, lr}
 800c5ba:	b087      	sub	sp, #28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60b9      	str	r1, [r7, #8]
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	603b      	str	r3, [r7, #0]
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	4a0a      	ldr	r2, [pc, #40]	; (800c5f4 <disk_write+0x3c>)
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	68dc      	ldr	r4, [r3, #12]
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
 800c5d6:	4a07      	ldr	r2, [pc, #28]	; (800c5f4 <disk_write+0x3c>)
 800c5d8:	4413      	add	r3, r2
 800c5da:	7a18      	ldrb	r0, [r3, #8]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	68b9      	ldr	r1, [r7, #8]
 800c5e2:	47a0      	blx	r4
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	371c      	adds	r7, #28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd90      	pop	{r4, r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	2000048c 	.word	0x2000048c

0800c5f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	4603      	mov	r3, r0
 800c600:	603a      	str	r2, [r7, #0]
 800c602:	71fb      	strb	r3, [r7, #7]
 800c604:	460b      	mov	r3, r1
 800c606:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	4a09      	ldr	r2, [pc, #36]	; (800c630 <disk_ioctl+0x38>)
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	79fa      	ldrb	r2, [r7, #7]
 800c616:	4906      	ldr	r1, [pc, #24]	; (800c630 <disk_ioctl+0x38>)
 800c618:	440a      	add	r2, r1
 800c61a:	7a10      	ldrb	r0, [r2, #8]
 800c61c:	79b9      	ldrb	r1, [r7, #6]
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	4798      	blx	r3
 800c622:	4603      	mov	r3, r0
 800c624:	73fb      	strb	r3, [r7, #15]
  return res;
 800c626:	7bfb      	ldrb	r3, [r7, #15]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3710      	adds	r7, #16
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	2000048c 	.word	0x2000048c

0800c634 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3301      	adds	r3, #1
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c644:	89fb      	ldrh	r3, [r7, #14]
 800c646:	021b      	lsls	r3, r3, #8
 800c648:	b21a      	sxth	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	b21b      	sxth	r3, r3
 800c650:	4313      	orrs	r3, r2
 800c652:	b21b      	sxth	r3, r3
 800c654:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c656:	89fb      	ldrh	r3, [r7, #14]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	3303      	adds	r3, #3
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	021b      	lsls	r3, r3, #8
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	3202      	adds	r2, #2
 800c67c:	7812      	ldrb	r2, [r2, #0]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	021b      	lsls	r3, r3, #8
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	3201      	adds	r2, #1
 800c68a:	7812      	ldrb	r2, [r2, #0]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	021b      	lsls	r3, r3, #8
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	7812      	ldrb	r2, [r2, #0]
 800c698:	4313      	orrs	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c69c:	68fb      	ldr	r3, [r7, #12]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c6aa:	b480      	push	{r7}
 800c6ac:	b083      	sub	sp, #12
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	1c5a      	adds	r2, r3, #1
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	887a      	ldrh	r2, [r7, #2]
 800c6be:	b2d2      	uxtb	r2, r2
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	887b      	ldrh	r3, [r7, #2]
 800c6c4:	0a1b      	lsrs	r3, r3, #8
 800c6c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	1c5a      	adds	r2, r3, #1
 800c6cc:	607a      	str	r2, [r7, #4]
 800c6ce:	887a      	ldrh	r2, [r7, #2]
 800c6d0:	b2d2      	uxtb	r2, r2
 800c6d2:	701a      	strb	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	b2d2      	uxtb	r2, r2
 800c6f4:	701a      	strb	r2, [r3, #0]
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	0a1b      	lsrs	r3, r3, #8
 800c6fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	607a      	str	r2, [r7, #4]
 800c702:	683a      	ldr	r2, [r7, #0]
 800c704:	b2d2      	uxtb	r2, r2
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	0a1b      	lsrs	r3, r3, #8
 800c70c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	1c5a      	adds	r2, r3, #1
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	683a      	ldr	r2, [r7, #0]
 800c716:	b2d2      	uxtb	r2, r2
 800c718:	701a      	strb	r2, [r3, #0]
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	0a1b      	lsrs	r3, r3, #8
 800c71e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	607a      	str	r2, [r7, #4]
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	b2d2      	uxtb	r2, r2
 800c72a:	701a      	strb	r2, [r3, #0]
}
 800c72c:	bf00      	nop
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d00d      	beq.n	800c76e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c752:	693a      	ldr	r2, [r7, #16]
 800c754:	1c53      	adds	r3, r2, #1
 800c756:	613b      	str	r3, [r7, #16]
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	1c59      	adds	r1, r3, #1
 800c75c:	6179      	str	r1, [r7, #20]
 800c75e:	7812      	ldrb	r2, [r2, #0]
 800c760:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3b01      	subs	r3, #1
 800c766:	607b      	str	r3, [r7, #4]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1f1      	bne.n	800c752 <mem_cpy+0x1a>
	}
}
 800c76e:	bf00      	nop
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c77a:	b480      	push	{r7}
 800c77c:	b087      	sub	sp, #28
 800c77e:	af00      	add	r7, sp, #0
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	60b9      	str	r1, [r7, #8]
 800c784:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	1c5a      	adds	r2, r3, #1
 800c78e:	617a      	str	r2, [r7, #20]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	b2d2      	uxtb	r2, r2
 800c794:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3b01      	subs	r3, #1
 800c79a:	607b      	str	r3, [r7, #4]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1f3      	bne.n	800c78a <mem_set+0x10>
}
 800c7a2:	bf00      	nop
 800c7a4:	bf00      	nop
 800c7a6:	371c      	adds	r7, #28
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c7b0:	b480      	push	{r7}
 800c7b2:	b089      	sub	sp, #36	; 0x24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	61fb      	str	r3, [r7, #28]
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	61fa      	str	r2, [r7, #28]
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	61ba      	str	r2, [r7, #24]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	1acb      	subs	r3, r1, r3
 800c7dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	607b      	str	r3, [r7, #4]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d002      	beq.n	800c7f0 <mem_cmp+0x40>
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d0eb      	beq.n	800c7c8 <mem_cmp+0x18>

	return r;
 800c7f0:	697b      	ldr	r3, [r7, #20]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3724      	adds	r7, #36	; 0x24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c7fe:	b480      	push	{r7}
 800c800:	b083      	sub	sp, #12
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
 800c806:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c808:	e002      	b.n	800c810 <chk_chr+0x12>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3301      	adds	r3, #1
 800c80e:	607b      	str	r3, [r7, #4]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d005      	beq.n	800c824 <chk_chr+0x26>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	4293      	cmp	r3, r2
 800c822:	d1f2      	bne.n	800c80a <chk_chr+0xc>
	return *str;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	781b      	ldrb	r3, [r3, #0]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr

0800c834 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c83e:	2300      	movs	r3, #0
 800c840:	60bb      	str	r3, [r7, #8]
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e029      	b.n	800c89c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c848:	4a27      	ldr	r2, [pc, #156]	; (800c8e8 <chk_lock+0xb4>)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	011b      	lsls	r3, r3, #4
 800c84e:	4413      	add	r3, r2
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d01d      	beq.n	800c892 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c856:	4a24      	ldr	r2, [pc, #144]	; (800c8e8 <chk_lock+0xb4>)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	011b      	lsls	r3, r3, #4
 800c85c:	4413      	add	r3, r2
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	429a      	cmp	r2, r3
 800c866:	d116      	bne.n	800c896 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c868:	4a1f      	ldr	r2, [pc, #124]	; (800c8e8 <chk_lock+0xb4>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	011b      	lsls	r3, r3, #4
 800c86e:	4413      	add	r3, r2
 800c870:	3304      	adds	r3, #4
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c878:	429a      	cmp	r2, r3
 800c87a:	d10c      	bne.n	800c896 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c87c:	4a1a      	ldr	r2, [pc, #104]	; (800c8e8 <chk_lock+0xb4>)
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	011b      	lsls	r3, r3, #4
 800c882:	4413      	add	r3, r2
 800c884:	3308      	adds	r3, #8
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d102      	bne.n	800c896 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c890:	e007      	b.n	800c8a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c892:	2301      	movs	r3, #1
 800c894:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3301      	adds	r3, #1
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d9d2      	bls.n	800c848 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d109      	bne.n	800c8bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d102      	bne.n	800c8b4 <chk_lock+0x80>
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d101      	bne.n	800c8b8 <chk_lock+0x84>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	e010      	b.n	800c8da <chk_lock+0xa6>
 800c8b8:	2312      	movs	r3, #18
 800c8ba:	e00e      	b.n	800c8da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d108      	bne.n	800c8d4 <chk_lock+0xa0>
 800c8c2:	4a09      	ldr	r2, [pc, #36]	; (800c8e8 <chk_lock+0xb4>)
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	011b      	lsls	r3, r3, #4
 800c8c8:	4413      	add	r3, r2
 800c8ca:	330c      	adds	r3, #12
 800c8cc:	881b      	ldrh	r3, [r3, #0]
 800c8ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8d2:	d101      	bne.n	800c8d8 <chk_lock+0xa4>
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	e000      	b.n	800c8da <chk_lock+0xa6>
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3714      	adds	r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr
 800c8e6:	bf00      	nop
 800c8e8:	2000026c 	.word	0x2000026c

0800c8ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	607b      	str	r3, [r7, #4]
 800c8f6:	e002      	b.n	800c8fe <enq_lock+0x12>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	607b      	str	r3, [r7, #4]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d806      	bhi.n	800c912 <enq_lock+0x26>
 800c904:	4a09      	ldr	r2, [pc, #36]	; (800c92c <enq_lock+0x40>)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	011b      	lsls	r3, r3, #4
 800c90a:	4413      	add	r3, r2
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1f2      	bne.n	800c8f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b02      	cmp	r3, #2
 800c916:	bf14      	ite	ne
 800c918:	2301      	movne	r3, #1
 800c91a:	2300      	moveq	r3, #0
 800c91c:	b2db      	uxtb	r3, r3
}
 800c91e:	4618      	mov	r0, r3
 800c920:	370c      	adds	r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	2000026c 	.word	0x2000026c

0800c930 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c93a:	2300      	movs	r3, #0
 800c93c:	60fb      	str	r3, [r7, #12]
 800c93e:	e01f      	b.n	800c980 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c940:	4a41      	ldr	r2, [pc, #260]	; (800ca48 <inc_lock+0x118>)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	4413      	add	r3, r2
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d113      	bne.n	800c97a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c952:	4a3d      	ldr	r2, [pc, #244]	; (800ca48 <inc_lock+0x118>)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	011b      	lsls	r3, r3, #4
 800c958:	4413      	add	r3, r2
 800c95a:	3304      	adds	r3, #4
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c962:	429a      	cmp	r2, r3
 800c964:	d109      	bne.n	800c97a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c966:	4a38      	ldr	r2, [pc, #224]	; (800ca48 <inc_lock+0x118>)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	011b      	lsls	r3, r3, #4
 800c96c:	4413      	add	r3, r2
 800c96e:	3308      	adds	r3, #8
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c976:	429a      	cmp	r2, r3
 800c978:	d006      	beq.n	800c988 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3301      	adds	r3, #1
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d9dc      	bls.n	800c940 <inc_lock+0x10>
 800c986:	e000      	b.n	800c98a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c988:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d132      	bne.n	800c9f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c990:	2300      	movs	r3, #0
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e002      	b.n	800c99c <inc_lock+0x6c>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	3301      	adds	r3, #1
 800c99a:	60fb      	str	r3, [r7, #12]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d806      	bhi.n	800c9b0 <inc_lock+0x80>
 800c9a2:	4a29      	ldr	r2, [pc, #164]	; (800ca48 <inc_lock+0x118>)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	011b      	lsls	r3, r3, #4
 800c9a8:	4413      	add	r3, r2
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1f2      	bne.n	800c996 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d101      	bne.n	800c9ba <inc_lock+0x8a>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e040      	b.n	800ca3c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	4922      	ldr	r1, [pc, #136]	; (800ca48 <inc_lock+0x118>)
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	011b      	lsls	r3, r3, #4
 800c9c4:	440b      	add	r3, r1
 800c9c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	689a      	ldr	r2, [r3, #8]
 800c9cc:	491e      	ldr	r1, [pc, #120]	; (800ca48 <inc_lock+0x118>)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	440b      	add	r3, r1
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	695a      	ldr	r2, [r3, #20]
 800c9dc:	491a      	ldr	r1, [pc, #104]	; (800ca48 <inc_lock+0x118>)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	011b      	lsls	r3, r3, #4
 800c9e2:	440b      	add	r3, r1
 800c9e4:	3308      	adds	r3, #8
 800c9e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c9e8:	4a17      	ldr	r2, [pc, #92]	; (800ca48 <inc_lock+0x118>)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	011b      	lsls	r3, r3, #4
 800c9ee:	4413      	add	r3, r2
 800c9f0:	330c      	adds	r3, #12
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d009      	beq.n	800ca10 <inc_lock+0xe0>
 800c9fc:	4a12      	ldr	r2, [pc, #72]	; (800ca48 <inc_lock+0x118>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	4413      	add	r3, r2
 800ca04:	330c      	adds	r3, #12
 800ca06:	881b      	ldrh	r3, [r3, #0]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <inc_lock+0xe0>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	e015      	b.n	800ca3c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d108      	bne.n	800ca28 <inc_lock+0xf8>
 800ca16:	4a0c      	ldr	r2, [pc, #48]	; (800ca48 <inc_lock+0x118>)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	011b      	lsls	r3, r3, #4
 800ca1c:	4413      	add	r3, r2
 800ca1e:	330c      	adds	r3, #12
 800ca20:	881b      	ldrh	r3, [r3, #0]
 800ca22:	3301      	adds	r3, #1
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	e001      	b.n	800ca2c <inc_lock+0xfc>
 800ca28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca2c:	4906      	ldr	r1, [pc, #24]	; (800ca48 <inc_lock+0x118>)
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	011b      	lsls	r3, r3, #4
 800ca32:	440b      	add	r3, r1
 800ca34:	330c      	adds	r3, #12
 800ca36:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3301      	adds	r3, #1
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	2000026c 	.word	0x2000026c

0800ca4c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	607b      	str	r3, [r7, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d825      	bhi.n	800caac <dec_lock+0x60>
		n = Files[i].ctr;
 800ca60:	4a17      	ldr	r2, [pc, #92]	; (800cac0 <dec_lock+0x74>)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	011b      	lsls	r3, r3, #4
 800ca66:	4413      	add	r3, r2
 800ca68:	330c      	adds	r3, #12
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca6e:	89fb      	ldrh	r3, [r7, #14]
 800ca70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca74:	d101      	bne.n	800ca7a <dec_lock+0x2e>
 800ca76:	2300      	movs	r3, #0
 800ca78:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca7a:	89fb      	ldrh	r3, [r7, #14]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <dec_lock+0x3a>
 800ca80:	89fb      	ldrh	r3, [r7, #14]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ca86:	4a0e      	ldr	r2, [pc, #56]	; (800cac0 <dec_lock+0x74>)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	011b      	lsls	r3, r3, #4
 800ca8c:	4413      	add	r3, r2
 800ca8e:	330c      	adds	r3, #12
 800ca90:	89fa      	ldrh	r2, [r7, #14]
 800ca92:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca94:	89fb      	ldrh	r3, [r7, #14]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d105      	bne.n	800caa6 <dec_lock+0x5a>
 800ca9a:	4a09      	ldr	r2, [pc, #36]	; (800cac0 <dec_lock+0x74>)
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	011b      	lsls	r3, r3, #4
 800caa0:	4413      	add	r3, r2
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	737b      	strb	r3, [r7, #13]
 800caaa:	e001      	b.n	800cab0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800caac:	2302      	movs	r3, #2
 800caae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cab0:	7b7b      	ldrb	r3, [r7, #13]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3714      	adds	r7, #20
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	2000026c 	.word	0x2000026c

0800cac4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cacc:	2300      	movs	r3, #0
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	e010      	b.n	800caf4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cad2:	4a0d      	ldr	r2, [pc, #52]	; (800cb08 <clear_lock+0x44>)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	011b      	lsls	r3, r3, #4
 800cad8:	4413      	add	r3, r2
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d105      	bne.n	800caee <clear_lock+0x2a>
 800cae2:	4a09      	ldr	r2, [pc, #36]	; (800cb08 <clear_lock+0x44>)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	011b      	lsls	r3, r3, #4
 800cae8:	4413      	add	r3, r2
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3301      	adds	r3, #1
 800caf2:	60fb      	str	r3, [r7, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d9eb      	bls.n	800cad2 <clear_lock+0xe>
	}
}
 800cafa:	bf00      	nop
 800cafc:	bf00      	nop
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	2000026c 	.word	0x2000026c

0800cb0c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	78db      	ldrb	r3, [r3, #3]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d034      	beq.n	800cb8a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb24:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	7858      	ldrb	r0, [r3, #1]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb30:	2301      	movs	r3, #1
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	f7ff fd40 	bl	800c5b8 <disk_write>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d002      	beq.n	800cb44 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	73fb      	strb	r3, [r7, #15]
 800cb42:	e022      	b.n	800cb8a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	1ad2      	subs	r2, r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d217      	bcs.n	800cb8a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	789b      	ldrb	r3, [r3, #2]
 800cb5e:	613b      	str	r3, [r7, #16]
 800cb60:	e010      	b.n	800cb84 <sync_window+0x78>
					wsect += fs->fsize;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	697a      	ldr	r2, [r7, #20]
 800cb68:	4413      	add	r3, r2
 800cb6a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	7858      	ldrb	r0, [r3, #1]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cb76:	2301      	movs	r3, #1
 800cb78:	697a      	ldr	r2, [r7, #20]
 800cb7a:	f7ff fd1d 	bl	800c5b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	3b01      	subs	r3, #1
 800cb82:	613b      	str	r3, [r7, #16]
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d8eb      	bhi.n	800cb62 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3718      	adds	r7, #24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d01b      	beq.n	800cbe4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff ffad 	bl	800cb0c <sync_window>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d113      	bne.n	800cbe4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7858      	ldrb	r0, [r3, #1]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	f7ff fcd5 	bl	800c578 <disk_read>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d004      	beq.n	800cbde <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	683a      	ldr	r2, [r7, #0]
 800cbe2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
	...

0800cbf0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff ff87 	bl	800cb0c <sync_window>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d159      	bne.n	800ccbc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d149      	bne.n	800cca4 <sync_fs+0xb4>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	791b      	ldrb	r3, [r3, #4]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d145      	bne.n	800cca4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	899b      	ldrh	r3, [r3, #12]
 800cc22:	461a      	mov	r2, r3
 800cc24:	2100      	movs	r1, #0
 800cc26:	f7ff fda8 	bl	800c77a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	3338      	adds	r3, #56	; 0x38
 800cc2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc32:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff fd37 	bl	800c6aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3338      	adds	r3, #56	; 0x38
 800cc40:	4921      	ldr	r1, [pc, #132]	; (800ccc8 <sync_fs+0xd8>)
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fd4c 	bl	800c6e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	3338      	adds	r3, #56	; 0x38
 800cc4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc50:	491e      	ldr	r1, [pc, #120]	; (800cccc <sync_fs+0xdc>)
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fd44 	bl	800c6e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3338      	adds	r3, #56	; 0x38
 800cc5c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	4619      	mov	r1, r3
 800cc66:	4610      	mov	r0, r2
 800cc68:	f7ff fd3a 	bl	800c6e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	3338      	adds	r3, #56	; 0x38
 800cc70:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	4619      	mov	r1, r3
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	f7ff fd30 	bl	800c6e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc84:	1c5a      	adds	r2, r3, #1
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7858      	ldrb	r0, [r3, #1]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc98:	2301      	movs	r3, #1
 800cc9a:	f7ff fc8d 	bl	800c5b8 <disk_write>
			fs->fsi_flag = 0;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2200      	movs	r2, #0
 800cca2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	785b      	ldrb	r3, [r3, #1]
 800cca8:	2200      	movs	r2, #0
 800ccaa:	2100      	movs	r1, #0
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff fca3 	bl	800c5f8 <disk_ioctl>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d001      	beq.n	800ccbc <sync_fs+0xcc>
 800ccb8:	2301      	movs	r3, #1
 800ccba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	41615252 	.word	0x41615252
 800cccc:	61417272 	.word	0x61417272

0800ccd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	3b02      	subs	r3, #2
 800ccde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	69db      	ldr	r3, [r3, #28]
 800cce4:	3b02      	subs	r3, #2
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d301      	bcc.n	800ccf0 <clust2sect+0x20>
 800ccec:	2300      	movs	r3, #0
 800ccee:	e008      	b.n	800cd02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	895b      	ldrh	r3, [r3, #10]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	fb03 f202 	mul.w	r2, r3, r2
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd00:	4413      	add	r3, r2
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b086      	sub	sp, #24
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	2b01      	cmp	r3, #1
 800cd22:	d904      	bls.n	800cd2e <get_fat+0x20>
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d302      	bcc.n	800cd34 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cd2e:	2301      	movs	r3, #1
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	e0bb      	b.n	800ceac <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd34:	f04f 33ff 	mov.w	r3, #4294967295
 800cd38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b03      	cmp	r3, #3
 800cd40:	f000 8083 	beq.w	800ce4a <get_fat+0x13c>
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	f300 80a7 	bgt.w	800ce98 <get_fat+0x18a>
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d002      	beq.n	800cd54 <get_fat+0x46>
 800cd4e:	2b02      	cmp	r3, #2
 800cd50:	d056      	beq.n	800ce00 <get_fat+0xf2>
 800cd52:	e0a1      	b.n	800ce98 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	60fb      	str	r3, [r7, #12]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	085b      	lsrs	r3, r3, #1
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	4413      	add	r3, r2
 800cd60:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	899b      	ldrh	r3, [r3, #12]
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd72:	4413      	add	r3, r2
 800cd74:	4619      	mov	r1, r3
 800cd76:	6938      	ldr	r0, [r7, #16]
 800cd78:	f7ff ff0c 	bl	800cb94 <move_window>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f040 808d 	bne.w	800ce9e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	60fa      	str	r2, [r7, #12]
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	8992      	ldrh	r2, [r2, #12]
 800cd8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd92:	fb02 f201 	mul.w	r2, r2, r1
 800cd96:	1a9b      	subs	r3, r3, r2
 800cd98:	693a      	ldr	r2, [r7, #16]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cda0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	899b      	ldrh	r3, [r3, #12]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6938      	ldr	r0, [r7, #16]
 800cdb8:	f7ff feec 	bl	800cb94 <move_window>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d16f      	bne.n	800cea2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	899b      	ldrh	r3, [r3, #12]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdce:	fb02 f201 	mul.w	r2, r2, r1
 800cdd2:	1a9b      	subs	r3, r3, r2
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	4413      	add	r3, r2
 800cdd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cddc:	021b      	lsls	r3, r3, #8
 800cdde:	461a      	mov	r2, r3
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	4313      	orrs	r3, r2
 800cde4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d002      	beq.n	800cdf6 <get_fat+0xe8>
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	091b      	lsrs	r3, r3, #4
 800cdf4:	e002      	b.n	800cdfc <get_fat+0xee>
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdfc:	617b      	str	r3, [r7, #20]
			break;
 800cdfe:	e055      	b.n	800ceac <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	899b      	ldrh	r3, [r3, #12]
 800ce08:	085b      	lsrs	r3, r3, #1
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce14:	4413      	add	r3, r2
 800ce16:	4619      	mov	r1, r3
 800ce18:	6938      	ldr	r0, [r7, #16]
 800ce1a:	f7ff febb 	bl	800cb94 <move_window>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d140      	bne.n	800cea6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	005b      	lsls	r3, r3, #1
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	8992      	ldrh	r2, [r2, #12]
 800ce32:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce36:	fb02 f200 	mul.w	r2, r2, r0
 800ce3a:	1a9b      	subs	r3, r3, r2
 800ce3c:	440b      	add	r3, r1
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7ff fbf8 	bl	800c634 <ld_word>
 800ce44:	4603      	mov	r3, r0
 800ce46:	617b      	str	r3, [r7, #20]
			break;
 800ce48:	e030      	b.n	800ceac <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	899b      	ldrh	r3, [r3, #12]
 800ce52:	089b      	lsrs	r3, r3, #2
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	4619      	mov	r1, r3
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce5e:	4413      	add	r3, r2
 800ce60:	4619      	mov	r1, r3
 800ce62:	6938      	ldr	r0, [r7, #16]
 800ce64:	f7ff fe96 	bl	800cb94 <move_window>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d11d      	bne.n	800ceaa <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	693a      	ldr	r2, [r7, #16]
 800ce7a:	8992      	ldrh	r2, [r2, #12]
 800ce7c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce80:	fb02 f200 	mul.w	r2, r2, r0
 800ce84:	1a9b      	subs	r3, r3, r2
 800ce86:	440b      	add	r3, r1
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fbeb 	bl	800c664 <ld_dword>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce94:	617b      	str	r3, [r7, #20]
			break;
 800ce96:	e009      	b.n	800ceac <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ce98:	2301      	movs	r3, #1
 800ce9a:	617b      	str	r3, [r7, #20]
 800ce9c:	e006      	b.n	800ceac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce9e:	bf00      	nop
 800cea0:	e004      	b.n	800ceac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cea2:	bf00      	nop
 800cea4:	e002      	b.n	800ceac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cea6:	bf00      	nop
 800cea8:	e000      	b.n	800ceac <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ceaa:	bf00      	nop
		}
	}

	return val;
 800ceac:	697b      	ldr	r3, [r7, #20]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3718      	adds	r7, #24
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ceb6:	b590      	push	{r4, r7, lr}
 800ceb8:	b089      	sub	sp, #36	; 0x24
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	60f8      	str	r0, [r7, #12]
 800cebe:	60b9      	str	r1, [r7, #8]
 800cec0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cec2:	2302      	movs	r3, #2
 800cec4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	f240 8102 	bls.w	800d0d2 <put_fat+0x21c>
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	69db      	ldr	r3, [r3, #28]
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	f080 80fc 	bcs.w	800d0d2 <put_fat+0x21c>
		switch (fs->fs_type) {
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b03      	cmp	r3, #3
 800cee0:	f000 80b6 	beq.w	800d050 <put_fat+0x19a>
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	f300 80fd 	bgt.w	800d0e4 <put_fat+0x22e>
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	d003      	beq.n	800cef6 <put_fat+0x40>
 800ceee:	2b02      	cmp	r3, #2
 800cef0:	f000 8083 	beq.w	800cffa <put_fat+0x144>
 800cef4:	e0f6      	b.n	800d0e4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	085b      	lsrs	r3, r3, #1
 800cefe:	69ba      	ldr	r2, [r7, #24]
 800cf00:	4413      	add	r3, r2
 800cf02:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	899b      	ldrh	r3, [r3, #12]
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf14:	4413      	add	r3, r2
 800cf16:	4619      	mov	r1, r3
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f7ff fe3b 	bl	800cb94 <move_window>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf22:	7ffb      	ldrb	r3, [r7, #31]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f040 80d6 	bne.w	800d0d6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	1c5a      	adds	r2, r3, #1
 800cf34:	61ba      	str	r2, [r7, #24]
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	8992      	ldrh	r2, [r2, #12]
 800cf3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf3e:	fb02 f200 	mul.w	r2, r2, r0
 800cf42:	1a9b      	subs	r3, r3, r2
 800cf44:	440b      	add	r3, r1
 800cf46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	f003 0301 	and.w	r3, r3, #1
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d00d      	beq.n	800cf6e <put_fat+0xb8>
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	b25b      	sxtb	r3, r3
 800cf58:	f003 030f 	and.w	r3, r3, #15
 800cf5c:	b25a      	sxtb	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	011b      	lsls	r3, r3, #4
 800cf64:	b25b      	sxtb	r3, r3
 800cf66:	4313      	orrs	r3, r2
 800cf68:	b25b      	sxtb	r3, r3
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	e001      	b.n	800cf72 <put_fat+0xbc>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	899b      	ldrh	r3, [r3, #12]
 800cf84:	4619      	mov	r1, r3
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf8c:	4413      	add	r3, r2
 800cf8e:	4619      	mov	r1, r3
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff fdff 	bl	800cb94 <move_window>
 800cf96:	4603      	mov	r3, r0
 800cf98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf9a:	7ffb      	ldrb	r3, [r7, #31]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f040 809c 	bne.w	800d0da <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	899b      	ldrh	r3, [r3, #12]
 800cfac:	461a      	mov	r2, r3
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800cfb4:	fb02 f200 	mul.w	r2, r2, r0
 800cfb8:	1a9b      	subs	r3, r3, r2
 800cfba:	440b      	add	r3, r1
 800cfbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d003      	beq.n	800cfd0 <put_fat+0x11a>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	091b      	lsrs	r3, r3, #4
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	e00e      	b.n	800cfee <put_fat+0x138>
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	b25b      	sxtb	r3, r3
 800cfd6:	f023 030f 	bic.w	r3, r3, #15
 800cfda:	b25a      	sxtb	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	0a1b      	lsrs	r3, r3, #8
 800cfe0:	b25b      	sxtb	r3, r3
 800cfe2:	f003 030f 	and.w	r3, r3, #15
 800cfe6:	b25b      	sxtb	r3, r3
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	b25b      	sxtb	r3, r3
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	697a      	ldr	r2, [r7, #20]
 800cff0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2201      	movs	r2, #1
 800cff6:	70da      	strb	r2, [r3, #3]
			break;
 800cff8:	e074      	b.n	800d0e4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	899b      	ldrh	r3, [r3, #12]
 800d002:	085b      	lsrs	r3, r3, #1
 800d004:	b29b      	uxth	r3, r3
 800d006:	4619      	mov	r1, r3
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d00e:	4413      	add	r3, r2
 800d010:	4619      	mov	r1, r3
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f7ff fdbe 	bl	800cb94 <move_window>
 800d018:	4603      	mov	r3, r0
 800d01a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d01c:	7ffb      	ldrb	r3, [r7, #31]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d15d      	bne.n	800d0de <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	005b      	lsls	r3, r3, #1
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	8992      	ldrh	r2, [r2, #12]
 800d030:	fbb3 f0f2 	udiv	r0, r3, r2
 800d034:	fb02 f200 	mul.w	r2, r2, r0
 800d038:	1a9b      	subs	r3, r3, r2
 800d03a:	440b      	add	r3, r1
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	b292      	uxth	r2, r2
 800d040:	4611      	mov	r1, r2
 800d042:	4618      	mov	r0, r3
 800d044:	f7ff fb31 	bl	800c6aa <st_word>
			fs->wflag = 1;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2201      	movs	r2, #1
 800d04c:	70da      	strb	r2, [r3, #3]
			break;
 800d04e:	e049      	b.n	800d0e4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	899b      	ldrh	r3, [r3, #12]
 800d058:	089b      	lsrs	r3, r3, #2
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	4619      	mov	r1, r3
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	fbb3 f3f1 	udiv	r3, r3, r1
 800d064:	4413      	add	r3, r2
 800d066:	4619      	mov	r1, r3
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	f7ff fd93 	bl	800cb94 <move_window>
 800d06e:	4603      	mov	r3, r0
 800d070:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d072:	7ffb      	ldrb	r3, [r7, #31]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d134      	bne.n	800d0e2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	8992      	ldrh	r2, [r2, #12]
 800d08c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d090:	fb02 f200 	mul.w	r2, r2, r0
 800d094:	1a9b      	subs	r3, r3, r2
 800d096:	440b      	add	r3, r1
 800d098:	4618      	mov	r0, r3
 800d09a:	f7ff fae3 	bl	800c664 <ld_dword>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d0a4:	4323      	orrs	r3, r4
 800d0a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	68fa      	ldr	r2, [r7, #12]
 800d0b4:	8992      	ldrh	r2, [r2, #12]
 800d0b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d0ba:	fb02 f200 	mul.w	r2, r2, r0
 800d0be:	1a9b      	subs	r3, r3, r2
 800d0c0:	440b      	add	r3, r1
 800d0c2:	6879      	ldr	r1, [r7, #4]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7ff fb0b 	bl	800c6e0 <st_dword>
			fs->wflag = 1;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	70da      	strb	r2, [r3, #3]
			break;
 800d0d0:	e008      	b.n	800d0e4 <put_fat+0x22e>
		}
	}
 800d0d2:	bf00      	nop
 800d0d4:	e006      	b.n	800d0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d0d6:	bf00      	nop
 800d0d8:	e004      	b.n	800d0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d0da:	bf00      	nop
 800d0dc:	e002      	b.n	800d0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d0de:	bf00      	nop
 800d0e0:	e000      	b.n	800d0e4 <put_fat+0x22e>
			if (res != FR_OK) break;
 800d0e2:	bf00      	nop
	return res;
 800d0e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3724      	adds	r7, #36	; 0x24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd90      	pop	{r4, r7, pc}

0800d0ee <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b088      	sub	sp, #32
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	60f8      	str	r0, [r7, #12]
 800d0f6:	60b9      	str	r1, [r7, #8]
 800d0f8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d904      	bls.n	800d114 <remove_chain+0x26>
 800d10a:	69bb      	ldr	r3, [r7, #24]
 800d10c:	69db      	ldr	r3, [r3, #28]
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	429a      	cmp	r2, r3
 800d112:	d301      	bcc.n	800d118 <remove_chain+0x2a>
 800d114:	2302      	movs	r3, #2
 800d116:	e04b      	b.n	800d1b0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00c      	beq.n	800d138 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d11e:	f04f 32ff 	mov.w	r2, #4294967295
 800d122:	6879      	ldr	r1, [r7, #4]
 800d124:	69b8      	ldr	r0, [r7, #24]
 800d126:	f7ff fec6 	bl	800ceb6 <put_fat>
 800d12a:	4603      	mov	r3, r0
 800d12c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d12e:	7ffb      	ldrb	r3, [r7, #31]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <remove_chain+0x4a>
 800d134:	7ffb      	ldrb	r3, [r7, #31]
 800d136:	e03b      	b.n	800d1b0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff fde7 	bl	800cd0e <get_fat>
 800d140:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d031      	beq.n	800d1ac <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d101      	bne.n	800d152 <remove_chain+0x64>
 800d14e:	2302      	movs	r3, #2
 800d150:	e02e      	b.n	800d1b0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d158:	d101      	bne.n	800d15e <remove_chain+0x70>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e028      	b.n	800d1b0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d15e:	2200      	movs	r2, #0
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	69b8      	ldr	r0, [r7, #24]
 800d164:	f7ff fea7 	bl	800ceb6 <put_fat>
 800d168:	4603      	mov	r3, r0
 800d16a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d16c:	7ffb      	ldrb	r3, [r7, #31]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <remove_chain+0x88>
 800d172:	7ffb      	ldrb	r3, [r7, #31]
 800d174:	e01c      	b.n	800d1b0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d176:	69bb      	ldr	r3, [r7, #24]
 800d178:	699a      	ldr	r2, [r3, #24]
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	69db      	ldr	r3, [r3, #28]
 800d17e:	3b02      	subs	r3, #2
 800d180:	429a      	cmp	r2, r3
 800d182:	d20b      	bcs.n	800d19c <remove_chain+0xae>
			fs->free_clst++;
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	699b      	ldr	r3, [r3, #24]
 800d188:	1c5a      	adds	r2, r3, #1
 800d18a:	69bb      	ldr	r3, [r7, #24]
 800d18c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	791b      	ldrb	r3, [r3, #4]
 800d192:	f043 0301 	orr.w	r3, r3, #1
 800d196:	b2da      	uxtb	r2, r3
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	69db      	ldr	r3, [r3, #28]
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d3c6      	bcc.n	800d138 <remove_chain+0x4a>
 800d1aa:	e000      	b.n	800d1ae <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d1ac:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3720      	adds	r7, #32
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b088      	sub	sp, #32
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d10d      	bne.n	800d1ea <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d004      	beq.n	800d1e4 <create_chain+0x2c>
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	69db      	ldr	r3, [r3, #28]
 800d1de:	69ba      	ldr	r2, [r7, #24]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d31b      	bcc.n	800d21c <create_chain+0x64>
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	61bb      	str	r3, [r7, #24]
 800d1e8:	e018      	b.n	800d21c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f7ff fd8e 	bl	800cd0e <get_fat>
 800d1f2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d801      	bhi.n	800d1fe <create_chain+0x46>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e070      	b.n	800d2e0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d204:	d101      	bne.n	800d20a <create_chain+0x52>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	e06a      	b.n	800d2e0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	69db      	ldr	r3, [r3, #28]
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	429a      	cmp	r2, r3
 800d212:	d201      	bcs.n	800d218 <create_chain+0x60>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	e063      	b.n	800d2e0 <create_chain+0x128>
		scl = clst;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d21c:	69bb      	ldr	r3, [r7, #24]
 800d21e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	3301      	adds	r3, #1
 800d224:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	69db      	ldr	r3, [r3, #28]
 800d22a:	69fa      	ldr	r2, [r7, #28]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d307      	bcc.n	800d240 <create_chain+0x88>
				ncl = 2;
 800d230:	2302      	movs	r3, #2
 800d232:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d234:	69fa      	ldr	r2, [r7, #28]
 800d236:	69bb      	ldr	r3, [r7, #24]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d901      	bls.n	800d240 <create_chain+0x88>
 800d23c:	2300      	movs	r3, #0
 800d23e:	e04f      	b.n	800d2e0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d240:	69f9      	ldr	r1, [r7, #28]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f7ff fd63 	bl	800cd0e <get_fat>
 800d248:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00e      	beq.n	800d26e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d003      	beq.n	800d25e <create_chain+0xa6>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25c:	d101      	bne.n	800d262 <create_chain+0xaa>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	e03e      	b.n	800d2e0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d262:	69fa      	ldr	r2, [r7, #28]
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	429a      	cmp	r2, r3
 800d268:	d1da      	bne.n	800d220 <create_chain+0x68>
 800d26a:	2300      	movs	r3, #0
 800d26c:	e038      	b.n	800d2e0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d26e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d270:	f04f 32ff 	mov.w	r2, #4294967295
 800d274:	69f9      	ldr	r1, [r7, #28]
 800d276:	6938      	ldr	r0, [r7, #16]
 800d278:	f7ff fe1d 	bl	800ceb6 <put_fat>
 800d27c:	4603      	mov	r3, r0
 800d27e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d280:	7dfb      	ldrb	r3, [r7, #23]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d109      	bne.n	800d29a <create_chain+0xe2>
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d006      	beq.n	800d29a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d28c:	69fa      	ldr	r2, [r7, #28]
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6938      	ldr	r0, [r7, #16]
 800d292:	f7ff fe10 	bl	800ceb6 <put_fat>
 800d296:	4603      	mov	r3, r0
 800d298:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d116      	bne.n	800d2ce <create_chain+0x116>
		fs->last_clst = ncl;
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	69fa      	ldr	r2, [r7, #28]
 800d2a4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	699a      	ldr	r2, [r3, #24]
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	69db      	ldr	r3, [r3, #28]
 800d2ae:	3b02      	subs	r3, #2
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d804      	bhi.n	800d2be <create_chain+0x106>
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	1e5a      	subs	r2, r3, #1
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	791b      	ldrb	r3, [r3, #4]
 800d2c2:	f043 0301 	orr.w	r3, r3, #1
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	711a      	strb	r2, [r3, #4]
 800d2cc:	e007      	b.n	800d2de <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d102      	bne.n	800d2da <create_chain+0x122>
 800d2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d8:	e000      	b.n	800d2dc <create_chain+0x124>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d2de:	69fb      	ldr	r3, [r7, #28]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3720      	adds	r7, #32
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b087      	sub	sp, #28
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	899b      	ldrh	r3, [r3, #12]
 800d304:	461a      	mov	r2, r3
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	fbb3 f3f2 	udiv	r3, r3, r2
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	8952      	ldrh	r2, [r2, #10]
 800d310:	fbb3 f3f2 	udiv	r3, r3, r2
 800d314:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	1d1a      	adds	r2, r3, #4
 800d31a:	613a      	str	r2, [r7, #16]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d101      	bne.n	800d32a <clmt_clust+0x42>
 800d326:	2300      	movs	r3, #0
 800d328:	e010      	b.n	800d34c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d307      	bcc.n	800d342 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d332:	697a      	ldr	r2, [r7, #20]
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	617b      	str	r3, [r7, #20]
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	3304      	adds	r3, #4
 800d33e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d340:	e7e9      	b.n	800d316 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d342:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	4413      	add	r3, r2
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	371c      	adds	r7, #28
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b086      	sub	sp, #24
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d36e:	d204      	bcs.n	800d37a <dir_sdi+0x22>
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	f003 031f 	and.w	r3, r3, #31
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <dir_sdi+0x26>
		return FR_INT_ERR;
 800d37a:	2302      	movs	r3, #2
 800d37c:	e071      	b.n	800d462 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	683a      	ldr	r2, [r7, #0]
 800d382:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d106      	bne.n	800d39e <dir_sdi+0x46>
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d902      	bls.n	800d39e <dir_sdi+0x46>
		clst = fs->dirbase;
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d39c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10c      	bne.n	800d3be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	095b      	lsrs	r3, r3, #5
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	8912      	ldrh	r2, [r2, #8]
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d301      	bcc.n	800d3b4 <dir_sdi+0x5c>
 800d3b0:	2302      	movs	r3, #2
 800d3b2:	e056      	b.n	800d462 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	61da      	str	r2, [r3, #28]
 800d3bc:	e02d      	b.n	800d41a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	895b      	ldrh	r3, [r3, #10]
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	693b      	ldr	r3, [r7, #16]
 800d3c6:	899b      	ldrh	r3, [r3, #12]
 800d3c8:	fb03 f302 	mul.w	r3, r3, r2
 800d3cc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d3ce:	e019      	b.n	800d404 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6979      	ldr	r1, [r7, #20]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7ff fc9a 	bl	800cd0e <get_fat>
 800d3da:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e2:	d101      	bne.n	800d3e8 <dir_sdi+0x90>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e03c      	b.n	800d462 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d904      	bls.n	800d3f8 <dir_sdi+0xa0>
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	69db      	ldr	r3, [r3, #28]
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d301      	bcc.n	800d3fc <dir_sdi+0xa4>
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	e032      	b.n	800d462 <dir_sdi+0x10a>
			ofs -= csz;
 800d3fc:	683a      	ldr	r2, [r7, #0]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d404:	683a      	ldr	r2, [r7, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d2e1      	bcs.n	800d3d0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d40c:	6979      	ldr	r1, [r7, #20]
 800d40e:	6938      	ldr	r0, [r7, #16]
 800d410:	f7ff fc5e 	bl	800ccd0 <clust2sect>
 800d414:	4602      	mov	r2, r0
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	69db      	ldr	r3, [r3, #28]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <dir_sdi+0xd4>
 800d428:	2302      	movs	r3, #2
 800d42a:	e01a      	b.n	800d462 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	69da      	ldr	r2, [r3, #28]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	899b      	ldrh	r3, [r3, #12]
 800d434:	4619      	mov	r1, r3
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	fbb3 f3f1 	udiv	r3, r3, r1
 800d43c:	441a      	add	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	899b      	ldrh	r3, [r3, #12]
 800d44c:	461a      	mov	r2, r3
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	fbb3 f0f2 	udiv	r0, r3, r2
 800d454:	fb02 f200 	mul.w	r2, r2, r0
 800d458:	1a9b      	subs	r3, r3, r2
 800d45a:	18ca      	adds	r2, r1, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3718      	adds	r7, #24
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b086      	sub	sp, #24
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
 800d472:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	695b      	ldr	r3, [r3, #20]
 800d47e:	3320      	adds	r3, #32
 800d480:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	69db      	ldr	r3, [r3, #28]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <dir_next+0x28>
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d490:	d301      	bcc.n	800d496 <dir_next+0x2c>
 800d492:	2304      	movs	r3, #4
 800d494:	e0bb      	b.n	800d60e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	899b      	ldrh	r3, [r3, #12]
 800d49a:	461a      	mov	r2, r3
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4a2:	fb02 f201 	mul.w	r2, r2, r1
 800d4a6:	1a9b      	subs	r3, r3, r2
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	f040 809d 	bne.w	800d5e8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	699b      	ldr	r3, [r3, #24]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10b      	bne.n	800d4d8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	095b      	lsrs	r3, r3, #5
 800d4c4:	68fa      	ldr	r2, [r7, #12]
 800d4c6:	8912      	ldrh	r2, [r2, #8]
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	f0c0 808d 	bcc.w	800d5e8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	61da      	str	r2, [r3, #28]
 800d4d4:	2304      	movs	r3, #4
 800d4d6:	e09a      	b.n	800d60e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	899b      	ldrh	r3, [r3, #12]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	8952      	ldrh	r2, [r2, #10]
 800d4e8:	3a01      	subs	r2, #1
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d17b      	bne.n	800d5e8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	f7ff fc08 	bl	800cd0e <get_fat>
 800d4fe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d801      	bhi.n	800d50a <dir_next+0xa0>
 800d506:	2302      	movs	r3, #2
 800d508:	e081      	b.n	800d60e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d510:	d101      	bne.n	800d516 <dir_next+0xac>
 800d512:	2301      	movs	r3, #1
 800d514:	e07b      	b.n	800d60e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	69db      	ldr	r3, [r3, #28]
 800d51a:	697a      	ldr	r2, [r7, #20]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d359      	bcc.n	800d5d4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d104      	bne.n	800d530 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	61da      	str	r2, [r3, #28]
 800d52c:	2304      	movs	r3, #4
 800d52e:	e06e      	b.n	800d60e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d530:	687a      	ldr	r2, [r7, #4]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	4619      	mov	r1, r3
 800d538:	4610      	mov	r0, r2
 800d53a:	f7ff fe3d 	bl	800d1b8 <create_chain>
 800d53e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d101      	bne.n	800d54a <dir_next+0xe0>
 800d546:	2307      	movs	r3, #7
 800d548:	e061      	b.n	800d60e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d101      	bne.n	800d554 <dir_next+0xea>
 800d550:	2302      	movs	r3, #2
 800d552:	e05c      	b.n	800d60e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d55a:	d101      	bne.n	800d560 <dir_next+0xf6>
 800d55c:	2301      	movs	r3, #1
 800d55e:	e056      	b.n	800d60e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f7ff fad3 	bl	800cb0c <sync_window>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d001      	beq.n	800d570 <dir_next+0x106>
 800d56c:	2301      	movs	r3, #1
 800d56e:	e04e      	b.n	800d60e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	899b      	ldrh	r3, [r3, #12]
 800d57a:	461a      	mov	r2, r3
 800d57c:	2100      	movs	r1, #0
 800d57e:	f7ff f8fc 	bl	800c77a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d582:	2300      	movs	r3, #0
 800d584:	613b      	str	r3, [r7, #16]
 800d586:	6979      	ldr	r1, [r7, #20]
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f7ff fba1 	bl	800ccd0 <clust2sect>
 800d58e:	4602      	mov	r2, r0
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	635a      	str	r2, [r3, #52]	; 0x34
 800d594:	e012      	b.n	800d5bc <dir_next+0x152>
						fs->wflag = 1;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2201      	movs	r2, #1
 800d59a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f7ff fab5 	bl	800cb0c <sync_window>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <dir_next+0x142>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e030      	b.n	800d60e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	613b      	str	r3, [r7, #16]
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	635a      	str	r2, [r3, #52]	; 0x34
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d3e6      	bcc.n	800d596 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	1ad2      	subs	r2, r2, r3
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	697a      	ldr	r2, [r7, #20]
 800d5d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d5da:	6979      	ldr	r1, [r7, #20]
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff fb77 	bl	800ccd0 <clust2sect>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	899b      	ldrh	r3, [r3, #12]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d600:	fb02 f200 	mul.w	r2, r2, r0
 800d604:	1a9b      	subs	r3, r3, r2
 800d606:	18ca      	adds	r2, r1, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b086      	sub	sp, #24
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d626:	2100      	movs	r1, #0
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7ff fe95 	bl	800d358 <dir_sdi>
 800d62e:	4603      	mov	r3, r0
 800d630:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d632:	7dfb      	ldrb	r3, [r7, #23]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d12b      	bne.n	800d690 <dir_alloc+0x7a>
		n = 0;
 800d638:	2300      	movs	r3, #0
 800d63a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	69db      	ldr	r3, [r3, #28]
 800d640:	4619      	mov	r1, r3
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f7ff faa6 	bl	800cb94 <move_window>
 800d648:	4603      	mov	r3, r0
 800d64a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d64c:	7dfb      	ldrb	r3, [r7, #23]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d11d      	bne.n	800d68e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	2be5      	cmp	r3, #229	; 0xe5
 800d65a:	d004      	beq.n	800d666 <dir_alloc+0x50>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6a1b      	ldr	r3, [r3, #32]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d107      	bne.n	800d676 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	3301      	adds	r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	429a      	cmp	r2, r3
 800d672:	d102      	bne.n	800d67a <dir_alloc+0x64>
 800d674:	e00c      	b.n	800d690 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d676:	2300      	movs	r3, #0
 800d678:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d67a:	2101      	movs	r1, #1
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7ff fef4 	bl	800d46a <dir_next>
 800d682:	4603      	mov	r3, r0
 800d684:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d686:	7dfb      	ldrb	r3, [r7, #23]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d0d7      	beq.n	800d63c <dir_alloc+0x26>
 800d68c:	e000      	b.n	800d690 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d68e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d690:	7dfb      	ldrb	r3, [r7, #23]
 800d692:	2b04      	cmp	r3, #4
 800d694:	d101      	bne.n	800d69a <dir_alloc+0x84>
 800d696:	2307      	movs	r3, #7
 800d698:	75fb      	strb	r3, [r7, #23]
	return res;
 800d69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3718      	adds	r7, #24
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b084      	sub	sp, #16
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	331a      	adds	r3, #26
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fe ffbe 	bl	800c634 <ld_word>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	2b03      	cmp	r3, #3
 800d6c2:	d109      	bne.n	800d6d8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	3314      	adds	r3, #20
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fe ffb3 	bl	800c634 <ld_word>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	041b      	lsls	r3, r3, #16
 800d6d2:	68fa      	ldr	r2, [r7, #12]
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3710      	adds	r7, #16
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	60f8      	str	r0, [r7, #12]
 800d6ea:	60b9      	str	r1, [r7, #8]
 800d6ec:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	331a      	adds	r3, #26
 800d6f2:	687a      	ldr	r2, [r7, #4]
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	4611      	mov	r1, r2
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe ffd6 	bl	800c6aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	2b03      	cmp	r3, #3
 800d704:	d109      	bne.n	800d71a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f103 0214 	add.w	r2, r3, #20
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	0c1b      	lsrs	r3, r3, #16
 800d710:	b29b      	uxth	r3, r3
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7fe ffc8 	bl	800c6aa <st_word>
	}
}
 800d71a:	bf00      	nop
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
	...

0800d724 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d724:	b590      	push	{r4, r7, lr}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	331a      	adds	r3, #26
 800d732:	4618      	mov	r0, r3
 800d734:	f7fe ff7e 	bl	800c634 <ld_word>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <cmp_lfn+0x1e>
 800d73e:	2300      	movs	r3, #0
 800d740:	e059      	b.n	800d7f6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d74a:	1e5a      	subs	r2, r3, #1
 800d74c:	4613      	mov	r3, r2
 800d74e:	005b      	lsls	r3, r3, #1
 800d750:	4413      	add	r3, r2
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	4413      	add	r3, r2
 800d756:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d758:	2301      	movs	r3, #1
 800d75a:	81fb      	strh	r3, [r7, #14]
 800d75c:	2300      	movs	r3, #0
 800d75e:	613b      	str	r3, [r7, #16]
 800d760:	e033      	b.n	800d7ca <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d762:	4a27      	ldr	r2, [pc, #156]	; (800d800 <cmp_lfn+0xdc>)
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	4413      	add	r3, r2
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	461a      	mov	r2, r3
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	4413      	add	r3, r2
 800d770:	4618      	mov	r0, r3
 800d772:	f7fe ff5f 	bl	800c634 <ld_word>
 800d776:	4603      	mov	r3, r0
 800d778:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d77a:	89fb      	ldrh	r3, [r7, #14]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d01a      	beq.n	800d7b6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d780:	697b      	ldr	r3, [r7, #20]
 800d782:	2bfe      	cmp	r3, #254	; 0xfe
 800d784:	d812      	bhi.n	800d7ac <cmp_lfn+0x88>
 800d786:	89bb      	ldrh	r3, [r7, #12]
 800d788:	4618      	mov	r0, r3
 800d78a:	f001 ff9d 	bl	800f6c8 <ff_wtoupper>
 800d78e:	4603      	mov	r3, r0
 800d790:	461c      	mov	r4, r3
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	1c5a      	adds	r2, r3, #1
 800d796:	617a      	str	r2, [r7, #20]
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f001 ff91 	bl	800f6c8 <ff_wtoupper>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	429c      	cmp	r4, r3
 800d7aa:	d001      	beq.n	800d7b0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e022      	b.n	800d7f6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800d7b0:	89bb      	ldrh	r3, [r7, #12]
 800d7b2:	81fb      	strh	r3, [r7, #14]
 800d7b4:	e006      	b.n	800d7c4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d7b6:	89bb      	ldrh	r3, [r7, #12]
 800d7b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d001      	beq.n	800d7c4 <cmp_lfn+0xa0>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e018      	b.n	800d7f6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	613b      	str	r3, [r7, #16]
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	2b0c      	cmp	r3, #12
 800d7ce:	d9c8      	bls.n	800d762 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00b      	beq.n	800d7f4 <cmp_lfn+0xd0>
 800d7dc:	89fb      	ldrh	r3, [r7, #14]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d008      	beq.n	800d7f4 <cmp_lfn+0xd0>
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	005b      	lsls	r3, r3, #1
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	881b      	ldrh	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d001      	beq.n	800d7f4 <cmp_lfn+0xd0>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e000      	b.n	800d7f6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d7f4:	2301      	movs	r3, #1
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	371c      	adds	r7, #28
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd90      	pop	{r4, r7, pc}
 800d7fe:	bf00      	nop
 800d800:	08015240 	.word	0x08015240

0800d804 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	4611      	mov	r1, r2
 800d810:	461a      	mov	r2, r3
 800d812:	460b      	mov	r3, r1
 800d814:	71fb      	strb	r3, [r7, #7]
 800d816:	4613      	mov	r3, r2
 800d818:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	330d      	adds	r3, #13
 800d81e:	79ba      	ldrb	r2, [r7, #6]
 800d820:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	330b      	adds	r3, #11
 800d826:	220f      	movs	r2, #15
 800d828:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d82a:	68bb      	ldr	r3, [r7, #8]
 800d82c:	330c      	adds	r3, #12
 800d82e:	2200      	movs	r2, #0
 800d830:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	331a      	adds	r3, #26
 800d836:	2100      	movs	r1, #0
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fe ff36 	bl	800c6aa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d83e:	79fb      	ldrb	r3, [r7, #7]
 800d840:	1e5a      	subs	r2, r3, #1
 800d842:	4613      	mov	r3, r2
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	4413      	add	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d84e:	2300      	movs	r3, #0
 800d850:	82fb      	strh	r3, [r7, #22]
 800d852:	2300      	movs	r3, #0
 800d854:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d856:	8afb      	ldrh	r3, [r7, #22]
 800d858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d007      	beq.n	800d870 <put_lfn+0x6c>
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	61fa      	str	r2, [r7, #28]
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d870:	4a17      	ldr	r2, [pc, #92]	; (800d8d0 <put_lfn+0xcc>)
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	4413      	add	r3, r2
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	461a      	mov	r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	4413      	add	r3, r2
 800d87e:	8afa      	ldrh	r2, [r7, #22]
 800d880:	4611      	mov	r1, r2
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe ff11 	bl	800c6aa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d888:	8afb      	ldrh	r3, [r7, #22]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d102      	bne.n	800d894 <put_lfn+0x90>
 800d88e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d892:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	3301      	adds	r3, #1
 800d898:	61bb      	str	r3, [r7, #24]
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	2b0c      	cmp	r3, #12
 800d89e:	d9da      	bls.n	800d856 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d8a0:	8afb      	ldrh	r3, [r7, #22]
 800d8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d006      	beq.n	800d8b8 <put_lfn+0xb4>
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	005b      	lsls	r3, r3, #1
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	881b      	ldrh	r3, [r3, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d103      	bne.n	800d8c0 <put_lfn+0xbc>
 800d8b8:	79fb      	ldrb	r3, [r7, #7]
 800d8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	79fa      	ldrb	r2, [r7, #7]
 800d8c4:	701a      	strb	r2, [r3, #0]
}
 800d8c6:	bf00      	nop
 800d8c8:	3720      	adds	r7, #32
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	08015240 	.word	0x08015240

0800d8d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08c      	sub	sp, #48	; 0x30
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d8e2:	220b      	movs	r2, #11
 800d8e4:	68b9      	ldr	r1, [r7, #8]
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f7fe ff26 	bl	800c738 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2b05      	cmp	r3, #5
 800d8f0:	d92b      	bls.n	800d94a <gen_numname+0x76>
		sr = seq;
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d8f6:	e022      	b.n	800d93e <gen_numname+0x6a>
			wc = *lfn++;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	1c9a      	adds	r2, r3, #2
 800d8fc:	607a      	str	r2, [r7, #4]
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d902:	2300      	movs	r3, #0
 800d904:	62bb      	str	r3, [r7, #40]	; 0x28
 800d906:	e017      	b.n	800d938 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	005a      	lsls	r2, r3, #1
 800d90c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d90e:	f003 0301 	and.w	r3, r3, #1
 800d912:	4413      	add	r3, r2
 800d914:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d918:	085b      	lsrs	r3, r3, #1
 800d91a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d922:	2b00      	cmp	r3, #0
 800d924:	d005      	beq.n	800d932 <gen_numname+0x5e>
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d92c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d930:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d934:	3301      	adds	r3, #1
 800d936:	62bb      	str	r3, [r7, #40]	; 0x28
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	2b0f      	cmp	r3, #15
 800d93c:	d9e4      	bls.n	800d908 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1d8      	bne.n	800d8f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d94a:	2307      	movs	r3, #7
 800d94c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	b2db      	uxtb	r3, r3
 800d952:	f003 030f 	and.w	r3, r3, #15
 800d956:	b2db      	uxtb	r3, r3
 800d958:	3330      	adds	r3, #48	; 0x30
 800d95a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d95e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d962:	2b39      	cmp	r3, #57	; 0x39
 800d964:	d904      	bls.n	800d970 <gen_numname+0x9c>
 800d966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d96a:	3307      	adds	r3, #7
 800d96c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	1e5a      	subs	r2, r3, #1
 800d974:	62ba      	str	r2, [r7, #40]	; 0x28
 800d976:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d97a:	4413      	add	r3, r2
 800d97c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d980:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	091b      	lsrs	r3, r3, #4
 800d988:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1de      	bne.n	800d94e <gen_numname+0x7a>
	ns[i] = '~';
 800d990:	f107 0214 	add.w	r2, r7, #20
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	4413      	add	r3, r2
 800d998:	227e      	movs	r2, #126	; 0x7e
 800d99a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d99c:	2300      	movs	r3, #0
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a0:	e002      	b.n	800d9a8 <gen_numname+0xd4>
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d205      	bcs.n	800d9bc <gen_numname+0xe8>
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b4:	4413      	add	r3, r2
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	2b20      	cmp	r3, #32
 800d9ba:	d1f2      	bne.n	800d9a2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9be:	2b07      	cmp	r3, #7
 800d9c0:	d808      	bhi.n	800d9d4 <gen_numname+0x100>
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	1c5a      	adds	r2, r3, #1
 800d9c6:	62ba      	str	r2, [r7, #40]	; 0x28
 800d9c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d9cc:	4413      	add	r3, r2
 800d9ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d9d2:	e000      	b.n	800d9d6 <gen_numname+0x102>
 800d9d4:	2120      	movs	r1, #32
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	627a      	str	r2, [r7, #36]	; 0x24
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	4413      	add	r3, r2
 800d9e0:	460a      	mov	r2, r1
 800d9e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e6:	2b07      	cmp	r3, #7
 800d9e8:	d9e8      	bls.n	800d9bc <gen_numname+0xe8>
}
 800d9ea:	bf00      	nop
 800d9ec:	bf00      	nop
 800d9ee:	3730      	adds	r7, #48	; 0x30
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800da00:	230b      	movs	r3, #11
 800da02:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800da04:	7bfb      	ldrb	r3, [r7, #15]
 800da06:	b2da      	uxtb	r2, r3
 800da08:	0852      	lsrs	r2, r2, #1
 800da0a:	01db      	lsls	r3, r3, #7
 800da0c:	4313      	orrs	r3, r2
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	1c59      	adds	r1, r3, #1
 800da14:	6079      	str	r1, [r7, #4]
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	4413      	add	r3, r2
 800da1a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	3b01      	subs	r3, #1
 800da20:	60bb      	str	r3, [r7, #8]
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1ed      	bne.n	800da04 <sum_sfn+0x10>
	return sum;
 800da28:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3714      	adds	r7, #20
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr

0800da36 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b086      	sub	sp, #24
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800da44:	2100      	movs	r1, #0
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7ff fc86 	bl	800d358 <dir_sdi>
 800da4c:	4603      	mov	r3, r0
 800da4e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800da50:	7dfb      	ldrb	r3, [r7, #23]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <dir_find+0x24>
 800da56:	7dfb      	ldrb	r3, [r7, #23]
 800da58:	e0a9      	b.n	800dbae <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800da5a:	23ff      	movs	r3, #255	; 0xff
 800da5c:	753b      	strb	r3, [r7, #20]
 800da5e:	7d3b      	ldrb	r3, [r7, #20]
 800da60:	757b      	strb	r3, [r7, #21]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f04f 32ff 	mov.w	r2, #4294967295
 800da68:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	4619      	mov	r1, r3
 800da70:	6938      	ldr	r0, [r7, #16]
 800da72:	f7ff f88f 	bl	800cb94 <move_window>
 800da76:	4603      	mov	r3, r0
 800da78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	f040 8090 	bne.w	800dba2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800da8a:	7dbb      	ldrb	r3, [r7, #22]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d102      	bne.n	800da96 <dir_find+0x60>
 800da90:	2304      	movs	r3, #4
 800da92:	75fb      	strb	r3, [r7, #23]
 800da94:	e08a      	b.n	800dbac <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a1b      	ldr	r3, [r3, #32]
 800da9a:	330b      	adds	r3, #11
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800daa2:	73fb      	strb	r3, [r7, #15]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	7bfa      	ldrb	r2, [r7, #15]
 800daa8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800daaa:	7dbb      	ldrb	r3, [r7, #22]
 800daac:	2be5      	cmp	r3, #229	; 0xe5
 800daae:	d007      	beq.n	800dac0 <dir_find+0x8a>
 800dab0:	7bfb      	ldrb	r3, [r7, #15]
 800dab2:	f003 0308 	and.w	r3, r3, #8
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d009      	beq.n	800dace <dir_find+0x98>
 800daba:	7bfb      	ldrb	r3, [r7, #15]
 800dabc:	2b0f      	cmp	r3, #15
 800dabe:	d006      	beq.n	800dace <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dac0:	23ff      	movs	r3, #255	; 0xff
 800dac2:	757b      	strb	r3, [r7, #21]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	631a      	str	r2, [r3, #48]	; 0x30
 800dacc:	e05e      	b.n	800db8c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800dace:	7bfb      	ldrb	r3, [r7, #15]
 800dad0:	2b0f      	cmp	r3, #15
 800dad2:	d136      	bne.n	800db42 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d154      	bne.n	800db8c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dae2:	7dbb      	ldrb	r3, [r7, #22]
 800dae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00d      	beq.n	800db08 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6a1b      	ldr	r3, [r3, #32]
 800daf0:	7b5b      	ldrb	r3, [r3, #13]
 800daf2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800daf4:	7dbb      	ldrb	r3, [r7, #22]
 800daf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dafa:	75bb      	strb	r3, [r7, #22]
 800dafc:	7dbb      	ldrb	r3, [r7, #22]
 800dafe:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	695a      	ldr	r2, [r3, #20]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800db08:	7dba      	ldrb	r2, [r7, #22]
 800db0a:	7d7b      	ldrb	r3, [r7, #21]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d115      	bne.n	800db3c <dir_find+0x106>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6a1b      	ldr	r3, [r3, #32]
 800db14:	330d      	adds	r3, #13
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	7d3a      	ldrb	r2, [r7, #20]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d10e      	bne.n	800db3c <dir_find+0x106>
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	691a      	ldr	r2, [r3, #16]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	4619      	mov	r1, r3
 800db28:	4610      	mov	r0, r2
 800db2a:	f7ff fdfb 	bl	800d724 <cmp_lfn>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d003      	beq.n	800db3c <dir_find+0x106>
 800db34:	7d7b      	ldrb	r3, [r7, #21]
 800db36:	3b01      	subs	r3, #1
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	e000      	b.n	800db3e <dir_find+0x108>
 800db3c:	23ff      	movs	r3, #255	; 0xff
 800db3e:	757b      	strb	r3, [r7, #21]
 800db40:	e024      	b.n	800db8c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800db42:	7d7b      	ldrb	r3, [r7, #21]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d109      	bne.n	800db5c <dir_find+0x126>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a1b      	ldr	r3, [r3, #32]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff ff51 	bl	800d9f4 <sum_sfn>
 800db52:	4603      	mov	r3, r0
 800db54:	461a      	mov	r2, r3
 800db56:	7d3b      	ldrb	r3, [r7, #20]
 800db58:	4293      	cmp	r3, r2
 800db5a:	d024      	beq.n	800dba6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	d10a      	bne.n	800db80 <dir_find+0x14a>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a18      	ldr	r0, [r3, #32]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	3324      	adds	r3, #36	; 0x24
 800db72:	220b      	movs	r2, #11
 800db74:	4619      	mov	r1, r3
 800db76:	f7fe fe1b 	bl	800c7b0 <mem_cmp>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d014      	beq.n	800dbaa <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800db80:	23ff      	movs	r3, #255	; 0xff
 800db82:	757b      	strb	r3, [r7, #21]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f04f 32ff 	mov.w	r2, #4294967295
 800db8a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800db8c:	2100      	movs	r1, #0
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f7ff fc6b 	bl	800d46a <dir_next>
 800db94:	4603      	mov	r3, r0
 800db96:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800db98:	7dfb      	ldrb	r3, [r7, #23]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	f43f af65 	beq.w	800da6a <dir_find+0x34>
 800dba0:	e004      	b.n	800dbac <dir_find+0x176>
		if (res != FR_OK) break;
 800dba2:	bf00      	nop
 800dba4:	e002      	b.n	800dbac <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dba6:	bf00      	nop
 800dba8:	e000      	b.n	800dbac <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800dbaa:	bf00      	nop

	return res;
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3718      	adds	r7, #24
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
	...

0800dbb8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b08c      	sub	sp, #48	; 0x30
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dbcc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <dir_register+0x20>
 800dbd4:	2306      	movs	r3, #6
 800dbd6:	e0e0      	b.n	800dd9a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800dbd8:	2300      	movs	r3, #0
 800dbda:	627b      	str	r3, [r7, #36]	; 0x24
 800dbdc:	e002      	b.n	800dbe4 <dir_register+0x2c>
 800dbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	691a      	ldr	r2, [r3, #16]
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	005b      	lsls	r3, r3, #1
 800dbec:	4413      	add	r3, r2
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1f4      	bne.n	800dbde <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800dbfa:	f107 030c 	add.w	r3, r7, #12
 800dbfe:	220c      	movs	r2, #12
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fe fd99 	bl	800c738 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	f003 0301 	and.w	r3, r3, #1
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d032      	beq.n	800dc76 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2240      	movs	r2, #64	; 0x40
 800dc14:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800dc18:	2301      	movs	r3, #1
 800dc1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc1c:	e016      	b.n	800dc4c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	691a      	ldr	r2, [r3, #16]
 800dc28:	f107 010c 	add.w	r1, r7, #12
 800dc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2e:	f7ff fe51 	bl	800d8d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff feff 	bl	800da36 <dir_find>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800dc3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800dc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc48:	3301      	adds	r3, #1
 800dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4e:	2b63      	cmp	r3, #99	; 0x63
 800dc50:	d9e5      	bls.n	800dc1e <dir_register+0x66>
 800dc52:	e000      	b.n	800dc56 <dir_register+0x9e>
			if (res != FR_OK) break;
 800dc54:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800dc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc58:	2b64      	cmp	r3, #100	; 0x64
 800dc5a:	d101      	bne.n	800dc60 <dir_register+0xa8>
 800dc5c:	2307      	movs	r3, #7
 800dc5e:	e09c      	b.n	800dd9a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800dc60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc64:	2b04      	cmp	r3, #4
 800dc66:	d002      	beq.n	800dc6e <dir_register+0xb6>
 800dc68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc6c:	e095      	b.n	800dd9a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800dc6e:	7dfa      	ldrb	r2, [r7, #23]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800dc76:	7dfb      	ldrb	r3, [r7, #23]
 800dc78:	f003 0302 	and.w	r3, r3, #2
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d007      	beq.n	800dc90 <dir_register+0xd8>
 800dc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc82:	330c      	adds	r3, #12
 800dc84:	4a47      	ldr	r2, [pc, #284]	; (800dda4 <dir_register+0x1ec>)
 800dc86:	fba2 2303 	umull	r2, r3, r2, r3
 800dc8a:	089b      	lsrs	r3, r3, #2
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	e000      	b.n	800dc92 <dir_register+0xda>
 800dc90:	2301      	movs	r3, #1
 800dc92:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800dc94:	6a39      	ldr	r1, [r7, #32]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff fcbd 	bl	800d616 <dir_alloc>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800dca2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d148      	bne.n	800dd3c <dir_register+0x184>
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	3b01      	subs	r3, #1
 800dcae:	623b      	str	r3, [r7, #32]
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d042      	beq.n	800dd3c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	695a      	ldr	r2, [r3, #20]
 800dcba:	6a3b      	ldr	r3, [r7, #32]
 800dcbc:	015b      	lsls	r3, r3, #5
 800dcbe:	1ad3      	subs	r3, r2, r3
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7ff fb48 	bl	800d358 <dir_sdi>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dcce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d132      	bne.n	800dd3c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	3324      	adds	r3, #36	; 0x24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff fe8a 	bl	800d9f4 <sum_sfn>
 800dce0:	4603      	mov	r3, r0
 800dce2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	69db      	ldr	r3, [r3, #28]
 800dce8:	4619      	mov	r1, r3
 800dcea:	69f8      	ldr	r0, [r7, #28]
 800dcec:	f7fe ff52 	bl	800cb94 <move_window>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800dcf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d11d      	bne.n	800dd3a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	6918      	ldr	r0, [r3, #16]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a19      	ldr	r1, [r3, #32]
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	7efb      	ldrb	r3, [r7, #27]
 800dd0c:	f7ff fd7a 	bl	800d804 <put_lfn>
				fs->wflag = 1;
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	2201      	movs	r2, #1
 800dd14:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800dd16:	2100      	movs	r1, #0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff fba6 	bl	800d46a <dir_next>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800dd24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d107      	bne.n	800dd3c <dir_register+0x184>
 800dd2c:	6a3b      	ldr	r3, [r7, #32]
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	623b      	str	r3, [r7, #32]
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d1d5      	bne.n	800dce4 <dir_register+0x12c>
 800dd38:	e000      	b.n	800dd3c <dir_register+0x184>
				if (res != FR_OK) break;
 800dd3a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dd3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d128      	bne.n	800dd96 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	69db      	ldr	r3, [r3, #28]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	69f8      	ldr	r0, [r7, #28]
 800dd4c:	f7fe ff22 	bl	800cb94 <move_window>
 800dd50:	4603      	mov	r3, r0
 800dd52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800dd56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d11b      	bne.n	800dd96 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6a1b      	ldr	r3, [r3, #32]
 800dd62:	2220      	movs	r2, #32
 800dd64:	2100      	movs	r1, #0
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe fd07 	bl	800c77a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a18      	ldr	r0, [r3, #32]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	3324      	adds	r3, #36	; 0x24
 800dd74:	220b      	movs	r2, #11
 800dd76:	4619      	mov	r1, r3
 800dd78:	f7fe fcde 	bl	800c738 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	330c      	adds	r3, #12
 800dd88:	f002 0218 	and.w	r2, r2, #24
 800dd8c:	b2d2      	uxtb	r2, r2
 800dd8e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	2201      	movs	r2, #1
 800dd94:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dd96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3730      	adds	r7, #48	; 0x30
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop
 800dda4:	4ec4ec4f 	.word	0x4ec4ec4f

0800dda8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b08a      	sub	sp, #40	; 0x28
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	613b      	str	r3, [r7, #16]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	691b      	ldr	r3, [r3, #16]
 800ddbe:	60fb      	str	r3, [r7, #12]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	617b      	str	r3, [r7, #20]
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	61ba      	str	r2, [r7, #24]
 800ddce:	693a      	ldr	r2, [r7, #16]
 800ddd0:	4413      	add	r3, r2
 800ddd2:	781b      	ldrb	r3, [r3, #0]
 800ddd4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ddd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddd8:	2b1f      	cmp	r3, #31
 800ddda:	d940      	bls.n	800de5e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ddde:	2b2f      	cmp	r3, #47	; 0x2f
 800dde0:	d006      	beq.n	800ddf0 <create_name+0x48>
 800dde2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dde4:	2b5c      	cmp	r3, #92	; 0x5c
 800dde6:	d110      	bne.n	800de0a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dde8:	e002      	b.n	800ddf0 <create_name+0x48>
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	3301      	adds	r3, #1
 800ddee:	61bb      	str	r3, [r7, #24]
 800ddf0:	693a      	ldr	r2, [r7, #16]
 800ddf2:	69bb      	ldr	r3, [r7, #24]
 800ddf4:	4413      	add	r3, r2
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	2b2f      	cmp	r3, #47	; 0x2f
 800ddfa:	d0f6      	beq.n	800ddea <create_name+0x42>
 800ddfc:	693a      	ldr	r2, [r7, #16]
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	4413      	add	r3, r2
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	2b5c      	cmp	r3, #92	; 0x5c
 800de06:	d0f0      	beq.n	800ddea <create_name+0x42>
			break;
 800de08:	e02a      	b.n	800de60 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	2bfe      	cmp	r3, #254	; 0xfe
 800de0e:	d901      	bls.n	800de14 <create_name+0x6c>
 800de10:	2306      	movs	r3, #6
 800de12:	e177      	b.n	800e104 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800de14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de16:	b2db      	uxtb	r3, r3
 800de18:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800de1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de1c:	2101      	movs	r1, #1
 800de1e:	4618      	mov	r0, r3
 800de20:	f001 fc16 	bl	800f650 <ff_convert>
 800de24:	4603      	mov	r3, r0
 800de26:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800de28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d101      	bne.n	800de32 <create_name+0x8a>
 800de2e:	2306      	movs	r3, #6
 800de30:	e168      	b.n	800e104 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800de32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de34:	2b7f      	cmp	r3, #127	; 0x7f
 800de36:	d809      	bhi.n	800de4c <create_name+0xa4>
 800de38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de3a:	4619      	mov	r1, r3
 800de3c:	48b3      	ldr	r0, [pc, #716]	; (800e10c <create_name+0x364>)
 800de3e:	f7fe fcde 	bl	800c7fe <chk_chr>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <create_name+0xa4>
 800de48:	2306      	movs	r3, #6
 800de4a:	e15b      	b.n	800e104 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	1c5a      	adds	r2, r3, #1
 800de50:	617a      	str	r2, [r7, #20]
 800de52:	005b      	lsls	r3, r3, #1
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	4413      	add	r3, r2
 800de58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de5a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800de5c:	e7b4      	b.n	800ddc8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800de5e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800de60:	693a      	ldr	r2, [r7, #16]
 800de62:	69bb      	ldr	r3, [r7, #24]
 800de64:	441a      	add	r2, r3
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800de6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de6c:	2b1f      	cmp	r3, #31
 800de6e:	d801      	bhi.n	800de74 <create_name+0xcc>
 800de70:	2304      	movs	r3, #4
 800de72:	e000      	b.n	800de76 <create_name+0xce>
 800de74:	2300      	movs	r3, #0
 800de76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800de7a:	e011      	b.n	800dea0 <create_name+0xf8>
		w = lfn[di - 1];
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800de82:	3b01      	subs	r3, #1
 800de84:	005b      	lsls	r3, r3, #1
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	4413      	add	r3, r2
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800de8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de90:	2b20      	cmp	r3, #32
 800de92:	d002      	beq.n	800de9a <create_name+0xf2>
 800de94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de96:	2b2e      	cmp	r3, #46	; 0x2e
 800de98:	d106      	bne.n	800dea8 <create_name+0x100>
		di--;
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	3b01      	subs	r3, #1
 800de9e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1ea      	bne.n	800de7c <create_name+0xd4>
 800dea6:	e000      	b.n	800deaa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dea8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	4413      	add	r3, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d101      	bne.n	800dec0 <create_name+0x118>
 800debc:	2306      	movs	r3, #6
 800debe:	e121      	b.n	800e104 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3324      	adds	r3, #36	; 0x24
 800dec4:	220b      	movs	r2, #11
 800dec6:	2120      	movs	r1, #32
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fe fc56 	bl	800c77a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dece:	2300      	movs	r3, #0
 800ded0:	61bb      	str	r3, [r7, #24]
 800ded2:	e002      	b.n	800deda <create_name+0x132>
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	3301      	adds	r3, #1
 800ded8:	61bb      	str	r3, [r7, #24]
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	005b      	lsls	r3, r3, #1
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	4413      	add	r3, r2
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	2b20      	cmp	r3, #32
 800dee6:	d0f5      	beq.n	800ded4 <create_name+0x12c>
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	68fa      	ldr	r2, [r7, #12]
 800deee:	4413      	add	r3, r2
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	2b2e      	cmp	r3, #46	; 0x2e
 800def4:	d0ee      	beq.n	800ded4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d009      	beq.n	800df10 <create_name+0x168>
 800defc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df00:	f043 0303 	orr.w	r3, r3, #3
 800df04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800df08:	e002      	b.n	800df10 <create_name+0x168>
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	3b01      	subs	r3, #1
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d009      	beq.n	800df2a <create_name+0x182>
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800df1c:	3b01      	subs	r3, #1
 800df1e:	005b      	lsls	r3, r3, #1
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	4413      	add	r3, r2
 800df24:	881b      	ldrh	r3, [r3, #0]
 800df26:	2b2e      	cmp	r3, #46	; 0x2e
 800df28:	d1ef      	bne.n	800df0a <create_name+0x162>

	i = b = 0; ni = 8;
 800df2a:	2300      	movs	r3, #0
 800df2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df30:	2300      	movs	r3, #0
 800df32:	623b      	str	r3, [r7, #32]
 800df34:	2308      	movs	r3, #8
 800df36:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	1c5a      	adds	r2, r3, #1
 800df3c:	61ba      	str	r2, [r7, #24]
 800df3e:	005b      	lsls	r3, r3, #1
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	4413      	add	r3, r2
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800df48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	f000 8090 	beq.w	800e070 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800df50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df52:	2b20      	cmp	r3, #32
 800df54:	d006      	beq.n	800df64 <create_name+0x1bc>
 800df56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df58:	2b2e      	cmp	r3, #46	; 0x2e
 800df5a:	d10a      	bne.n	800df72 <create_name+0x1ca>
 800df5c:	69ba      	ldr	r2, [r7, #24]
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	429a      	cmp	r2, r3
 800df62:	d006      	beq.n	800df72 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800df64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df68:	f043 0303 	orr.w	r3, r3, #3
 800df6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df70:	e07d      	b.n	800e06e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800df72:	6a3a      	ldr	r2, [r7, #32]
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	429a      	cmp	r2, r3
 800df78:	d203      	bcs.n	800df82 <create_name+0x1da>
 800df7a:	69ba      	ldr	r2, [r7, #24]
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d123      	bne.n	800dfca <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	2b0b      	cmp	r3, #11
 800df86:	d106      	bne.n	800df96 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800df88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df8c:	f043 0303 	orr.w	r3, r3, #3
 800df90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df94:	e06f      	b.n	800e076 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800df96:	69ba      	ldr	r2, [r7, #24]
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d005      	beq.n	800dfaa <create_name+0x202>
 800df9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa2:	f043 0303 	orr.w	r3, r3, #3
 800dfa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dfaa:	69ba      	ldr	r2, [r7, #24]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d860      	bhi.n	800e074 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	61bb      	str	r3, [r7, #24]
 800dfb6:	2308      	movs	r3, #8
 800dfb8:	623b      	str	r3, [r7, #32]
 800dfba:	230b      	movs	r3, #11
 800dfbc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dfbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dfc8:	e051      	b.n	800e06e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dfca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfcc:	2b7f      	cmp	r3, #127	; 0x7f
 800dfce:	d914      	bls.n	800dffa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dfd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f001 fb3b 	bl	800f650 <ff_convert>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dfde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d004      	beq.n	800dfee <create_name+0x246>
 800dfe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dfe6:	3b80      	subs	r3, #128	; 0x80
 800dfe8:	4a49      	ldr	r2, [pc, #292]	; (800e110 <create_name+0x368>)
 800dfea:	5cd3      	ldrb	r3, [r2, r3]
 800dfec:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dfee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff2:	f043 0302 	orr.w	r3, r3, #2
 800dff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dffa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d007      	beq.n	800e010 <create_name+0x268>
 800e000:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e002:	4619      	mov	r1, r3
 800e004:	4843      	ldr	r0, [pc, #268]	; (800e114 <create_name+0x36c>)
 800e006:	f7fe fbfa 	bl	800c7fe <chk_chr>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d008      	beq.n	800e022 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e010:	235f      	movs	r3, #95	; 0x5f
 800e012:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e018:	f043 0303 	orr.w	r3, r3, #3
 800e01c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e020:	e01b      	b.n	800e05a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e024:	2b40      	cmp	r3, #64	; 0x40
 800e026:	d909      	bls.n	800e03c <create_name+0x294>
 800e028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e02a:	2b5a      	cmp	r3, #90	; 0x5a
 800e02c:	d806      	bhi.n	800e03c <create_name+0x294>
					b |= 2;
 800e02e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e032:	f043 0302 	orr.w	r3, r3, #2
 800e036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e03a:	e00e      	b.n	800e05a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e03c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e03e:	2b60      	cmp	r3, #96	; 0x60
 800e040:	d90b      	bls.n	800e05a <create_name+0x2b2>
 800e042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e044:	2b7a      	cmp	r3, #122	; 0x7a
 800e046:	d808      	bhi.n	800e05a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e04c:	f043 0301 	orr.w	r3, r3, #1
 800e050:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e056:	3b20      	subs	r3, #32
 800e058:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	1c5a      	adds	r2, r3, #1
 800e05e:	623a      	str	r2, [r7, #32]
 800e060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e062:	b2d1      	uxtb	r1, r2
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	4413      	add	r3, r2
 800e068:	460a      	mov	r2, r1
 800e06a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800e06e:	e763      	b.n	800df38 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800e070:	bf00      	nop
 800e072:	e000      	b.n	800e076 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800e074:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e07c:	2be5      	cmp	r3, #229	; 0xe5
 800e07e:	d103      	bne.n	800e088 <create_name+0x2e0>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2205      	movs	r2, #5
 800e084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800e088:	69fb      	ldr	r3, [r7, #28]
 800e08a:	2b08      	cmp	r3, #8
 800e08c:	d104      	bne.n	800e098 <create_name+0x2f0>
 800e08e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e09c:	f003 030c 	and.w	r3, r3, #12
 800e0a0:	2b0c      	cmp	r3, #12
 800e0a2:	d005      	beq.n	800e0b0 <create_name+0x308>
 800e0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0a8:	f003 0303 	and.w	r3, r3, #3
 800e0ac:	2b03      	cmp	r3, #3
 800e0ae:	d105      	bne.n	800e0bc <create_name+0x314>
 800e0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0b4:	f043 0302 	orr.w	r3, r3, #2
 800e0b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c0:	f003 0302 	and.w	r3, r3, #2
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d117      	bne.n	800e0f8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0cc:	f003 0303 	and.w	r3, r3, #3
 800e0d0:	2b01      	cmp	r3, #1
 800e0d2:	d105      	bne.n	800e0e0 <create_name+0x338>
 800e0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d8:	f043 0310 	orr.w	r3, r3, #16
 800e0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e0e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0e4:	f003 030c 	and.w	r3, r3, #12
 800e0e8:	2b04      	cmp	r3, #4
 800e0ea:	d105      	bne.n	800e0f8 <create_name+0x350>
 800e0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0f0:	f043 0308 	orr.w	r3, r3, #8
 800e0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e0fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800e102:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800e104:	4618      	mov	r0, r3
 800e106:	3728      	adds	r7, #40	; 0x28
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	0801514c 	.word	0x0801514c
 800e110:	080151c0 	.word	0x080151c0
 800e114:	08015158 	.word	0x08015158

0800e118 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b086      	sub	sp, #24
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e12c:	e002      	b.n	800e134 <follow_path+0x1c>
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	3301      	adds	r3, #1
 800e132:	603b      	str	r3, [r7, #0]
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	2b2f      	cmp	r3, #47	; 0x2f
 800e13a:	d0f8      	beq.n	800e12e <follow_path+0x16>
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b5c      	cmp	r3, #92	; 0x5c
 800e142:	d0f4      	beq.n	800e12e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	2200      	movs	r2, #0
 800e148:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	2b1f      	cmp	r3, #31
 800e150:	d80a      	bhi.n	800e168 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2280      	movs	r2, #128	; 0x80
 800e156:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e15a:	2100      	movs	r1, #0
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7ff f8fb 	bl	800d358 <dir_sdi>
 800e162:	4603      	mov	r3, r0
 800e164:	75fb      	strb	r3, [r7, #23]
 800e166:	e048      	b.n	800e1fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e168:	463b      	mov	r3, r7
 800e16a:	4619      	mov	r1, r3
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff fe1b 	bl	800dda8 <create_name>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d139      	bne.n	800e1f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff fc5a 	bl	800da36 <dir_find>
 800e182:	4603      	mov	r3, r0
 800e184:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e18c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e18e:	7dfb      	ldrb	r3, [r7, #23]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00a      	beq.n	800e1aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e194:	7dfb      	ldrb	r3, [r7, #23]
 800e196:	2b04      	cmp	r3, #4
 800e198:	d12c      	bne.n	800e1f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e19a:	7afb      	ldrb	r3, [r7, #11]
 800e19c:	f003 0304 	and.w	r3, r3, #4
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d127      	bne.n	800e1f4 <follow_path+0xdc>
 800e1a4:	2305      	movs	r3, #5
 800e1a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e1a8:	e024      	b.n	800e1f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e1aa:	7afb      	ldrb	r3, [r7, #11]
 800e1ac:	f003 0304 	and.w	r3, r3, #4
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d121      	bne.n	800e1f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	799b      	ldrb	r3, [r3, #6]
 800e1b8:	f003 0310 	and.w	r3, r3, #16
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d102      	bne.n	800e1c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e1c0:	2305      	movs	r3, #5
 800e1c2:	75fb      	strb	r3, [r7, #23]
 800e1c4:	e019      	b.n	800e1fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	695b      	ldr	r3, [r3, #20]
 800e1d0:	68fa      	ldr	r2, [r7, #12]
 800e1d2:	8992      	ldrh	r2, [r2, #12]
 800e1d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1d8:	fb02 f200 	mul.w	r2, r2, r0
 800e1dc:	1a9b      	subs	r3, r3, r2
 800e1de:	440b      	add	r3, r1
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f7ff fa5e 	bl	800d6a4 <ld_clust>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e1ee:	e7bb      	b.n	800e168 <follow_path+0x50>
			if (res != FR_OK) break;
 800e1f0:	bf00      	nop
 800e1f2:	e002      	b.n	800e1fa <follow_path+0xe2>
				break;
 800e1f4:	bf00      	nop
 800e1f6:	e000      	b.n	800e1fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e1f8:	bf00      	nop
			}
		}
	}

	return res;
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e204:	b480      	push	{r7}
 800e206:	b087      	sub	sp, #28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e20c:	f04f 33ff 	mov.w	r3, #4294967295
 800e210:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d031      	beq.n	800e27e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	617b      	str	r3, [r7, #20]
 800e220:	e002      	b.n	800e228 <get_ldnumber+0x24>
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	3301      	adds	r3, #1
 800e226:	617b      	str	r3, [r7, #20]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b1f      	cmp	r3, #31
 800e22e:	d903      	bls.n	800e238 <get_ldnumber+0x34>
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	2b3a      	cmp	r3, #58	; 0x3a
 800e236:	d1f4      	bne.n	800e222 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	2b3a      	cmp	r3, #58	; 0x3a
 800e23e:	d11c      	bne.n	800e27a <get_ldnumber+0x76>
			tp = *path;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	1c5a      	adds	r2, r3, #1
 800e24a:	60fa      	str	r2, [r7, #12]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	3b30      	subs	r3, #48	; 0x30
 800e250:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b09      	cmp	r3, #9
 800e256:	d80e      	bhi.n	800e276 <get_ldnumber+0x72>
 800e258:	68fa      	ldr	r2, [r7, #12]
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d10a      	bne.n	800e276 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d107      	bne.n	800e276 <get_ldnumber+0x72>
					vol = (int)i;
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	3301      	adds	r3, #1
 800e26e:	617b      	str	r3, [r7, #20]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	697a      	ldr	r2, [r7, #20]
 800e274:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	e002      	b.n	800e280 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e27a:	2300      	movs	r3, #0
 800e27c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e27e:	693b      	ldr	r3, [r7, #16]
}
 800e280:	4618      	mov	r0, r3
 800e282:	371c      	adds	r7, #28
 800e284:	46bd      	mov	sp, r7
 800e286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28a:	4770      	bx	lr

0800e28c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	70da      	strb	r2, [r3, #3]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fe fc74 	bl	800cb94 <move_window>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d001      	beq.n	800e2b6 <check_fs+0x2a>
 800e2b2:	2304      	movs	r3, #4
 800e2b4:	e038      	b.n	800e328 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	3338      	adds	r3, #56	; 0x38
 800e2ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7fe f9b8 	bl	800c634 <ld_word>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d001      	beq.n	800e2d4 <check_fs+0x48>
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	e029      	b.n	800e328 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e2da:	2be9      	cmp	r3, #233	; 0xe9
 800e2dc:	d009      	beq.n	800e2f2 <check_fs+0x66>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e2e4:	2beb      	cmp	r3, #235	; 0xeb
 800e2e6:	d11e      	bne.n	800e326 <check_fs+0x9a>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e2ee:	2b90      	cmp	r3, #144	; 0x90
 800e2f0:	d119      	bne.n	800e326 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	3338      	adds	r3, #56	; 0x38
 800e2f6:	3336      	adds	r3, #54	; 0x36
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7fe f9b3 	bl	800c664 <ld_dword>
 800e2fe:	4603      	mov	r3, r0
 800e300:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e304:	4a0a      	ldr	r2, [pc, #40]	; (800e330 <check_fs+0xa4>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d101      	bne.n	800e30e <check_fs+0x82>
 800e30a:	2300      	movs	r3, #0
 800e30c:	e00c      	b.n	800e328 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	3338      	adds	r3, #56	; 0x38
 800e312:	3352      	adds	r3, #82	; 0x52
 800e314:	4618      	mov	r0, r3
 800e316:	f7fe f9a5 	bl	800c664 <ld_dword>
 800e31a:	4603      	mov	r3, r0
 800e31c:	4a05      	ldr	r2, [pc, #20]	; (800e334 <check_fs+0xa8>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d101      	bne.n	800e326 <check_fs+0x9a>
 800e322:	2300      	movs	r3, #0
 800e324:	e000      	b.n	800e328 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e326:	2302      	movs	r3, #2
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	00544146 	.word	0x00544146
 800e334:	33544146 	.word	0x33544146

0800e338 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b096      	sub	sp, #88	; 0x58
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	4613      	mov	r3, r2
 800e344:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	2200      	movs	r2, #0
 800e34a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7ff ff59 	bl	800e204 <get_ldnumber>
 800e352:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e356:	2b00      	cmp	r3, #0
 800e358:	da01      	bge.n	800e35e <find_volume+0x26>
 800e35a:	230b      	movs	r3, #11
 800e35c:	e268      	b.n	800e830 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e35e:	4ab0      	ldr	r2, [pc, #704]	; (800e620 <find_volume+0x2e8>)
 800e360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e366:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <find_volume+0x3a>
 800e36e:	230c      	movs	r3, #12
 800e370:	e25e      	b.n	800e830 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e376:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	f023 0301 	bic.w	r3, r3, #1
 800e37e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d01a      	beq.n	800e3be <find_volume+0x86>
		stat = disk_status(fs->drv);
 800e388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38a:	785b      	ldrb	r3, [r3, #1]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe f8b3 	bl	800c4f8 <disk_status>
 800e392:	4603      	mov	r3, r0
 800e394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e39c:	f003 0301 	and.w	r3, r3, #1
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d10c      	bne.n	800e3be <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d007      	beq.n	800e3ba <find_volume+0x82>
 800e3aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3ae:	f003 0304 	and.w	r3, r3, #4
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800e3b6:	230a      	movs	r3, #10
 800e3b8:	e23a      	b.n	800e830 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	e238      	b.n	800e830 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	785b      	ldrb	r3, [r3, #1]
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe f8ab 	bl	800c52c <disk_initialize>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e3dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d001      	beq.n	800e3ec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e3e8:	2303      	movs	r3, #3
 800e3ea:	e221      	b.n	800e830 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e3ec:	79fb      	ldrb	r3, [r7, #7]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d007      	beq.n	800e402 <find_volume+0xca>
 800e3f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e3f6:	f003 0304 	and.w	r3, r3, #4
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e3fe:	230a      	movs	r3, #10
 800e400:	e216      	b.n	800e830 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e404:	7858      	ldrb	r0, [r3, #1]
 800e406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e408:	330c      	adds	r3, #12
 800e40a:	461a      	mov	r2, r3
 800e40c:	2102      	movs	r1, #2
 800e40e:	f7fe f8f3 	bl	800c5f8 <disk_ioctl>
 800e412:	4603      	mov	r3, r0
 800e414:	2b00      	cmp	r3, #0
 800e416:	d001      	beq.n	800e41c <find_volume+0xe4>
 800e418:	2301      	movs	r3, #1
 800e41a:	e209      	b.n	800e830 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	899b      	ldrh	r3, [r3, #12]
 800e420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e424:	d80d      	bhi.n	800e442 <find_volume+0x10a>
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	899b      	ldrh	r3, [r3, #12]
 800e42a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e42e:	d308      	bcc.n	800e442 <find_volume+0x10a>
 800e430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e432:	899b      	ldrh	r3, [r3, #12]
 800e434:	461a      	mov	r2, r3
 800e436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e438:	899b      	ldrh	r3, [r3, #12]
 800e43a:	3b01      	subs	r3, #1
 800e43c:	4013      	ands	r3, r2
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <find_volume+0x10e>
 800e442:	2301      	movs	r3, #1
 800e444:	e1f4      	b.n	800e830 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e44a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e44c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e44e:	f7ff ff1d 	bl	800e28c <check_fs>
 800e452:	4603      	mov	r3, r0
 800e454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d14b      	bne.n	800e4f8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e460:	2300      	movs	r3, #0
 800e462:	643b      	str	r3, [r7, #64]	; 0x40
 800e464:	e01f      	b.n	800e4a6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e46e:	011b      	lsls	r3, r3, #4
 800e470:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e474:	4413      	add	r3, r2
 800e476:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	3304      	adds	r3, #4
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d006      	beq.n	800e490 <find_volume+0x158>
 800e482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e484:	3308      	adds	r3, #8
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe f8ec 	bl	800c664 <ld_dword>
 800e48c:	4602      	mov	r2, r0
 800e48e:	e000      	b.n	800e492 <find_volume+0x15a>
 800e490:	2200      	movs	r2, #0
 800e492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e49a:	440b      	add	r3, r1
 800e49c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4a2:	3301      	adds	r3, #1
 800e4a4:	643b      	str	r3, [r7, #64]	; 0x40
 800e4a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4a8:	2b03      	cmp	r3, #3
 800e4aa:	d9dc      	bls.n	800e466 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d002      	beq.n	800e4bc <find_volume+0x184>
 800e4b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4b8:	3b01      	subs	r3, #1
 800e4ba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e4c4:	4413      	add	r3, r2
 800e4c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e4ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d005      	beq.n	800e4de <find_volume+0x1a6>
 800e4d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e4d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4d6:	f7ff fed9 	bl	800e28c <check_fs>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	e000      	b.n	800e4e0 <find_volume+0x1a8>
 800e4de:	2303      	movs	r3, #3
 800e4e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e4e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d905      	bls.n	800e4f8 <find_volume+0x1c0>
 800e4ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	643b      	str	r3, [r7, #64]	; 0x40
 800e4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e4f4:	2b03      	cmp	r3, #3
 800e4f6:	d9e1      	bls.n	800e4bc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e4f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	d101      	bne.n	800e504 <find_volume+0x1cc>
 800e500:	2301      	movs	r3, #1
 800e502:	e195      	b.n	800e830 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d901      	bls.n	800e510 <find_volume+0x1d8>
 800e50c:	230d      	movs	r3, #13
 800e50e:	e18f      	b.n	800e830 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e512:	3338      	adds	r3, #56	; 0x38
 800e514:	330b      	adds	r3, #11
 800e516:	4618      	mov	r0, r3
 800e518:	f7fe f88c 	bl	800c634 <ld_word>
 800e51c:	4603      	mov	r3, r0
 800e51e:	461a      	mov	r2, r3
 800e520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e522:	899b      	ldrh	r3, [r3, #12]
 800e524:	429a      	cmp	r2, r3
 800e526:	d001      	beq.n	800e52c <find_volume+0x1f4>
 800e528:	230d      	movs	r3, #13
 800e52a:	e181      	b.n	800e830 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	3338      	adds	r3, #56	; 0x38
 800e530:	3316      	adds	r3, #22
 800e532:	4618      	mov	r0, r3
 800e534:	f7fe f87e 	bl	800c634 <ld_word>
 800e538:	4603      	mov	r3, r0
 800e53a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <find_volume+0x218>
 800e542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e544:	3338      	adds	r3, #56	; 0x38
 800e546:	3324      	adds	r3, #36	; 0x24
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fe f88b 	bl	800c664 <ld_dword>
 800e54e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e554:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e558:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e562:	789b      	ldrb	r3, [r3, #2]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d005      	beq.n	800e574 <find_volume+0x23c>
 800e568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e56a:	789b      	ldrb	r3, [r3, #2]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	d001      	beq.n	800e574 <find_volume+0x23c>
 800e570:	230d      	movs	r3, #13
 800e572:	e15d      	b.n	800e830 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e576:	789b      	ldrb	r3, [r3, #2]
 800e578:	461a      	mov	r2, r3
 800e57a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e57c:	fb02 f303 	mul.w	r3, r2, r3
 800e580:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e588:	b29a      	uxth	r2, r3
 800e58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e58c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e590:	895b      	ldrh	r3, [r3, #10]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d008      	beq.n	800e5a8 <find_volume+0x270>
 800e596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e598:	895b      	ldrh	r3, [r3, #10]
 800e59a:	461a      	mov	r2, r3
 800e59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e59e:	895b      	ldrh	r3, [r3, #10]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <find_volume+0x274>
 800e5a8:	230d      	movs	r3, #13
 800e5aa:	e141      	b.n	800e830 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ae:	3338      	adds	r3, #56	; 0x38
 800e5b0:	3311      	adds	r3, #17
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fe f83e 	bl	800c634 <ld_word>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c2:	891b      	ldrh	r3, [r3, #8]
 800e5c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5c6:	8992      	ldrh	r2, [r2, #12]
 800e5c8:	0952      	lsrs	r2, r2, #5
 800e5ca:	b292      	uxth	r2, r2
 800e5cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5d0:	fb02 f201 	mul.w	r2, r2, r1
 800e5d4:	1a9b      	subs	r3, r3, r2
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d001      	beq.n	800e5e0 <find_volume+0x2a8>
 800e5dc:	230d      	movs	r3, #13
 800e5de:	e127      	b.n	800e830 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e2:	3338      	adds	r3, #56	; 0x38
 800e5e4:	3313      	adds	r3, #19
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fe f824 	bl	800c634 <ld_word>
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d106      	bne.n	800e604 <find_volume+0x2cc>
 800e5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f8:	3338      	adds	r3, #56	; 0x38
 800e5fa:	3320      	adds	r3, #32
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7fe f831 	bl	800c664 <ld_dword>
 800e602:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	3338      	adds	r3, #56	; 0x38
 800e608:	330e      	adds	r3, #14
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe f812 	bl	800c634 <ld_word>
 800e610:	4603      	mov	r3, r0
 800e612:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e614:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e616:	2b00      	cmp	r3, #0
 800e618:	d104      	bne.n	800e624 <find_volume+0x2ec>
 800e61a:	230d      	movs	r3, #13
 800e61c:	e108      	b.n	800e830 <find_volume+0x4f8>
 800e61e:	bf00      	nop
 800e620:	20000264 	.word	0x20000264

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e624:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e628:	4413      	add	r3, r2
 800e62a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e62c:	8911      	ldrh	r1, [r2, #8]
 800e62e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e630:	8992      	ldrh	r2, [r2, #12]
 800e632:	0952      	lsrs	r2, r2, #5
 800e634:	b292      	uxth	r2, r2
 800e636:	fbb1 f2f2 	udiv	r2, r1, r2
 800e63a:	b292      	uxth	r2, r2
 800e63c:	4413      	add	r3, r2
 800e63e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e644:	429a      	cmp	r2, r3
 800e646:	d201      	bcs.n	800e64c <find_volume+0x314>
 800e648:	230d      	movs	r3, #13
 800e64a:	e0f1      	b.n	800e830 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e64c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e654:	8952      	ldrh	r2, [r2, #10]
 800e656:	fbb3 f3f2 	udiv	r3, r3, r2
 800e65a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d101      	bne.n	800e666 <find_volume+0x32e>
 800e662:	230d      	movs	r3, #13
 800e664:	e0e4      	b.n	800e830 <find_volume+0x4f8>
		fmt = FS_FAT32;
 800e666:	2303      	movs	r3, #3
 800e668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e672:	4293      	cmp	r3, r2
 800e674:	d802      	bhi.n	800e67c <find_volume+0x344>
 800e676:	2302      	movs	r3, #2
 800e678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e682:	4293      	cmp	r3, r2
 800e684:	d802      	bhi.n	800e68c <find_volume+0x354>
 800e686:	2301      	movs	r3, #1
 800e688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	1c9a      	adds	r2, r3, #2
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800e694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e696:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e698:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e69a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e69e:	441a      	add	r2, r3
 800e6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800e6a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	441a      	add	r2, r3
 800e6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ac:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800e6ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6b2:	2b03      	cmp	r3, #3
 800e6b4:	d11e      	bne.n	800e6f4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b8:	3338      	adds	r3, #56	; 0x38
 800e6ba:	332a      	adds	r3, #42	; 0x2a
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7fd ffb9 	bl	800c634 <ld_word>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d001      	beq.n	800e6cc <find_volume+0x394>
 800e6c8:	230d      	movs	r3, #13
 800e6ca:	e0b1      	b.n	800e830 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ce:	891b      	ldrh	r3, [r3, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <find_volume+0x3a0>
 800e6d4:	230d      	movs	r3, #13
 800e6d6:	e0ab      	b.n	800e830 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	3338      	adds	r3, #56	; 0x38
 800e6dc:	332c      	adds	r3, #44	; 0x2c
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fd ffc0 	bl	800c664 <ld_dword>
 800e6e4:	4602      	mov	r2, r0
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ec:	69db      	ldr	r3, [r3, #28]
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	647b      	str	r3, [r7, #68]	; 0x44
 800e6f2:	e01f      	b.n	800e734 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	891b      	ldrh	r3, [r3, #8]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <find_volume+0x3c8>
 800e6fc:	230d      	movs	r3, #13
 800e6fe:	e097      	b.n	800e830 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e706:	441a      	add	r2, r3
 800e708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e70c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e710:	2b02      	cmp	r3, #2
 800e712:	d103      	bne.n	800e71c <find_volume+0x3e4>
 800e714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e716:	69db      	ldr	r3, [r3, #28]
 800e718:	005b      	lsls	r3, r3, #1
 800e71a:	e00a      	b.n	800e732 <find_volume+0x3fa>
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	69da      	ldr	r2, [r3, #28]
 800e720:	4613      	mov	r3, r2
 800e722:	005b      	lsls	r3, r3, #1
 800e724:	4413      	add	r3, r2
 800e726:	085a      	lsrs	r2, r3, #1
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	69db      	ldr	r3, [r3, #28]
 800e72c:	f003 0301 	and.w	r3, r3, #1
 800e730:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e732:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e736:	6a1a      	ldr	r2, [r3, #32]
 800e738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73a:	899b      	ldrh	r3, [r3, #12]
 800e73c:	4619      	mov	r1, r3
 800e73e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e740:	440b      	add	r3, r1
 800e742:	3b01      	subs	r3, #1
 800e744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e746:	8989      	ldrh	r1, [r1, #12]
 800e748:	fbb3 f3f1 	udiv	r3, r3, r1
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d201      	bcs.n	800e754 <find_volume+0x41c>
 800e750:	230d      	movs	r3, #13
 800e752:	e06d      	b.n	800e830 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e756:	f04f 32ff 	mov.w	r2, #4294967295
 800e75a:	619a      	str	r2, [r3, #24]
 800e75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75e:	699a      	ldr	r2, [r3, #24]
 800e760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e762:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800e764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e766:	2280      	movs	r2, #128	; 0x80
 800e768:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e76a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e76e:	2b03      	cmp	r3, #3
 800e770:	d149      	bne.n	800e806 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e774:	3338      	adds	r3, #56	; 0x38
 800e776:	3330      	adds	r3, #48	; 0x30
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fd ff5b 	bl	800c634 <ld_word>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b01      	cmp	r3, #1
 800e782:	d140      	bne.n	800e806 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e786:	3301      	adds	r3, #1
 800e788:	4619      	mov	r1, r3
 800e78a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e78c:	f7fe fa02 	bl	800cb94 <move_window>
 800e790:	4603      	mov	r3, r0
 800e792:	2b00      	cmp	r3, #0
 800e794:	d137      	bne.n	800e806 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800e796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e798:	2200      	movs	r2, #0
 800e79a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79e:	3338      	adds	r3, #56	; 0x38
 800e7a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7fd ff45 	bl	800c634 <ld_word>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d127      	bne.n	800e806 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	3338      	adds	r3, #56	; 0x38
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fd ff52 	bl	800c664 <ld_dword>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	4a1d      	ldr	r2, [pc, #116]	; (800e838 <find_volume+0x500>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d11e      	bne.n	800e806 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ca:	3338      	adds	r3, #56	; 0x38
 800e7cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fd ff47 	bl	800c664 <ld_dword>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	4a18      	ldr	r2, [pc, #96]	; (800e83c <find_volume+0x504>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d113      	bne.n	800e806 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e0:	3338      	adds	r3, #56	; 0x38
 800e7e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fd ff3c 	bl	800c664 <ld_dword>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7f4:	3338      	adds	r3, #56	; 0x38
 800e7f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fd ff32 	bl	800c664 <ld_dword>
 800e800:	4602      	mov	r2, r0
 800e802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e804:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e80c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e80e:	4b0c      	ldr	r3, [pc, #48]	; (800e840 <find_volume+0x508>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	3301      	adds	r3, #1
 800e814:	b29a      	uxth	r2, r3
 800e816:	4b0a      	ldr	r3, [pc, #40]	; (800e840 <find_volume+0x508>)
 800e818:	801a      	strh	r2, [r3, #0]
 800e81a:	4b09      	ldr	r3, [pc, #36]	; (800e840 <find_volume+0x508>)
 800e81c:	881a      	ldrh	r2, [r3, #0]
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e824:	4a07      	ldr	r2, [pc, #28]	; (800e844 <find_volume+0x50c>)
 800e826:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e828:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e82a:	f7fe f94b 	bl	800cac4 <clear_lock>
#endif
	return FR_OK;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3758      	adds	r7, #88	; 0x58
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	41615252 	.word	0x41615252
 800e83c:	61417272 	.word	0x61417272
 800e840:	20000268 	.word	0x20000268
 800e844:	2000028c 	.word	0x2000028c

0800e848 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e852:	2309      	movs	r3, #9
 800e854:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d01c      	beq.n	800e896 <validate+0x4e>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d018      	beq.n	800e896 <validate+0x4e>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d013      	beq.n	800e896 <validate+0x4e>
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	889a      	ldrh	r2, [r3, #4]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	88db      	ldrh	r3, [r3, #6]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d10c      	bne.n	800e896 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	785b      	ldrb	r3, [r3, #1]
 800e882:	4618      	mov	r0, r3
 800e884:	f7fd fe38 	bl	800c4f8 <disk_status>
 800e888:	4603      	mov	r3, r0
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <validate+0x4e>
			res = FR_OK;
 800e892:	2300      	movs	r3, #0
 800e894:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e896:	7bfb      	ldrb	r3, [r7, #15]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d102      	bne.n	800e8a2 <validate+0x5a>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	e000      	b.n	800e8a4 <validate+0x5c>
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	6013      	str	r3, [r2, #0]
	return res;
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e8c6:	f107 0310 	add.w	r3, r7, #16
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7ff fc9a 	bl	800e204 <get_ldnumber>
 800e8d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	da01      	bge.n	800e8dc <f_mount+0x28>
 800e8d8:	230b      	movs	r3, #11
 800e8da:	e02b      	b.n	800e934 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e8dc:	4a17      	ldr	r2, [pc, #92]	; (800e93c <f_mount+0x88>)
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e8e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d005      	beq.n	800e8f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e8ec:	69b8      	ldr	r0, [r7, #24]
 800e8ee:	f7fe f8e9 	bl	800cac4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d002      	beq.n	800e904 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2200      	movs	r2, #0
 800e902:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e904:	68fa      	ldr	r2, [r7, #12]
 800e906:	490d      	ldr	r1, [pc, #52]	; (800e93c <f_mount+0x88>)
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <f_mount+0x66>
 800e914:	79fb      	ldrb	r3, [r7, #7]
 800e916:	2b01      	cmp	r3, #1
 800e918:	d001      	beq.n	800e91e <f_mount+0x6a>
 800e91a:	2300      	movs	r3, #0
 800e91c:	e00a      	b.n	800e934 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e91e:	f107 010c 	add.w	r1, r7, #12
 800e922:	f107 0308 	add.w	r3, r7, #8
 800e926:	2200      	movs	r2, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f7ff fd05 	bl	800e338 <find_volume>
 800e92e:	4603      	mov	r3, r0
 800e930:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e932:	7dfb      	ldrb	r3, [r7, #23]
}
 800e934:	4618      	mov	r0, r3
 800e936:	3720      	adds	r7, #32
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}
 800e93c:	20000264 	.word	0x20000264

0800e940 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b09a      	sub	sp, #104	; 0x68
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	4613      	mov	r3, r2
 800e94c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d101      	bne.n	800e958 <f_open+0x18>
 800e954:	2309      	movs	r3, #9
 800e956:	e1bb      	b.n	800ecd0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e958:	79fb      	ldrb	r3, [r7, #7]
 800e95a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e95e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e960:	79fa      	ldrb	r2, [r7, #7]
 800e962:	f107 0114 	add.w	r1, r7, #20
 800e966:	f107 0308 	add.w	r3, r7, #8
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7ff fce4 	bl	800e338 <find_volume>
 800e970:	4603      	mov	r3, r0
 800e972:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e976:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f040 819f 	bne.w	800ecbe <f_open+0x37e>
		dj.obj.fs = fs;
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e984:	68ba      	ldr	r2, [r7, #8]
 800e986:	f107 0318 	add.w	r3, r7, #24
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff fbc3 	bl	800e118 <follow_path>
 800e992:	4603      	mov	r3, r0
 800e994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e998:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d11a      	bne.n	800e9d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e9a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e9a4:	b25b      	sxtb	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	da03      	bge.n	800e9b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e9aa:	2306      	movs	r3, #6
 800e9ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e9b0:	e011      	b.n	800e9d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e9b2:	79fb      	ldrb	r3, [r7, #7]
 800e9b4:	f023 0301 	bic.w	r3, r3, #1
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	bf14      	ite	ne
 800e9bc:	2301      	movne	r3, #1
 800e9be:	2300      	moveq	r3, #0
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	f107 0318 	add.w	r3, r7, #24
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fd ff32 	bl	800c834 <chk_lock>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e9d6:	79fb      	ldrb	r3, [r7, #7]
 800e9d8:	f003 031c 	and.w	r3, r3, #28
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d07f      	beq.n	800eae0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e9e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d017      	beq.n	800ea18 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e9e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9ec:	2b04      	cmp	r3, #4
 800e9ee:	d10e      	bne.n	800ea0e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e9f0:	f7fd ff7c 	bl	800c8ec <enq_lock>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d006      	beq.n	800ea08 <f_open+0xc8>
 800e9fa:	f107 0318 	add.w	r3, r7, #24
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff f8da 	bl	800dbb8 <dir_register>
 800ea04:	4603      	mov	r3, r0
 800ea06:	e000      	b.n	800ea0a <f_open+0xca>
 800ea08:	2312      	movs	r3, #18
 800ea0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ea0e:	79fb      	ldrb	r3, [r7, #7]
 800ea10:	f043 0308 	orr.w	r3, r3, #8
 800ea14:	71fb      	strb	r3, [r7, #7]
 800ea16:	e010      	b.n	800ea3a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ea18:	7fbb      	ldrb	r3, [r7, #30]
 800ea1a:	f003 0311 	and.w	r3, r3, #17
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d003      	beq.n	800ea2a <f_open+0xea>
					res = FR_DENIED;
 800ea22:	2307      	movs	r3, #7
 800ea24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea28:	e007      	b.n	800ea3a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ea2a:	79fb      	ldrb	r3, [r7, #7]
 800ea2c:	f003 0304 	and.w	r3, r3, #4
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d002      	beq.n	800ea3a <f_open+0xfa>
 800ea34:	2308      	movs	r3, #8
 800ea36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ea3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d168      	bne.n	800eb14 <f_open+0x1d4>
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	f003 0308 	and.w	r3, r3, #8
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d063      	beq.n	800eb14 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ea4c:	f7fd fbda 	bl	800c204 <get_fattime>
 800ea50:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ea52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea54:	330e      	adds	r3, #14
 800ea56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fd fe41 	bl	800c6e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ea5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea60:	3316      	adds	r3, #22
 800ea62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fd fe3b 	bl	800c6e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ea6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6c:	330b      	adds	r3, #11
 800ea6e:	2220      	movs	r2, #32
 800ea70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea76:	4611      	mov	r1, r2
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fe fe13 	bl	800d6a4 <ld_clust>
 800ea7e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea84:	2200      	movs	r2, #0
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe fe2b 	bl	800d6e2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8e:	331c      	adds	r3, #28
 800ea90:	2100      	movs	r1, #0
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7fd fe24 	bl	800c6e0 <st_dword>
					fs->wflag = 1;
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ea9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d037      	beq.n	800eb14 <f_open+0x1d4>
						dw = fs->winsect;
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaa8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800eaaa:	f107 0318 	add.w	r3, r7, #24
 800eaae:	2200      	movs	r2, #0
 800eab0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fe fb1b 	bl	800d0ee <remove_chain>
 800eab8:	4603      	mov	r3, r0
 800eaba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800eabe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d126      	bne.n	800eb14 <f_open+0x1d4>
							res = move_window(fs, dw);
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fe f862 	bl	800cb94 <move_window>
 800ead0:	4603      	mov	r3, r0
 800ead2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eada:	3a01      	subs	r2, #1
 800eadc:	615a      	str	r2, [r3, #20]
 800eade:	e019      	b.n	800eb14 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800eae0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d115      	bne.n	800eb14 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eae8:	7fbb      	ldrb	r3, [r7, #30]
 800eaea:	f003 0310 	and.w	r3, r3, #16
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <f_open+0x1ba>
					res = FR_NO_FILE;
 800eaf2:	2304      	movs	r3, #4
 800eaf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800eaf8:	e00c      	b.n	800eb14 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eafa:	79fb      	ldrb	r3, [r7, #7]
 800eafc:	f003 0302 	and.w	r3, r3, #2
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d007      	beq.n	800eb14 <f_open+0x1d4>
 800eb04:	7fbb      	ldrb	r3, [r7, #30]
 800eb06:	f003 0301 	and.w	r3, r3, #1
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d002      	beq.n	800eb14 <f_open+0x1d4>
						res = FR_DENIED;
 800eb0e:	2307      	movs	r3, #7
 800eb10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800eb14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d128      	bne.n	800eb6e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eb1c:	79fb      	ldrb	r3, [r7, #7]
 800eb1e:	f003 0308 	and.w	r3, r3, #8
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d003      	beq.n	800eb2e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800eb26:	79fb      	ldrb	r3, [r7, #7]
 800eb28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800eb36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eb3c:	79fb      	ldrb	r3, [r7, #7]
 800eb3e:	f023 0301 	bic.w	r3, r3, #1
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	bf14      	ite	ne
 800eb46:	2301      	movne	r3, #1
 800eb48:	2300      	moveq	r3, #0
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	f107 0318 	add.w	r3, r7, #24
 800eb52:	4611      	mov	r1, r2
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7fd feeb 	bl	800c930 <inc_lock>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	691b      	ldr	r3, [r3, #16]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d102      	bne.n	800eb6e <f_open+0x22e>
 800eb68:	2302      	movs	r3, #2
 800eb6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800eb6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	f040 80a3 	bne.w	800ecbe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fe fd90 	bl	800d6a4 <ld_clust>
 800eb84:	4602      	mov	r2, r0
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8c:	331c      	adds	r3, #28
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fd fd68 	bl	800c664 <ld_dword>
 800eb94:	4602      	mov	r2, r0
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800eba0:	697a      	ldr	r2, [r7, #20]
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	88da      	ldrh	r2, [r3, #6]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	79fa      	ldrb	r2, [r7, #7]
 800ebb2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	3330      	adds	r3, #48	; 0x30
 800ebca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ebce:	2100      	movs	r1, #0
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fd fdd2 	bl	800c77a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ebd6:	79fb      	ldrb	r3, [r7, #7]
 800ebd8:	f003 0320 	and.w	r3, r3, #32
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d06e      	beq.n	800ecbe <f_open+0x37e>
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d06a      	beq.n	800ecbe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	68da      	ldr	r2, [r3, #12]
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	895b      	ldrh	r3, [r3, #10]
 800ebf4:	461a      	mov	r2, r3
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	899b      	ldrh	r3, [r3, #12]
 800ebfa:	fb03 f302 	mul.w	r3, r3, r2
 800ebfe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec0c:	e016      	b.n	800ec3c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe f87b 	bl	800cd0e <get_fat>
 800ec18:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800ec1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d802      	bhi.n	800ec26 <f_open+0x2e6>
 800ec20:	2302      	movs	r3, #2
 800ec22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2c:	d102      	bne.n	800ec34 <f_open+0x2f4>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ec34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d103      	bne.n	800ec4c <f_open+0x30c>
 800ec44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ec46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d8e0      	bhi.n	800ec0e <f_open+0x2ce>
				}
				fp->clust = clst;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec50:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ec52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d131      	bne.n	800ecbe <f_open+0x37e>
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	899b      	ldrh	r3, [r3, #12]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec62:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec66:	fb02 f201 	mul.w	r2, r2, r1
 800ec6a:	1a9b      	subs	r3, r3, r2
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d026      	beq.n	800ecbe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fe f82b 	bl	800ccd0 <clust2sect>
 800ec7a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ec7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d103      	bne.n	800ec8a <f_open+0x34a>
						res = FR_INT_ERR;
 800ec82:	2302      	movs	r3, #2
 800ec84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ec88:	e019      	b.n	800ecbe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	899b      	ldrh	r3, [r3, #12]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec98:	441a      	add	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	7858      	ldrb	r0, [r3, #1]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6a1a      	ldr	r2, [r3, #32]
 800ecac:	2301      	movs	r3, #1
 800ecae:	f7fd fc63 	bl	800c578 <disk_read>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d002      	beq.n	800ecbe <f_open+0x37e>
 800ecb8:	2301      	movs	r3, #1
 800ecba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ecbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d002      	beq.n	800eccc <f_open+0x38c>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eccc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3768      	adds	r7, #104	; 0x68
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b08c      	sub	sp, #48	; 0x30
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	60b9      	str	r1, [r7, #8]
 800ece2:	607a      	str	r2, [r7, #4]
 800ece4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2200      	movs	r2, #0
 800ecee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f107 0210 	add.w	r2, r7, #16
 800ecf6:	4611      	mov	r1, r2
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7ff fda5 	bl	800e848 <validate>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ed04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d107      	bne.n	800ed1c <f_write+0x44>
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	7d5b      	ldrb	r3, [r3, #21]
 800ed10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ed14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d002      	beq.n	800ed22 <f_write+0x4a>
 800ed1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed20:	e16a      	b.n	800eff8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	7d1b      	ldrb	r3, [r3, #20]
 800ed26:	f003 0302 	and.w	r3, r3, #2
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <f_write+0x5a>
 800ed2e:	2307      	movs	r3, #7
 800ed30:	e162      	b.n	800eff8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	699a      	ldr	r2, [r3, #24]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	441a      	add	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	f080 814c 	bcs.w	800efdc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	699b      	ldr	r3, [r3, #24]
 800ed48:	43db      	mvns	r3, r3
 800ed4a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ed4c:	e146      	b.n	800efdc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	699b      	ldr	r3, [r3, #24]
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	8992      	ldrh	r2, [r2, #12]
 800ed56:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed5a:	fb02 f201 	mul.w	r2, r2, r1
 800ed5e:	1a9b      	subs	r3, r3, r2
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f040 80f1 	bne.w	800ef48 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	699b      	ldr	r3, [r3, #24]
 800ed6a:	693a      	ldr	r2, [r7, #16]
 800ed6c:	8992      	ldrh	r2, [r2, #12]
 800ed6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	8952      	ldrh	r2, [r2, #10]
 800ed76:	3a01      	subs	r2, #1
 800ed78:	4013      	ands	r3, r2
 800ed7a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d143      	bne.n	800ee0a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	699b      	ldr	r3, [r3, #24]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d10c      	bne.n	800eda4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	689b      	ldr	r3, [r3, #8]
 800ed8e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ed90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d11a      	bne.n	800edcc <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2100      	movs	r1, #0
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fe fa0c 	bl	800d1b8 <create_chain>
 800eda0:	62b8      	str	r0, [r7, #40]	; 0x28
 800eda2:	e013      	b.n	800edcc <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d007      	beq.n	800edbc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	699b      	ldr	r3, [r3, #24]
 800edb0:	4619      	mov	r1, r3
 800edb2:	68f8      	ldr	r0, [r7, #12]
 800edb4:	f7fe fa98 	bl	800d2e8 <clmt_clust>
 800edb8:	62b8      	str	r0, [r7, #40]	; 0x28
 800edba:	e007      	b.n	800edcc <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	69db      	ldr	r3, [r3, #28]
 800edc2:	4619      	mov	r1, r3
 800edc4:	4610      	mov	r0, r2
 800edc6:	f7fe f9f7 	bl	800d1b8 <create_chain>
 800edca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 8109 	beq.w	800efe6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d104      	bne.n	800ede4 <f_write+0x10c>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2202      	movs	r2, #2
 800edde:	755a      	strb	r2, [r3, #21]
 800ede0:	2302      	movs	r3, #2
 800ede2:	e109      	b.n	800eff8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ede4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edea:	d104      	bne.n	800edf6 <f_write+0x11e>
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2201      	movs	r2, #1
 800edf0:	755a      	strb	r2, [r3, #21]
 800edf2:	2301      	movs	r3, #1
 800edf4:	e100      	b.n	800eff8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edfa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d102      	bne.n	800ee0a <f_write+0x132>
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee08:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	7d1b      	ldrb	r3, [r3, #20]
 800ee0e:	b25b      	sxtb	r3, r3
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	da18      	bge.n	800ee46 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	7858      	ldrb	r0, [r3, #1]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	6a1a      	ldr	r2, [r3, #32]
 800ee22:	2301      	movs	r3, #1
 800ee24:	f7fd fbc8 	bl	800c5b8 <disk_write>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d004      	beq.n	800ee38 <f_write+0x160>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	755a      	strb	r2, [r3, #21]
 800ee34:	2301      	movs	r3, #1
 800ee36:	e0df      	b.n	800eff8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	7d1b      	ldrb	r3, [r3, #20]
 800ee3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee40:	b2da      	uxtb	r2, r3
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ee46:	693a      	ldr	r2, [r7, #16]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	69db      	ldr	r3, [r3, #28]
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	4610      	mov	r0, r2
 800ee50:	f7fd ff3e 	bl	800ccd0 <clust2sect>
 800ee54:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d104      	bne.n	800ee66 <f_write+0x18e>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2202      	movs	r2, #2
 800ee60:	755a      	strb	r2, [r3, #21]
 800ee62:	2302      	movs	r3, #2
 800ee64:	e0c8      	b.n	800eff8 <f_write+0x320>
			sect += csect;
 800ee66:	697a      	ldr	r2, [r7, #20]
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	899b      	ldrh	r3, [r3, #12]
 800ee72:	461a      	mov	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee7a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ee7c:	6a3b      	ldr	r3, [r7, #32]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d043      	beq.n	800ef0a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee82:	69ba      	ldr	r2, [r7, #24]
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	4413      	add	r3, r2
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	8952      	ldrh	r2, [r2, #10]
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d905      	bls.n	800ee9c <f_write+0x1c4>
					cc = fs->csize - csect;
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	895b      	ldrh	r3, [r3, #10]
 800ee94:	461a      	mov	r2, r3
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	7858      	ldrb	r0, [r3, #1]
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	697a      	ldr	r2, [r7, #20]
 800eea4:	69f9      	ldr	r1, [r7, #28]
 800eea6:	f7fd fb87 	bl	800c5b8 <disk_write>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d004      	beq.n	800eeba <f_write+0x1e2>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	755a      	strb	r2, [r3, #21]
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e09e      	b.n	800eff8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	6a1a      	ldr	r2, [r3, #32]
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	6a3a      	ldr	r2, [r7, #32]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d918      	bls.n	800eefa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6a1a      	ldr	r2, [r3, #32]
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	8992      	ldrh	r2, [r2, #12]
 800eeda:	fb02 f303 	mul.w	r3, r2, r3
 800eede:	69fa      	ldr	r2, [r7, #28]
 800eee0:	18d1      	adds	r1, r2, r3
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	899b      	ldrh	r3, [r3, #12]
 800eee6:	461a      	mov	r2, r3
 800eee8:	f7fd fc26 	bl	800c738 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
 800eef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	899b      	ldrh	r3, [r3, #12]
 800eefe:	461a      	mov	r2, r3
 800ef00:	6a3b      	ldr	r3, [r7, #32]
 800ef02:	fb02 f303 	mul.w	r3, r2, r3
 800ef06:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ef08:	e04b      	b.n	800efa2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d016      	beq.n	800ef42 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	699a      	ldr	r2, [r3, #24]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d210      	bcs.n	800ef42 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	7858      	ldrb	r0, [r3, #1]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	f7fd fb23 	bl	800c578 <disk_read>
 800ef32:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d004      	beq.n	800ef42 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2201      	movs	r2, #1
 800ef3c:	755a      	strb	r2, [r3, #21]
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e05a      	b.n	800eff8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	899b      	ldrh	r3, [r3, #12]
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	699b      	ldr	r3, [r3, #24]
 800ef52:	693a      	ldr	r2, [r7, #16]
 800ef54:	8992      	ldrh	r2, [r2, #12]
 800ef56:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef5a:	fb02 f201 	mul.w	r2, r2, r1
 800ef5e:	1a9b      	subs	r3, r3, r2
 800ef60:	1ac3      	subs	r3, r0, r3
 800ef62:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ef64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d901      	bls.n	800ef70 <f_write+0x298>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	693a      	ldr	r2, [r7, #16]
 800ef7c:	8992      	ldrh	r2, [r2, #12]
 800ef7e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef82:	fb02 f200 	mul.w	r2, r2, r0
 800ef86:	1a9b      	subs	r3, r3, r2
 800ef88:	440b      	add	r3, r1
 800ef8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef8c:	69f9      	ldr	r1, [r7, #28]
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7fd fbd2 	bl	800c738 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	7d1b      	ldrb	r3, [r3, #20]
 800ef98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800efa2:	69fa      	ldr	r2, [r7, #28]
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	4413      	add	r3, r2
 800efa8:	61fb      	str	r3, [r7, #28]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	699a      	ldr	r2, [r3, #24]
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	441a      	add	r2, r3
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	619a      	str	r2, [r3, #24]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	68da      	ldr	r2, [r3, #12]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	699b      	ldr	r3, [r3, #24]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	bf38      	it	cc
 800efc2:	461a      	movcc	r2, r3
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	60da      	str	r2, [r3, #12]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efce:	441a      	add	r2, r3
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f47f aeb5 	bne.w	800ed4e <f_write+0x76>
 800efe4:	e000      	b.n	800efe8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800efe6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	7d1b      	ldrb	r3, [r3, #20]
 800efec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eff0:	b2da      	uxtb	r2, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3730      	adds	r7, #48	; 0x30
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f107 0208 	add.w	r2, r7, #8
 800f00e:	4611      	mov	r1, r2
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fc19 	bl	800e848 <validate>
 800f016:	4603      	mov	r3, r0
 800f018:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f01a:	7dfb      	ldrb	r3, [r7, #23]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d168      	bne.n	800f0f2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	7d1b      	ldrb	r3, [r3, #20]
 800f024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d062      	beq.n	800f0f2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	7d1b      	ldrb	r3, [r3, #20]
 800f030:	b25b      	sxtb	r3, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	da15      	bge.n	800f062 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	7858      	ldrb	r0, [r3, #1]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6a1a      	ldr	r2, [r3, #32]
 800f044:	2301      	movs	r3, #1
 800f046:	f7fd fab7 	bl	800c5b8 <disk_write>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d001      	beq.n	800f054 <f_sync+0x54>
 800f050:	2301      	movs	r3, #1
 800f052:	e04f      	b.n	800f0f4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	7d1b      	ldrb	r3, [r3, #20]
 800f058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f05c:	b2da      	uxtb	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f062:	f7fd f8cf 	bl	800c204 <get_fattime>
 800f066:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f068:	68ba      	ldr	r2, [r7, #8]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06e:	4619      	mov	r1, r3
 800f070:	4610      	mov	r0, r2
 800f072:	f7fd fd8f 	bl	800cb94 <move_window>
 800f076:	4603      	mov	r3, r0
 800f078:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f07a:	7dfb      	ldrb	r3, [r7, #23]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d138      	bne.n	800f0f2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f084:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	330b      	adds	r3, #11
 800f08a:	781a      	ldrb	r2, [r3, #0]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	330b      	adds	r3, #11
 800f090:	f042 0220 	orr.w	r2, r2, #32
 800f094:	b2d2      	uxtb	r2, r2
 800f096:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6818      	ldr	r0, [r3, #0]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	68f9      	ldr	r1, [r7, #12]
 800f0a4:	f7fe fb1d 	bl	800d6e2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f103 021c 	add.w	r2, r3, #28
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	4610      	mov	r0, r2
 800f0b6:	f7fd fb13 	bl	800c6e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	3316      	adds	r3, #22
 800f0be:	6939      	ldr	r1, [r7, #16]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fd fb0d 	bl	800c6e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	3312      	adds	r3, #18
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fd faec 	bl	800c6aa <st_word>
					fs->wflag = 1;
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fd fd88 	bl	800cbf0 <sync_fs>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	7d1b      	ldrb	r3, [r3, #20]
 800f0e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3718      	adds	r7, #24
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f7ff ff7b 	bl	800f000 <f_sync>
 800f10a:	4603      	mov	r3, r0
 800f10c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d118      	bne.n	800f146 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f107 0208 	add.w	r2, r7, #8
 800f11a:	4611      	mov	r1, r2
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7ff fb93 	bl	800e848 <validate>
 800f122:	4603      	mov	r3, r0
 800f124:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f126:	7bfb      	ldrb	r3, [r7, #15]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d10c      	bne.n	800f146 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	691b      	ldr	r3, [r3, #16]
 800f130:	4618      	mov	r0, r3
 800f132:	f7fd fc8b 	bl	800ca4c <dec_lock>
 800f136:	4603      	mov	r3, r0
 800f138:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f13a:	7bfb      	ldrb	r3, [r7, #15]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d102      	bne.n	800f146 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f146:	7bfb      	ldrb	r3, [r7, #15]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b090      	sub	sp, #64	; 0x40
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f107 0208 	add.w	r2, r7, #8
 800f160:	4611      	mov	r1, r2
 800f162:	4618      	mov	r0, r3
 800f164:	f7ff fb70 	bl	800e848 <validate>
 800f168:	4603      	mov	r3, r0
 800f16a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800f16e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f172:	2b00      	cmp	r3, #0
 800f174:	d103      	bne.n	800f17e <f_lseek+0x2e>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7d5b      	ldrb	r3, [r3, #21]
 800f17a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800f17e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f182:	2b00      	cmp	r3, #0
 800f184:	d002      	beq.n	800f18c <f_lseek+0x3c>
 800f186:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f18a:	e201      	b.n	800f590 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f190:	2b00      	cmp	r3, #0
 800f192:	f000 80d9 	beq.w	800f348 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19c:	d15a      	bne.n	800f254 <f_lseek+0x104>
			tbl = fp->cltbl;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a2:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800f1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a6:	1d1a      	adds	r2, r3, #4
 800f1a8:	627a      	str	r2, [r7, #36]	; 0x24
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	617b      	str	r3, [r7, #20]
 800f1ae:	2302      	movs	r3, #2
 800f1b0:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	689b      	ldr	r3, [r3, #8]
 800f1b6:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d03a      	beq.n	800f234 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	613b      	str	r3, [r7, #16]
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c8:	3302      	adds	r3, #2
 800f1ca:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ce:	60fb      	str	r3, [r7, #12]
 800f1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fd fd97 	bl	800cd0e <get_fat>
 800f1e0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800f1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d804      	bhi.n	800f1f2 <f_lseek+0xa2>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2202      	movs	r2, #2
 800f1ec:	755a      	strb	r2, [r3, #21]
 800f1ee:	2302      	movs	r3, #2
 800f1f0:	e1ce      	b.n	800f590 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f8:	d104      	bne.n	800f204 <f_lseek+0xb4>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	755a      	strb	r2, [r3, #21]
 800f200:	2301      	movs	r3, #1
 800f202:	e1c5      	b.n	800f590 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3301      	adds	r3, #1
 800f208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d0de      	beq.n	800f1cc <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800f20e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	429a      	cmp	r2, r3
 800f214:	d809      	bhi.n	800f22a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f218:	1d1a      	adds	r2, r3, #4
 800f21a:	627a      	str	r2, [r7, #36]	; 0x24
 800f21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f21e:	601a      	str	r2, [r3, #0]
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	1d1a      	adds	r2, r3, #4
 800f224:	627a      	str	r2, [r7, #36]	; 0x24
 800f226:	693a      	ldr	r2, [r7, #16]
 800f228:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	69db      	ldr	r3, [r3, #28]
 800f22e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f230:	429a      	cmp	r2, r3
 800f232:	d3c4      	bcc.n	800f1be <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f23a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800f23c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	429a      	cmp	r2, r3
 800f242:	d803      	bhi.n	800f24c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800f244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f246:	2200      	movs	r2, #0
 800f248:	601a      	str	r2, [r3, #0]
 800f24a:	e19f      	b.n	800f58c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800f24c:	2311      	movs	r3, #17
 800f24e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f252:	e19b      	b.n	800f58c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	68db      	ldr	r3, [r3, #12]
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d902      	bls.n	800f264 <f_lseek+0x114>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	683a      	ldr	r2, [r7, #0]
 800f268:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	f000 818d 	beq.w	800f58c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	3b01      	subs	r3, #1
 800f276:	4619      	mov	r1, r3
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f7fe f835 	bl	800d2e8 <clmt_clust>
 800f27e:	4602      	mov	r2, r0
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	69db      	ldr	r3, [r3, #28]
 800f28a:	4619      	mov	r1, r3
 800f28c:	4610      	mov	r0, r2
 800f28e:	f7fd fd1f 	bl	800ccd0 <clust2sect>
 800f292:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800f294:	69bb      	ldr	r3, [r7, #24]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d104      	bne.n	800f2a4 <f_lseek+0x154>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	2202      	movs	r2, #2
 800f29e:	755a      	strb	r2, [r3, #21]
 800f2a0:	2302      	movs	r3, #2
 800f2a2:	e175      	b.n	800f590 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	3b01      	subs	r3, #1
 800f2a8:	68ba      	ldr	r2, [r7, #8]
 800f2aa:	8992      	ldrh	r2, [r2, #12]
 800f2ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	8952      	ldrh	r2, [r2, #10]
 800f2b4:	3a01      	subs	r2, #1
 800f2b6:	4013      	ands	r3, r2
 800f2b8:	69ba      	ldr	r2, [r7, #24]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	699b      	ldr	r3, [r3, #24]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	8992      	ldrh	r2, [r2, #12]
 800f2c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f2ca:	fb02 f201 	mul.w	r2, r2, r1
 800f2ce:	1a9b      	subs	r3, r3, r2
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 815b 	beq.w	800f58c <f_lseek+0x43c>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	69ba      	ldr	r2, [r7, #24]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	f000 8155 	beq.w	800f58c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	7d1b      	ldrb	r3, [r3, #20]
 800f2e6:	b25b      	sxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	da18      	bge.n	800f31e <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	7858      	ldrb	r0, [r3, #1]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6a1a      	ldr	r2, [r3, #32]
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	f7fd f95c 	bl	800c5b8 <disk_write>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d004      	beq.n	800f310 <f_lseek+0x1c0>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2201      	movs	r2, #1
 800f30a:	755a      	strb	r2, [r3, #21]
 800f30c:	2301      	movs	r3, #1
 800f30e:	e13f      	b.n	800f590 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7d1b      	ldrb	r3, [r3, #20]
 800f314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	7858      	ldrb	r0, [r3, #1]
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f328:	2301      	movs	r3, #1
 800f32a:	69ba      	ldr	r2, [r7, #24]
 800f32c:	f7fd f924 	bl	800c578 <disk_read>
 800f330:	4603      	mov	r3, r0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d004      	beq.n	800f340 <f_lseek+0x1f0>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2201      	movs	r2, #1
 800f33a:	755a      	strb	r2, [r3, #21]
 800f33c:	2301      	movs	r3, #1
 800f33e:	e127      	b.n	800f590 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	69ba      	ldr	r2, [r7, #24]
 800f344:	621a      	str	r2, [r3, #32]
 800f346:	e121      	b.n	800f58c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	683a      	ldr	r2, [r7, #0]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d908      	bls.n	800f364 <f_lseek+0x214>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	7d1b      	ldrb	r3, [r3, #20]
 800f356:	f003 0302 	and.w	r3, r3, #2
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d102      	bne.n	800f364 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	699b      	ldr	r3, [r3, #24]
 800f368:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800f36a:	2300      	movs	r3, #0
 800f36c:	637b      	str	r3, [r7, #52]	; 0x34
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f372:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 80b5 	beq.w	800f4e6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	895b      	ldrh	r3, [r3, #10]
 800f380:	461a      	mov	r2, r3
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	899b      	ldrh	r3, [r3, #12]
 800f386:	fb03 f302 	mul.w	r3, r3, r2
 800f38a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d01b      	beq.n	800f3ca <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	1e5a      	subs	r2, r3, #1
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	fbb2 f2f3 	udiv	r2, r2, r3
 800f39c:	6a3b      	ldr	r3, [r7, #32]
 800f39e:	1e59      	subs	r1, r3, #1
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d30f      	bcc.n	800f3ca <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800f3aa:	6a3b      	ldr	r3, [r7, #32]
 800f3ac:	1e5a      	subs	r2, r3, #1
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	425b      	negs	r3, r3
 800f3b2:	401a      	ands	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	699b      	ldr	r3, [r3, #24]
 800f3bc:	683a      	ldr	r2, [r7, #0]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	69db      	ldr	r3, [r3, #28]
 800f3c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3c8:	e022      	b.n	800f410 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d119      	bne.n	800f40a <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2100      	movs	r1, #0
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fd feec 	bl	800d1b8 <create_chain>
 800f3e0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d104      	bne.n	800f3f2 <f_lseek+0x2a2>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	755a      	strb	r2, [r3, #21]
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	e0ce      	b.n	800f590 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3f8:	d104      	bne.n	800f404 <f_lseek+0x2b4>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	755a      	strb	r2, [r3, #21]
 800f400:	2301      	movs	r3, #1
 800f402:	e0c5      	b.n	800f590 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f408:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f40e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800f410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f412:	2b00      	cmp	r3, #0
 800f414:	d067      	beq.n	800f4e6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800f416:	e03a      	b.n	800f48e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800f418:	683a      	ldr	r2, [r7, #0]
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	1ad3      	subs	r3, r2, r3
 800f41e:	603b      	str	r3, [r7, #0]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	699a      	ldr	r2, [r3, #24]
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	441a      	add	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	7d1b      	ldrb	r3, [r3, #20]
 800f430:	f003 0302 	and.w	r3, r3, #2
 800f434:	2b00      	cmp	r3, #0
 800f436:	d00b      	beq.n	800f450 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fd febb 	bl	800d1b8 <create_chain>
 800f442:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800f444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f446:	2b00      	cmp	r3, #0
 800f448:	d108      	bne.n	800f45c <f_lseek+0x30c>
							ofs = 0; break;
 800f44a:	2300      	movs	r3, #0
 800f44c:	603b      	str	r3, [r7, #0]
 800f44e:	e022      	b.n	800f496 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f454:	4618      	mov	r0, r3
 800f456:	f7fd fc5a 	bl	800cd0e <get_fat>
 800f45a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f462:	d104      	bne.n	800f46e <f_lseek+0x31e>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2201      	movs	r2, #1
 800f468:	755a      	strb	r2, [r3, #21]
 800f46a:	2301      	movs	r3, #1
 800f46c:	e090      	b.n	800f590 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	2b01      	cmp	r3, #1
 800f472:	d904      	bls.n	800f47e <f_lseek+0x32e>
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	69db      	ldr	r3, [r3, #28]
 800f478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d304      	bcc.n	800f488 <f_lseek+0x338>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2202      	movs	r2, #2
 800f482:	755a      	strb	r2, [r3, #21]
 800f484:	2302      	movs	r3, #2
 800f486:	e083      	b.n	800f590 <f_lseek+0x440>
					fp->clust = clst;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f48c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	429a      	cmp	r2, r3
 800f494:	d8c0      	bhi.n	800f418 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	699a      	ldr	r2, [r3, #24]
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	441a      	add	r2, r3
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	899b      	ldrh	r3, [r3, #12]
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4ae:	fb02 f201 	mul.w	r2, r2, r1
 800f4b2:	1a9b      	subs	r3, r3, r2
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d016      	beq.n	800f4e6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7fd fc07 	bl	800ccd0 <clust2sect>
 800f4c2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d104      	bne.n	800f4d4 <f_lseek+0x384>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2202      	movs	r2, #2
 800f4ce:	755a      	strb	r2, [r3, #21]
 800f4d0:	2302      	movs	r3, #2
 800f4d2:	e05d      	b.n	800f590 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	899b      	ldrh	r3, [r3, #12]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4e2:	4413      	add	r3, r2
 800f4e4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	699a      	ldr	r2, [r3, #24]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	68db      	ldr	r3, [r3, #12]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d90a      	bls.n	800f508 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	699a      	ldr	r2, [r3, #24]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	7d1b      	ldrb	r3, [r3, #20]
 800f4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f502:	b2da      	uxtb	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	699b      	ldr	r3, [r3, #24]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	8992      	ldrh	r2, [r2, #12]
 800f510:	fbb3 f1f2 	udiv	r1, r3, r2
 800f514:	fb02 f201 	mul.w	r2, r2, r1
 800f518:	1a9b      	subs	r3, r3, r2
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d036      	beq.n	800f58c <f_lseek+0x43c>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6a1b      	ldr	r3, [r3, #32]
 800f522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f524:	429a      	cmp	r2, r3
 800f526:	d031      	beq.n	800f58c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	7d1b      	ldrb	r3, [r3, #20]
 800f52c:	b25b      	sxtb	r3, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	da18      	bge.n	800f564 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	7858      	ldrb	r0, [r3, #1]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6a1a      	ldr	r2, [r3, #32]
 800f540:	2301      	movs	r3, #1
 800f542:	f7fd f839 	bl	800c5b8 <disk_write>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d004      	beq.n	800f556 <f_lseek+0x406>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2201      	movs	r2, #1
 800f550:	755a      	strb	r2, [r3, #21]
 800f552:	2301      	movs	r3, #1
 800f554:	e01c      	b.n	800f590 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	7d1b      	ldrb	r3, [r3, #20]
 800f55a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f55e:	b2da      	uxtb	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	7858      	ldrb	r0, [r3, #1]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f56e:	2301      	movs	r3, #1
 800f570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f572:	f7fd f801 	bl	800c578 <disk_read>
 800f576:	4603      	mov	r3, r0
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d004      	beq.n	800f586 <f_lseek+0x436>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2201      	movs	r2, #1
 800f580:	755a      	strb	r2, [r3, #21]
 800f582:	2301      	movs	r3, #1
 800f584:	e004      	b.n	800f590 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f58a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f58c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f590:	4618      	mov	r0, r3
 800f592:	3740      	adds	r7, #64	; 0x40
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f598:	b480      	push	{r7}
 800f59a:	b087      	sub	sp, #28
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	4613      	mov	r3, r2
 800f5a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f5ae:	4b1f      	ldr	r3, [pc, #124]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5b0:	7a5b      	ldrb	r3, [r3, #9]
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d131      	bne.n	800f61c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f5b8:	4b1c      	ldr	r3, [pc, #112]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5ba:	7a5b      	ldrb	r3, [r3, #9]
 800f5bc:	b2db      	uxtb	r3, r3
 800f5be:	461a      	mov	r2, r3
 800f5c0:	4b1a      	ldr	r3, [pc, #104]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f5c6:	4b19      	ldr	r3, [pc, #100]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5c8:	7a5b      	ldrb	r3, [r3, #9]
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	4a17      	ldr	r2, [pc, #92]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4413      	add	r3, r2
 800f5d2:	68fa      	ldr	r2, [r7, #12]
 800f5d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f5d6:	4b15      	ldr	r3, [pc, #84]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5d8:	7a5b      	ldrb	r3, [r3, #9]
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	461a      	mov	r2, r3
 800f5de:	4b13      	ldr	r3, [pc, #76]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5e0:	4413      	add	r3, r2
 800f5e2:	79fa      	ldrb	r2, [r7, #7]
 800f5e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f5e6:	4b11      	ldr	r3, [pc, #68]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5e8:	7a5b      	ldrb	r3, [r3, #9]
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	1c5a      	adds	r2, r3, #1
 800f5ee:	b2d1      	uxtb	r1, r2
 800f5f0:	4a0e      	ldr	r2, [pc, #56]	; (800f62c <FATFS_LinkDriverEx+0x94>)
 800f5f2:	7251      	strb	r1, [r2, #9]
 800f5f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f5f6:	7dbb      	ldrb	r3, [r7, #22]
 800f5f8:	3330      	adds	r3, #48	; 0x30
 800f5fa:	b2da      	uxtb	r2, r3
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	3301      	adds	r3, #1
 800f604:	223a      	movs	r2, #58	; 0x3a
 800f606:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	3302      	adds	r3, #2
 800f60c:	222f      	movs	r2, #47	; 0x2f
 800f60e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	3303      	adds	r3, #3
 800f614:	2200      	movs	r2, #0
 800f616:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f61c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	371c      	adds	r7, #28
 800f622:	46bd      	mov	sp, r7
 800f624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f628:	4770      	bx	lr
 800f62a:	bf00      	nop
 800f62c:	2000048c 	.word	0x2000048c

0800f630 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f63a:	2200      	movs	r2, #0
 800f63c:	6839      	ldr	r1, [r7, #0]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f7ff ffaa 	bl	800f598 <FATFS_LinkDriverEx>
 800f644:	4603      	mov	r3, r0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3708      	adds	r7, #8
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
	...

0800f650 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	4603      	mov	r3, r0
 800f658:	6039      	str	r1, [r7, #0]
 800f65a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f65c:	88fb      	ldrh	r3, [r7, #6]
 800f65e:	2b7f      	cmp	r3, #127	; 0x7f
 800f660:	d802      	bhi.n	800f668 <ff_convert+0x18>
		c = chr;
 800f662:	88fb      	ldrh	r3, [r7, #6]
 800f664:	81fb      	strh	r3, [r7, #14]
 800f666:	e025      	b.n	800f6b4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00b      	beq.n	800f686 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f66e:	88fb      	ldrh	r3, [r7, #6]
 800f670:	2bff      	cmp	r3, #255	; 0xff
 800f672:	d805      	bhi.n	800f680 <ff_convert+0x30>
 800f674:	88fb      	ldrh	r3, [r7, #6]
 800f676:	3b80      	subs	r3, #128	; 0x80
 800f678:	4a12      	ldr	r2, [pc, #72]	; (800f6c4 <ff_convert+0x74>)
 800f67a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f67e:	e000      	b.n	800f682 <ff_convert+0x32>
 800f680:	2300      	movs	r3, #0
 800f682:	81fb      	strh	r3, [r7, #14]
 800f684:	e016      	b.n	800f6b4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f686:	2300      	movs	r3, #0
 800f688:	81fb      	strh	r3, [r7, #14]
 800f68a:	e009      	b.n	800f6a0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f68c:	89fb      	ldrh	r3, [r7, #14]
 800f68e:	4a0d      	ldr	r2, [pc, #52]	; (800f6c4 <ff_convert+0x74>)
 800f690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f694:	88fa      	ldrh	r2, [r7, #6]
 800f696:	429a      	cmp	r2, r3
 800f698:	d006      	beq.n	800f6a8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f69a:	89fb      	ldrh	r3, [r7, #14]
 800f69c:	3301      	adds	r3, #1
 800f69e:	81fb      	strh	r3, [r7, #14]
 800f6a0:	89fb      	ldrh	r3, [r7, #14]
 800f6a2:	2b7f      	cmp	r3, #127	; 0x7f
 800f6a4:	d9f2      	bls.n	800f68c <ff_convert+0x3c>
 800f6a6:	e000      	b.n	800f6aa <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f6a8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f6aa:	89fb      	ldrh	r3, [r7, #14]
 800f6ac:	3380      	adds	r3, #128	; 0x80
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f6b4:	89fb      	ldrh	r3, [r7, #14]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3714      	adds	r7, #20
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop
 800f6c4:	08015250 	.word	0x08015250

0800f6c8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f6d2:	88fb      	ldrh	r3, [r7, #6]
 800f6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6d8:	d201      	bcs.n	800f6de <ff_wtoupper+0x16>
 800f6da:	4b3e      	ldr	r3, [pc, #248]	; (800f7d4 <ff_wtoupper+0x10c>)
 800f6dc:	e000      	b.n	800f6e0 <ff_wtoupper+0x18>
 800f6de:	4b3e      	ldr	r3, [pc, #248]	; (800f7d8 <ff_wtoupper+0x110>)
 800f6e0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	1c9a      	adds	r2, r3, #2
 800f6e6:	617a      	str	r2, [r7, #20]
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f6ec:	8a7b      	ldrh	r3, [r7, #18]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d068      	beq.n	800f7c4 <ff_wtoupper+0xfc>
 800f6f2:	88fa      	ldrh	r2, [r7, #6]
 800f6f4:	8a7b      	ldrh	r3, [r7, #18]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d364      	bcc.n	800f7c4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	1c9a      	adds	r2, r3, #2
 800f6fe:	617a      	str	r2, [r7, #20]
 800f700:	881b      	ldrh	r3, [r3, #0]
 800f702:	823b      	strh	r3, [r7, #16]
 800f704:	8a3b      	ldrh	r3, [r7, #16]
 800f706:	0a1b      	lsrs	r3, r3, #8
 800f708:	81fb      	strh	r3, [r7, #14]
 800f70a:	8a3b      	ldrh	r3, [r7, #16]
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f710:	88fa      	ldrh	r2, [r7, #6]
 800f712:	8a79      	ldrh	r1, [r7, #18]
 800f714:	8a3b      	ldrh	r3, [r7, #16]
 800f716:	440b      	add	r3, r1
 800f718:	429a      	cmp	r2, r3
 800f71a:	da49      	bge.n	800f7b0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f71c:	89fb      	ldrh	r3, [r7, #14]
 800f71e:	2b08      	cmp	r3, #8
 800f720:	d84f      	bhi.n	800f7c2 <ff_wtoupper+0xfa>
 800f722:	a201      	add	r2, pc, #4	; (adr r2, 800f728 <ff_wtoupper+0x60>)
 800f724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f728:	0800f74d 	.word	0x0800f74d
 800f72c:	0800f75f 	.word	0x0800f75f
 800f730:	0800f775 	.word	0x0800f775
 800f734:	0800f77d 	.word	0x0800f77d
 800f738:	0800f785 	.word	0x0800f785
 800f73c:	0800f78d 	.word	0x0800f78d
 800f740:	0800f795 	.word	0x0800f795
 800f744:	0800f79d 	.word	0x0800f79d
 800f748:	0800f7a5 	.word	0x0800f7a5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f74c:	88fa      	ldrh	r2, [r7, #6]
 800f74e:	8a7b      	ldrh	r3, [r7, #18]
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	697a      	ldr	r2, [r7, #20]
 800f756:	4413      	add	r3, r2
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	80fb      	strh	r3, [r7, #6]
 800f75c:	e027      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f75e:	88fa      	ldrh	r2, [r7, #6]
 800f760:	8a7b      	ldrh	r3, [r7, #18]
 800f762:	1ad3      	subs	r3, r2, r3
 800f764:	b29b      	uxth	r3, r3
 800f766:	f003 0301 	and.w	r3, r3, #1
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	88fa      	ldrh	r2, [r7, #6]
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	80fb      	strh	r3, [r7, #6]
 800f772:	e01c      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f774:	88fb      	ldrh	r3, [r7, #6]
 800f776:	3b10      	subs	r3, #16
 800f778:	80fb      	strh	r3, [r7, #6]
 800f77a:	e018      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f77c:	88fb      	ldrh	r3, [r7, #6]
 800f77e:	3b20      	subs	r3, #32
 800f780:	80fb      	strh	r3, [r7, #6]
 800f782:	e014      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f784:	88fb      	ldrh	r3, [r7, #6]
 800f786:	3b30      	subs	r3, #48	; 0x30
 800f788:	80fb      	strh	r3, [r7, #6]
 800f78a:	e010      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f78c:	88fb      	ldrh	r3, [r7, #6]
 800f78e:	3b1a      	subs	r3, #26
 800f790:	80fb      	strh	r3, [r7, #6]
 800f792:	e00c      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f794:	88fb      	ldrh	r3, [r7, #6]
 800f796:	3308      	adds	r3, #8
 800f798:	80fb      	strh	r3, [r7, #6]
 800f79a:	e008      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f79c:	88fb      	ldrh	r3, [r7, #6]
 800f79e:	3b50      	subs	r3, #80	; 0x50
 800f7a0:	80fb      	strh	r3, [r7, #6]
 800f7a2:	e004      	b.n	800f7ae <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f7a4:	88fb      	ldrh	r3, [r7, #6]
 800f7a6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f7aa:	80fb      	strh	r3, [r7, #6]
 800f7ac:	bf00      	nop
			}
			break;
 800f7ae:	e008      	b.n	800f7c2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f7b0:	89fb      	ldrh	r3, [r7, #14]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d195      	bne.n	800f6e2 <ff_wtoupper+0x1a>
 800f7b6:	8a3b      	ldrh	r3, [r7, #16]
 800f7b8:	005b      	lsls	r3, r3, #1
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	4413      	add	r3, r2
 800f7be:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f7c0:	e78f      	b.n	800f6e2 <ff_wtoupper+0x1a>
			break;
 800f7c2:	bf00      	nop
	}

	return chr;
 800f7c4:	88fb      	ldrh	r3, [r7, #6]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	371c      	adds	r7, #28
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	08015350 	.word	0x08015350
 800f7d8:	08015544 	.word	0x08015544

0800f7dc <__errno>:
 800f7dc:	4b01      	ldr	r3, [pc, #4]	; (800f7e4 <__errno+0x8>)
 800f7de:	6818      	ldr	r0, [r3, #0]
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	20000058 	.word	0x20000058

0800f7e8 <__libc_init_array>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	4d0d      	ldr	r5, [pc, #52]	; (800f820 <__libc_init_array+0x38>)
 800f7ec:	4c0d      	ldr	r4, [pc, #52]	; (800f824 <__libc_init_array+0x3c>)
 800f7ee:	1b64      	subs	r4, r4, r5
 800f7f0:	10a4      	asrs	r4, r4, #2
 800f7f2:	2600      	movs	r6, #0
 800f7f4:	42a6      	cmp	r6, r4
 800f7f6:	d109      	bne.n	800f80c <__libc_init_array+0x24>
 800f7f8:	4d0b      	ldr	r5, [pc, #44]	; (800f828 <__libc_init_array+0x40>)
 800f7fa:	4c0c      	ldr	r4, [pc, #48]	; (800f82c <__libc_init_array+0x44>)
 800f7fc:	f005 fbe4 	bl	8014fc8 <_init>
 800f800:	1b64      	subs	r4, r4, r5
 800f802:	10a4      	asrs	r4, r4, #2
 800f804:	2600      	movs	r6, #0
 800f806:	42a6      	cmp	r6, r4
 800f808:	d105      	bne.n	800f816 <__libc_init_array+0x2e>
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f810:	4798      	blx	r3
 800f812:	3601      	adds	r6, #1
 800f814:	e7ee      	b.n	800f7f4 <__libc_init_array+0xc>
 800f816:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81a:	4798      	blx	r3
 800f81c:	3601      	adds	r6, #1
 800f81e:	e7f2      	b.n	800f806 <__libc_init_array+0x1e>
 800f820:	08015b50 	.word	0x08015b50
 800f824:	08015b50 	.word	0x08015b50
 800f828:	08015b50 	.word	0x08015b50
 800f82c:	08015b54 	.word	0x08015b54

0800f830 <memset>:
 800f830:	4402      	add	r2, r0
 800f832:	4603      	mov	r3, r0
 800f834:	4293      	cmp	r3, r2
 800f836:	d100      	bne.n	800f83a <memset+0xa>
 800f838:	4770      	bx	lr
 800f83a:	f803 1b01 	strb.w	r1, [r3], #1
 800f83e:	e7f9      	b.n	800f834 <memset+0x4>

0800f840 <__cvt>:
 800f840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f844:	ec55 4b10 	vmov	r4, r5, d0
 800f848:	2d00      	cmp	r5, #0
 800f84a:	460e      	mov	r6, r1
 800f84c:	4619      	mov	r1, r3
 800f84e:	462b      	mov	r3, r5
 800f850:	bfbb      	ittet	lt
 800f852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f856:	461d      	movlt	r5, r3
 800f858:	2300      	movge	r3, #0
 800f85a:	232d      	movlt	r3, #45	; 0x2d
 800f85c:	700b      	strb	r3, [r1, #0]
 800f85e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f864:	4691      	mov	r9, r2
 800f866:	f023 0820 	bic.w	r8, r3, #32
 800f86a:	bfbc      	itt	lt
 800f86c:	4622      	movlt	r2, r4
 800f86e:	4614      	movlt	r4, r2
 800f870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f874:	d005      	beq.n	800f882 <__cvt+0x42>
 800f876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f87a:	d100      	bne.n	800f87e <__cvt+0x3e>
 800f87c:	3601      	adds	r6, #1
 800f87e:	2102      	movs	r1, #2
 800f880:	e000      	b.n	800f884 <__cvt+0x44>
 800f882:	2103      	movs	r1, #3
 800f884:	ab03      	add	r3, sp, #12
 800f886:	9301      	str	r3, [sp, #4]
 800f888:	ab02      	add	r3, sp, #8
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	ec45 4b10 	vmov	d0, r4, r5
 800f890:	4653      	mov	r3, sl
 800f892:	4632      	mov	r2, r6
 800f894:	f001 fe2c 	bl	80114f0 <_dtoa_r>
 800f898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f89c:	4607      	mov	r7, r0
 800f89e:	d102      	bne.n	800f8a6 <__cvt+0x66>
 800f8a0:	f019 0f01 	tst.w	r9, #1
 800f8a4:	d022      	beq.n	800f8ec <__cvt+0xac>
 800f8a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f8aa:	eb07 0906 	add.w	r9, r7, r6
 800f8ae:	d110      	bne.n	800f8d2 <__cvt+0x92>
 800f8b0:	783b      	ldrb	r3, [r7, #0]
 800f8b2:	2b30      	cmp	r3, #48	; 0x30
 800f8b4:	d10a      	bne.n	800f8cc <__cvt+0x8c>
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	4629      	mov	r1, r5
 800f8be:	f7f1 f903 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8c2:	b918      	cbnz	r0, 800f8cc <__cvt+0x8c>
 800f8c4:	f1c6 0601 	rsb	r6, r6, #1
 800f8c8:	f8ca 6000 	str.w	r6, [sl]
 800f8cc:	f8da 3000 	ldr.w	r3, [sl]
 800f8d0:	4499      	add	r9, r3
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	4629      	mov	r1, r5
 800f8da:	f7f1 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8de:	b108      	cbz	r0, 800f8e4 <__cvt+0xa4>
 800f8e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f8e4:	2230      	movs	r2, #48	; 0x30
 800f8e6:	9b03      	ldr	r3, [sp, #12]
 800f8e8:	454b      	cmp	r3, r9
 800f8ea:	d307      	bcc.n	800f8fc <__cvt+0xbc>
 800f8ec:	9b03      	ldr	r3, [sp, #12]
 800f8ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8f0:	1bdb      	subs	r3, r3, r7
 800f8f2:	4638      	mov	r0, r7
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	b004      	add	sp, #16
 800f8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8fc:	1c59      	adds	r1, r3, #1
 800f8fe:	9103      	str	r1, [sp, #12]
 800f900:	701a      	strb	r2, [r3, #0]
 800f902:	e7f0      	b.n	800f8e6 <__cvt+0xa6>

0800f904 <__exponent>:
 800f904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f906:	4603      	mov	r3, r0
 800f908:	2900      	cmp	r1, #0
 800f90a:	bfb8      	it	lt
 800f90c:	4249      	neglt	r1, r1
 800f90e:	f803 2b02 	strb.w	r2, [r3], #2
 800f912:	bfb4      	ite	lt
 800f914:	222d      	movlt	r2, #45	; 0x2d
 800f916:	222b      	movge	r2, #43	; 0x2b
 800f918:	2909      	cmp	r1, #9
 800f91a:	7042      	strb	r2, [r0, #1]
 800f91c:	dd2a      	ble.n	800f974 <__exponent+0x70>
 800f91e:	f10d 0407 	add.w	r4, sp, #7
 800f922:	46a4      	mov	ip, r4
 800f924:	270a      	movs	r7, #10
 800f926:	46a6      	mov	lr, r4
 800f928:	460a      	mov	r2, r1
 800f92a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f92e:	fb07 1516 	mls	r5, r7, r6, r1
 800f932:	3530      	adds	r5, #48	; 0x30
 800f934:	2a63      	cmp	r2, #99	; 0x63
 800f936:	f104 34ff 	add.w	r4, r4, #4294967295
 800f93a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f93e:	4631      	mov	r1, r6
 800f940:	dcf1      	bgt.n	800f926 <__exponent+0x22>
 800f942:	3130      	adds	r1, #48	; 0x30
 800f944:	f1ae 0502 	sub.w	r5, lr, #2
 800f948:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f94c:	1c44      	adds	r4, r0, #1
 800f94e:	4629      	mov	r1, r5
 800f950:	4561      	cmp	r1, ip
 800f952:	d30a      	bcc.n	800f96a <__exponent+0x66>
 800f954:	f10d 0209 	add.w	r2, sp, #9
 800f958:	eba2 020e 	sub.w	r2, r2, lr
 800f95c:	4565      	cmp	r5, ip
 800f95e:	bf88      	it	hi
 800f960:	2200      	movhi	r2, #0
 800f962:	4413      	add	r3, r2
 800f964:	1a18      	subs	r0, r3, r0
 800f966:	b003      	add	sp, #12
 800f968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f96e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f972:	e7ed      	b.n	800f950 <__exponent+0x4c>
 800f974:	2330      	movs	r3, #48	; 0x30
 800f976:	3130      	adds	r1, #48	; 0x30
 800f978:	7083      	strb	r3, [r0, #2]
 800f97a:	70c1      	strb	r1, [r0, #3]
 800f97c:	1d03      	adds	r3, r0, #4
 800f97e:	e7f1      	b.n	800f964 <__exponent+0x60>

0800f980 <_printf_float>:
 800f980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f984:	ed2d 8b02 	vpush	{d8}
 800f988:	b08d      	sub	sp, #52	; 0x34
 800f98a:	460c      	mov	r4, r1
 800f98c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f990:	4616      	mov	r6, r2
 800f992:	461f      	mov	r7, r3
 800f994:	4605      	mov	r5, r0
 800f996:	f002 ff07 	bl	80127a8 <_localeconv_r>
 800f99a:	f8d0 a000 	ldr.w	sl, [r0]
 800f99e:	4650      	mov	r0, sl
 800f9a0:	f7f0 fc16 	bl	80001d0 <strlen>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f9a8:	6823      	ldr	r3, [r4, #0]
 800f9aa:	9305      	str	r3, [sp, #20]
 800f9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f9b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f9b4:	3307      	adds	r3, #7
 800f9b6:	f023 0307 	bic.w	r3, r3, #7
 800f9ba:	f103 0208 	add.w	r2, r3, #8
 800f9be:	f8c8 2000 	str.w	r2, [r8]
 800f9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f9ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f9ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f9d2:	9307      	str	r3, [sp, #28]
 800f9d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f9d8:	ee08 0a10 	vmov	s16, r0
 800f9dc:	4b9f      	ldr	r3, [pc, #636]	; (800fc5c <_printf_float+0x2dc>)
 800f9de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f9e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9e6:	f7f1 f8a1 	bl	8000b2c <__aeabi_dcmpun>
 800f9ea:	bb88      	cbnz	r0, 800fa50 <_printf_float+0xd0>
 800f9ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f9f0:	4b9a      	ldr	r3, [pc, #616]	; (800fc5c <_printf_float+0x2dc>)
 800f9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f6:	f7f1 f87b 	bl	8000af0 <__aeabi_dcmple>
 800f9fa:	bb48      	cbnz	r0, 800fa50 <_printf_float+0xd0>
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	2300      	movs	r3, #0
 800fa00:	4640      	mov	r0, r8
 800fa02:	4649      	mov	r1, r9
 800fa04:	f7f1 f86a 	bl	8000adc <__aeabi_dcmplt>
 800fa08:	b110      	cbz	r0, 800fa10 <_printf_float+0x90>
 800fa0a:	232d      	movs	r3, #45	; 0x2d
 800fa0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa10:	4b93      	ldr	r3, [pc, #588]	; (800fc60 <_printf_float+0x2e0>)
 800fa12:	4894      	ldr	r0, [pc, #592]	; (800fc64 <_printf_float+0x2e4>)
 800fa14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fa18:	bf94      	ite	ls
 800fa1a:	4698      	movls	r8, r3
 800fa1c:	4680      	movhi	r8, r0
 800fa1e:	2303      	movs	r3, #3
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	9b05      	ldr	r3, [sp, #20]
 800fa24:	f023 0204 	bic.w	r2, r3, #4
 800fa28:	6022      	str	r2, [r4, #0]
 800fa2a:	f04f 0900 	mov.w	r9, #0
 800fa2e:	9700      	str	r7, [sp, #0]
 800fa30:	4633      	mov	r3, r6
 800fa32:	aa0b      	add	r2, sp, #44	; 0x2c
 800fa34:	4621      	mov	r1, r4
 800fa36:	4628      	mov	r0, r5
 800fa38:	f000 f9d8 	bl	800fdec <_printf_common>
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	f040 8090 	bne.w	800fb62 <_printf_float+0x1e2>
 800fa42:	f04f 30ff 	mov.w	r0, #4294967295
 800fa46:	b00d      	add	sp, #52	; 0x34
 800fa48:	ecbd 8b02 	vpop	{d8}
 800fa4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa50:	4642      	mov	r2, r8
 800fa52:	464b      	mov	r3, r9
 800fa54:	4640      	mov	r0, r8
 800fa56:	4649      	mov	r1, r9
 800fa58:	f7f1 f868 	bl	8000b2c <__aeabi_dcmpun>
 800fa5c:	b140      	cbz	r0, 800fa70 <_printf_float+0xf0>
 800fa5e:	464b      	mov	r3, r9
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	bfbc      	itt	lt
 800fa64:	232d      	movlt	r3, #45	; 0x2d
 800fa66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fa6a:	487f      	ldr	r0, [pc, #508]	; (800fc68 <_printf_float+0x2e8>)
 800fa6c:	4b7f      	ldr	r3, [pc, #508]	; (800fc6c <_printf_float+0x2ec>)
 800fa6e:	e7d1      	b.n	800fa14 <_printf_float+0x94>
 800fa70:	6863      	ldr	r3, [r4, #4]
 800fa72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fa76:	9206      	str	r2, [sp, #24]
 800fa78:	1c5a      	adds	r2, r3, #1
 800fa7a:	d13f      	bne.n	800fafc <_printf_float+0x17c>
 800fa7c:	2306      	movs	r3, #6
 800fa7e:	6063      	str	r3, [r4, #4]
 800fa80:	9b05      	ldr	r3, [sp, #20]
 800fa82:	6861      	ldr	r1, [r4, #4]
 800fa84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fa88:	2300      	movs	r3, #0
 800fa8a:	9303      	str	r3, [sp, #12]
 800fa8c:	ab0a      	add	r3, sp, #40	; 0x28
 800fa8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fa92:	ab09      	add	r3, sp, #36	; 0x24
 800fa94:	ec49 8b10 	vmov	d0, r8, r9
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	6022      	str	r2, [r4, #0]
 800fa9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800faa0:	4628      	mov	r0, r5
 800faa2:	f7ff fecd 	bl	800f840 <__cvt>
 800faa6:	9b06      	ldr	r3, [sp, #24]
 800faa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800faaa:	2b47      	cmp	r3, #71	; 0x47
 800faac:	4680      	mov	r8, r0
 800faae:	d108      	bne.n	800fac2 <_printf_float+0x142>
 800fab0:	1cc8      	adds	r0, r1, #3
 800fab2:	db02      	blt.n	800faba <_printf_float+0x13a>
 800fab4:	6863      	ldr	r3, [r4, #4]
 800fab6:	4299      	cmp	r1, r3
 800fab8:	dd41      	ble.n	800fb3e <_printf_float+0x1be>
 800faba:	f1ab 0b02 	sub.w	fp, fp, #2
 800fabe:	fa5f fb8b 	uxtb.w	fp, fp
 800fac2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fac6:	d820      	bhi.n	800fb0a <_printf_float+0x18a>
 800fac8:	3901      	subs	r1, #1
 800faca:	465a      	mov	r2, fp
 800facc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fad0:	9109      	str	r1, [sp, #36]	; 0x24
 800fad2:	f7ff ff17 	bl	800f904 <__exponent>
 800fad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fad8:	1813      	adds	r3, r2, r0
 800fada:	2a01      	cmp	r2, #1
 800fadc:	4681      	mov	r9, r0
 800fade:	6123      	str	r3, [r4, #16]
 800fae0:	dc02      	bgt.n	800fae8 <_printf_float+0x168>
 800fae2:	6822      	ldr	r2, [r4, #0]
 800fae4:	07d2      	lsls	r2, r2, #31
 800fae6:	d501      	bpl.n	800faec <_printf_float+0x16c>
 800fae8:	3301      	adds	r3, #1
 800faea:	6123      	str	r3, [r4, #16]
 800faec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d09c      	beq.n	800fa2e <_printf_float+0xae>
 800faf4:	232d      	movs	r3, #45	; 0x2d
 800faf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fafa:	e798      	b.n	800fa2e <_printf_float+0xae>
 800fafc:	9a06      	ldr	r2, [sp, #24]
 800fafe:	2a47      	cmp	r2, #71	; 0x47
 800fb00:	d1be      	bne.n	800fa80 <_printf_float+0x100>
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d1bc      	bne.n	800fa80 <_printf_float+0x100>
 800fb06:	2301      	movs	r3, #1
 800fb08:	e7b9      	b.n	800fa7e <_printf_float+0xfe>
 800fb0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fb0e:	d118      	bne.n	800fb42 <_printf_float+0x1c2>
 800fb10:	2900      	cmp	r1, #0
 800fb12:	6863      	ldr	r3, [r4, #4]
 800fb14:	dd0b      	ble.n	800fb2e <_printf_float+0x1ae>
 800fb16:	6121      	str	r1, [r4, #16]
 800fb18:	b913      	cbnz	r3, 800fb20 <_printf_float+0x1a0>
 800fb1a:	6822      	ldr	r2, [r4, #0]
 800fb1c:	07d0      	lsls	r0, r2, #31
 800fb1e:	d502      	bpl.n	800fb26 <_printf_float+0x1a6>
 800fb20:	3301      	adds	r3, #1
 800fb22:	440b      	add	r3, r1
 800fb24:	6123      	str	r3, [r4, #16]
 800fb26:	65a1      	str	r1, [r4, #88]	; 0x58
 800fb28:	f04f 0900 	mov.w	r9, #0
 800fb2c:	e7de      	b.n	800faec <_printf_float+0x16c>
 800fb2e:	b913      	cbnz	r3, 800fb36 <_printf_float+0x1b6>
 800fb30:	6822      	ldr	r2, [r4, #0]
 800fb32:	07d2      	lsls	r2, r2, #31
 800fb34:	d501      	bpl.n	800fb3a <_printf_float+0x1ba>
 800fb36:	3302      	adds	r3, #2
 800fb38:	e7f4      	b.n	800fb24 <_printf_float+0x1a4>
 800fb3a:	2301      	movs	r3, #1
 800fb3c:	e7f2      	b.n	800fb24 <_printf_float+0x1a4>
 800fb3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fb42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb44:	4299      	cmp	r1, r3
 800fb46:	db05      	blt.n	800fb54 <_printf_float+0x1d4>
 800fb48:	6823      	ldr	r3, [r4, #0]
 800fb4a:	6121      	str	r1, [r4, #16]
 800fb4c:	07d8      	lsls	r0, r3, #31
 800fb4e:	d5ea      	bpl.n	800fb26 <_printf_float+0x1a6>
 800fb50:	1c4b      	adds	r3, r1, #1
 800fb52:	e7e7      	b.n	800fb24 <_printf_float+0x1a4>
 800fb54:	2900      	cmp	r1, #0
 800fb56:	bfd4      	ite	le
 800fb58:	f1c1 0202 	rsble	r2, r1, #2
 800fb5c:	2201      	movgt	r2, #1
 800fb5e:	4413      	add	r3, r2
 800fb60:	e7e0      	b.n	800fb24 <_printf_float+0x1a4>
 800fb62:	6823      	ldr	r3, [r4, #0]
 800fb64:	055a      	lsls	r2, r3, #21
 800fb66:	d407      	bmi.n	800fb78 <_printf_float+0x1f8>
 800fb68:	6923      	ldr	r3, [r4, #16]
 800fb6a:	4642      	mov	r2, r8
 800fb6c:	4631      	mov	r1, r6
 800fb6e:	4628      	mov	r0, r5
 800fb70:	47b8      	blx	r7
 800fb72:	3001      	adds	r0, #1
 800fb74:	d12c      	bne.n	800fbd0 <_printf_float+0x250>
 800fb76:	e764      	b.n	800fa42 <_printf_float+0xc2>
 800fb78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fb7c:	f240 80e0 	bls.w	800fd40 <_printf_float+0x3c0>
 800fb80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fb84:	2200      	movs	r2, #0
 800fb86:	2300      	movs	r3, #0
 800fb88:	f7f0 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	d034      	beq.n	800fbfa <_printf_float+0x27a>
 800fb90:	4a37      	ldr	r2, [pc, #220]	; (800fc70 <_printf_float+0x2f0>)
 800fb92:	2301      	movs	r3, #1
 800fb94:	4631      	mov	r1, r6
 800fb96:	4628      	mov	r0, r5
 800fb98:	47b8      	blx	r7
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	f43f af51 	beq.w	800fa42 <_printf_float+0xc2>
 800fba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fba4:	429a      	cmp	r2, r3
 800fba6:	db02      	blt.n	800fbae <_printf_float+0x22e>
 800fba8:	6823      	ldr	r3, [r4, #0]
 800fbaa:	07d8      	lsls	r0, r3, #31
 800fbac:	d510      	bpl.n	800fbd0 <_printf_float+0x250>
 800fbae:	ee18 3a10 	vmov	r3, s16
 800fbb2:	4652      	mov	r2, sl
 800fbb4:	4631      	mov	r1, r6
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	47b8      	blx	r7
 800fbba:	3001      	adds	r0, #1
 800fbbc:	f43f af41 	beq.w	800fa42 <_printf_float+0xc2>
 800fbc0:	f04f 0800 	mov.w	r8, #0
 800fbc4:	f104 091a 	add.w	r9, r4, #26
 800fbc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbca:	3b01      	subs	r3, #1
 800fbcc:	4543      	cmp	r3, r8
 800fbce:	dc09      	bgt.n	800fbe4 <_printf_float+0x264>
 800fbd0:	6823      	ldr	r3, [r4, #0]
 800fbd2:	079b      	lsls	r3, r3, #30
 800fbd4:	f100 8105 	bmi.w	800fde2 <_printf_float+0x462>
 800fbd8:	68e0      	ldr	r0, [r4, #12]
 800fbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbdc:	4298      	cmp	r0, r3
 800fbde:	bfb8      	it	lt
 800fbe0:	4618      	movlt	r0, r3
 800fbe2:	e730      	b.n	800fa46 <_printf_float+0xc6>
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	464a      	mov	r2, r9
 800fbe8:	4631      	mov	r1, r6
 800fbea:	4628      	mov	r0, r5
 800fbec:	47b8      	blx	r7
 800fbee:	3001      	adds	r0, #1
 800fbf0:	f43f af27 	beq.w	800fa42 <_printf_float+0xc2>
 800fbf4:	f108 0801 	add.w	r8, r8, #1
 800fbf8:	e7e6      	b.n	800fbc8 <_printf_float+0x248>
 800fbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	dc39      	bgt.n	800fc74 <_printf_float+0x2f4>
 800fc00:	4a1b      	ldr	r2, [pc, #108]	; (800fc70 <_printf_float+0x2f0>)
 800fc02:	2301      	movs	r3, #1
 800fc04:	4631      	mov	r1, r6
 800fc06:	4628      	mov	r0, r5
 800fc08:	47b8      	blx	r7
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	f43f af19 	beq.w	800fa42 <_printf_float+0xc2>
 800fc10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fc14:	4313      	orrs	r3, r2
 800fc16:	d102      	bne.n	800fc1e <_printf_float+0x29e>
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	07d9      	lsls	r1, r3, #31
 800fc1c:	d5d8      	bpl.n	800fbd0 <_printf_float+0x250>
 800fc1e:	ee18 3a10 	vmov	r3, s16
 800fc22:	4652      	mov	r2, sl
 800fc24:	4631      	mov	r1, r6
 800fc26:	4628      	mov	r0, r5
 800fc28:	47b8      	blx	r7
 800fc2a:	3001      	adds	r0, #1
 800fc2c:	f43f af09 	beq.w	800fa42 <_printf_float+0xc2>
 800fc30:	f04f 0900 	mov.w	r9, #0
 800fc34:	f104 0a1a 	add.w	sl, r4, #26
 800fc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc3a:	425b      	negs	r3, r3
 800fc3c:	454b      	cmp	r3, r9
 800fc3e:	dc01      	bgt.n	800fc44 <_printf_float+0x2c4>
 800fc40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc42:	e792      	b.n	800fb6a <_printf_float+0x1ea>
 800fc44:	2301      	movs	r3, #1
 800fc46:	4652      	mov	r2, sl
 800fc48:	4631      	mov	r1, r6
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	47b8      	blx	r7
 800fc4e:	3001      	adds	r0, #1
 800fc50:	f43f aef7 	beq.w	800fa42 <_printf_float+0xc2>
 800fc54:	f109 0901 	add.w	r9, r9, #1
 800fc58:	e7ee      	b.n	800fc38 <_printf_float+0x2b8>
 800fc5a:	bf00      	nop
 800fc5c:	7fefffff 	.word	0x7fefffff
 800fc60:	08015604 	.word	0x08015604
 800fc64:	08015608 	.word	0x08015608
 800fc68:	08015610 	.word	0x08015610
 800fc6c:	0801560c 	.word	0x0801560c
 800fc70:	08015614 	.word	0x08015614
 800fc74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fc76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	bfa8      	it	ge
 800fc7c:	461a      	movge	r2, r3
 800fc7e:	2a00      	cmp	r2, #0
 800fc80:	4691      	mov	r9, r2
 800fc82:	dc37      	bgt.n	800fcf4 <_printf_float+0x374>
 800fc84:	f04f 0b00 	mov.w	fp, #0
 800fc88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc8c:	f104 021a 	add.w	r2, r4, #26
 800fc90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fc92:	9305      	str	r3, [sp, #20]
 800fc94:	eba3 0309 	sub.w	r3, r3, r9
 800fc98:	455b      	cmp	r3, fp
 800fc9a:	dc33      	bgt.n	800fd04 <_printf_float+0x384>
 800fc9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fca0:	429a      	cmp	r2, r3
 800fca2:	db3b      	blt.n	800fd1c <_printf_float+0x39c>
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	07da      	lsls	r2, r3, #31
 800fca8:	d438      	bmi.n	800fd1c <_printf_float+0x39c>
 800fcaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fcac:	9b05      	ldr	r3, [sp, #20]
 800fcae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fcb0:	1ad3      	subs	r3, r2, r3
 800fcb2:	eba2 0901 	sub.w	r9, r2, r1
 800fcb6:	4599      	cmp	r9, r3
 800fcb8:	bfa8      	it	ge
 800fcba:	4699      	movge	r9, r3
 800fcbc:	f1b9 0f00 	cmp.w	r9, #0
 800fcc0:	dc35      	bgt.n	800fd2e <_printf_float+0x3ae>
 800fcc2:	f04f 0800 	mov.w	r8, #0
 800fcc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fcca:	f104 0a1a 	add.w	sl, r4, #26
 800fcce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fcd2:	1a9b      	subs	r3, r3, r2
 800fcd4:	eba3 0309 	sub.w	r3, r3, r9
 800fcd8:	4543      	cmp	r3, r8
 800fcda:	f77f af79 	ble.w	800fbd0 <_printf_float+0x250>
 800fcde:	2301      	movs	r3, #1
 800fce0:	4652      	mov	r2, sl
 800fce2:	4631      	mov	r1, r6
 800fce4:	4628      	mov	r0, r5
 800fce6:	47b8      	blx	r7
 800fce8:	3001      	adds	r0, #1
 800fcea:	f43f aeaa 	beq.w	800fa42 <_printf_float+0xc2>
 800fcee:	f108 0801 	add.w	r8, r8, #1
 800fcf2:	e7ec      	b.n	800fcce <_printf_float+0x34e>
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	4631      	mov	r1, r6
 800fcf8:	4642      	mov	r2, r8
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	47b8      	blx	r7
 800fcfe:	3001      	adds	r0, #1
 800fd00:	d1c0      	bne.n	800fc84 <_printf_float+0x304>
 800fd02:	e69e      	b.n	800fa42 <_printf_float+0xc2>
 800fd04:	2301      	movs	r3, #1
 800fd06:	4631      	mov	r1, r6
 800fd08:	4628      	mov	r0, r5
 800fd0a:	9205      	str	r2, [sp, #20]
 800fd0c:	47b8      	blx	r7
 800fd0e:	3001      	adds	r0, #1
 800fd10:	f43f ae97 	beq.w	800fa42 <_printf_float+0xc2>
 800fd14:	9a05      	ldr	r2, [sp, #20]
 800fd16:	f10b 0b01 	add.w	fp, fp, #1
 800fd1a:	e7b9      	b.n	800fc90 <_printf_float+0x310>
 800fd1c:	ee18 3a10 	vmov	r3, s16
 800fd20:	4652      	mov	r2, sl
 800fd22:	4631      	mov	r1, r6
 800fd24:	4628      	mov	r0, r5
 800fd26:	47b8      	blx	r7
 800fd28:	3001      	adds	r0, #1
 800fd2a:	d1be      	bne.n	800fcaa <_printf_float+0x32a>
 800fd2c:	e689      	b.n	800fa42 <_printf_float+0xc2>
 800fd2e:	9a05      	ldr	r2, [sp, #20]
 800fd30:	464b      	mov	r3, r9
 800fd32:	4442      	add	r2, r8
 800fd34:	4631      	mov	r1, r6
 800fd36:	4628      	mov	r0, r5
 800fd38:	47b8      	blx	r7
 800fd3a:	3001      	adds	r0, #1
 800fd3c:	d1c1      	bne.n	800fcc2 <_printf_float+0x342>
 800fd3e:	e680      	b.n	800fa42 <_printf_float+0xc2>
 800fd40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd42:	2a01      	cmp	r2, #1
 800fd44:	dc01      	bgt.n	800fd4a <_printf_float+0x3ca>
 800fd46:	07db      	lsls	r3, r3, #31
 800fd48:	d538      	bpl.n	800fdbc <_printf_float+0x43c>
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	4642      	mov	r2, r8
 800fd4e:	4631      	mov	r1, r6
 800fd50:	4628      	mov	r0, r5
 800fd52:	47b8      	blx	r7
 800fd54:	3001      	adds	r0, #1
 800fd56:	f43f ae74 	beq.w	800fa42 <_printf_float+0xc2>
 800fd5a:	ee18 3a10 	vmov	r3, s16
 800fd5e:	4652      	mov	r2, sl
 800fd60:	4631      	mov	r1, r6
 800fd62:	4628      	mov	r0, r5
 800fd64:	47b8      	blx	r7
 800fd66:	3001      	adds	r0, #1
 800fd68:	f43f ae6b 	beq.w	800fa42 <_printf_float+0xc2>
 800fd6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fd70:	2200      	movs	r2, #0
 800fd72:	2300      	movs	r3, #0
 800fd74:	f7f0 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd78:	b9d8      	cbnz	r0, 800fdb2 <_printf_float+0x432>
 800fd7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd7c:	f108 0201 	add.w	r2, r8, #1
 800fd80:	3b01      	subs	r3, #1
 800fd82:	4631      	mov	r1, r6
 800fd84:	4628      	mov	r0, r5
 800fd86:	47b8      	blx	r7
 800fd88:	3001      	adds	r0, #1
 800fd8a:	d10e      	bne.n	800fdaa <_printf_float+0x42a>
 800fd8c:	e659      	b.n	800fa42 <_printf_float+0xc2>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	4652      	mov	r2, sl
 800fd92:	4631      	mov	r1, r6
 800fd94:	4628      	mov	r0, r5
 800fd96:	47b8      	blx	r7
 800fd98:	3001      	adds	r0, #1
 800fd9a:	f43f ae52 	beq.w	800fa42 <_printf_float+0xc2>
 800fd9e:	f108 0801 	add.w	r8, r8, #1
 800fda2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fda4:	3b01      	subs	r3, #1
 800fda6:	4543      	cmp	r3, r8
 800fda8:	dcf1      	bgt.n	800fd8e <_printf_float+0x40e>
 800fdaa:	464b      	mov	r3, r9
 800fdac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fdb0:	e6dc      	b.n	800fb6c <_printf_float+0x1ec>
 800fdb2:	f04f 0800 	mov.w	r8, #0
 800fdb6:	f104 0a1a 	add.w	sl, r4, #26
 800fdba:	e7f2      	b.n	800fda2 <_printf_float+0x422>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	4642      	mov	r2, r8
 800fdc0:	e7df      	b.n	800fd82 <_printf_float+0x402>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	464a      	mov	r2, r9
 800fdc6:	4631      	mov	r1, r6
 800fdc8:	4628      	mov	r0, r5
 800fdca:	47b8      	blx	r7
 800fdcc:	3001      	adds	r0, #1
 800fdce:	f43f ae38 	beq.w	800fa42 <_printf_float+0xc2>
 800fdd2:	f108 0801 	add.w	r8, r8, #1
 800fdd6:	68e3      	ldr	r3, [r4, #12]
 800fdd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fdda:	1a5b      	subs	r3, r3, r1
 800fddc:	4543      	cmp	r3, r8
 800fdde:	dcf0      	bgt.n	800fdc2 <_printf_float+0x442>
 800fde0:	e6fa      	b.n	800fbd8 <_printf_float+0x258>
 800fde2:	f04f 0800 	mov.w	r8, #0
 800fde6:	f104 0919 	add.w	r9, r4, #25
 800fdea:	e7f4      	b.n	800fdd6 <_printf_float+0x456>

0800fdec <_printf_common>:
 800fdec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdf0:	4616      	mov	r6, r2
 800fdf2:	4699      	mov	r9, r3
 800fdf4:	688a      	ldr	r2, [r1, #8]
 800fdf6:	690b      	ldr	r3, [r1, #16]
 800fdf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	bfb8      	it	lt
 800fe00:	4613      	movlt	r3, r2
 800fe02:	6033      	str	r3, [r6, #0]
 800fe04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe08:	4607      	mov	r7, r0
 800fe0a:	460c      	mov	r4, r1
 800fe0c:	b10a      	cbz	r2, 800fe12 <_printf_common+0x26>
 800fe0e:	3301      	adds	r3, #1
 800fe10:	6033      	str	r3, [r6, #0]
 800fe12:	6823      	ldr	r3, [r4, #0]
 800fe14:	0699      	lsls	r1, r3, #26
 800fe16:	bf42      	ittt	mi
 800fe18:	6833      	ldrmi	r3, [r6, #0]
 800fe1a:	3302      	addmi	r3, #2
 800fe1c:	6033      	strmi	r3, [r6, #0]
 800fe1e:	6825      	ldr	r5, [r4, #0]
 800fe20:	f015 0506 	ands.w	r5, r5, #6
 800fe24:	d106      	bne.n	800fe34 <_printf_common+0x48>
 800fe26:	f104 0a19 	add.w	sl, r4, #25
 800fe2a:	68e3      	ldr	r3, [r4, #12]
 800fe2c:	6832      	ldr	r2, [r6, #0]
 800fe2e:	1a9b      	subs	r3, r3, r2
 800fe30:	42ab      	cmp	r3, r5
 800fe32:	dc26      	bgt.n	800fe82 <_printf_common+0x96>
 800fe34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe38:	1e13      	subs	r3, r2, #0
 800fe3a:	6822      	ldr	r2, [r4, #0]
 800fe3c:	bf18      	it	ne
 800fe3e:	2301      	movne	r3, #1
 800fe40:	0692      	lsls	r2, r2, #26
 800fe42:	d42b      	bmi.n	800fe9c <_printf_common+0xb0>
 800fe44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe48:	4649      	mov	r1, r9
 800fe4a:	4638      	mov	r0, r7
 800fe4c:	47c0      	blx	r8
 800fe4e:	3001      	adds	r0, #1
 800fe50:	d01e      	beq.n	800fe90 <_printf_common+0xa4>
 800fe52:	6823      	ldr	r3, [r4, #0]
 800fe54:	68e5      	ldr	r5, [r4, #12]
 800fe56:	6832      	ldr	r2, [r6, #0]
 800fe58:	f003 0306 	and.w	r3, r3, #6
 800fe5c:	2b04      	cmp	r3, #4
 800fe5e:	bf08      	it	eq
 800fe60:	1aad      	subeq	r5, r5, r2
 800fe62:	68a3      	ldr	r3, [r4, #8]
 800fe64:	6922      	ldr	r2, [r4, #16]
 800fe66:	bf0c      	ite	eq
 800fe68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe6c:	2500      	movne	r5, #0
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	bfc4      	itt	gt
 800fe72:	1a9b      	subgt	r3, r3, r2
 800fe74:	18ed      	addgt	r5, r5, r3
 800fe76:	2600      	movs	r6, #0
 800fe78:	341a      	adds	r4, #26
 800fe7a:	42b5      	cmp	r5, r6
 800fe7c:	d11a      	bne.n	800feb4 <_printf_common+0xc8>
 800fe7e:	2000      	movs	r0, #0
 800fe80:	e008      	b.n	800fe94 <_printf_common+0xa8>
 800fe82:	2301      	movs	r3, #1
 800fe84:	4652      	mov	r2, sl
 800fe86:	4649      	mov	r1, r9
 800fe88:	4638      	mov	r0, r7
 800fe8a:	47c0      	blx	r8
 800fe8c:	3001      	adds	r0, #1
 800fe8e:	d103      	bne.n	800fe98 <_printf_common+0xac>
 800fe90:	f04f 30ff 	mov.w	r0, #4294967295
 800fe94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe98:	3501      	adds	r5, #1
 800fe9a:	e7c6      	b.n	800fe2a <_printf_common+0x3e>
 800fe9c:	18e1      	adds	r1, r4, r3
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	2030      	movs	r0, #48	; 0x30
 800fea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fea6:	4422      	add	r2, r4
 800fea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800feac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800feb0:	3302      	adds	r3, #2
 800feb2:	e7c7      	b.n	800fe44 <_printf_common+0x58>
 800feb4:	2301      	movs	r3, #1
 800feb6:	4622      	mov	r2, r4
 800feb8:	4649      	mov	r1, r9
 800feba:	4638      	mov	r0, r7
 800febc:	47c0      	blx	r8
 800febe:	3001      	adds	r0, #1
 800fec0:	d0e6      	beq.n	800fe90 <_printf_common+0xa4>
 800fec2:	3601      	adds	r6, #1
 800fec4:	e7d9      	b.n	800fe7a <_printf_common+0x8e>
	...

0800fec8 <_printf_i>:
 800fec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fecc:	460c      	mov	r4, r1
 800fece:	4691      	mov	r9, r2
 800fed0:	7e27      	ldrb	r7, [r4, #24]
 800fed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fed4:	2f78      	cmp	r7, #120	; 0x78
 800fed6:	4680      	mov	r8, r0
 800fed8:	469a      	mov	sl, r3
 800feda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fede:	d807      	bhi.n	800fef0 <_printf_i+0x28>
 800fee0:	2f62      	cmp	r7, #98	; 0x62
 800fee2:	d80a      	bhi.n	800fefa <_printf_i+0x32>
 800fee4:	2f00      	cmp	r7, #0
 800fee6:	f000 80d8 	beq.w	801009a <_printf_i+0x1d2>
 800feea:	2f58      	cmp	r7, #88	; 0x58
 800feec:	f000 80a3 	beq.w	8010036 <_printf_i+0x16e>
 800fef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fef8:	e03a      	b.n	800ff70 <_printf_i+0xa8>
 800fefa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fefe:	2b15      	cmp	r3, #21
 800ff00:	d8f6      	bhi.n	800fef0 <_printf_i+0x28>
 800ff02:	a001      	add	r0, pc, #4	; (adr r0, 800ff08 <_printf_i+0x40>)
 800ff04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ff08:	0800ff61 	.word	0x0800ff61
 800ff0c:	0800ff75 	.word	0x0800ff75
 800ff10:	0800fef1 	.word	0x0800fef1
 800ff14:	0800fef1 	.word	0x0800fef1
 800ff18:	0800fef1 	.word	0x0800fef1
 800ff1c:	0800fef1 	.word	0x0800fef1
 800ff20:	0800ff75 	.word	0x0800ff75
 800ff24:	0800fef1 	.word	0x0800fef1
 800ff28:	0800fef1 	.word	0x0800fef1
 800ff2c:	0800fef1 	.word	0x0800fef1
 800ff30:	0800fef1 	.word	0x0800fef1
 800ff34:	08010081 	.word	0x08010081
 800ff38:	0800ffa5 	.word	0x0800ffa5
 800ff3c:	08010063 	.word	0x08010063
 800ff40:	0800fef1 	.word	0x0800fef1
 800ff44:	0800fef1 	.word	0x0800fef1
 800ff48:	080100a3 	.word	0x080100a3
 800ff4c:	0800fef1 	.word	0x0800fef1
 800ff50:	0800ffa5 	.word	0x0800ffa5
 800ff54:	0800fef1 	.word	0x0800fef1
 800ff58:	0800fef1 	.word	0x0800fef1
 800ff5c:	0801006b 	.word	0x0801006b
 800ff60:	680b      	ldr	r3, [r1, #0]
 800ff62:	1d1a      	adds	r2, r3, #4
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	600a      	str	r2, [r1, #0]
 800ff68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ff6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff70:	2301      	movs	r3, #1
 800ff72:	e0a3      	b.n	80100bc <_printf_i+0x1f4>
 800ff74:	6825      	ldr	r5, [r4, #0]
 800ff76:	6808      	ldr	r0, [r1, #0]
 800ff78:	062e      	lsls	r6, r5, #24
 800ff7a:	f100 0304 	add.w	r3, r0, #4
 800ff7e:	d50a      	bpl.n	800ff96 <_printf_i+0xce>
 800ff80:	6805      	ldr	r5, [r0, #0]
 800ff82:	600b      	str	r3, [r1, #0]
 800ff84:	2d00      	cmp	r5, #0
 800ff86:	da03      	bge.n	800ff90 <_printf_i+0xc8>
 800ff88:	232d      	movs	r3, #45	; 0x2d
 800ff8a:	426d      	negs	r5, r5
 800ff8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff90:	485e      	ldr	r0, [pc, #376]	; (801010c <_printf_i+0x244>)
 800ff92:	230a      	movs	r3, #10
 800ff94:	e019      	b.n	800ffca <_printf_i+0x102>
 800ff96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ff9a:	6805      	ldr	r5, [r0, #0]
 800ff9c:	600b      	str	r3, [r1, #0]
 800ff9e:	bf18      	it	ne
 800ffa0:	b22d      	sxthne	r5, r5
 800ffa2:	e7ef      	b.n	800ff84 <_printf_i+0xbc>
 800ffa4:	680b      	ldr	r3, [r1, #0]
 800ffa6:	6825      	ldr	r5, [r4, #0]
 800ffa8:	1d18      	adds	r0, r3, #4
 800ffaa:	6008      	str	r0, [r1, #0]
 800ffac:	0628      	lsls	r0, r5, #24
 800ffae:	d501      	bpl.n	800ffb4 <_printf_i+0xec>
 800ffb0:	681d      	ldr	r5, [r3, #0]
 800ffb2:	e002      	b.n	800ffba <_printf_i+0xf2>
 800ffb4:	0669      	lsls	r1, r5, #25
 800ffb6:	d5fb      	bpl.n	800ffb0 <_printf_i+0xe8>
 800ffb8:	881d      	ldrh	r5, [r3, #0]
 800ffba:	4854      	ldr	r0, [pc, #336]	; (801010c <_printf_i+0x244>)
 800ffbc:	2f6f      	cmp	r7, #111	; 0x6f
 800ffbe:	bf0c      	ite	eq
 800ffc0:	2308      	moveq	r3, #8
 800ffc2:	230a      	movne	r3, #10
 800ffc4:	2100      	movs	r1, #0
 800ffc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ffca:	6866      	ldr	r6, [r4, #4]
 800ffcc:	60a6      	str	r6, [r4, #8]
 800ffce:	2e00      	cmp	r6, #0
 800ffd0:	bfa2      	ittt	ge
 800ffd2:	6821      	ldrge	r1, [r4, #0]
 800ffd4:	f021 0104 	bicge.w	r1, r1, #4
 800ffd8:	6021      	strge	r1, [r4, #0]
 800ffda:	b90d      	cbnz	r5, 800ffe0 <_printf_i+0x118>
 800ffdc:	2e00      	cmp	r6, #0
 800ffde:	d04d      	beq.n	801007c <_printf_i+0x1b4>
 800ffe0:	4616      	mov	r6, r2
 800ffe2:	fbb5 f1f3 	udiv	r1, r5, r3
 800ffe6:	fb03 5711 	mls	r7, r3, r1, r5
 800ffea:	5dc7      	ldrb	r7, [r0, r7]
 800ffec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fff0:	462f      	mov	r7, r5
 800fff2:	42bb      	cmp	r3, r7
 800fff4:	460d      	mov	r5, r1
 800fff6:	d9f4      	bls.n	800ffe2 <_printf_i+0x11a>
 800fff8:	2b08      	cmp	r3, #8
 800fffa:	d10b      	bne.n	8010014 <_printf_i+0x14c>
 800fffc:	6823      	ldr	r3, [r4, #0]
 800fffe:	07df      	lsls	r7, r3, #31
 8010000:	d508      	bpl.n	8010014 <_printf_i+0x14c>
 8010002:	6923      	ldr	r3, [r4, #16]
 8010004:	6861      	ldr	r1, [r4, #4]
 8010006:	4299      	cmp	r1, r3
 8010008:	bfde      	ittt	le
 801000a:	2330      	movle	r3, #48	; 0x30
 801000c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010010:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010014:	1b92      	subs	r2, r2, r6
 8010016:	6122      	str	r2, [r4, #16]
 8010018:	f8cd a000 	str.w	sl, [sp]
 801001c:	464b      	mov	r3, r9
 801001e:	aa03      	add	r2, sp, #12
 8010020:	4621      	mov	r1, r4
 8010022:	4640      	mov	r0, r8
 8010024:	f7ff fee2 	bl	800fdec <_printf_common>
 8010028:	3001      	adds	r0, #1
 801002a:	d14c      	bne.n	80100c6 <_printf_i+0x1fe>
 801002c:	f04f 30ff 	mov.w	r0, #4294967295
 8010030:	b004      	add	sp, #16
 8010032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010036:	4835      	ldr	r0, [pc, #212]	; (801010c <_printf_i+0x244>)
 8010038:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801003c:	6823      	ldr	r3, [r4, #0]
 801003e:	680e      	ldr	r6, [r1, #0]
 8010040:	061f      	lsls	r7, r3, #24
 8010042:	f856 5b04 	ldr.w	r5, [r6], #4
 8010046:	600e      	str	r6, [r1, #0]
 8010048:	d514      	bpl.n	8010074 <_printf_i+0x1ac>
 801004a:	07d9      	lsls	r1, r3, #31
 801004c:	bf44      	itt	mi
 801004e:	f043 0320 	orrmi.w	r3, r3, #32
 8010052:	6023      	strmi	r3, [r4, #0]
 8010054:	b91d      	cbnz	r5, 801005e <_printf_i+0x196>
 8010056:	6823      	ldr	r3, [r4, #0]
 8010058:	f023 0320 	bic.w	r3, r3, #32
 801005c:	6023      	str	r3, [r4, #0]
 801005e:	2310      	movs	r3, #16
 8010060:	e7b0      	b.n	800ffc4 <_printf_i+0xfc>
 8010062:	6823      	ldr	r3, [r4, #0]
 8010064:	f043 0320 	orr.w	r3, r3, #32
 8010068:	6023      	str	r3, [r4, #0]
 801006a:	2378      	movs	r3, #120	; 0x78
 801006c:	4828      	ldr	r0, [pc, #160]	; (8010110 <_printf_i+0x248>)
 801006e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010072:	e7e3      	b.n	801003c <_printf_i+0x174>
 8010074:	065e      	lsls	r6, r3, #25
 8010076:	bf48      	it	mi
 8010078:	b2ad      	uxthmi	r5, r5
 801007a:	e7e6      	b.n	801004a <_printf_i+0x182>
 801007c:	4616      	mov	r6, r2
 801007e:	e7bb      	b.n	800fff8 <_printf_i+0x130>
 8010080:	680b      	ldr	r3, [r1, #0]
 8010082:	6826      	ldr	r6, [r4, #0]
 8010084:	6960      	ldr	r0, [r4, #20]
 8010086:	1d1d      	adds	r5, r3, #4
 8010088:	600d      	str	r5, [r1, #0]
 801008a:	0635      	lsls	r5, r6, #24
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	d501      	bpl.n	8010094 <_printf_i+0x1cc>
 8010090:	6018      	str	r0, [r3, #0]
 8010092:	e002      	b.n	801009a <_printf_i+0x1d2>
 8010094:	0671      	lsls	r1, r6, #25
 8010096:	d5fb      	bpl.n	8010090 <_printf_i+0x1c8>
 8010098:	8018      	strh	r0, [r3, #0]
 801009a:	2300      	movs	r3, #0
 801009c:	6123      	str	r3, [r4, #16]
 801009e:	4616      	mov	r6, r2
 80100a0:	e7ba      	b.n	8010018 <_printf_i+0x150>
 80100a2:	680b      	ldr	r3, [r1, #0]
 80100a4:	1d1a      	adds	r2, r3, #4
 80100a6:	600a      	str	r2, [r1, #0]
 80100a8:	681e      	ldr	r6, [r3, #0]
 80100aa:	6862      	ldr	r2, [r4, #4]
 80100ac:	2100      	movs	r1, #0
 80100ae:	4630      	mov	r0, r6
 80100b0:	f7f0 f896 	bl	80001e0 <memchr>
 80100b4:	b108      	cbz	r0, 80100ba <_printf_i+0x1f2>
 80100b6:	1b80      	subs	r0, r0, r6
 80100b8:	6060      	str	r0, [r4, #4]
 80100ba:	6863      	ldr	r3, [r4, #4]
 80100bc:	6123      	str	r3, [r4, #16]
 80100be:	2300      	movs	r3, #0
 80100c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100c4:	e7a8      	b.n	8010018 <_printf_i+0x150>
 80100c6:	6923      	ldr	r3, [r4, #16]
 80100c8:	4632      	mov	r2, r6
 80100ca:	4649      	mov	r1, r9
 80100cc:	4640      	mov	r0, r8
 80100ce:	47d0      	blx	sl
 80100d0:	3001      	adds	r0, #1
 80100d2:	d0ab      	beq.n	801002c <_printf_i+0x164>
 80100d4:	6823      	ldr	r3, [r4, #0]
 80100d6:	079b      	lsls	r3, r3, #30
 80100d8:	d413      	bmi.n	8010102 <_printf_i+0x23a>
 80100da:	68e0      	ldr	r0, [r4, #12]
 80100dc:	9b03      	ldr	r3, [sp, #12]
 80100de:	4298      	cmp	r0, r3
 80100e0:	bfb8      	it	lt
 80100e2:	4618      	movlt	r0, r3
 80100e4:	e7a4      	b.n	8010030 <_printf_i+0x168>
 80100e6:	2301      	movs	r3, #1
 80100e8:	4632      	mov	r2, r6
 80100ea:	4649      	mov	r1, r9
 80100ec:	4640      	mov	r0, r8
 80100ee:	47d0      	blx	sl
 80100f0:	3001      	adds	r0, #1
 80100f2:	d09b      	beq.n	801002c <_printf_i+0x164>
 80100f4:	3501      	adds	r5, #1
 80100f6:	68e3      	ldr	r3, [r4, #12]
 80100f8:	9903      	ldr	r1, [sp, #12]
 80100fa:	1a5b      	subs	r3, r3, r1
 80100fc:	42ab      	cmp	r3, r5
 80100fe:	dcf2      	bgt.n	80100e6 <_printf_i+0x21e>
 8010100:	e7eb      	b.n	80100da <_printf_i+0x212>
 8010102:	2500      	movs	r5, #0
 8010104:	f104 0619 	add.w	r6, r4, #25
 8010108:	e7f5      	b.n	80100f6 <_printf_i+0x22e>
 801010a:	bf00      	nop
 801010c:	08015616 	.word	0x08015616
 8010110:	08015627 	.word	0x08015627

08010114 <_scanf_float>:
 8010114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010118:	b087      	sub	sp, #28
 801011a:	4617      	mov	r7, r2
 801011c:	9303      	str	r3, [sp, #12]
 801011e:	688b      	ldr	r3, [r1, #8]
 8010120:	1e5a      	subs	r2, r3, #1
 8010122:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010126:	bf83      	ittte	hi
 8010128:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801012c:	195b      	addhi	r3, r3, r5
 801012e:	9302      	strhi	r3, [sp, #8]
 8010130:	2300      	movls	r3, #0
 8010132:	bf86      	itte	hi
 8010134:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010138:	608b      	strhi	r3, [r1, #8]
 801013a:	9302      	strls	r3, [sp, #8]
 801013c:	680b      	ldr	r3, [r1, #0]
 801013e:	468b      	mov	fp, r1
 8010140:	2500      	movs	r5, #0
 8010142:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010146:	f84b 3b1c 	str.w	r3, [fp], #28
 801014a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801014e:	4680      	mov	r8, r0
 8010150:	460c      	mov	r4, r1
 8010152:	465e      	mov	r6, fp
 8010154:	46aa      	mov	sl, r5
 8010156:	46a9      	mov	r9, r5
 8010158:	9501      	str	r5, [sp, #4]
 801015a:	68a2      	ldr	r2, [r4, #8]
 801015c:	b152      	cbz	r2, 8010174 <_scanf_float+0x60>
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	2b4e      	cmp	r3, #78	; 0x4e
 8010164:	d864      	bhi.n	8010230 <_scanf_float+0x11c>
 8010166:	2b40      	cmp	r3, #64	; 0x40
 8010168:	d83c      	bhi.n	80101e4 <_scanf_float+0xd0>
 801016a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801016e:	b2c8      	uxtb	r0, r1
 8010170:	280e      	cmp	r0, #14
 8010172:	d93a      	bls.n	80101ea <_scanf_float+0xd6>
 8010174:	f1b9 0f00 	cmp.w	r9, #0
 8010178:	d003      	beq.n	8010182 <_scanf_float+0x6e>
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010180:	6023      	str	r3, [r4, #0]
 8010182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010186:	f1ba 0f01 	cmp.w	sl, #1
 801018a:	f200 8113 	bhi.w	80103b4 <_scanf_float+0x2a0>
 801018e:	455e      	cmp	r6, fp
 8010190:	f200 8105 	bhi.w	801039e <_scanf_float+0x28a>
 8010194:	2501      	movs	r5, #1
 8010196:	4628      	mov	r0, r5
 8010198:	b007      	add	sp, #28
 801019a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801019e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80101a2:	2a0d      	cmp	r2, #13
 80101a4:	d8e6      	bhi.n	8010174 <_scanf_float+0x60>
 80101a6:	a101      	add	r1, pc, #4	; (adr r1, 80101ac <_scanf_float+0x98>)
 80101a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80101ac:	080102eb 	.word	0x080102eb
 80101b0:	08010175 	.word	0x08010175
 80101b4:	08010175 	.word	0x08010175
 80101b8:	08010175 	.word	0x08010175
 80101bc:	0801034b 	.word	0x0801034b
 80101c0:	08010323 	.word	0x08010323
 80101c4:	08010175 	.word	0x08010175
 80101c8:	08010175 	.word	0x08010175
 80101cc:	080102f9 	.word	0x080102f9
 80101d0:	08010175 	.word	0x08010175
 80101d4:	08010175 	.word	0x08010175
 80101d8:	08010175 	.word	0x08010175
 80101dc:	08010175 	.word	0x08010175
 80101e0:	080102b1 	.word	0x080102b1
 80101e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80101e8:	e7db      	b.n	80101a2 <_scanf_float+0x8e>
 80101ea:	290e      	cmp	r1, #14
 80101ec:	d8c2      	bhi.n	8010174 <_scanf_float+0x60>
 80101ee:	a001      	add	r0, pc, #4	; (adr r0, 80101f4 <_scanf_float+0xe0>)
 80101f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80101f4:	080102a3 	.word	0x080102a3
 80101f8:	08010175 	.word	0x08010175
 80101fc:	080102a3 	.word	0x080102a3
 8010200:	08010337 	.word	0x08010337
 8010204:	08010175 	.word	0x08010175
 8010208:	08010251 	.word	0x08010251
 801020c:	0801028d 	.word	0x0801028d
 8010210:	0801028d 	.word	0x0801028d
 8010214:	0801028d 	.word	0x0801028d
 8010218:	0801028d 	.word	0x0801028d
 801021c:	0801028d 	.word	0x0801028d
 8010220:	0801028d 	.word	0x0801028d
 8010224:	0801028d 	.word	0x0801028d
 8010228:	0801028d 	.word	0x0801028d
 801022c:	0801028d 	.word	0x0801028d
 8010230:	2b6e      	cmp	r3, #110	; 0x6e
 8010232:	d809      	bhi.n	8010248 <_scanf_float+0x134>
 8010234:	2b60      	cmp	r3, #96	; 0x60
 8010236:	d8b2      	bhi.n	801019e <_scanf_float+0x8a>
 8010238:	2b54      	cmp	r3, #84	; 0x54
 801023a:	d077      	beq.n	801032c <_scanf_float+0x218>
 801023c:	2b59      	cmp	r3, #89	; 0x59
 801023e:	d199      	bne.n	8010174 <_scanf_float+0x60>
 8010240:	2d07      	cmp	r5, #7
 8010242:	d197      	bne.n	8010174 <_scanf_float+0x60>
 8010244:	2508      	movs	r5, #8
 8010246:	e029      	b.n	801029c <_scanf_float+0x188>
 8010248:	2b74      	cmp	r3, #116	; 0x74
 801024a:	d06f      	beq.n	801032c <_scanf_float+0x218>
 801024c:	2b79      	cmp	r3, #121	; 0x79
 801024e:	e7f6      	b.n	801023e <_scanf_float+0x12a>
 8010250:	6821      	ldr	r1, [r4, #0]
 8010252:	05c8      	lsls	r0, r1, #23
 8010254:	d51a      	bpl.n	801028c <_scanf_float+0x178>
 8010256:	9b02      	ldr	r3, [sp, #8]
 8010258:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801025c:	6021      	str	r1, [r4, #0]
 801025e:	f109 0901 	add.w	r9, r9, #1
 8010262:	b11b      	cbz	r3, 801026c <_scanf_float+0x158>
 8010264:	3b01      	subs	r3, #1
 8010266:	3201      	adds	r2, #1
 8010268:	9302      	str	r3, [sp, #8]
 801026a:	60a2      	str	r2, [r4, #8]
 801026c:	68a3      	ldr	r3, [r4, #8]
 801026e:	3b01      	subs	r3, #1
 8010270:	60a3      	str	r3, [r4, #8]
 8010272:	6923      	ldr	r3, [r4, #16]
 8010274:	3301      	adds	r3, #1
 8010276:	6123      	str	r3, [r4, #16]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3b01      	subs	r3, #1
 801027c:	2b00      	cmp	r3, #0
 801027e:	607b      	str	r3, [r7, #4]
 8010280:	f340 8084 	ble.w	801038c <_scanf_float+0x278>
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	3301      	adds	r3, #1
 8010288:	603b      	str	r3, [r7, #0]
 801028a:	e766      	b.n	801015a <_scanf_float+0x46>
 801028c:	eb1a 0f05 	cmn.w	sl, r5
 8010290:	f47f af70 	bne.w	8010174 <_scanf_float+0x60>
 8010294:	6822      	ldr	r2, [r4, #0]
 8010296:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801029a:	6022      	str	r2, [r4, #0]
 801029c:	f806 3b01 	strb.w	r3, [r6], #1
 80102a0:	e7e4      	b.n	801026c <_scanf_float+0x158>
 80102a2:	6822      	ldr	r2, [r4, #0]
 80102a4:	0610      	lsls	r0, r2, #24
 80102a6:	f57f af65 	bpl.w	8010174 <_scanf_float+0x60>
 80102aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80102ae:	e7f4      	b.n	801029a <_scanf_float+0x186>
 80102b0:	f1ba 0f00 	cmp.w	sl, #0
 80102b4:	d10e      	bne.n	80102d4 <_scanf_float+0x1c0>
 80102b6:	f1b9 0f00 	cmp.w	r9, #0
 80102ba:	d10e      	bne.n	80102da <_scanf_float+0x1c6>
 80102bc:	6822      	ldr	r2, [r4, #0]
 80102be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80102c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80102c6:	d108      	bne.n	80102da <_scanf_float+0x1c6>
 80102c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80102cc:	6022      	str	r2, [r4, #0]
 80102ce:	f04f 0a01 	mov.w	sl, #1
 80102d2:	e7e3      	b.n	801029c <_scanf_float+0x188>
 80102d4:	f1ba 0f02 	cmp.w	sl, #2
 80102d8:	d055      	beq.n	8010386 <_scanf_float+0x272>
 80102da:	2d01      	cmp	r5, #1
 80102dc:	d002      	beq.n	80102e4 <_scanf_float+0x1d0>
 80102de:	2d04      	cmp	r5, #4
 80102e0:	f47f af48 	bne.w	8010174 <_scanf_float+0x60>
 80102e4:	3501      	adds	r5, #1
 80102e6:	b2ed      	uxtb	r5, r5
 80102e8:	e7d8      	b.n	801029c <_scanf_float+0x188>
 80102ea:	f1ba 0f01 	cmp.w	sl, #1
 80102ee:	f47f af41 	bne.w	8010174 <_scanf_float+0x60>
 80102f2:	f04f 0a02 	mov.w	sl, #2
 80102f6:	e7d1      	b.n	801029c <_scanf_float+0x188>
 80102f8:	b97d      	cbnz	r5, 801031a <_scanf_float+0x206>
 80102fa:	f1b9 0f00 	cmp.w	r9, #0
 80102fe:	f47f af3c 	bne.w	801017a <_scanf_float+0x66>
 8010302:	6822      	ldr	r2, [r4, #0]
 8010304:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010308:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801030c:	f47f af39 	bne.w	8010182 <_scanf_float+0x6e>
 8010310:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010314:	6022      	str	r2, [r4, #0]
 8010316:	2501      	movs	r5, #1
 8010318:	e7c0      	b.n	801029c <_scanf_float+0x188>
 801031a:	2d03      	cmp	r5, #3
 801031c:	d0e2      	beq.n	80102e4 <_scanf_float+0x1d0>
 801031e:	2d05      	cmp	r5, #5
 8010320:	e7de      	b.n	80102e0 <_scanf_float+0x1cc>
 8010322:	2d02      	cmp	r5, #2
 8010324:	f47f af26 	bne.w	8010174 <_scanf_float+0x60>
 8010328:	2503      	movs	r5, #3
 801032a:	e7b7      	b.n	801029c <_scanf_float+0x188>
 801032c:	2d06      	cmp	r5, #6
 801032e:	f47f af21 	bne.w	8010174 <_scanf_float+0x60>
 8010332:	2507      	movs	r5, #7
 8010334:	e7b2      	b.n	801029c <_scanf_float+0x188>
 8010336:	6822      	ldr	r2, [r4, #0]
 8010338:	0591      	lsls	r1, r2, #22
 801033a:	f57f af1b 	bpl.w	8010174 <_scanf_float+0x60>
 801033e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010342:	6022      	str	r2, [r4, #0]
 8010344:	f8cd 9004 	str.w	r9, [sp, #4]
 8010348:	e7a8      	b.n	801029c <_scanf_float+0x188>
 801034a:	6822      	ldr	r2, [r4, #0]
 801034c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010350:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010354:	d006      	beq.n	8010364 <_scanf_float+0x250>
 8010356:	0550      	lsls	r0, r2, #21
 8010358:	f57f af0c 	bpl.w	8010174 <_scanf_float+0x60>
 801035c:	f1b9 0f00 	cmp.w	r9, #0
 8010360:	f43f af0f 	beq.w	8010182 <_scanf_float+0x6e>
 8010364:	0591      	lsls	r1, r2, #22
 8010366:	bf58      	it	pl
 8010368:	9901      	ldrpl	r1, [sp, #4]
 801036a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801036e:	bf58      	it	pl
 8010370:	eba9 0101 	subpl.w	r1, r9, r1
 8010374:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010378:	bf58      	it	pl
 801037a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801037e:	6022      	str	r2, [r4, #0]
 8010380:	f04f 0900 	mov.w	r9, #0
 8010384:	e78a      	b.n	801029c <_scanf_float+0x188>
 8010386:	f04f 0a03 	mov.w	sl, #3
 801038a:	e787      	b.n	801029c <_scanf_float+0x188>
 801038c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010390:	4639      	mov	r1, r7
 8010392:	4640      	mov	r0, r8
 8010394:	4798      	blx	r3
 8010396:	2800      	cmp	r0, #0
 8010398:	f43f aedf 	beq.w	801015a <_scanf_float+0x46>
 801039c:	e6ea      	b.n	8010174 <_scanf_float+0x60>
 801039e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80103a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80103a6:	463a      	mov	r2, r7
 80103a8:	4640      	mov	r0, r8
 80103aa:	4798      	blx	r3
 80103ac:	6923      	ldr	r3, [r4, #16]
 80103ae:	3b01      	subs	r3, #1
 80103b0:	6123      	str	r3, [r4, #16]
 80103b2:	e6ec      	b.n	801018e <_scanf_float+0x7a>
 80103b4:	1e6b      	subs	r3, r5, #1
 80103b6:	2b06      	cmp	r3, #6
 80103b8:	d825      	bhi.n	8010406 <_scanf_float+0x2f2>
 80103ba:	2d02      	cmp	r5, #2
 80103bc:	d836      	bhi.n	801042c <_scanf_float+0x318>
 80103be:	455e      	cmp	r6, fp
 80103c0:	f67f aee8 	bls.w	8010194 <_scanf_float+0x80>
 80103c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80103c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80103cc:	463a      	mov	r2, r7
 80103ce:	4640      	mov	r0, r8
 80103d0:	4798      	blx	r3
 80103d2:	6923      	ldr	r3, [r4, #16]
 80103d4:	3b01      	subs	r3, #1
 80103d6:	6123      	str	r3, [r4, #16]
 80103d8:	e7f1      	b.n	80103be <_scanf_float+0x2aa>
 80103da:	9802      	ldr	r0, [sp, #8]
 80103dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80103e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80103e4:	9002      	str	r0, [sp, #8]
 80103e6:	463a      	mov	r2, r7
 80103e8:	4640      	mov	r0, r8
 80103ea:	4798      	blx	r3
 80103ec:	6923      	ldr	r3, [r4, #16]
 80103ee:	3b01      	subs	r3, #1
 80103f0:	6123      	str	r3, [r4, #16]
 80103f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80103f6:	fa5f fa8a 	uxtb.w	sl, sl
 80103fa:	f1ba 0f02 	cmp.w	sl, #2
 80103fe:	d1ec      	bne.n	80103da <_scanf_float+0x2c6>
 8010400:	3d03      	subs	r5, #3
 8010402:	b2ed      	uxtb	r5, r5
 8010404:	1b76      	subs	r6, r6, r5
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	05da      	lsls	r2, r3, #23
 801040a:	d52f      	bpl.n	801046c <_scanf_float+0x358>
 801040c:	055b      	lsls	r3, r3, #21
 801040e:	d510      	bpl.n	8010432 <_scanf_float+0x31e>
 8010410:	455e      	cmp	r6, fp
 8010412:	f67f aebf 	bls.w	8010194 <_scanf_float+0x80>
 8010416:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801041a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801041e:	463a      	mov	r2, r7
 8010420:	4640      	mov	r0, r8
 8010422:	4798      	blx	r3
 8010424:	6923      	ldr	r3, [r4, #16]
 8010426:	3b01      	subs	r3, #1
 8010428:	6123      	str	r3, [r4, #16]
 801042a:	e7f1      	b.n	8010410 <_scanf_float+0x2fc>
 801042c:	46aa      	mov	sl, r5
 801042e:	9602      	str	r6, [sp, #8]
 8010430:	e7df      	b.n	80103f2 <_scanf_float+0x2de>
 8010432:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	2965      	cmp	r1, #101	; 0x65
 801043a:	f103 33ff 	add.w	r3, r3, #4294967295
 801043e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010442:	6123      	str	r3, [r4, #16]
 8010444:	d00c      	beq.n	8010460 <_scanf_float+0x34c>
 8010446:	2945      	cmp	r1, #69	; 0x45
 8010448:	d00a      	beq.n	8010460 <_scanf_float+0x34c>
 801044a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801044e:	463a      	mov	r2, r7
 8010450:	4640      	mov	r0, r8
 8010452:	4798      	blx	r3
 8010454:	6923      	ldr	r3, [r4, #16]
 8010456:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801045a:	3b01      	subs	r3, #1
 801045c:	1eb5      	subs	r5, r6, #2
 801045e:	6123      	str	r3, [r4, #16]
 8010460:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010464:	463a      	mov	r2, r7
 8010466:	4640      	mov	r0, r8
 8010468:	4798      	blx	r3
 801046a:	462e      	mov	r6, r5
 801046c:	6825      	ldr	r5, [r4, #0]
 801046e:	f015 0510 	ands.w	r5, r5, #16
 8010472:	d158      	bne.n	8010526 <_scanf_float+0x412>
 8010474:	7035      	strb	r5, [r6, #0]
 8010476:	6823      	ldr	r3, [r4, #0]
 8010478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801047c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010480:	d11c      	bne.n	80104bc <_scanf_float+0x3a8>
 8010482:	9b01      	ldr	r3, [sp, #4]
 8010484:	454b      	cmp	r3, r9
 8010486:	eba3 0209 	sub.w	r2, r3, r9
 801048a:	d124      	bne.n	80104d6 <_scanf_float+0x3c2>
 801048c:	2200      	movs	r2, #0
 801048e:	4659      	mov	r1, fp
 8010490:	4640      	mov	r0, r8
 8010492:	f000 fef3 	bl	801127c <_strtod_r>
 8010496:	9b03      	ldr	r3, [sp, #12]
 8010498:	6821      	ldr	r1, [r4, #0]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f011 0f02 	tst.w	r1, #2
 80104a0:	ec57 6b10 	vmov	r6, r7, d0
 80104a4:	f103 0204 	add.w	r2, r3, #4
 80104a8:	d020      	beq.n	80104ec <_scanf_float+0x3d8>
 80104aa:	9903      	ldr	r1, [sp, #12]
 80104ac:	600a      	str	r2, [r1, #0]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	e9c3 6700 	strd	r6, r7, [r3]
 80104b4:	68e3      	ldr	r3, [r4, #12]
 80104b6:	3301      	adds	r3, #1
 80104b8:	60e3      	str	r3, [r4, #12]
 80104ba:	e66c      	b.n	8010196 <_scanf_float+0x82>
 80104bc:	9b04      	ldr	r3, [sp, #16]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d0e4      	beq.n	801048c <_scanf_float+0x378>
 80104c2:	9905      	ldr	r1, [sp, #20]
 80104c4:	230a      	movs	r3, #10
 80104c6:	462a      	mov	r2, r5
 80104c8:	3101      	adds	r1, #1
 80104ca:	4640      	mov	r0, r8
 80104cc:	f000 ff60 	bl	8011390 <_strtol_r>
 80104d0:	9b04      	ldr	r3, [sp, #16]
 80104d2:	9e05      	ldr	r6, [sp, #20]
 80104d4:	1ac2      	subs	r2, r0, r3
 80104d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80104da:	429e      	cmp	r6, r3
 80104dc:	bf28      	it	cs
 80104de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80104e2:	4912      	ldr	r1, [pc, #72]	; (801052c <_scanf_float+0x418>)
 80104e4:	4630      	mov	r0, r6
 80104e6:	f000 f82b 	bl	8010540 <siprintf>
 80104ea:	e7cf      	b.n	801048c <_scanf_float+0x378>
 80104ec:	f011 0f04 	tst.w	r1, #4
 80104f0:	9903      	ldr	r1, [sp, #12]
 80104f2:	600a      	str	r2, [r1, #0]
 80104f4:	d1db      	bne.n	80104ae <_scanf_float+0x39a>
 80104f6:	f8d3 8000 	ldr.w	r8, [r3]
 80104fa:	ee10 2a10 	vmov	r2, s0
 80104fe:	ee10 0a10 	vmov	r0, s0
 8010502:	463b      	mov	r3, r7
 8010504:	4639      	mov	r1, r7
 8010506:	f7f0 fb11 	bl	8000b2c <__aeabi_dcmpun>
 801050a:	b128      	cbz	r0, 8010518 <_scanf_float+0x404>
 801050c:	4808      	ldr	r0, [pc, #32]	; (8010530 <_scanf_float+0x41c>)
 801050e:	f000 f811 	bl	8010534 <nanf>
 8010512:	ed88 0a00 	vstr	s0, [r8]
 8010516:	e7cd      	b.n	80104b4 <_scanf_float+0x3a0>
 8010518:	4630      	mov	r0, r6
 801051a:	4639      	mov	r1, r7
 801051c:	f7f0 fb64 	bl	8000be8 <__aeabi_d2f>
 8010520:	f8c8 0000 	str.w	r0, [r8]
 8010524:	e7c6      	b.n	80104b4 <_scanf_float+0x3a0>
 8010526:	2500      	movs	r5, #0
 8010528:	e635      	b.n	8010196 <_scanf_float+0x82>
 801052a:	bf00      	nop
 801052c:	08015638 	.word	0x08015638
 8010530:	08015a50 	.word	0x08015a50

08010534 <nanf>:
 8010534:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801053c <nanf+0x8>
 8010538:	4770      	bx	lr
 801053a:	bf00      	nop
 801053c:	7fc00000 	.word	0x7fc00000

08010540 <siprintf>:
 8010540:	b40e      	push	{r1, r2, r3}
 8010542:	b500      	push	{lr}
 8010544:	b09c      	sub	sp, #112	; 0x70
 8010546:	ab1d      	add	r3, sp, #116	; 0x74
 8010548:	9002      	str	r0, [sp, #8]
 801054a:	9006      	str	r0, [sp, #24]
 801054c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010550:	4809      	ldr	r0, [pc, #36]	; (8010578 <siprintf+0x38>)
 8010552:	9107      	str	r1, [sp, #28]
 8010554:	9104      	str	r1, [sp, #16]
 8010556:	4909      	ldr	r1, [pc, #36]	; (801057c <siprintf+0x3c>)
 8010558:	f853 2b04 	ldr.w	r2, [r3], #4
 801055c:	9105      	str	r1, [sp, #20]
 801055e:	6800      	ldr	r0, [r0, #0]
 8010560:	9301      	str	r3, [sp, #4]
 8010562:	a902      	add	r1, sp, #8
 8010564:	f002 ff2e 	bl	80133c4 <_svfiprintf_r>
 8010568:	9b02      	ldr	r3, [sp, #8]
 801056a:	2200      	movs	r2, #0
 801056c:	701a      	strb	r2, [r3, #0]
 801056e:	b01c      	add	sp, #112	; 0x70
 8010570:	f85d eb04 	ldr.w	lr, [sp], #4
 8010574:	b003      	add	sp, #12
 8010576:	4770      	bx	lr
 8010578:	20000058 	.word	0x20000058
 801057c:	ffff0208 	.word	0xffff0208

08010580 <__sread>:
 8010580:	b510      	push	{r4, lr}
 8010582:	460c      	mov	r4, r1
 8010584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010588:	f003 f81c 	bl	80135c4 <_read_r>
 801058c:	2800      	cmp	r0, #0
 801058e:	bfab      	itete	ge
 8010590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010592:	89a3      	ldrhlt	r3, [r4, #12]
 8010594:	181b      	addge	r3, r3, r0
 8010596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801059a:	bfac      	ite	ge
 801059c:	6563      	strge	r3, [r4, #84]	; 0x54
 801059e:	81a3      	strhlt	r3, [r4, #12]
 80105a0:	bd10      	pop	{r4, pc}

080105a2 <__swrite>:
 80105a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a6:	461f      	mov	r7, r3
 80105a8:	898b      	ldrh	r3, [r1, #12]
 80105aa:	05db      	lsls	r3, r3, #23
 80105ac:	4605      	mov	r5, r0
 80105ae:	460c      	mov	r4, r1
 80105b0:	4616      	mov	r6, r2
 80105b2:	d505      	bpl.n	80105c0 <__swrite+0x1e>
 80105b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105b8:	2302      	movs	r3, #2
 80105ba:	2200      	movs	r2, #0
 80105bc:	f002 f8f8 	bl	80127b0 <_lseek_r>
 80105c0:	89a3      	ldrh	r3, [r4, #12]
 80105c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105ca:	81a3      	strh	r3, [r4, #12]
 80105cc:	4632      	mov	r2, r6
 80105ce:	463b      	mov	r3, r7
 80105d0:	4628      	mov	r0, r5
 80105d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105d6:	f000 bedd 	b.w	8011394 <_write_r>

080105da <__sseek>:
 80105da:	b510      	push	{r4, lr}
 80105dc:	460c      	mov	r4, r1
 80105de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105e2:	f002 f8e5 	bl	80127b0 <_lseek_r>
 80105e6:	1c43      	adds	r3, r0, #1
 80105e8:	89a3      	ldrh	r3, [r4, #12]
 80105ea:	bf15      	itete	ne
 80105ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80105ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80105f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80105f6:	81a3      	strheq	r3, [r4, #12]
 80105f8:	bf18      	it	ne
 80105fa:	81a3      	strhne	r3, [r4, #12]
 80105fc:	bd10      	pop	{r4, pc}

080105fe <__sclose>:
 80105fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010602:	f000 bed9 	b.w	80113b8 <_close_r>

08010606 <strncmp>:
 8010606:	b510      	push	{r4, lr}
 8010608:	b16a      	cbz	r2, 8010626 <strncmp+0x20>
 801060a:	3901      	subs	r1, #1
 801060c:	1884      	adds	r4, r0, r2
 801060e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010612:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010616:	4293      	cmp	r3, r2
 8010618:	d103      	bne.n	8010622 <strncmp+0x1c>
 801061a:	42a0      	cmp	r0, r4
 801061c:	d001      	beq.n	8010622 <strncmp+0x1c>
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1f5      	bne.n	801060e <strncmp+0x8>
 8010622:	1a98      	subs	r0, r3, r2
 8010624:	bd10      	pop	{r4, pc}
 8010626:	4610      	mov	r0, r2
 8010628:	e7fc      	b.n	8010624 <strncmp+0x1e>

0801062a <sulp>:
 801062a:	b570      	push	{r4, r5, r6, lr}
 801062c:	4604      	mov	r4, r0
 801062e:	460d      	mov	r5, r1
 8010630:	ec45 4b10 	vmov	d0, r4, r5
 8010634:	4616      	mov	r6, r2
 8010636:	f002 fc61 	bl	8012efc <__ulp>
 801063a:	ec51 0b10 	vmov	r0, r1, d0
 801063e:	b17e      	cbz	r6, 8010660 <sulp+0x36>
 8010640:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010644:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010648:	2b00      	cmp	r3, #0
 801064a:	dd09      	ble.n	8010660 <sulp+0x36>
 801064c:	051b      	lsls	r3, r3, #20
 801064e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010652:	2400      	movs	r4, #0
 8010654:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010658:	4622      	mov	r2, r4
 801065a:	462b      	mov	r3, r5
 801065c:	f7ef ffcc 	bl	80005f8 <__aeabi_dmul>
 8010660:	bd70      	pop	{r4, r5, r6, pc}
 8010662:	0000      	movs	r0, r0
 8010664:	0000      	movs	r0, r0
	...

08010668 <_strtod_l>:
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	b0a3      	sub	sp, #140	; 0x8c
 801066e:	461f      	mov	r7, r3
 8010670:	2300      	movs	r3, #0
 8010672:	931e      	str	r3, [sp, #120]	; 0x78
 8010674:	4ba4      	ldr	r3, [pc, #656]	; (8010908 <_strtod_l+0x2a0>)
 8010676:	9219      	str	r2, [sp, #100]	; 0x64
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	9307      	str	r3, [sp, #28]
 801067c:	4604      	mov	r4, r0
 801067e:	4618      	mov	r0, r3
 8010680:	4688      	mov	r8, r1
 8010682:	f7ef fda5 	bl	80001d0 <strlen>
 8010686:	f04f 0a00 	mov.w	sl, #0
 801068a:	4605      	mov	r5, r0
 801068c:	f04f 0b00 	mov.w	fp, #0
 8010690:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010694:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010696:	781a      	ldrb	r2, [r3, #0]
 8010698:	2a2b      	cmp	r2, #43	; 0x2b
 801069a:	d04c      	beq.n	8010736 <_strtod_l+0xce>
 801069c:	d839      	bhi.n	8010712 <_strtod_l+0xaa>
 801069e:	2a0d      	cmp	r2, #13
 80106a0:	d832      	bhi.n	8010708 <_strtod_l+0xa0>
 80106a2:	2a08      	cmp	r2, #8
 80106a4:	d832      	bhi.n	801070c <_strtod_l+0xa4>
 80106a6:	2a00      	cmp	r2, #0
 80106a8:	d03c      	beq.n	8010724 <_strtod_l+0xbc>
 80106aa:	2300      	movs	r3, #0
 80106ac:	930e      	str	r3, [sp, #56]	; 0x38
 80106ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80106b0:	7833      	ldrb	r3, [r6, #0]
 80106b2:	2b30      	cmp	r3, #48	; 0x30
 80106b4:	f040 80b4 	bne.w	8010820 <_strtod_l+0x1b8>
 80106b8:	7873      	ldrb	r3, [r6, #1]
 80106ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80106be:	2b58      	cmp	r3, #88	; 0x58
 80106c0:	d16c      	bne.n	801079c <_strtod_l+0x134>
 80106c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106c4:	9301      	str	r3, [sp, #4]
 80106c6:	ab1e      	add	r3, sp, #120	; 0x78
 80106c8:	9702      	str	r7, [sp, #8]
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	4a8f      	ldr	r2, [pc, #572]	; (801090c <_strtod_l+0x2a4>)
 80106ce:	ab1f      	add	r3, sp, #124	; 0x7c
 80106d0:	a91d      	add	r1, sp, #116	; 0x74
 80106d2:	4620      	mov	r0, r4
 80106d4:	f001 fd60 	bl	8012198 <__gethex>
 80106d8:	f010 0707 	ands.w	r7, r0, #7
 80106dc:	4605      	mov	r5, r0
 80106de:	d005      	beq.n	80106ec <_strtod_l+0x84>
 80106e0:	2f06      	cmp	r7, #6
 80106e2:	d12a      	bne.n	801073a <_strtod_l+0xd2>
 80106e4:	3601      	adds	r6, #1
 80106e6:	2300      	movs	r3, #0
 80106e8:	961d      	str	r6, [sp, #116]	; 0x74
 80106ea:	930e      	str	r3, [sp, #56]	; 0x38
 80106ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f040 8596 	bne.w	8011220 <_strtod_l+0xbb8>
 80106f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106f6:	b1db      	cbz	r3, 8010730 <_strtod_l+0xc8>
 80106f8:	4652      	mov	r2, sl
 80106fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80106fe:	ec43 2b10 	vmov	d0, r2, r3
 8010702:	b023      	add	sp, #140	; 0x8c
 8010704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010708:	2a20      	cmp	r2, #32
 801070a:	d1ce      	bne.n	80106aa <_strtod_l+0x42>
 801070c:	3301      	adds	r3, #1
 801070e:	931d      	str	r3, [sp, #116]	; 0x74
 8010710:	e7c0      	b.n	8010694 <_strtod_l+0x2c>
 8010712:	2a2d      	cmp	r2, #45	; 0x2d
 8010714:	d1c9      	bne.n	80106aa <_strtod_l+0x42>
 8010716:	2201      	movs	r2, #1
 8010718:	920e      	str	r2, [sp, #56]	; 0x38
 801071a:	1c5a      	adds	r2, r3, #1
 801071c:	921d      	str	r2, [sp, #116]	; 0x74
 801071e:	785b      	ldrb	r3, [r3, #1]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1c4      	bne.n	80106ae <_strtod_l+0x46>
 8010724:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010726:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801072a:	2b00      	cmp	r3, #0
 801072c:	f040 8576 	bne.w	801121c <_strtod_l+0xbb4>
 8010730:	4652      	mov	r2, sl
 8010732:	465b      	mov	r3, fp
 8010734:	e7e3      	b.n	80106fe <_strtod_l+0x96>
 8010736:	2200      	movs	r2, #0
 8010738:	e7ee      	b.n	8010718 <_strtod_l+0xb0>
 801073a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801073c:	b13a      	cbz	r2, 801074e <_strtod_l+0xe6>
 801073e:	2135      	movs	r1, #53	; 0x35
 8010740:	a820      	add	r0, sp, #128	; 0x80
 8010742:	f002 fce6 	bl	8013112 <__copybits>
 8010746:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010748:	4620      	mov	r0, r4
 801074a:	f002 f8ab 	bl	80128a4 <_Bfree>
 801074e:	3f01      	subs	r7, #1
 8010750:	2f05      	cmp	r7, #5
 8010752:	d807      	bhi.n	8010764 <_strtod_l+0xfc>
 8010754:	e8df f007 	tbb	[pc, r7]
 8010758:	1d180b0e 	.word	0x1d180b0e
 801075c:	030e      	.short	0x030e
 801075e:	f04f 0b00 	mov.w	fp, #0
 8010762:	46da      	mov	sl, fp
 8010764:	0728      	lsls	r0, r5, #28
 8010766:	d5c1      	bpl.n	80106ec <_strtod_l+0x84>
 8010768:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801076c:	e7be      	b.n	80106ec <_strtod_l+0x84>
 801076e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010772:	e7f7      	b.n	8010764 <_strtod_l+0xfc>
 8010774:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010778:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801077a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801077e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010782:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010786:	e7ed      	b.n	8010764 <_strtod_l+0xfc>
 8010788:	f8df b184 	ldr.w	fp, [pc, #388]	; 8010910 <_strtod_l+0x2a8>
 801078c:	f04f 0a00 	mov.w	sl, #0
 8010790:	e7e8      	b.n	8010764 <_strtod_l+0xfc>
 8010792:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010796:	f04f 3aff 	mov.w	sl, #4294967295
 801079a:	e7e3      	b.n	8010764 <_strtod_l+0xfc>
 801079c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	921d      	str	r2, [sp, #116]	; 0x74
 80107a2:	785b      	ldrb	r3, [r3, #1]
 80107a4:	2b30      	cmp	r3, #48	; 0x30
 80107a6:	d0f9      	beq.n	801079c <_strtod_l+0x134>
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d09f      	beq.n	80106ec <_strtod_l+0x84>
 80107ac:	2301      	movs	r3, #1
 80107ae:	f04f 0900 	mov.w	r9, #0
 80107b2:	9304      	str	r3, [sp, #16]
 80107b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107b6:	930a      	str	r3, [sp, #40]	; 0x28
 80107b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80107bc:	464f      	mov	r7, r9
 80107be:	220a      	movs	r2, #10
 80107c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80107c2:	7806      	ldrb	r6, [r0, #0]
 80107c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80107c8:	b2d9      	uxtb	r1, r3
 80107ca:	2909      	cmp	r1, #9
 80107cc:	d92a      	bls.n	8010824 <_strtod_l+0x1bc>
 80107ce:	9907      	ldr	r1, [sp, #28]
 80107d0:	462a      	mov	r2, r5
 80107d2:	f7ff ff18 	bl	8010606 <strncmp>
 80107d6:	b398      	cbz	r0, 8010840 <_strtod_l+0x1d8>
 80107d8:	2000      	movs	r0, #0
 80107da:	4633      	mov	r3, r6
 80107dc:	463d      	mov	r5, r7
 80107de:	9007      	str	r0, [sp, #28]
 80107e0:	4602      	mov	r2, r0
 80107e2:	2b65      	cmp	r3, #101	; 0x65
 80107e4:	d001      	beq.n	80107ea <_strtod_l+0x182>
 80107e6:	2b45      	cmp	r3, #69	; 0x45
 80107e8:	d118      	bne.n	801081c <_strtod_l+0x1b4>
 80107ea:	b91d      	cbnz	r5, 80107f4 <_strtod_l+0x18c>
 80107ec:	9b04      	ldr	r3, [sp, #16]
 80107ee:	4303      	orrs	r3, r0
 80107f0:	d098      	beq.n	8010724 <_strtod_l+0xbc>
 80107f2:	2500      	movs	r5, #0
 80107f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80107f8:	f108 0301 	add.w	r3, r8, #1
 80107fc:	931d      	str	r3, [sp, #116]	; 0x74
 80107fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010802:	2b2b      	cmp	r3, #43	; 0x2b
 8010804:	d075      	beq.n	80108f2 <_strtod_l+0x28a>
 8010806:	2b2d      	cmp	r3, #45	; 0x2d
 8010808:	d07b      	beq.n	8010902 <_strtod_l+0x29a>
 801080a:	f04f 0c00 	mov.w	ip, #0
 801080e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010812:	2909      	cmp	r1, #9
 8010814:	f240 8082 	bls.w	801091c <_strtod_l+0x2b4>
 8010818:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801081c:	2600      	movs	r6, #0
 801081e:	e09d      	b.n	801095c <_strtod_l+0x2f4>
 8010820:	2300      	movs	r3, #0
 8010822:	e7c4      	b.n	80107ae <_strtod_l+0x146>
 8010824:	2f08      	cmp	r7, #8
 8010826:	bfd8      	it	le
 8010828:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801082a:	f100 0001 	add.w	r0, r0, #1
 801082e:	bfda      	itte	le
 8010830:	fb02 3301 	mlale	r3, r2, r1, r3
 8010834:	9309      	strle	r3, [sp, #36]	; 0x24
 8010836:	fb02 3909 	mlagt	r9, r2, r9, r3
 801083a:	3701      	adds	r7, #1
 801083c:	901d      	str	r0, [sp, #116]	; 0x74
 801083e:	e7bf      	b.n	80107c0 <_strtod_l+0x158>
 8010840:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010842:	195a      	adds	r2, r3, r5
 8010844:	921d      	str	r2, [sp, #116]	; 0x74
 8010846:	5d5b      	ldrb	r3, [r3, r5]
 8010848:	2f00      	cmp	r7, #0
 801084a:	d037      	beq.n	80108bc <_strtod_l+0x254>
 801084c:	9007      	str	r0, [sp, #28]
 801084e:	463d      	mov	r5, r7
 8010850:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010854:	2a09      	cmp	r2, #9
 8010856:	d912      	bls.n	801087e <_strtod_l+0x216>
 8010858:	2201      	movs	r2, #1
 801085a:	e7c2      	b.n	80107e2 <_strtod_l+0x17a>
 801085c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801085e:	1c5a      	adds	r2, r3, #1
 8010860:	921d      	str	r2, [sp, #116]	; 0x74
 8010862:	785b      	ldrb	r3, [r3, #1]
 8010864:	3001      	adds	r0, #1
 8010866:	2b30      	cmp	r3, #48	; 0x30
 8010868:	d0f8      	beq.n	801085c <_strtod_l+0x1f4>
 801086a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801086e:	2a08      	cmp	r2, #8
 8010870:	f200 84db 	bhi.w	801122a <_strtod_l+0xbc2>
 8010874:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010876:	9007      	str	r0, [sp, #28]
 8010878:	2000      	movs	r0, #0
 801087a:	920a      	str	r2, [sp, #40]	; 0x28
 801087c:	4605      	mov	r5, r0
 801087e:	3b30      	subs	r3, #48	; 0x30
 8010880:	f100 0201 	add.w	r2, r0, #1
 8010884:	d014      	beq.n	80108b0 <_strtod_l+0x248>
 8010886:	9907      	ldr	r1, [sp, #28]
 8010888:	4411      	add	r1, r2
 801088a:	9107      	str	r1, [sp, #28]
 801088c:	462a      	mov	r2, r5
 801088e:	eb00 0e05 	add.w	lr, r0, r5
 8010892:	210a      	movs	r1, #10
 8010894:	4572      	cmp	r2, lr
 8010896:	d113      	bne.n	80108c0 <_strtod_l+0x258>
 8010898:	182a      	adds	r2, r5, r0
 801089a:	2a08      	cmp	r2, #8
 801089c:	f105 0501 	add.w	r5, r5, #1
 80108a0:	4405      	add	r5, r0
 80108a2:	dc1c      	bgt.n	80108de <_strtod_l+0x276>
 80108a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80108a6:	220a      	movs	r2, #10
 80108a8:	fb02 3301 	mla	r3, r2, r1, r3
 80108ac:	9309      	str	r3, [sp, #36]	; 0x24
 80108ae:	2200      	movs	r2, #0
 80108b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80108b2:	1c59      	adds	r1, r3, #1
 80108b4:	911d      	str	r1, [sp, #116]	; 0x74
 80108b6:	785b      	ldrb	r3, [r3, #1]
 80108b8:	4610      	mov	r0, r2
 80108ba:	e7c9      	b.n	8010850 <_strtod_l+0x1e8>
 80108bc:	4638      	mov	r0, r7
 80108be:	e7d2      	b.n	8010866 <_strtod_l+0x1fe>
 80108c0:	2a08      	cmp	r2, #8
 80108c2:	dc04      	bgt.n	80108ce <_strtod_l+0x266>
 80108c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80108c6:	434e      	muls	r6, r1
 80108c8:	9609      	str	r6, [sp, #36]	; 0x24
 80108ca:	3201      	adds	r2, #1
 80108cc:	e7e2      	b.n	8010894 <_strtod_l+0x22c>
 80108ce:	f102 0c01 	add.w	ip, r2, #1
 80108d2:	f1bc 0f10 	cmp.w	ip, #16
 80108d6:	bfd8      	it	le
 80108d8:	fb01 f909 	mulle.w	r9, r1, r9
 80108dc:	e7f5      	b.n	80108ca <_strtod_l+0x262>
 80108de:	2d10      	cmp	r5, #16
 80108e0:	bfdc      	itt	le
 80108e2:	220a      	movle	r2, #10
 80108e4:	fb02 3909 	mlale	r9, r2, r9, r3
 80108e8:	e7e1      	b.n	80108ae <_strtod_l+0x246>
 80108ea:	2300      	movs	r3, #0
 80108ec:	9307      	str	r3, [sp, #28]
 80108ee:	2201      	movs	r2, #1
 80108f0:	e77c      	b.n	80107ec <_strtod_l+0x184>
 80108f2:	f04f 0c00 	mov.w	ip, #0
 80108f6:	f108 0302 	add.w	r3, r8, #2
 80108fa:	931d      	str	r3, [sp, #116]	; 0x74
 80108fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010900:	e785      	b.n	801080e <_strtod_l+0x1a6>
 8010902:	f04f 0c01 	mov.w	ip, #1
 8010906:	e7f6      	b.n	80108f6 <_strtod_l+0x28e>
 8010908:	08015890 	.word	0x08015890
 801090c:	08015640 	.word	0x08015640
 8010910:	7ff00000 	.word	0x7ff00000
 8010914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010916:	1c59      	adds	r1, r3, #1
 8010918:	911d      	str	r1, [sp, #116]	; 0x74
 801091a:	785b      	ldrb	r3, [r3, #1]
 801091c:	2b30      	cmp	r3, #48	; 0x30
 801091e:	d0f9      	beq.n	8010914 <_strtod_l+0x2ac>
 8010920:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8010924:	2908      	cmp	r1, #8
 8010926:	f63f af79 	bhi.w	801081c <_strtod_l+0x1b4>
 801092a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801092e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010930:	9308      	str	r3, [sp, #32]
 8010932:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010934:	1c59      	adds	r1, r3, #1
 8010936:	911d      	str	r1, [sp, #116]	; 0x74
 8010938:	785b      	ldrb	r3, [r3, #1]
 801093a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801093e:	2e09      	cmp	r6, #9
 8010940:	d937      	bls.n	80109b2 <_strtod_l+0x34a>
 8010942:	9e08      	ldr	r6, [sp, #32]
 8010944:	1b89      	subs	r1, r1, r6
 8010946:	2908      	cmp	r1, #8
 8010948:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801094c:	dc02      	bgt.n	8010954 <_strtod_l+0x2ec>
 801094e:	4576      	cmp	r6, lr
 8010950:	bfa8      	it	ge
 8010952:	4676      	movge	r6, lr
 8010954:	f1bc 0f00 	cmp.w	ip, #0
 8010958:	d000      	beq.n	801095c <_strtod_l+0x2f4>
 801095a:	4276      	negs	r6, r6
 801095c:	2d00      	cmp	r5, #0
 801095e:	d14f      	bne.n	8010a00 <_strtod_l+0x398>
 8010960:	9904      	ldr	r1, [sp, #16]
 8010962:	4301      	orrs	r1, r0
 8010964:	f47f aec2 	bne.w	80106ec <_strtod_l+0x84>
 8010968:	2a00      	cmp	r2, #0
 801096a:	f47f aedb 	bne.w	8010724 <_strtod_l+0xbc>
 801096e:	2b69      	cmp	r3, #105	; 0x69
 8010970:	d027      	beq.n	80109c2 <_strtod_l+0x35a>
 8010972:	dc24      	bgt.n	80109be <_strtod_l+0x356>
 8010974:	2b49      	cmp	r3, #73	; 0x49
 8010976:	d024      	beq.n	80109c2 <_strtod_l+0x35a>
 8010978:	2b4e      	cmp	r3, #78	; 0x4e
 801097a:	f47f aed3 	bne.w	8010724 <_strtod_l+0xbc>
 801097e:	499e      	ldr	r1, [pc, #632]	; (8010bf8 <_strtod_l+0x590>)
 8010980:	a81d      	add	r0, sp, #116	; 0x74
 8010982:	f001 fe61 	bl	8012648 <__match>
 8010986:	2800      	cmp	r0, #0
 8010988:	f43f aecc 	beq.w	8010724 <_strtod_l+0xbc>
 801098c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	2b28      	cmp	r3, #40	; 0x28
 8010992:	d12d      	bne.n	80109f0 <_strtod_l+0x388>
 8010994:	4999      	ldr	r1, [pc, #612]	; (8010bfc <_strtod_l+0x594>)
 8010996:	aa20      	add	r2, sp, #128	; 0x80
 8010998:	a81d      	add	r0, sp, #116	; 0x74
 801099a:	f001 fe69 	bl	8012670 <__hexnan>
 801099e:	2805      	cmp	r0, #5
 80109a0:	d126      	bne.n	80109f0 <_strtod_l+0x388>
 80109a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80109a4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80109a8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80109ac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80109b0:	e69c      	b.n	80106ec <_strtod_l+0x84>
 80109b2:	210a      	movs	r1, #10
 80109b4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80109b8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80109bc:	e7b9      	b.n	8010932 <_strtod_l+0x2ca>
 80109be:	2b6e      	cmp	r3, #110	; 0x6e
 80109c0:	e7db      	b.n	801097a <_strtod_l+0x312>
 80109c2:	498f      	ldr	r1, [pc, #572]	; (8010c00 <_strtod_l+0x598>)
 80109c4:	a81d      	add	r0, sp, #116	; 0x74
 80109c6:	f001 fe3f 	bl	8012648 <__match>
 80109ca:	2800      	cmp	r0, #0
 80109cc:	f43f aeaa 	beq.w	8010724 <_strtod_l+0xbc>
 80109d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109d2:	498c      	ldr	r1, [pc, #560]	; (8010c04 <_strtod_l+0x59c>)
 80109d4:	3b01      	subs	r3, #1
 80109d6:	a81d      	add	r0, sp, #116	; 0x74
 80109d8:	931d      	str	r3, [sp, #116]	; 0x74
 80109da:	f001 fe35 	bl	8012648 <__match>
 80109de:	b910      	cbnz	r0, 80109e6 <_strtod_l+0x37e>
 80109e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80109e2:	3301      	adds	r3, #1
 80109e4:	931d      	str	r3, [sp, #116]	; 0x74
 80109e6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010c14 <_strtod_l+0x5ac>
 80109ea:	f04f 0a00 	mov.w	sl, #0
 80109ee:	e67d      	b.n	80106ec <_strtod_l+0x84>
 80109f0:	4885      	ldr	r0, [pc, #532]	; (8010c08 <_strtod_l+0x5a0>)
 80109f2:	f002 fdf9 	bl	80135e8 <nan>
 80109f6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80109fa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80109fe:	e675      	b.n	80106ec <_strtod_l+0x84>
 8010a00:	9b07      	ldr	r3, [sp, #28]
 8010a02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a04:	1af3      	subs	r3, r6, r3
 8010a06:	2f00      	cmp	r7, #0
 8010a08:	bf08      	it	eq
 8010a0a:	462f      	moveq	r7, r5
 8010a0c:	2d10      	cmp	r5, #16
 8010a0e:	9308      	str	r3, [sp, #32]
 8010a10:	46a8      	mov	r8, r5
 8010a12:	bfa8      	it	ge
 8010a14:	f04f 0810 	movge.w	r8, #16
 8010a18:	f7ef fd74 	bl	8000504 <__aeabi_ui2d>
 8010a1c:	2d09      	cmp	r5, #9
 8010a1e:	4682      	mov	sl, r0
 8010a20:	468b      	mov	fp, r1
 8010a22:	dd13      	ble.n	8010a4c <_strtod_l+0x3e4>
 8010a24:	4b79      	ldr	r3, [pc, #484]	; (8010c0c <_strtod_l+0x5a4>)
 8010a26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010a2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010a2e:	f7ef fde3 	bl	80005f8 <__aeabi_dmul>
 8010a32:	4682      	mov	sl, r0
 8010a34:	4648      	mov	r0, r9
 8010a36:	468b      	mov	fp, r1
 8010a38:	f7ef fd64 	bl	8000504 <__aeabi_ui2d>
 8010a3c:	4602      	mov	r2, r0
 8010a3e:	460b      	mov	r3, r1
 8010a40:	4650      	mov	r0, sl
 8010a42:	4659      	mov	r1, fp
 8010a44:	f7ef fc22 	bl	800028c <__adddf3>
 8010a48:	4682      	mov	sl, r0
 8010a4a:	468b      	mov	fp, r1
 8010a4c:	2d0f      	cmp	r5, #15
 8010a4e:	dc38      	bgt.n	8010ac2 <_strtod_l+0x45a>
 8010a50:	9b08      	ldr	r3, [sp, #32]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	f43f ae4a 	beq.w	80106ec <_strtod_l+0x84>
 8010a58:	dd24      	ble.n	8010aa4 <_strtod_l+0x43c>
 8010a5a:	2b16      	cmp	r3, #22
 8010a5c:	dc0b      	bgt.n	8010a76 <_strtod_l+0x40e>
 8010a5e:	4d6b      	ldr	r5, [pc, #428]	; (8010c0c <_strtod_l+0x5a4>)
 8010a60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8010a64:	e9d5 0100 	ldrd	r0, r1, [r5]
 8010a68:	4652      	mov	r2, sl
 8010a6a:	465b      	mov	r3, fp
 8010a6c:	f7ef fdc4 	bl	80005f8 <__aeabi_dmul>
 8010a70:	4682      	mov	sl, r0
 8010a72:	468b      	mov	fp, r1
 8010a74:	e63a      	b.n	80106ec <_strtod_l+0x84>
 8010a76:	9a08      	ldr	r2, [sp, #32]
 8010a78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	db20      	blt.n	8010ac2 <_strtod_l+0x45a>
 8010a80:	4c62      	ldr	r4, [pc, #392]	; (8010c0c <_strtod_l+0x5a4>)
 8010a82:	f1c5 050f 	rsb	r5, r5, #15
 8010a86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010a8a:	4652      	mov	r2, sl
 8010a8c:	465b      	mov	r3, fp
 8010a8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a92:	f7ef fdb1 	bl	80005f8 <__aeabi_dmul>
 8010a96:	9b08      	ldr	r3, [sp, #32]
 8010a98:	1b5d      	subs	r5, r3, r5
 8010a9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010a9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010aa2:	e7e3      	b.n	8010a6c <_strtod_l+0x404>
 8010aa4:	9b08      	ldr	r3, [sp, #32]
 8010aa6:	3316      	adds	r3, #22
 8010aa8:	db0b      	blt.n	8010ac2 <_strtod_l+0x45a>
 8010aaa:	9b07      	ldr	r3, [sp, #28]
 8010aac:	4a57      	ldr	r2, [pc, #348]	; (8010c0c <_strtod_l+0x5a4>)
 8010aae:	1b9e      	subs	r6, r3, r6
 8010ab0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010ab4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010ab8:	4650      	mov	r0, sl
 8010aba:	4659      	mov	r1, fp
 8010abc:	f7ef fec6 	bl	800084c <__aeabi_ddiv>
 8010ac0:	e7d6      	b.n	8010a70 <_strtod_l+0x408>
 8010ac2:	9b08      	ldr	r3, [sp, #32]
 8010ac4:	eba5 0808 	sub.w	r8, r5, r8
 8010ac8:	4498      	add	r8, r3
 8010aca:	f1b8 0f00 	cmp.w	r8, #0
 8010ace:	dd71      	ble.n	8010bb4 <_strtod_l+0x54c>
 8010ad0:	f018 030f 	ands.w	r3, r8, #15
 8010ad4:	d00a      	beq.n	8010aec <_strtod_l+0x484>
 8010ad6:	494d      	ldr	r1, [pc, #308]	; (8010c0c <_strtod_l+0x5a4>)
 8010ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010adc:	4652      	mov	r2, sl
 8010ade:	465b      	mov	r3, fp
 8010ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ae4:	f7ef fd88 	bl	80005f8 <__aeabi_dmul>
 8010ae8:	4682      	mov	sl, r0
 8010aea:	468b      	mov	fp, r1
 8010aec:	f038 080f 	bics.w	r8, r8, #15
 8010af0:	d04d      	beq.n	8010b8e <_strtod_l+0x526>
 8010af2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010af6:	dd22      	ble.n	8010b3e <_strtod_l+0x4d6>
 8010af8:	2500      	movs	r5, #0
 8010afa:	462e      	mov	r6, r5
 8010afc:	9509      	str	r5, [sp, #36]	; 0x24
 8010afe:	9507      	str	r5, [sp, #28]
 8010b00:	2322      	movs	r3, #34	; 0x22
 8010b02:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010c14 <_strtod_l+0x5ac>
 8010b06:	6023      	str	r3, [r4, #0]
 8010b08:	f04f 0a00 	mov.w	sl, #0
 8010b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f43f adec 	beq.w	80106ec <_strtod_l+0x84>
 8010b14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010b16:	4620      	mov	r0, r4
 8010b18:	f001 fec4 	bl	80128a4 <_Bfree>
 8010b1c:	9907      	ldr	r1, [sp, #28]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f001 fec0 	bl	80128a4 <_Bfree>
 8010b24:	4631      	mov	r1, r6
 8010b26:	4620      	mov	r0, r4
 8010b28:	f001 febc 	bl	80128a4 <_Bfree>
 8010b2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f001 feb8 	bl	80128a4 <_Bfree>
 8010b34:	4629      	mov	r1, r5
 8010b36:	4620      	mov	r0, r4
 8010b38:	f001 feb4 	bl	80128a4 <_Bfree>
 8010b3c:	e5d6      	b.n	80106ec <_strtod_l+0x84>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010b44:	4650      	mov	r0, sl
 8010b46:	4659      	mov	r1, fp
 8010b48:	4699      	mov	r9, r3
 8010b4a:	f1b8 0f01 	cmp.w	r8, #1
 8010b4e:	dc21      	bgt.n	8010b94 <_strtod_l+0x52c>
 8010b50:	b10b      	cbz	r3, 8010b56 <_strtod_l+0x4ee>
 8010b52:	4682      	mov	sl, r0
 8010b54:	468b      	mov	fp, r1
 8010b56:	4b2e      	ldr	r3, [pc, #184]	; (8010c10 <_strtod_l+0x5a8>)
 8010b58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010b5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010b60:	4652      	mov	r2, sl
 8010b62:	465b      	mov	r3, fp
 8010b64:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010b68:	f7ef fd46 	bl	80005f8 <__aeabi_dmul>
 8010b6c:	4b29      	ldr	r3, [pc, #164]	; (8010c14 <_strtod_l+0x5ac>)
 8010b6e:	460a      	mov	r2, r1
 8010b70:	400b      	ands	r3, r1
 8010b72:	4929      	ldr	r1, [pc, #164]	; (8010c18 <_strtod_l+0x5b0>)
 8010b74:	428b      	cmp	r3, r1
 8010b76:	4682      	mov	sl, r0
 8010b78:	d8be      	bhi.n	8010af8 <_strtod_l+0x490>
 8010b7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010b7e:	428b      	cmp	r3, r1
 8010b80:	bf86      	itte	hi
 8010b82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010c1c <_strtod_l+0x5b4>
 8010b86:	f04f 3aff 	movhi.w	sl, #4294967295
 8010b8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010b8e:	2300      	movs	r3, #0
 8010b90:	9304      	str	r3, [sp, #16]
 8010b92:	e081      	b.n	8010c98 <_strtod_l+0x630>
 8010b94:	f018 0f01 	tst.w	r8, #1
 8010b98:	d007      	beq.n	8010baa <_strtod_l+0x542>
 8010b9a:	4b1d      	ldr	r3, [pc, #116]	; (8010c10 <_strtod_l+0x5a8>)
 8010b9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	f7ef fd28 	bl	80005f8 <__aeabi_dmul>
 8010ba8:	2301      	movs	r3, #1
 8010baa:	f109 0901 	add.w	r9, r9, #1
 8010bae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010bb2:	e7ca      	b.n	8010b4a <_strtod_l+0x4e2>
 8010bb4:	d0eb      	beq.n	8010b8e <_strtod_l+0x526>
 8010bb6:	f1c8 0800 	rsb	r8, r8, #0
 8010bba:	f018 020f 	ands.w	r2, r8, #15
 8010bbe:	d00a      	beq.n	8010bd6 <_strtod_l+0x56e>
 8010bc0:	4b12      	ldr	r3, [pc, #72]	; (8010c0c <_strtod_l+0x5a4>)
 8010bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bc6:	4650      	mov	r0, sl
 8010bc8:	4659      	mov	r1, fp
 8010bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bce:	f7ef fe3d 	bl	800084c <__aeabi_ddiv>
 8010bd2:	4682      	mov	sl, r0
 8010bd4:	468b      	mov	fp, r1
 8010bd6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010bda:	d0d8      	beq.n	8010b8e <_strtod_l+0x526>
 8010bdc:	f1b8 0f1f 	cmp.w	r8, #31
 8010be0:	dd1e      	ble.n	8010c20 <_strtod_l+0x5b8>
 8010be2:	2500      	movs	r5, #0
 8010be4:	462e      	mov	r6, r5
 8010be6:	9509      	str	r5, [sp, #36]	; 0x24
 8010be8:	9507      	str	r5, [sp, #28]
 8010bea:	2322      	movs	r3, #34	; 0x22
 8010bec:	f04f 0a00 	mov.w	sl, #0
 8010bf0:	f04f 0b00 	mov.w	fp, #0
 8010bf4:	6023      	str	r3, [r4, #0]
 8010bf6:	e789      	b.n	8010b0c <_strtod_l+0x4a4>
 8010bf8:	08015611 	.word	0x08015611
 8010bfc:	08015654 	.word	0x08015654
 8010c00:	08015609 	.word	0x08015609
 8010c04:	08015794 	.word	0x08015794
 8010c08:	08015a50 	.word	0x08015a50
 8010c0c:	08015930 	.word	0x08015930
 8010c10:	08015908 	.word	0x08015908
 8010c14:	7ff00000 	.word	0x7ff00000
 8010c18:	7ca00000 	.word	0x7ca00000
 8010c1c:	7fefffff 	.word	0x7fefffff
 8010c20:	f018 0310 	ands.w	r3, r8, #16
 8010c24:	bf18      	it	ne
 8010c26:	236a      	movne	r3, #106	; 0x6a
 8010c28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010fe0 <_strtod_l+0x978>
 8010c2c:	9304      	str	r3, [sp, #16]
 8010c2e:	4650      	mov	r0, sl
 8010c30:	4659      	mov	r1, fp
 8010c32:	2300      	movs	r3, #0
 8010c34:	f018 0f01 	tst.w	r8, #1
 8010c38:	d004      	beq.n	8010c44 <_strtod_l+0x5dc>
 8010c3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010c3e:	f7ef fcdb 	bl	80005f8 <__aeabi_dmul>
 8010c42:	2301      	movs	r3, #1
 8010c44:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010c48:	f109 0908 	add.w	r9, r9, #8
 8010c4c:	d1f2      	bne.n	8010c34 <_strtod_l+0x5cc>
 8010c4e:	b10b      	cbz	r3, 8010c54 <_strtod_l+0x5ec>
 8010c50:	4682      	mov	sl, r0
 8010c52:	468b      	mov	fp, r1
 8010c54:	9b04      	ldr	r3, [sp, #16]
 8010c56:	b1bb      	cbz	r3, 8010c88 <_strtod_l+0x620>
 8010c58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010c5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	4659      	mov	r1, fp
 8010c64:	dd10      	ble.n	8010c88 <_strtod_l+0x620>
 8010c66:	2b1f      	cmp	r3, #31
 8010c68:	f340 8128 	ble.w	8010ebc <_strtod_l+0x854>
 8010c6c:	2b34      	cmp	r3, #52	; 0x34
 8010c6e:	bfde      	ittt	le
 8010c70:	3b20      	suble	r3, #32
 8010c72:	f04f 32ff 	movle.w	r2, #4294967295
 8010c76:	fa02 f303 	lslle.w	r3, r2, r3
 8010c7a:	f04f 0a00 	mov.w	sl, #0
 8010c7e:	bfcc      	ite	gt
 8010c80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010c84:	ea03 0b01 	andle.w	fp, r3, r1
 8010c88:	2200      	movs	r2, #0
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	4650      	mov	r0, sl
 8010c8e:	4659      	mov	r1, fp
 8010c90:	f7ef ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d1a4      	bne.n	8010be2 <_strtod_l+0x57a>
 8010c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c9a:	9300      	str	r3, [sp, #0]
 8010c9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010c9e:	462b      	mov	r3, r5
 8010ca0:	463a      	mov	r2, r7
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f001 fe6a 	bl	801297c <__s2b>
 8010ca8:	9009      	str	r0, [sp, #36]	; 0x24
 8010caa:	2800      	cmp	r0, #0
 8010cac:	f43f af24 	beq.w	8010af8 <_strtod_l+0x490>
 8010cb0:	9b07      	ldr	r3, [sp, #28]
 8010cb2:	1b9e      	subs	r6, r3, r6
 8010cb4:	9b08      	ldr	r3, [sp, #32]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	bfb4      	ite	lt
 8010cba:	4633      	movlt	r3, r6
 8010cbc:	2300      	movge	r3, #0
 8010cbe:	9310      	str	r3, [sp, #64]	; 0x40
 8010cc0:	9b08      	ldr	r3, [sp, #32]
 8010cc2:	2500      	movs	r5, #0
 8010cc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010cc8:	9318      	str	r3, [sp, #96]	; 0x60
 8010cca:	462e      	mov	r6, r5
 8010ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cce:	4620      	mov	r0, r4
 8010cd0:	6859      	ldr	r1, [r3, #4]
 8010cd2:	f001 fda7 	bl	8012824 <_Balloc>
 8010cd6:	9007      	str	r0, [sp, #28]
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	f43f af11 	beq.w	8010b00 <_strtod_l+0x498>
 8010cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ce0:	691a      	ldr	r2, [r3, #16]
 8010ce2:	3202      	adds	r2, #2
 8010ce4:	f103 010c 	add.w	r1, r3, #12
 8010ce8:	0092      	lsls	r2, r2, #2
 8010cea:	300c      	adds	r0, #12
 8010cec:	f001 fd8c 	bl	8012808 <memcpy>
 8010cf0:	ec4b ab10 	vmov	d0, sl, fp
 8010cf4:	aa20      	add	r2, sp, #128	; 0x80
 8010cf6:	a91f      	add	r1, sp, #124	; 0x7c
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010cfe:	f002 f979 	bl	8012ff4 <__d2b>
 8010d02:	901e      	str	r0, [sp, #120]	; 0x78
 8010d04:	2800      	cmp	r0, #0
 8010d06:	f43f aefb 	beq.w	8010b00 <_strtod_l+0x498>
 8010d0a:	2101      	movs	r1, #1
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f001 fecf 	bl	8012ab0 <__i2b>
 8010d12:	4606      	mov	r6, r0
 8010d14:	2800      	cmp	r0, #0
 8010d16:	f43f aef3 	beq.w	8010b00 <_strtod_l+0x498>
 8010d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d1c:	9904      	ldr	r1, [sp, #16]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	bfab      	itete	ge
 8010d22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010d24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010d26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010d28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010d2c:	bfac      	ite	ge
 8010d2e:	eb03 0902 	addge.w	r9, r3, r2
 8010d32:	1ad7      	sublt	r7, r2, r3
 8010d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010d36:	eba3 0801 	sub.w	r8, r3, r1
 8010d3a:	4490      	add	r8, r2
 8010d3c:	4ba3      	ldr	r3, [pc, #652]	; (8010fcc <_strtod_l+0x964>)
 8010d3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d42:	4598      	cmp	r8, r3
 8010d44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010d48:	f280 80cc 	bge.w	8010ee4 <_strtod_l+0x87c>
 8010d4c:	eba3 0308 	sub.w	r3, r3, r8
 8010d50:	2b1f      	cmp	r3, #31
 8010d52:	eba2 0203 	sub.w	r2, r2, r3
 8010d56:	f04f 0101 	mov.w	r1, #1
 8010d5a:	f300 80b6 	bgt.w	8010eca <_strtod_l+0x862>
 8010d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d62:	9311      	str	r3, [sp, #68]	; 0x44
 8010d64:	2300      	movs	r3, #0
 8010d66:	930c      	str	r3, [sp, #48]	; 0x30
 8010d68:	eb09 0802 	add.w	r8, r9, r2
 8010d6c:	9b04      	ldr	r3, [sp, #16]
 8010d6e:	45c1      	cmp	r9, r8
 8010d70:	4417      	add	r7, r2
 8010d72:	441f      	add	r7, r3
 8010d74:	464b      	mov	r3, r9
 8010d76:	bfa8      	it	ge
 8010d78:	4643      	movge	r3, r8
 8010d7a:	42bb      	cmp	r3, r7
 8010d7c:	bfa8      	it	ge
 8010d7e:	463b      	movge	r3, r7
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	bfc2      	ittt	gt
 8010d84:	eba8 0803 	subgt.w	r8, r8, r3
 8010d88:	1aff      	subgt	r7, r7, r3
 8010d8a:	eba9 0903 	subgt.w	r9, r9, r3
 8010d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	dd17      	ble.n	8010dc4 <_strtod_l+0x75c>
 8010d94:	4631      	mov	r1, r6
 8010d96:	461a      	mov	r2, r3
 8010d98:	4620      	mov	r0, r4
 8010d9a:	f001 ff45 	bl	8012c28 <__pow5mult>
 8010d9e:	4606      	mov	r6, r0
 8010da0:	2800      	cmp	r0, #0
 8010da2:	f43f aead 	beq.w	8010b00 <_strtod_l+0x498>
 8010da6:	4601      	mov	r1, r0
 8010da8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010daa:	4620      	mov	r0, r4
 8010dac:	f001 fe96 	bl	8012adc <__multiply>
 8010db0:	900f      	str	r0, [sp, #60]	; 0x3c
 8010db2:	2800      	cmp	r0, #0
 8010db4:	f43f aea4 	beq.w	8010b00 <_strtod_l+0x498>
 8010db8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f001 fd72 	bl	80128a4 <_Bfree>
 8010dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010dc2:	931e      	str	r3, [sp, #120]	; 0x78
 8010dc4:	f1b8 0f00 	cmp.w	r8, #0
 8010dc8:	f300 8091 	bgt.w	8010eee <_strtod_l+0x886>
 8010dcc:	9b08      	ldr	r3, [sp, #32]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	dd08      	ble.n	8010de4 <_strtod_l+0x77c>
 8010dd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010dd4:	9907      	ldr	r1, [sp, #28]
 8010dd6:	4620      	mov	r0, r4
 8010dd8:	f001 ff26 	bl	8012c28 <__pow5mult>
 8010ddc:	9007      	str	r0, [sp, #28]
 8010dde:	2800      	cmp	r0, #0
 8010de0:	f43f ae8e 	beq.w	8010b00 <_strtod_l+0x498>
 8010de4:	2f00      	cmp	r7, #0
 8010de6:	dd08      	ble.n	8010dfa <_strtod_l+0x792>
 8010de8:	9907      	ldr	r1, [sp, #28]
 8010dea:	463a      	mov	r2, r7
 8010dec:	4620      	mov	r0, r4
 8010dee:	f001 ff75 	bl	8012cdc <__lshift>
 8010df2:	9007      	str	r0, [sp, #28]
 8010df4:	2800      	cmp	r0, #0
 8010df6:	f43f ae83 	beq.w	8010b00 <_strtod_l+0x498>
 8010dfa:	f1b9 0f00 	cmp.w	r9, #0
 8010dfe:	dd08      	ble.n	8010e12 <_strtod_l+0x7aa>
 8010e00:	4631      	mov	r1, r6
 8010e02:	464a      	mov	r2, r9
 8010e04:	4620      	mov	r0, r4
 8010e06:	f001 ff69 	bl	8012cdc <__lshift>
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	2800      	cmp	r0, #0
 8010e0e:	f43f ae77 	beq.w	8010b00 <_strtod_l+0x498>
 8010e12:	9a07      	ldr	r2, [sp, #28]
 8010e14:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010e16:	4620      	mov	r0, r4
 8010e18:	f001 ffe8 	bl	8012dec <__mdiff>
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	2800      	cmp	r0, #0
 8010e20:	f43f ae6e 	beq.w	8010b00 <_strtod_l+0x498>
 8010e24:	68c3      	ldr	r3, [r0, #12]
 8010e26:	930f      	str	r3, [sp, #60]	; 0x3c
 8010e28:	2300      	movs	r3, #0
 8010e2a:	60c3      	str	r3, [r0, #12]
 8010e2c:	4631      	mov	r1, r6
 8010e2e:	f001 ffc1 	bl	8012db4 <__mcmp>
 8010e32:	2800      	cmp	r0, #0
 8010e34:	da65      	bge.n	8010f02 <_strtod_l+0x89a>
 8010e36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e38:	ea53 030a 	orrs.w	r3, r3, sl
 8010e3c:	f040 8087 	bne.w	8010f4e <_strtod_l+0x8e6>
 8010e40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	f040 8082 	bne.w	8010f4e <_strtod_l+0x8e6>
 8010e4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010e4e:	0d1b      	lsrs	r3, r3, #20
 8010e50:	051b      	lsls	r3, r3, #20
 8010e52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010e56:	d97a      	bls.n	8010f4e <_strtod_l+0x8e6>
 8010e58:	696b      	ldr	r3, [r5, #20]
 8010e5a:	b913      	cbnz	r3, 8010e62 <_strtod_l+0x7fa>
 8010e5c:	692b      	ldr	r3, [r5, #16]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	dd75      	ble.n	8010f4e <_strtod_l+0x8e6>
 8010e62:	4629      	mov	r1, r5
 8010e64:	2201      	movs	r2, #1
 8010e66:	4620      	mov	r0, r4
 8010e68:	f001 ff38 	bl	8012cdc <__lshift>
 8010e6c:	4631      	mov	r1, r6
 8010e6e:	4605      	mov	r5, r0
 8010e70:	f001 ffa0 	bl	8012db4 <__mcmp>
 8010e74:	2800      	cmp	r0, #0
 8010e76:	dd6a      	ble.n	8010f4e <_strtod_l+0x8e6>
 8010e78:	9904      	ldr	r1, [sp, #16]
 8010e7a:	4a55      	ldr	r2, [pc, #340]	; (8010fd0 <_strtod_l+0x968>)
 8010e7c:	465b      	mov	r3, fp
 8010e7e:	2900      	cmp	r1, #0
 8010e80:	f000 8085 	beq.w	8010f8e <_strtod_l+0x926>
 8010e84:	ea02 010b 	and.w	r1, r2, fp
 8010e88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010e8c:	dc7f      	bgt.n	8010f8e <_strtod_l+0x926>
 8010e8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010e92:	f77f aeaa 	ble.w	8010bea <_strtod_l+0x582>
 8010e96:	4a4f      	ldr	r2, [pc, #316]	; (8010fd4 <_strtod_l+0x96c>)
 8010e98:	2300      	movs	r3, #0
 8010e9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010e9e:	4650      	mov	r0, sl
 8010ea0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010ea4:	4659      	mov	r1, fp
 8010ea6:	f7ef fba7 	bl	80005f8 <__aeabi_dmul>
 8010eaa:	460b      	mov	r3, r1
 8010eac:	4303      	orrs	r3, r0
 8010eae:	bf08      	it	eq
 8010eb0:	2322      	moveq	r3, #34	; 0x22
 8010eb2:	4682      	mov	sl, r0
 8010eb4:	468b      	mov	fp, r1
 8010eb6:	bf08      	it	eq
 8010eb8:	6023      	streq	r3, [r4, #0]
 8010eba:	e62b      	b.n	8010b14 <_strtod_l+0x4ac>
 8010ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec4:	ea03 0a0a 	and.w	sl, r3, sl
 8010ec8:	e6de      	b.n	8010c88 <_strtod_l+0x620>
 8010eca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010ece:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010ed2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010ed6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010eda:	fa01 f308 	lsl.w	r3, r1, r8
 8010ede:	930c      	str	r3, [sp, #48]	; 0x30
 8010ee0:	9111      	str	r1, [sp, #68]	; 0x44
 8010ee2:	e741      	b.n	8010d68 <_strtod_l+0x700>
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	930c      	str	r3, [sp, #48]	; 0x30
 8010ee8:	2301      	movs	r3, #1
 8010eea:	9311      	str	r3, [sp, #68]	; 0x44
 8010eec:	e73c      	b.n	8010d68 <_strtod_l+0x700>
 8010eee:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ef0:	4642      	mov	r2, r8
 8010ef2:	4620      	mov	r0, r4
 8010ef4:	f001 fef2 	bl	8012cdc <__lshift>
 8010ef8:	901e      	str	r0, [sp, #120]	; 0x78
 8010efa:	2800      	cmp	r0, #0
 8010efc:	f47f af66 	bne.w	8010dcc <_strtod_l+0x764>
 8010f00:	e5fe      	b.n	8010b00 <_strtod_l+0x498>
 8010f02:	465f      	mov	r7, fp
 8010f04:	d16e      	bne.n	8010fe4 <_strtod_l+0x97c>
 8010f06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010f08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f0c:	b342      	cbz	r2, 8010f60 <_strtod_l+0x8f8>
 8010f0e:	4a32      	ldr	r2, [pc, #200]	; (8010fd8 <_strtod_l+0x970>)
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d128      	bne.n	8010f66 <_strtod_l+0x8fe>
 8010f14:	9b04      	ldr	r3, [sp, #16]
 8010f16:	4650      	mov	r0, sl
 8010f18:	b1eb      	cbz	r3, 8010f56 <_strtod_l+0x8ee>
 8010f1a:	4a2d      	ldr	r2, [pc, #180]	; (8010fd0 <_strtod_l+0x968>)
 8010f1c:	403a      	ands	r2, r7
 8010f1e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010f22:	f04f 31ff 	mov.w	r1, #4294967295
 8010f26:	d819      	bhi.n	8010f5c <_strtod_l+0x8f4>
 8010f28:	0d12      	lsrs	r2, r2, #20
 8010f2a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f32:	4298      	cmp	r0, r3
 8010f34:	d117      	bne.n	8010f66 <_strtod_l+0x8fe>
 8010f36:	4b29      	ldr	r3, [pc, #164]	; (8010fdc <_strtod_l+0x974>)
 8010f38:	429f      	cmp	r7, r3
 8010f3a:	d102      	bne.n	8010f42 <_strtod_l+0x8da>
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	f43f addf 	beq.w	8010b00 <_strtod_l+0x498>
 8010f42:	4b23      	ldr	r3, [pc, #140]	; (8010fd0 <_strtod_l+0x968>)
 8010f44:	403b      	ands	r3, r7
 8010f46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010f4a:	f04f 0a00 	mov.w	sl, #0
 8010f4e:	9b04      	ldr	r3, [sp, #16]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1a0      	bne.n	8010e96 <_strtod_l+0x82e>
 8010f54:	e5de      	b.n	8010b14 <_strtod_l+0x4ac>
 8010f56:	f04f 33ff 	mov.w	r3, #4294967295
 8010f5a:	e7ea      	b.n	8010f32 <_strtod_l+0x8ca>
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	e7e8      	b.n	8010f32 <_strtod_l+0x8ca>
 8010f60:	ea53 030a 	orrs.w	r3, r3, sl
 8010f64:	d088      	beq.n	8010e78 <_strtod_l+0x810>
 8010f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f68:	b1db      	cbz	r3, 8010fa2 <_strtod_l+0x93a>
 8010f6a:	423b      	tst	r3, r7
 8010f6c:	d0ef      	beq.n	8010f4e <_strtod_l+0x8e6>
 8010f6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f70:	9a04      	ldr	r2, [sp, #16]
 8010f72:	4650      	mov	r0, sl
 8010f74:	4659      	mov	r1, fp
 8010f76:	b1c3      	cbz	r3, 8010faa <_strtod_l+0x942>
 8010f78:	f7ff fb57 	bl	801062a <sulp>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	460b      	mov	r3, r1
 8010f80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010f84:	f7ef f982 	bl	800028c <__adddf3>
 8010f88:	4682      	mov	sl, r0
 8010f8a:	468b      	mov	fp, r1
 8010f8c:	e7df      	b.n	8010f4e <_strtod_l+0x8e6>
 8010f8e:	4013      	ands	r3, r2
 8010f90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010f94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010f98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010f9c:	f04f 3aff 	mov.w	sl, #4294967295
 8010fa0:	e7d5      	b.n	8010f4e <_strtod_l+0x8e6>
 8010fa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010fa4:	ea13 0f0a 	tst.w	r3, sl
 8010fa8:	e7e0      	b.n	8010f6c <_strtod_l+0x904>
 8010faa:	f7ff fb3e 	bl	801062a <sulp>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010fb6:	f7ef f967 	bl	8000288 <__aeabi_dsub>
 8010fba:	2200      	movs	r2, #0
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	4682      	mov	sl, r0
 8010fc0:	468b      	mov	fp, r1
 8010fc2:	f7ef fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d0c1      	beq.n	8010f4e <_strtod_l+0x8e6>
 8010fca:	e60e      	b.n	8010bea <_strtod_l+0x582>
 8010fcc:	fffffc02 	.word	0xfffffc02
 8010fd0:	7ff00000 	.word	0x7ff00000
 8010fd4:	39500000 	.word	0x39500000
 8010fd8:	000fffff 	.word	0x000fffff
 8010fdc:	7fefffff 	.word	0x7fefffff
 8010fe0:	08015668 	.word	0x08015668
 8010fe4:	4631      	mov	r1, r6
 8010fe6:	4628      	mov	r0, r5
 8010fe8:	f002 f860 	bl	80130ac <__ratio>
 8010fec:	ec59 8b10 	vmov	r8, r9, d0
 8010ff0:	ee10 0a10 	vmov	r0, s0
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ffa:	4649      	mov	r1, r9
 8010ffc:	f7ef fd78 	bl	8000af0 <__aeabi_dcmple>
 8011000:	2800      	cmp	r0, #0
 8011002:	d07c      	beq.n	80110fe <_strtod_l+0xa96>
 8011004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011006:	2b00      	cmp	r3, #0
 8011008:	d04c      	beq.n	80110a4 <_strtod_l+0xa3c>
 801100a:	4b95      	ldr	r3, [pc, #596]	; (8011260 <_strtod_l+0xbf8>)
 801100c:	2200      	movs	r2, #0
 801100e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011012:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011260 <_strtod_l+0xbf8>
 8011016:	f04f 0800 	mov.w	r8, #0
 801101a:	4b92      	ldr	r3, [pc, #584]	; (8011264 <_strtod_l+0xbfc>)
 801101c:	403b      	ands	r3, r7
 801101e:	9311      	str	r3, [sp, #68]	; 0x44
 8011020:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011022:	4b91      	ldr	r3, [pc, #580]	; (8011268 <_strtod_l+0xc00>)
 8011024:	429a      	cmp	r2, r3
 8011026:	f040 80b2 	bne.w	801118e <_strtod_l+0xb26>
 801102a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801102e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011032:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011036:	ec4b ab10 	vmov	d0, sl, fp
 801103a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801103e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011042:	f001 ff5b 	bl	8012efc <__ulp>
 8011046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801104a:	ec53 2b10 	vmov	r2, r3, d0
 801104e:	f7ef fad3 	bl	80005f8 <__aeabi_dmul>
 8011052:	4652      	mov	r2, sl
 8011054:	465b      	mov	r3, fp
 8011056:	f7ef f919 	bl	800028c <__adddf3>
 801105a:	460b      	mov	r3, r1
 801105c:	4981      	ldr	r1, [pc, #516]	; (8011264 <_strtod_l+0xbfc>)
 801105e:	4a83      	ldr	r2, [pc, #524]	; (801126c <_strtod_l+0xc04>)
 8011060:	4019      	ands	r1, r3
 8011062:	4291      	cmp	r1, r2
 8011064:	4682      	mov	sl, r0
 8011066:	d95e      	bls.n	8011126 <_strtod_l+0xabe>
 8011068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801106a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801106e:	4293      	cmp	r3, r2
 8011070:	d103      	bne.n	801107a <_strtod_l+0xa12>
 8011072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011074:	3301      	adds	r3, #1
 8011076:	f43f ad43 	beq.w	8010b00 <_strtod_l+0x498>
 801107a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011278 <_strtod_l+0xc10>
 801107e:	f04f 3aff 	mov.w	sl, #4294967295
 8011082:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011084:	4620      	mov	r0, r4
 8011086:	f001 fc0d 	bl	80128a4 <_Bfree>
 801108a:	9907      	ldr	r1, [sp, #28]
 801108c:	4620      	mov	r0, r4
 801108e:	f001 fc09 	bl	80128a4 <_Bfree>
 8011092:	4631      	mov	r1, r6
 8011094:	4620      	mov	r0, r4
 8011096:	f001 fc05 	bl	80128a4 <_Bfree>
 801109a:	4629      	mov	r1, r5
 801109c:	4620      	mov	r0, r4
 801109e:	f001 fc01 	bl	80128a4 <_Bfree>
 80110a2:	e613      	b.n	8010ccc <_strtod_l+0x664>
 80110a4:	f1ba 0f00 	cmp.w	sl, #0
 80110a8:	d11b      	bne.n	80110e2 <_strtod_l+0xa7a>
 80110aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110ae:	b9f3      	cbnz	r3, 80110ee <_strtod_l+0xa86>
 80110b0:	4b6b      	ldr	r3, [pc, #428]	; (8011260 <_strtod_l+0xbf8>)
 80110b2:	2200      	movs	r2, #0
 80110b4:	4640      	mov	r0, r8
 80110b6:	4649      	mov	r1, r9
 80110b8:	f7ef fd10 	bl	8000adc <__aeabi_dcmplt>
 80110bc:	b9d0      	cbnz	r0, 80110f4 <_strtod_l+0xa8c>
 80110be:	4640      	mov	r0, r8
 80110c0:	4649      	mov	r1, r9
 80110c2:	4b6b      	ldr	r3, [pc, #428]	; (8011270 <_strtod_l+0xc08>)
 80110c4:	2200      	movs	r2, #0
 80110c6:	f7ef fa97 	bl	80005f8 <__aeabi_dmul>
 80110ca:	4680      	mov	r8, r0
 80110cc:	4689      	mov	r9, r1
 80110ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80110d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80110d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80110d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80110dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80110e0:	e79b      	b.n	801101a <_strtod_l+0x9b2>
 80110e2:	f1ba 0f01 	cmp.w	sl, #1
 80110e6:	d102      	bne.n	80110ee <_strtod_l+0xa86>
 80110e8:	2f00      	cmp	r7, #0
 80110ea:	f43f ad7e 	beq.w	8010bea <_strtod_l+0x582>
 80110ee:	4b61      	ldr	r3, [pc, #388]	; (8011274 <_strtod_l+0xc0c>)
 80110f0:	2200      	movs	r2, #0
 80110f2:	e78c      	b.n	801100e <_strtod_l+0x9a6>
 80110f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011270 <_strtod_l+0xc08>
 80110f8:	f04f 0800 	mov.w	r8, #0
 80110fc:	e7e7      	b.n	80110ce <_strtod_l+0xa66>
 80110fe:	4b5c      	ldr	r3, [pc, #368]	; (8011270 <_strtod_l+0xc08>)
 8011100:	4640      	mov	r0, r8
 8011102:	4649      	mov	r1, r9
 8011104:	2200      	movs	r2, #0
 8011106:	f7ef fa77 	bl	80005f8 <__aeabi_dmul>
 801110a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801110c:	4680      	mov	r8, r0
 801110e:	4689      	mov	r9, r1
 8011110:	b933      	cbnz	r3, 8011120 <_strtod_l+0xab8>
 8011112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011116:	9012      	str	r0, [sp, #72]	; 0x48
 8011118:	9313      	str	r3, [sp, #76]	; 0x4c
 801111a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801111e:	e7dd      	b.n	80110dc <_strtod_l+0xa74>
 8011120:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8011124:	e7f9      	b.n	801111a <_strtod_l+0xab2>
 8011126:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801112a:	9b04      	ldr	r3, [sp, #16]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d1a8      	bne.n	8011082 <_strtod_l+0xa1a>
 8011130:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011134:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011136:	0d1b      	lsrs	r3, r3, #20
 8011138:	051b      	lsls	r3, r3, #20
 801113a:	429a      	cmp	r2, r3
 801113c:	d1a1      	bne.n	8011082 <_strtod_l+0xa1a>
 801113e:	4640      	mov	r0, r8
 8011140:	4649      	mov	r1, r9
 8011142:	f7ef fe09 	bl	8000d58 <__aeabi_d2lz>
 8011146:	f7ef fa29 	bl	800059c <__aeabi_l2d>
 801114a:	4602      	mov	r2, r0
 801114c:	460b      	mov	r3, r1
 801114e:	4640      	mov	r0, r8
 8011150:	4649      	mov	r1, r9
 8011152:	f7ef f899 	bl	8000288 <__aeabi_dsub>
 8011156:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801115c:	ea43 030a 	orr.w	r3, r3, sl
 8011160:	4313      	orrs	r3, r2
 8011162:	4680      	mov	r8, r0
 8011164:	4689      	mov	r9, r1
 8011166:	d053      	beq.n	8011210 <_strtod_l+0xba8>
 8011168:	a335      	add	r3, pc, #212	; (adr r3, 8011240 <_strtod_l+0xbd8>)
 801116a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116e:	f7ef fcb5 	bl	8000adc <__aeabi_dcmplt>
 8011172:	2800      	cmp	r0, #0
 8011174:	f47f acce 	bne.w	8010b14 <_strtod_l+0x4ac>
 8011178:	a333      	add	r3, pc, #204	; (adr r3, 8011248 <_strtod_l+0xbe0>)
 801117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117e:	4640      	mov	r0, r8
 8011180:	4649      	mov	r1, r9
 8011182:	f7ef fcc9 	bl	8000b18 <__aeabi_dcmpgt>
 8011186:	2800      	cmp	r0, #0
 8011188:	f43f af7b 	beq.w	8011082 <_strtod_l+0xa1a>
 801118c:	e4c2      	b.n	8010b14 <_strtod_l+0x4ac>
 801118e:	9b04      	ldr	r3, [sp, #16]
 8011190:	b333      	cbz	r3, 80111e0 <_strtod_l+0xb78>
 8011192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011194:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011198:	d822      	bhi.n	80111e0 <_strtod_l+0xb78>
 801119a:	a32d      	add	r3, pc, #180	; (adr r3, 8011250 <_strtod_l+0xbe8>)
 801119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a0:	4640      	mov	r0, r8
 80111a2:	4649      	mov	r1, r9
 80111a4:	f7ef fca4 	bl	8000af0 <__aeabi_dcmple>
 80111a8:	b1a0      	cbz	r0, 80111d4 <_strtod_l+0xb6c>
 80111aa:	4649      	mov	r1, r9
 80111ac:	4640      	mov	r0, r8
 80111ae:	f7ef fcfb 	bl	8000ba8 <__aeabi_d2uiz>
 80111b2:	2801      	cmp	r0, #1
 80111b4:	bf38      	it	cc
 80111b6:	2001      	movcc	r0, #1
 80111b8:	f7ef f9a4 	bl	8000504 <__aeabi_ui2d>
 80111bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111be:	4680      	mov	r8, r0
 80111c0:	4689      	mov	r9, r1
 80111c2:	bb13      	cbnz	r3, 801120a <_strtod_l+0xba2>
 80111c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80111c8:	9014      	str	r0, [sp, #80]	; 0x50
 80111ca:	9315      	str	r3, [sp, #84]	; 0x54
 80111cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80111d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80111d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80111d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80111dc:	1a9b      	subs	r3, r3, r2
 80111de:	930d      	str	r3, [sp, #52]	; 0x34
 80111e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80111e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80111e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80111ec:	f001 fe86 	bl	8012efc <__ulp>
 80111f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80111f4:	ec53 2b10 	vmov	r2, r3, d0
 80111f8:	f7ef f9fe 	bl	80005f8 <__aeabi_dmul>
 80111fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011200:	f7ef f844 	bl	800028c <__adddf3>
 8011204:	4682      	mov	sl, r0
 8011206:	468b      	mov	fp, r1
 8011208:	e78f      	b.n	801112a <_strtod_l+0xac2>
 801120a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801120e:	e7dd      	b.n	80111cc <_strtod_l+0xb64>
 8011210:	a311      	add	r3, pc, #68	; (adr r3, 8011258 <_strtod_l+0xbf0>)
 8011212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011216:	f7ef fc61 	bl	8000adc <__aeabi_dcmplt>
 801121a:	e7b4      	b.n	8011186 <_strtod_l+0xb1e>
 801121c:	2300      	movs	r3, #0
 801121e:	930e      	str	r3, [sp, #56]	; 0x38
 8011220:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011222:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011224:	6013      	str	r3, [r2, #0]
 8011226:	f7ff ba65 	b.w	80106f4 <_strtod_l+0x8c>
 801122a:	2b65      	cmp	r3, #101	; 0x65
 801122c:	f43f ab5d 	beq.w	80108ea <_strtod_l+0x282>
 8011230:	2b45      	cmp	r3, #69	; 0x45
 8011232:	f43f ab5a 	beq.w	80108ea <_strtod_l+0x282>
 8011236:	2201      	movs	r2, #1
 8011238:	f7ff bb92 	b.w	8010960 <_strtod_l+0x2f8>
 801123c:	f3af 8000 	nop.w
 8011240:	94a03595 	.word	0x94a03595
 8011244:	3fdfffff 	.word	0x3fdfffff
 8011248:	35afe535 	.word	0x35afe535
 801124c:	3fe00000 	.word	0x3fe00000
 8011250:	ffc00000 	.word	0xffc00000
 8011254:	41dfffff 	.word	0x41dfffff
 8011258:	94a03595 	.word	0x94a03595
 801125c:	3fcfffff 	.word	0x3fcfffff
 8011260:	3ff00000 	.word	0x3ff00000
 8011264:	7ff00000 	.word	0x7ff00000
 8011268:	7fe00000 	.word	0x7fe00000
 801126c:	7c9fffff 	.word	0x7c9fffff
 8011270:	3fe00000 	.word	0x3fe00000
 8011274:	bff00000 	.word	0xbff00000
 8011278:	7fefffff 	.word	0x7fefffff

0801127c <_strtod_r>:
 801127c:	4b01      	ldr	r3, [pc, #4]	; (8011284 <_strtod_r+0x8>)
 801127e:	f7ff b9f3 	b.w	8010668 <_strtod_l>
 8011282:	bf00      	nop
 8011284:	200000c0 	.word	0x200000c0

08011288 <_strtol_l.isra.0>:
 8011288:	2b01      	cmp	r3, #1
 801128a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801128e:	d001      	beq.n	8011294 <_strtol_l.isra.0+0xc>
 8011290:	2b24      	cmp	r3, #36	; 0x24
 8011292:	d906      	bls.n	80112a2 <_strtol_l.isra.0+0x1a>
 8011294:	f7fe faa2 	bl	800f7dc <__errno>
 8011298:	2316      	movs	r3, #22
 801129a:	6003      	str	r3, [r0, #0]
 801129c:	2000      	movs	r0, #0
 801129e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112a2:	4f3a      	ldr	r7, [pc, #232]	; (801138c <_strtol_l.isra.0+0x104>)
 80112a4:	468e      	mov	lr, r1
 80112a6:	4676      	mov	r6, lr
 80112a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80112ac:	5de5      	ldrb	r5, [r4, r7]
 80112ae:	f015 0508 	ands.w	r5, r5, #8
 80112b2:	d1f8      	bne.n	80112a6 <_strtol_l.isra.0+0x1e>
 80112b4:	2c2d      	cmp	r4, #45	; 0x2d
 80112b6:	d134      	bne.n	8011322 <_strtol_l.isra.0+0x9a>
 80112b8:	f89e 4000 	ldrb.w	r4, [lr]
 80112bc:	f04f 0801 	mov.w	r8, #1
 80112c0:	f106 0e02 	add.w	lr, r6, #2
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d05c      	beq.n	8011382 <_strtol_l.isra.0+0xfa>
 80112c8:	2b10      	cmp	r3, #16
 80112ca:	d10c      	bne.n	80112e6 <_strtol_l.isra.0+0x5e>
 80112cc:	2c30      	cmp	r4, #48	; 0x30
 80112ce:	d10a      	bne.n	80112e6 <_strtol_l.isra.0+0x5e>
 80112d0:	f89e 4000 	ldrb.w	r4, [lr]
 80112d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80112d8:	2c58      	cmp	r4, #88	; 0x58
 80112da:	d14d      	bne.n	8011378 <_strtol_l.isra.0+0xf0>
 80112dc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80112e0:	2310      	movs	r3, #16
 80112e2:	f10e 0e02 	add.w	lr, lr, #2
 80112e6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80112ea:	f10c 3cff 	add.w	ip, ip, #4294967295
 80112ee:	2600      	movs	r6, #0
 80112f0:	fbbc f9f3 	udiv	r9, ip, r3
 80112f4:	4635      	mov	r5, r6
 80112f6:	fb03 ca19 	mls	sl, r3, r9, ip
 80112fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80112fe:	2f09      	cmp	r7, #9
 8011300:	d818      	bhi.n	8011334 <_strtol_l.isra.0+0xac>
 8011302:	463c      	mov	r4, r7
 8011304:	42a3      	cmp	r3, r4
 8011306:	dd24      	ble.n	8011352 <_strtol_l.isra.0+0xca>
 8011308:	2e00      	cmp	r6, #0
 801130a:	db1f      	blt.n	801134c <_strtol_l.isra.0+0xc4>
 801130c:	45a9      	cmp	r9, r5
 801130e:	d31d      	bcc.n	801134c <_strtol_l.isra.0+0xc4>
 8011310:	d101      	bne.n	8011316 <_strtol_l.isra.0+0x8e>
 8011312:	45a2      	cmp	sl, r4
 8011314:	db1a      	blt.n	801134c <_strtol_l.isra.0+0xc4>
 8011316:	fb05 4503 	mla	r5, r5, r3, r4
 801131a:	2601      	movs	r6, #1
 801131c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8011320:	e7eb      	b.n	80112fa <_strtol_l.isra.0+0x72>
 8011322:	2c2b      	cmp	r4, #43	; 0x2b
 8011324:	bf08      	it	eq
 8011326:	f89e 4000 	ldrbeq.w	r4, [lr]
 801132a:	46a8      	mov	r8, r5
 801132c:	bf08      	it	eq
 801132e:	f106 0e02 	addeq.w	lr, r6, #2
 8011332:	e7c7      	b.n	80112c4 <_strtol_l.isra.0+0x3c>
 8011334:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8011338:	2f19      	cmp	r7, #25
 801133a:	d801      	bhi.n	8011340 <_strtol_l.isra.0+0xb8>
 801133c:	3c37      	subs	r4, #55	; 0x37
 801133e:	e7e1      	b.n	8011304 <_strtol_l.isra.0+0x7c>
 8011340:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8011344:	2f19      	cmp	r7, #25
 8011346:	d804      	bhi.n	8011352 <_strtol_l.isra.0+0xca>
 8011348:	3c57      	subs	r4, #87	; 0x57
 801134a:	e7db      	b.n	8011304 <_strtol_l.isra.0+0x7c>
 801134c:	f04f 36ff 	mov.w	r6, #4294967295
 8011350:	e7e4      	b.n	801131c <_strtol_l.isra.0+0x94>
 8011352:	2e00      	cmp	r6, #0
 8011354:	da05      	bge.n	8011362 <_strtol_l.isra.0+0xda>
 8011356:	2322      	movs	r3, #34	; 0x22
 8011358:	6003      	str	r3, [r0, #0]
 801135a:	4665      	mov	r5, ip
 801135c:	b942      	cbnz	r2, 8011370 <_strtol_l.isra.0+0xe8>
 801135e:	4628      	mov	r0, r5
 8011360:	e79d      	b.n	801129e <_strtol_l.isra.0+0x16>
 8011362:	f1b8 0f00 	cmp.w	r8, #0
 8011366:	d000      	beq.n	801136a <_strtol_l.isra.0+0xe2>
 8011368:	426d      	negs	r5, r5
 801136a:	2a00      	cmp	r2, #0
 801136c:	d0f7      	beq.n	801135e <_strtol_l.isra.0+0xd6>
 801136e:	b10e      	cbz	r6, 8011374 <_strtol_l.isra.0+0xec>
 8011370:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011374:	6011      	str	r1, [r2, #0]
 8011376:	e7f2      	b.n	801135e <_strtol_l.isra.0+0xd6>
 8011378:	2430      	movs	r4, #48	; 0x30
 801137a:	2b00      	cmp	r3, #0
 801137c:	d1b3      	bne.n	80112e6 <_strtol_l.isra.0+0x5e>
 801137e:	2308      	movs	r3, #8
 8011380:	e7b1      	b.n	80112e6 <_strtol_l.isra.0+0x5e>
 8011382:	2c30      	cmp	r4, #48	; 0x30
 8011384:	d0a4      	beq.n	80112d0 <_strtol_l.isra.0+0x48>
 8011386:	230a      	movs	r3, #10
 8011388:	e7ad      	b.n	80112e6 <_strtol_l.isra.0+0x5e>
 801138a:	bf00      	nop
 801138c:	08015691 	.word	0x08015691

08011390 <_strtol_r>:
 8011390:	f7ff bf7a 	b.w	8011288 <_strtol_l.isra.0>

08011394 <_write_r>:
 8011394:	b538      	push	{r3, r4, r5, lr}
 8011396:	4d07      	ldr	r5, [pc, #28]	; (80113b4 <_write_r+0x20>)
 8011398:	4604      	mov	r4, r0
 801139a:	4608      	mov	r0, r1
 801139c:	4611      	mov	r1, r2
 801139e:	2200      	movs	r2, #0
 80113a0:	602a      	str	r2, [r5, #0]
 80113a2:	461a      	mov	r2, r3
 80113a4:	f7f3 fd1a 	bl	8004ddc <_write>
 80113a8:	1c43      	adds	r3, r0, #1
 80113aa:	d102      	bne.n	80113b2 <_write_r+0x1e>
 80113ac:	682b      	ldr	r3, [r5, #0]
 80113ae:	b103      	cbz	r3, 80113b2 <_write_r+0x1e>
 80113b0:	6023      	str	r3, [r4, #0]
 80113b2:	bd38      	pop	{r3, r4, r5, pc}
 80113b4:	20004b44 	.word	0x20004b44

080113b8 <_close_r>:
 80113b8:	b538      	push	{r3, r4, r5, lr}
 80113ba:	4d06      	ldr	r5, [pc, #24]	; (80113d4 <_close_r+0x1c>)
 80113bc:	2300      	movs	r3, #0
 80113be:	4604      	mov	r4, r0
 80113c0:	4608      	mov	r0, r1
 80113c2:	602b      	str	r3, [r5, #0]
 80113c4:	f7f3 fd26 	bl	8004e14 <_close>
 80113c8:	1c43      	adds	r3, r0, #1
 80113ca:	d102      	bne.n	80113d2 <_close_r+0x1a>
 80113cc:	682b      	ldr	r3, [r5, #0]
 80113ce:	b103      	cbz	r3, 80113d2 <_close_r+0x1a>
 80113d0:	6023      	str	r3, [r4, #0]
 80113d2:	bd38      	pop	{r3, r4, r5, pc}
 80113d4:	20004b44 	.word	0x20004b44

080113d8 <quorem>:
 80113d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113dc:	6903      	ldr	r3, [r0, #16]
 80113de:	690c      	ldr	r4, [r1, #16]
 80113e0:	42a3      	cmp	r3, r4
 80113e2:	4607      	mov	r7, r0
 80113e4:	f2c0 8081 	blt.w	80114ea <quorem+0x112>
 80113e8:	3c01      	subs	r4, #1
 80113ea:	f101 0814 	add.w	r8, r1, #20
 80113ee:	f100 0514 	add.w	r5, r0, #20
 80113f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113f6:	9301      	str	r3, [sp, #4]
 80113f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011400:	3301      	adds	r3, #1
 8011402:	429a      	cmp	r2, r3
 8011404:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011408:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801140c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011410:	d331      	bcc.n	8011476 <quorem+0x9e>
 8011412:	f04f 0e00 	mov.w	lr, #0
 8011416:	4640      	mov	r0, r8
 8011418:	46ac      	mov	ip, r5
 801141a:	46f2      	mov	sl, lr
 801141c:	f850 2b04 	ldr.w	r2, [r0], #4
 8011420:	b293      	uxth	r3, r2
 8011422:	fb06 e303 	mla	r3, r6, r3, lr
 8011426:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801142a:	b29b      	uxth	r3, r3
 801142c:	ebaa 0303 	sub.w	r3, sl, r3
 8011430:	0c12      	lsrs	r2, r2, #16
 8011432:	f8dc a000 	ldr.w	sl, [ip]
 8011436:	fb06 e202 	mla	r2, r6, r2, lr
 801143a:	fa13 f38a 	uxtah	r3, r3, sl
 801143e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011442:	fa1f fa82 	uxth.w	sl, r2
 8011446:	f8dc 2000 	ldr.w	r2, [ip]
 801144a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801144e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011452:	b29b      	uxth	r3, r3
 8011454:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011458:	4581      	cmp	r9, r0
 801145a:	f84c 3b04 	str.w	r3, [ip], #4
 801145e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011462:	d2db      	bcs.n	801141c <quorem+0x44>
 8011464:	f855 300b 	ldr.w	r3, [r5, fp]
 8011468:	b92b      	cbnz	r3, 8011476 <quorem+0x9e>
 801146a:	9b01      	ldr	r3, [sp, #4]
 801146c:	3b04      	subs	r3, #4
 801146e:	429d      	cmp	r5, r3
 8011470:	461a      	mov	r2, r3
 8011472:	d32e      	bcc.n	80114d2 <quorem+0xfa>
 8011474:	613c      	str	r4, [r7, #16]
 8011476:	4638      	mov	r0, r7
 8011478:	f001 fc9c 	bl	8012db4 <__mcmp>
 801147c:	2800      	cmp	r0, #0
 801147e:	db24      	blt.n	80114ca <quorem+0xf2>
 8011480:	3601      	adds	r6, #1
 8011482:	4628      	mov	r0, r5
 8011484:	f04f 0c00 	mov.w	ip, #0
 8011488:	f858 2b04 	ldr.w	r2, [r8], #4
 801148c:	f8d0 e000 	ldr.w	lr, [r0]
 8011490:	b293      	uxth	r3, r2
 8011492:	ebac 0303 	sub.w	r3, ip, r3
 8011496:	0c12      	lsrs	r2, r2, #16
 8011498:	fa13 f38e 	uxtah	r3, r3, lr
 801149c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80114a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80114a4:	b29b      	uxth	r3, r3
 80114a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114aa:	45c1      	cmp	r9, r8
 80114ac:	f840 3b04 	str.w	r3, [r0], #4
 80114b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80114b4:	d2e8      	bcs.n	8011488 <quorem+0xb0>
 80114b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114be:	b922      	cbnz	r2, 80114ca <quorem+0xf2>
 80114c0:	3b04      	subs	r3, #4
 80114c2:	429d      	cmp	r5, r3
 80114c4:	461a      	mov	r2, r3
 80114c6:	d30a      	bcc.n	80114de <quorem+0x106>
 80114c8:	613c      	str	r4, [r7, #16]
 80114ca:	4630      	mov	r0, r6
 80114cc:	b003      	add	sp, #12
 80114ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114d2:	6812      	ldr	r2, [r2, #0]
 80114d4:	3b04      	subs	r3, #4
 80114d6:	2a00      	cmp	r2, #0
 80114d8:	d1cc      	bne.n	8011474 <quorem+0x9c>
 80114da:	3c01      	subs	r4, #1
 80114dc:	e7c7      	b.n	801146e <quorem+0x96>
 80114de:	6812      	ldr	r2, [r2, #0]
 80114e0:	3b04      	subs	r3, #4
 80114e2:	2a00      	cmp	r2, #0
 80114e4:	d1f0      	bne.n	80114c8 <quorem+0xf0>
 80114e6:	3c01      	subs	r4, #1
 80114e8:	e7eb      	b.n	80114c2 <quorem+0xea>
 80114ea:	2000      	movs	r0, #0
 80114ec:	e7ee      	b.n	80114cc <quorem+0xf4>
	...

080114f0 <_dtoa_r>:
 80114f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114f4:	ed2d 8b02 	vpush	{d8}
 80114f8:	ec57 6b10 	vmov	r6, r7, d0
 80114fc:	b095      	sub	sp, #84	; 0x54
 80114fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011500:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011504:	9105      	str	r1, [sp, #20]
 8011506:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801150a:	4604      	mov	r4, r0
 801150c:	9209      	str	r2, [sp, #36]	; 0x24
 801150e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011510:	b975      	cbnz	r5, 8011530 <_dtoa_r+0x40>
 8011512:	2010      	movs	r0, #16
 8011514:	f001 f95e 	bl	80127d4 <malloc>
 8011518:	4602      	mov	r2, r0
 801151a:	6260      	str	r0, [r4, #36]	; 0x24
 801151c:	b920      	cbnz	r0, 8011528 <_dtoa_r+0x38>
 801151e:	4bb2      	ldr	r3, [pc, #712]	; (80117e8 <_dtoa_r+0x2f8>)
 8011520:	21ea      	movs	r1, #234	; 0xea
 8011522:	48b2      	ldr	r0, [pc, #712]	; (80117ec <_dtoa_r+0x2fc>)
 8011524:	f002 f886 	bl	8013634 <__assert_func>
 8011528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801152c:	6005      	str	r5, [r0, #0]
 801152e:	60c5      	str	r5, [r0, #12]
 8011530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011532:	6819      	ldr	r1, [r3, #0]
 8011534:	b151      	cbz	r1, 801154c <_dtoa_r+0x5c>
 8011536:	685a      	ldr	r2, [r3, #4]
 8011538:	604a      	str	r2, [r1, #4]
 801153a:	2301      	movs	r3, #1
 801153c:	4093      	lsls	r3, r2
 801153e:	608b      	str	r3, [r1, #8]
 8011540:	4620      	mov	r0, r4
 8011542:	f001 f9af 	bl	80128a4 <_Bfree>
 8011546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011548:	2200      	movs	r2, #0
 801154a:	601a      	str	r2, [r3, #0]
 801154c:	1e3b      	subs	r3, r7, #0
 801154e:	bfb9      	ittee	lt
 8011550:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011554:	9303      	strlt	r3, [sp, #12]
 8011556:	2300      	movge	r3, #0
 8011558:	f8c8 3000 	strge.w	r3, [r8]
 801155c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011560:	4ba3      	ldr	r3, [pc, #652]	; (80117f0 <_dtoa_r+0x300>)
 8011562:	bfbc      	itt	lt
 8011564:	2201      	movlt	r2, #1
 8011566:	f8c8 2000 	strlt.w	r2, [r8]
 801156a:	ea33 0309 	bics.w	r3, r3, r9
 801156e:	d11b      	bne.n	80115a8 <_dtoa_r+0xb8>
 8011570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011572:	f242 730f 	movw	r3, #9999	; 0x270f
 8011576:	6013      	str	r3, [r2, #0]
 8011578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801157c:	4333      	orrs	r3, r6
 801157e:	f000 857a 	beq.w	8012076 <_dtoa_r+0xb86>
 8011582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011584:	b963      	cbnz	r3, 80115a0 <_dtoa_r+0xb0>
 8011586:	4b9b      	ldr	r3, [pc, #620]	; (80117f4 <_dtoa_r+0x304>)
 8011588:	e024      	b.n	80115d4 <_dtoa_r+0xe4>
 801158a:	4b9b      	ldr	r3, [pc, #620]	; (80117f8 <_dtoa_r+0x308>)
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	3308      	adds	r3, #8
 8011590:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011592:	6013      	str	r3, [r2, #0]
 8011594:	9800      	ldr	r0, [sp, #0]
 8011596:	b015      	add	sp, #84	; 0x54
 8011598:	ecbd 8b02 	vpop	{d8}
 801159c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a0:	4b94      	ldr	r3, [pc, #592]	; (80117f4 <_dtoa_r+0x304>)
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	3303      	adds	r3, #3
 80115a6:	e7f3      	b.n	8011590 <_dtoa_r+0xa0>
 80115a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80115ac:	2200      	movs	r2, #0
 80115ae:	ec51 0b17 	vmov	r0, r1, d7
 80115b2:	2300      	movs	r3, #0
 80115b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80115b8:	f7ef fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80115bc:	4680      	mov	r8, r0
 80115be:	b158      	cbz	r0, 80115d8 <_dtoa_r+0xe8>
 80115c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80115c2:	2301      	movs	r3, #1
 80115c4:	6013      	str	r3, [r2, #0]
 80115c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f000 8551 	beq.w	8012070 <_dtoa_r+0xb80>
 80115ce:	488b      	ldr	r0, [pc, #556]	; (80117fc <_dtoa_r+0x30c>)
 80115d0:	6018      	str	r0, [r3, #0]
 80115d2:	1e43      	subs	r3, r0, #1
 80115d4:	9300      	str	r3, [sp, #0]
 80115d6:	e7dd      	b.n	8011594 <_dtoa_r+0xa4>
 80115d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80115dc:	aa12      	add	r2, sp, #72	; 0x48
 80115de:	a913      	add	r1, sp, #76	; 0x4c
 80115e0:	4620      	mov	r0, r4
 80115e2:	f001 fd07 	bl	8012ff4 <__d2b>
 80115e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80115ea:	4683      	mov	fp, r0
 80115ec:	2d00      	cmp	r5, #0
 80115ee:	d07c      	beq.n	80116ea <_dtoa_r+0x1fa>
 80115f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80115f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80115fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8011606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801160a:	4b7d      	ldr	r3, [pc, #500]	; (8011800 <_dtoa_r+0x310>)
 801160c:	2200      	movs	r2, #0
 801160e:	4630      	mov	r0, r6
 8011610:	4639      	mov	r1, r7
 8011612:	f7ee fe39 	bl	8000288 <__aeabi_dsub>
 8011616:	a36e      	add	r3, pc, #440	; (adr r3, 80117d0 <_dtoa_r+0x2e0>)
 8011618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161c:	f7ee ffec 	bl	80005f8 <__aeabi_dmul>
 8011620:	a36d      	add	r3, pc, #436	; (adr r3, 80117d8 <_dtoa_r+0x2e8>)
 8011622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011626:	f7ee fe31 	bl	800028c <__adddf3>
 801162a:	4606      	mov	r6, r0
 801162c:	4628      	mov	r0, r5
 801162e:	460f      	mov	r7, r1
 8011630:	f7ee ff78 	bl	8000524 <__aeabi_i2d>
 8011634:	a36a      	add	r3, pc, #424	; (adr r3, 80117e0 <_dtoa_r+0x2f0>)
 8011636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163a:	f7ee ffdd 	bl	80005f8 <__aeabi_dmul>
 801163e:	4602      	mov	r2, r0
 8011640:	460b      	mov	r3, r1
 8011642:	4630      	mov	r0, r6
 8011644:	4639      	mov	r1, r7
 8011646:	f7ee fe21 	bl	800028c <__adddf3>
 801164a:	4606      	mov	r6, r0
 801164c:	460f      	mov	r7, r1
 801164e:	f7ef fa83 	bl	8000b58 <__aeabi_d2iz>
 8011652:	2200      	movs	r2, #0
 8011654:	4682      	mov	sl, r0
 8011656:	2300      	movs	r3, #0
 8011658:	4630      	mov	r0, r6
 801165a:	4639      	mov	r1, r7
 801165c:	f7ef fa3e 	bl	8000adc <__aeabi_dcmplt>
 8011660:	b148      	cbz	r0, 8011676 <_dtoa_r+0x186>
 8011662:	4650      	mov	r0, sl
 8011664:	f7ee ff5e 	bl	8000524 <__aeabi_i2d>
 8011668:	4632      	mov	r2, r6
 801166a:	463b      	mov	r3, r7
 801166c:	f7ef fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011670:	b908      	cbnz	r0, 8011676 <_dtoa_r+0x186>
 8011672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011676:	f1ba 0f16 	cmp.w	sl, #22
 801167a:	d854      	bhi.n	8011726 <_dtoa_r+0x236>
 801167c:	4b61      	ldr	r3, [pc, #388]	; (8011804 <_dtoa_r+0x314>)
 801167e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011686:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801168a:	f7ef fa27 	bl	8000adc <__aeabi_dcmplt>
 801168e:	2800      	cmp	r0, #0
 8011690:	d04b      	beq.n	801172a <_dtoa_r+0x23a>
 8011692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011696:	2300      	movs	r3, #0
 8011698:	930e      	str	r3, [sp, #56]	; 0x38
 801169a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801169c:	1b5d      	subs	r5, r3, r5
 801169e:	1e6b      	subs	r3, r5, #1
 80116a0:	9304      	str	r3, [sp, #16]
 80116a2:	bf43      	ittte	mi
 80116a4:	2300      	movmi	r3, #0
 80116a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80116aa:	9304      	strmi	r3, [sp, #16]
 80116ac:	f04f 0800 	movpl.w	r8, #0
 80116b0:	f1ba 0f00 	cmp.w	sl, #0
 80116b4:	db3b      	blt.n	801172e <_dtoa_r+0x23e>
 80116b6:	9b04      	ldr	r3, [sp, #16]
 80116b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80116bc:	4453      	add	r3, sl
 80116be:	9304      	str	r3, [sp, #16]
 80116c0:	2300      	movs	r3, #0
 80116c2:	9306      	str	r3, [sp, #24]
 80116c4:	9b05      	ldr	r3, [sp, #20]
 80116c6:	2b09      	cmp	r3, #9
 80116c8:	d869      	bhi.n	801179e <_dtoa_r+0x2ae>
 80116ca:	2b05      	cmp	r3, #5
 80116cc:	bfc4      	itt	gt
 80116ce:	3b04      	subgt	r3, #4
 80116d0:	9305      	strgt	r3, [sp, #20]
 80116d2:	9b05      	ldr	r3, [sp, #20]
 80116d4:	f1a3 0302 	sub.w	r3, r3, #2
 80116d8:	bfcc      	ite	gt
 80116da:	2500      	movgt	r5, #0
 80116dc:	2501      	movle	r5, #1
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d869      	bhi.n	80117b6 <_dtoa_r+0x2c6>
 80116e2:	e8df f003 	tbb	[pc, r3]
 80116e6:	4e2c      	.short	0x4e2c
 80116e8:	5a4c      	.short	0x5a4c
 80116ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80116ee:	441d      	add	r5, r3
 80116f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80116f4:	2b20      	cmp	r3, #32
 80116f6:	bfc1      	itttt	gt
 80116f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80116fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011700:	fa09 f303 	lslgt.w	r3, r9, r3
 8011704:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011708:	bfda      	itte	le
 801170a:	f1c3 0320 	rsble	r3, r3, #32
 801170e:	fa06 f003 	lslle.w	r0, r6, r3
 8011712:	4318      	orrgt	r0, r3
 8011714:	f7ee fef6 	bl	8000504 <__aeabi_ui2d>
 8011718:	2301      	movs	r3, #1
 801171a:	4606      	mov	r6, r0
 801171c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011720:	3d01      	subs	r5, #1
 8011722:	9310      	str	r3, [sp, #64]	; 0x40
 8011724:	e771      	b.n	801160a <_dtoa_r+0x11a>
 8011726:	2301      	movs	r3, #1
 8011728:	e7b6      	b.n	8011698 <_dtoa_r+0x1a8>
 801172a:	900e      	str	r0, [sp, #56]	; 0x38
 801172c:	e7b5      	b.n	801169a <_dtoa_r+0x1aa>
 801172e:	f1ca 0300 	rsb	r3, sl, #0
 8011732:	9306      	str	r3, [sp, #24]
 8011734:	2300      	movs	r3, #0
 8011736:	eba8 080a 	sub.w	r8, r8, sl
 801173a:	930d      	str	r3, [sp, #52]	; 0x34
 801173c:	e7c2      	b.n	80116c4 <_dtoa_r+0x1d4>
 801173e:	2300      	movs	r3, #0
 8011740:	9308      	str	r3, [sp, #32]
 8011742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011744:	2b00      	cmp	r3, #0
 8011746:	dc39      	bgt.n	80117bc <_dtoa_r+0x2cc>
 8011748:	f04f 0901 	mov.w	r9, #1
 801174c:	f8cd 9004 	str.w	r9, [sp, #4]
 8011750:	464b      	mov	r3, r9
 8011752:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011756:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011758:	2200      	movs	r2, #0
 801175a:	6042      	str	r2, [r0, #4]
 801175c:	2204      	movs	r2, #4
 801175e:	f102 0614 	add.w	r6, r2, #20
 8011762:	429e      	cmp	r6, r3
 8011764:	6841      	ldr	r1, [r0, #4]
 8011766:	d92f      	bls.n	80117c8 <_dtoa_r+0x2d8>
 8011768:	4620      	mov	r0, r4
 801176a:	f001 f85b 	bl	8012824 <_Balloc>
 801176e:	9000      	str	r0, [sp, #0]
 8011770:	2800      	cmp	r0, #0
 8011772:	d14b      	bne.n	801180c <_dtoa_r+0x31c>
 8011774:	4b24      	ldr	r3, [pc, #144]	; (8011808 <_dtoa_r+0x318>)
 8011776:	4602      	mov	r2, r0
 8011778:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801177c:	e6d1      	b.n	8011522 <_dtoa_r+0x32>
 801177e:	2301      	movs	r3, #1
 8011780:	e7de      	b.n	8011740 <_dtoa_r+0x250>
 8011782:	2300      	movs	r3, #0
 8011784:	9308      	str	r3, [sp, #32]
 8011786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011788:	eb0a 0903 	add.w	r9, sl, r3
 801178c:	f109 0301 	add.w	r3, r9, #1
 8011790:	2b01      	cmp	r3, #1
 8011792:	9301      	str	r3, [sp, #4]
 8011794:	bfb8      	it	lt
 8011796:	2301      	movlt	r3, #1
 8011798:	e7dd      	b.n	8011756 <_dtoa_r+0x266>
 801179a:	2301      	movs	r3, #1
 801179c:	e7f2      	b.n	8011784 <_dtoa_r+0x294>
 801179e:	2501      	movs	r5, #1
 80117a0:	2300      	movs	r3, #0
 80117a2:	9305      	str	r3, [sp, #20]
 80117a4:	9508      	str	r5, [sp, #32]
 80117a6:	f04f 39ff 	mov.w	r9, #4294967295
 80117aa:	2200      	movs	r2, #0
 80117ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80117b0:	2312      	movs	r3, #18
 80117b2:	9209      	str	r2, [sp, #36]	; 0x24
 80117b4:	e7cf      	b.n	8011756 <_dtoa_r+0x266>
 80117b6:	2301      	movs	r3, #1
 80117b8:	9308      	str	r3, [sp, #32]
 80117ba:	e7f4      	b.n	80117a6 <_dtoa_r+0x2b6>
 80117bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80117c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80117c4:	464b      	mov	r3, r9
 80117c6:	e7c6      	b.n	8011756 <_dtoa_r+0x266>
 80117c8:	3101      	adds	r1, #1
 80117ca:	6041      	str	r1, [r0, #4]
 80117cc:	0052      	lsls	r2, r2, #1
 80117ce:	e7c6      	b.n	801175e <_dtoa_r+0x26e>
 80117d0:	636f4361 	.word	0x636f4361
 80117d4:	3fd287a7 	.word	0x3fd287a7
 80117d8:	8b60c8b3 	.word	0x8b60c8b3
 80117dc:	3fc68a28 	.word	0x3fc68a28
 80117e0:	509f79fb 	.word	0x509f79fb
 80117e4:	3fd34413 	.word	0x3fd34413
 80117e8:	0801579e 	.word	0x0801579e
 80117ec:	080157b5 	.word	0x080157b5
 80117f0:	7ff00000 	.word	0x7ff00000
 80117f4:	0801579a 	.word	0x0801579a
 80117f8:	08015791 	.word	0x08015791
 80117fc:	08015615 	.word	0x08015615
 8011800:	3ff80000 	.word	0x3ff80000
 8011804:	08015930 	.word	0x08015930
 8011808:	08015814 	.word	0x08015814
 801180c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801180e:	9a00      	ldr	r2, [sp, #0]
 8011810:	601a      	str	r2, [r3, #0]
 8011812:	9b01      	ldr	r3, [sp, #4]
 8011814:	2b0e      	cmp	r3, #14
 8011816:	f200 80ad 	bhi.w	8011974 <_dtoa_r+0x484>
 801181a:	2d00      	cmp	r5, #0
 801181c:	f000 80aa 	beq.w	8011974 <_dtoa_r+0x484>
 8011820:	f1ba 0f00 	cmp.w	sl, #0
 8011824:	dd36      	ble.n	8011894 <_dtoa_r+0x3a4>
 8011826:	4ac3      	ldr	r2, [pc, #780]	; (8011b34 <_dtoa_r+0x644>)
 8011828:	f00a 030f 	and.w	r3, sl, #15
 801182c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011830:	ed93 7b00 	vldr	d7, [r3]
 8011834:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011838:	ea4f 172a 	mov.w	r7, sl, asr #4
 801183c:	eeb0 8a47 	vmov.f32	s16, s14
 8011840:	eef0 8a67 	vmov.f32	s17, s15
 8011844:	d016      	beq.n	8011874 <_dtoa_r+0x384>
 8011846:	4bbc      	ldr	r3, [pc, #752]	; (8011b38 <_dtoa_r+0x648>)
 8011848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801184c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011850:	f7ee fffc 	bl	800084c <__aeabi_ddiv>
 8011854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011858:	f007 070f 	and.w	r7, r7, #15
 801185c:	2503      	movs	r5, #3
 801185e:	4eb6      	ldr	r6, [pc, #728]	; (8011b38 <_dtoa_r+0x648>)
 8011860:	b957      	cbnz	r7, 8011878 <_dtoa_r+0x388>
 8011862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011866:	ec53 2b18 	vmov	r2, r3, d8
 801186a:	f7ee ffef 	bl	800084c <__aeabi_ddiv>
 801186e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011872:	e029      	b.n	80118c8 <_dtoa_r+0x3d8>
 8011874:	2502      	movs	r5, #2
 8011876:	e7f2      	b.n	801185e <_dtoa_r+0x36e>
 8011878:	07f9      	lsls	r1, r7, #31
 801187a:	d508      	bpl.n	801188e <_dtoa_r+0x39e>
 801187c:	ec51 0b18 	vmov	r0, r1, d8
 8011880:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011884:	f7ee feb8 	bl	80005f8 <__aeabi_dmul>
 8011888:	ec41 0b18 	vmov	d8, r0, r1
 801188c:	3501      	adds	r5, #1
 801188e:	107f      	asrs	r7, r7, #1
 8011890:	3608      	adds	r6, #8
 8011892:	e7e5      	b.n	8011860 <_dtoa_r+0x370>
 8011894:	f000 80a6 	beq.w	80119e4 <_dtoa_r+0x4f4>
 8011898:	f1ca 0600 	rsb	r6, sl, #0
 801189c:	4ba5      	ldr	r3, [pc, #660]	; (8011b34 <_dtoa_r+0x644>)
 801189e:	4fa6      	ldr	r7, [pc, #664]	; (8011b38 <_dtoa_r+0x648>)
 80118a0:	f006 020f 	and.w	r2, r6, #15
 80118a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80118a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80118b0:	f7ee fea2 	bl	80005f8 <__aeabi_dmul>
 80118b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118b8:	1136      	asrs	r6, r6, #4
 80118ba:	2300      	movs	r3, #0
 80118bc:	2502      	movs	r5, #2
 80118be:	2e00      	cmp	r6, #0
 80118c0:	f040 8085 	bne.w	80119ce <_dtoa_r+0x4de>
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d1d2      	bne.n	801186e <_dtoa_r+0x37e>
 80118c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f000 808c 	beq.w	80119e8 <_dtoa_r+0x4f8>
 80118d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80118d4:	4b99      	ldr	r3, [pc, #612]	; (8011b3c <_dtoa_r+0x64c>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	4630      	mov	r0, r6
 80118da:	4639      	mov	r1, r7
 80118dc:	f7ef f8fe 	bl	8000adc <__aeabi_dcmplt>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	f000 8081 	beq.w	80119e8 <_dtoa_r+0x4f8>
 80118e6:	9b01      	ldr	r3, [sp, #4]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d07d      	beq.n	80119e8 <_dtoa_r+0x4f8>
 80118ec:	f1b9 0f00 	cmp.w	r9, #0
 80118f0:	dd3c      	ble.n	801196c <_dtoa_r+0x47c>
 80118f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80118f6:	9307      	str	r3, [sp, #28]
 80118f8:	2200      	movs	r2, #0
 80118fa:	4b91      	ldr	r3, [pc, #580]	; (8011b40 <_dtoa_r+0x650>)
 80118fc:	4630      	mov	r0, r6
 80118fe:	4639      	mov	r1, r7
 8011900:	f7ee fe7a 	bl	80005f8 <__aeabi_dmul>
 8011904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011908:	3501      	adds	r5, #1
 801190a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801190e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011912:	4628      	mov	r0, r5
 8011914:	f7ee fe06 	bl	8000524 <__aeabi_i2d>
 8011918:	4632      	mov	r2, r6
 801191a:	463b      	mov	r3, r7
 801191c:	f7ee fe6c 	bl	80005f8 <__aeabi_dmul>
 8011920:	4b88      	ldr	r3, [pc, #544]	; (8011b44 <_dtoa_r+0x654>)
 8011922:	2200      	movs	r2, #0
 8011924:	f7ee fcb2 	bl	800028c <__adddf3>
 8011928:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801192c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011930:	9303      	str	r3, [sp, #12]
 8011932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011934:	2b00      	cmp	r3, #0
 8011936:	d15c      	bne.n	80119f2 <_dtoa_r+0x502>
 8011938:	4b83      	ldr	r3, [pc, #524]	; (8011b48 <_dtoa_r+0x658>)
 801193a:	2200      	movs	r2, #0
 801193c:	4630      	mov	r0, r6
 801193e:	4639      	mov	r1, r7
 8011940:	f7ee fca2 	bl	8000288 <__aeabi_dsub>
 8011944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011948:	4606      	mov	r6, r0
 801194a:	460f      	mov	r7, r1
 801194c:	f7ef f8e4 	bl	8000b18 <__aeabi_dcmpgt>
 8011950:	2800      	cmp	r0, #0
 8011952:	f040 8296 	bne.w	8011e82 <_dtoa_r+0x992>
 8011956:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801195a:	4630      	mov	r0, r6
 801195c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011960:	4639      	mov	r1, r7
 8011962:	f7ef f8bb 	bl	8000adc <__aeabi_dcmplt>
 8011966:	2800      	cmp	r0, #0
 8011968:	f040 8288 	bne.w	8011e7c <_dtoa_r+0x98c>
 801196c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011970:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011976:	2b00      	cmp	r3, #0
 8011978:	f2c0 8158 	blt.w	8011c2c <_dtoa_r+0x73c>
 801197c:	f1ba 0f0e 	cmp.w	sl, #14
 8011980:	f300 8154 	bgt.w	8011c2c <_dtoa_r+0x73c>
 8011984:	4b6b      	ldr	r3, [pc, #428]	; (8011b34 <_dtoa_r+0x644>)
 8011986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801198a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801198e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011990:	2b00      	cmp	r3, #0
 8011992:	f280 80e3 	bge.w	8011b5c <_dtoa_r+0x66c>
 8011996:	9b01      	ldr	r3, [sp, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	f300 80df 	bgt.w	8011b5c <_dtoa_r+0x66c>
 801199e:	f040 826d 	bne.w	8011e7c <_dtoa_r+0x98c>
 80119a2:	4b69      	ldr	r3, [pc, #420]	; (8011b48 <_dtoa_r+0x658>)
 80119a4:	2200      	movs	r2, #0
 80119a6:	4640      	mov	r0, r8
 80119a8:	4649      	mov	r1, r9
 80119aa:	f7ee fe25 	bl	80005f8 <__aeabi_dmul>
 80119ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119b2:	f7ef f8a7 	bl	8000b04 <__aeabi_dcmpge>
 80119b6:	9e01      	ldr	r6, [sp, #4]
 80119b8:	4637      	mov	r7, r6
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f040 8243 	bne.w	8011e46 <_dtoa_r+0x956>
 80119c0:	9d00      	ldr	r5, [sp, #0]
 80119c2:	2331      	movs	r3, #49	; 0x31
 80119c4:	f805 3b01 	strb.w	r3, [r5], #1
 80119c8:	f10a 0a01 	add.w	sl, sl, #1
 80119cc:	e23f      	b.n	8011e4e <_dtoa_r+0x95e>
 80119ce:	07f2      	lsls	r2, r6, #31
 80119d0:	d505      	bpl.n	80119de <_dtoa_r+0x4ee>
 80119d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80119d6:	f7ee fe0f 	bl	80005f8 <__aeabi_dmul>
 80119da:	3501      	adds	r5, #1
 80119dc:	2301      	movs	r3, #1
 80119de:	1076      	asrs	r6, r6, #1
 80119e0:	3708      	adds	r7, #8
 80119e2:	e76c      	b.n	80118be <_dtoa_r+0x3ce>
 80119e4:	2502      	movs	r5, #2
 80119e6:	e76f      	b.n	80118c8 <_dtoa_r+0x3d8>
 80119e8:	9b01      	ldr	r3, [sp, #4]
 80119ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80119ee:	930c      	str	r3, [sp, #48]	; 0x30
 80119f0:	e78d      	b.n	801190e <_dtoa_r+0x41e>
 80119f2:	9900      	ldr	r1, [sp, #0]
 80119f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80119f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80119f8:	4b4e      	ldr	r3, [pc, #312]	; (8011b34 <_dtoa_r+0x644>)
 80119fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80119fe:	4401      	add	r1, r0
 8011a00:	9102      	str	r1, [sp, #8]
 8011a02:	9908      	ldr	r1, [sp, #32]
 8011a04:	eeb0 8a47 	vmov.f32	s16, s14
 8011a08:	eef0 8a67 	vmov.f32	s17, s15
 8011a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011a14:	2900      	cmp	r1, #0
 8011a16:	d045      	beq.n	8011aa4 <_dtoa_r+0x5b4>
 8011a18:	494c      	ldr	r1, [pc, #304]	; (8011b4c <_dtoa_r+0x65c>)
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	f7ee ff16 	bl	800084c <__aeabi_ddiv>
 8011a20:	ec53 2b18 	vmov	r2, r3, d8
 8011a24:	f7ee fc30 	bl	8000288 <__aeabi_dsub>
 8011a28:	9d00      	ldr	r5, [sp, #0]
 8011a2a:	ec41 0b18 	vmov	d8, r0, r1
 8011a2e:	4639      	mov	r1, r7
 8011a30:	4630      	mov	r0, r6
 8011a32:	f7ef f891 	bl	8000b58 <__aeabi_d2iz>
 8011a36:	900c      	str	r0, [sp, #48]	; 0x30
 8011a38:	f7ee fd74 	bl	8000524 <__aeabi_i2d>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	460b      	mov	r3, r1
 8011a40:	4630      	mov	r0, r6
 8011a42:	4639      	mov	r1, r7
 8011a44:	f7ee fc20 	bl	8000288 <__aeabi_dsub>
 8011a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a4a:	3330      	adds	r3, #48	; 0x30
 8011a4c:	f805 3b01 	strb.w	r3, [r5], #1
 8011a50:	ec53 2b18 	vmov	r2, r3, d8
 8011a54:	4606      	mov	r6, r0
 8011a56:	460f      	mov	r7, r1
 8011a58:	f7ef f840 	bl	8000adc <__aeabi_dcmplt>
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d165      	bne.n	8011b2c <_dtoa_r+0x63c>
 8011a60:	4632      	mov	r2, r6
 8011a62:	463b      	mov	r3, r7
 8011a64:	4935      	ldr	r1, [pc, #212]	; (8011b3c <_dtoa_r+0x64c>)
 8011a66:	2000      	movs	r0, #0
 8011a68:	f7ee fc0e 	bl	8000288 <__aeabi_dsub>
 8011a6c:	ec53 2b18 	vmov	r2, r3, d8
 8011a70:	f7ef f834 	bl	8000adc <__aeabi_dcmplt>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	f040 80b9 	bne.w	8011bec <_dtoa_r+0x6fc>
 8011a7a:	9b02      	ldr	r3, [sp, #8]
 8011a7c:	429d      	cmp	r5, r3
 8011a7e:	f43f af75 	beq.w	801196c <_dtoa_r+0x47c>
 8011a82:	4b2f      	ldr	r3, [pc, #188]	; (8011b40 <_dtoa_r+0x650>)
 8011a84:	ec51 0b18 	vmov	r0, r1, d8
 8011a88:	2200      	movs	r2, #0
 8011a8a:	f7ee fdb5 	bl	80005f8 <__aeabi_dmul>
 8011a8e:	4b2c      	ldr	r3, [pc, #176]	; (8011b40 <_dtoa_r+0x650>)
 8011a90:	ec41 0b18 	vmov	d8, r0, r1
 8011a94:	2200      	movs	r2, #0
 8011a96:	4630      	mov	r0, r6
 8011a98:	4639      	mov	r1, r7
 8011a9a:	f7ee fdad 	bl	80005f8 <__aeabi_dmul>
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	460f      	mov	r7, r1
 8011aa2:	e7c4      	b.n	8011a2e <_dtoa_r+0x53e>
 8011aa4:	ec51 0b17 	vmov	r0, r1, d7
 8011aa8:	f7ee fda6 	bl	80005f8 <__aeabi_dmul>
 8011aac:	9b02      	ldr	r3, [sp, #8]
 8011aae:	9d00      	ldr	r5, [sp, #0]
 8011ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8011ab2:	ec41 0b18 	vmov	d8, r0, r1
 8011ab6:	4639      	mov	r1, r7
 8011ab8:	4630      	mov	r0, r6
 8011aba:	f7ef f84d 	bl	8000b58 <__aeabi_d2iz>
 8011abe:	9011      	str	r0, [sp, #68]	; 0x44
 8011ac0:	f7ee fd30 	bl	8000524 <__aeabi_i2d>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	4630      	mov	r0, r6
 8011aca:	4639      	mov	r1, r7
 8011acc:	f7ee fbdc 	bl	8000288 <__aeabi_dsub>
 8011ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011ad2:	3330      	adds	r3, #48	; 0x30
 8011ad4:	f805 3b01 	strb.w	r3, [r5], #1
 8011ad8:	9b02      	ldr	r3, [sp, #8]
 8011ada:	429d      	cmp	r5, r3
 8011adc:	4606      	mov	r6, r0
 8011ade:	460f      	mov	r7, r1
 8011ae0:	f04f 0200 	mov.w	r2, #0
 8011ae4:	d134      	bne.n	8011b50 <_dtoa_r+0x660>
 8011ae6:	4b19      	ldr	r3, [pc, #100]	; (8011b4c <_dtoa_r+0x65c>)
 8011ae8:	ec51 0b18 	vmov	r0, r1, d8
 8011aec:	f7ee fbce 	bl	800028c <__adddf3>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4630      	mov	r0, r6
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7ef f80e 	bl	8000b18 <__aeabi_dcmpgt>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	d175      	bne.n	8011bec <_dtoa_r+0x6fc>
 8011b00:	ec53 2b18 	vmov	r2, r3, d8
 8011b04:	4911      	ldr	r1, [pc, #68]	; (8011b4c <_dtoa_r+0x65c>)
 8011b06:	2000      	movs	r0, #0
 8011b08:	f7ee fbbe 	bl	8000288 <__aeabi_dsub>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	460b      	mov	r3, r1
 8011b10:	4630      	mov	r0, r6
 8011b12:	4639      	mov	r1, r7
 8011b14:	f7ee ffe2 	bl	8000adc <__aeabi_dcmplt>
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	f43f af27 	beq.w	801196c <_dtoa_r+0x47c>
 8011b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b20:	1e6b      	subs	r3, r5, #1
 8011b22:	930c      	str	r3, [sp, #48]	; 0x30
 8011b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011b28:	2b30      	cmp	r3, #48	; 0x30
 8011b2a:	d0f8      	beq.n	8011b1e <_dtoa_r+0x62e>
 8011b2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011b30:	e04a      	b.n	8011bc8 <_dtoa_r+0x6d8>
 8011b32:	bf00      	nop
 8011b34:	08015930 	.word	0x08015930
 8011b38:	08015908 	.word	0x08015908
 8011b3c:	3ff00000 	.word	0x3ff00000
 8011b40:	40240000 	.word	0x40240000
 8011b44:	401c0000 	.word	0x401c0000
 8011b48:	40140000 	.word	0x40140000
 8011b4c:	3fe00000 	.word	0x3fe00000
 8011b50:	4baf      	ldr	r3, [pc, #700]	; (8011e10 <_dtoa_r+0x920>)
 8011b52:	f7ee fd51 	bl	80005f8 <__aeabi_dmul>
 8011b56:	4606      	mov	r6, r0
 8011b58:	460f      	mov	r7, r1
 8011b5a:	e7ac      	b.n	8011ab6 <_dtoa_r+0x5c6>
 8011b5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011b60:	9d00      	ldr	r5, [sp, #0]
 8011b62:	4642      	mov	r2, r8
 8011b64:	464b      	mov	r3, r9
 8011b66:	4630      	mov	r0, r6
 8011b68:	4639      	mov	r1, r7
 8011b6a:	f7ee fe6f 	bl	800084c <__aeabi_ddiv>
 8011b6e:	f7ee fff3 	bl	8000b58 <__aeabi_d2iz>
 8011b72:	9002      	str	r0, [sp, #8]
 8011b74:	f7ee fcd6 	bl	8000524 <__aeabi_i2d>
 8011b78:	4642      	mov	r2, r8
 8011b7a:	464b      	mov	r3, r9
 8011b7c:	f7ee fd3c 	bl	80005f8 <__aeabi_dmul>
 8011b80:	4602      	mov	r2, r0
 8011b82:	460b      	mov	r3, r1
 8011b84:	4630      	mov	r0, r6
 8011b86:	4639      	mov	r1, r7
 8011b88:	f7ee fb7e 	bl	8000288 <__aeabi_dsub>
 8011b8c:	9e02      	ldr	r6, [sp, #8]
 8011b8e:	9f01      	ldr	r7, [sp, #4]
 8011b90:	3630      	adds	r6, #48	; 0x30
 8011b92:	f805 6b01 	strb.w	r6, [r5], #1
 8011b96:	9e00      	ldr	r6, [sp, #0]
 8011b98:	1bae      	subs	r6, r5, r6
 8011b9a:	42b7      	cmp	r7, r6
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	d137      	bne.n	8011c12 <_dtoa_r+0x722>
 8011ba2:	f7ee fb73 	bl	800028c <__adddf3>
 8011ba6:	4642      	mov	r2, r8
 8011ba8:	464b      	mov	r3, r9
 8011baa:	4606      	mov	r6, r0
 8011bac:	460f      	mov	r7, r1
 8011bae:	f7ee ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 8011bb2:	b9c8      	cbnz	r0, 8011be8 <_dtoa_r+0x6f8>
 8011bb4:	4642      	mov	r2, r8
 8011bb6:	464b      	mov	r3, r9
 8011bb8:	4630      	mov	r0, r6
 8011bba:	4639      	mov	r1, r7
 8011bbc:	f7ee ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8011bc0:	b110      	cbz	r0, 8011bc8 <_dtoa_r+0x6d8>
 8011bc2:	9b02      	ldr	r3, [sp, #8]
 8011bc4:	07d9      	lsls	r1, r3, #31
 8011bc6:	d40f      	bmi.n	8011be8 <_dtoa_r+0x6f8>
 8011bc8:	4620      	mov	r0, r4
 8011bca:	4659      	mov	r1, fp
 8011bcc:	f000 fe6a 	bl	80128a4 <_Bfree>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	702b      	strb	r3, [r5, #0]
 8011bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011bd6:	f10a 0001 	add.w	r0, sl, #1
 8011bda:	6018      	str	r0, [r3, #0]
 8011bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f43f acd8 	beq.w	8011594 <_dtoa_r+0xa4>
 8011be4:	601d      	str	r5, [r3, #0]
 8011be6:	e4d5      	b.n	8011594 <_dtoa_r+0xa4>
 8011be8:	f8cd a01c 	str.w	sl, [sp, #28]
 8011bec:	462b      	mov	r3, r5
 8011bee:	461d      	mov	r5, r3
 8011bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011bf4:	2a39      	cmp	r2, #57	; 0x39
 8011bf6:	d108      	bne.n	8011c0a <_dtoa_r+0x71a>
 8011bf8:	9a00      	ldr	r2, [sp, #0]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d1f7      	bne.n	8011bee <_dtoa_r+0x6fe>
 8011bfe:	9a07      	ldr	r2, [sp, #28]
 8011c00:	9900      	ldr	r1, [sp, #0]
 8011c02:	3201      	adds	r2, #1
 8011c04:	9207      	str	r2, [sp, #28]
 8011c06:	2230      	movs	r2, #48	; 0x30
 8011c08:	700a      	strb	r2, [r1, #0]
 8011c0a:	781a      	ldrb	r2, [r3, #0]
 8011c0c:	3201      	adds	r2, #1
 8011c0e:	701a      	strb	r2, [r3, #0]
 8011c10:	e78c      	b.n	8011b2c <_dtoa_r+0x63c>
 8011c12:	4b7f      	ldr	r3, [pc, #508]	; (8011e10 <_dtoa_r+0x920>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	f7ee fcef 	bl	80005f8 <__aeabi_dmul>
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	4606      	mov	r6, r0
 8011c20:	460f      	mov	r7, r1
 8011c22:	f7ee ff51 	bl	8000ac8 <__aeabi_dcmpeq>
 8011c26:	2800      	cmp	r0, #0
 8011c28:	d09b      	beq.n	8011b62 <_dtoa_r+0x672>
 8011c2a:	e7cd      	b.n	8011bc8 <_dtoa_r+0x6d8>
 8011c2c:	9a08      	ldr	r2, [sp, #32]
 8011c2e:	2a00      	cmp	r2, #0
 8011c30:	f000 80c4 	beq.w	8011dbc <_dtoa_r+0x8cc>
 8011c34:	9a05      	ldr	r2, [sp, #20]
 8011c36:	2a01      	cmp	r2, #1
 8011c38:	f300 80a8 	bgt.w	8011d8c <_dtoa_r+0x89c>
 8011c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011c3e:	2a00      	cmp	r2, #0
 8011c40:	f000 80a0 	beq.w	8011d84 <_dtoa_r+0x894>
 8011c44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011c48:	9e06      	ldr	r6, [sp, #24]
 8011c4a:	4645      	mov	r5, r8
 8011c4c:	9a04      	ldr	r2, [sp, #16]
 8011c4e:	2101      	movs	r1, #1
 8011c50:	441a      	add	r2, r3
 8011c52:	4620      	mov	r0, r4
 8011c54:	4498      	add	r8, r3
 8011c56:	9204      	str	r2, [sp, #16]
 8011c58:	f000 ff2a 	bl	8012ab0 <__i2b>
 8011c5c:	4607      	mov	r7, r0
 8011c5e:	2d00      	cmp	r5, #0
 8011c60:	dd0b      	ble.n	8011c7a <_dtoa_r+0x78a>
 8011c62:	9b04      	ldr	r3, [sp, #16]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	dd08      	ble.n	8011c7a <_dtoa_r+0x78a>
 8011c68:	42ab      	cmp	r3, r5
 8011c6a:	9a04      	ldr	r2, [sp, #16]
 8011c6c:	bfa8      	it	ge
 8011c6e:	462b      	movge	r3, r5
 8011c70:	eba8 0803 	sub.w	r8, r8, r3
 8011c74:	1aed      	subs	r5, r5, r3
 8011c76:	1ad3      	subs	r3, r2, r3
 8011c78:	9304      	str	r3, [sp, #16]
 8011c7a:	9b06      	ldr	r3, [sp, #24]
 8011c7c:	b1fb      	cbz	r3, 8011cbe <_dtoa_r+0x7ce>
 8011c7e:	9b08      	ldr	r3, [sp, #32]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	f000 809f 	beq.w	8011dc4 <_dtoa_r+0x8d4>
 8011c86:	2e00      	cmp	r6, #0
 8011c88:	dd11      	ble.n	8011cae <_dtoa_r+0x7be>
 8011c8a:	4639      	mov	r1, r7
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	4620      	mov	r0, r4
 8011c90:	f000 ffca 	bl	8012c28 <__pow5mult>
 8011c94:	465a      	mov	r2, fp
 8011c96:	4601      	mov	r1, r0
 8011c98:	4607      	mov	r7, r0
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f000 ff1e 	bl	8012adc <__multiply>
 8011ca0:	4659      	mov	r1, fp
 8011ca2:	9007      	str	r0, [sp, #28]
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f000 fdfd 	bl	80128a4 <_Bfree>
 8011caa:	9b07      	ldr	r3, [sp, #28]
 8011cac:	469b      	mov	fp, r3
 8011cae:	9b06      	ldr	r3, [sp, #24]
 8011cb0:	1b9a      	subs	r2, r3, r6
 8011cb2:	d004      	beq.n	8011cbe <_dtoa_r+0x7ce>
 8011cb4:	4659      	mov	r1, fp
 8011cb6:	4620      	mov	r0, r4
 8011cb8:	f000 ffb6 	bl	8012c28 <__pow5mult>
 8011cbc:	4683      	mov	fp, r0
 8011cbe:	2101      	movs	r1, #1
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f000 fef5 	bl	8012ab0 <__i2b>
 8011cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	4606      	mov	r6, r0
 8011ccc:	dd7c      	ble.n	8011dc8 <_dtoa_r+0x8d8>
 8011cce:	461a      	mov	r2, r3
 8011cd0:	4601      	mov	r1, r0
 8011cd2:	4620      	mov	r0, r4
 8011cd4:	f000 ffa8 	bl	8012c28 <__pow5mult>
 8011cd8:	9b05      	ldr	r3, [sp, #20]
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	4606      	mov	r6, r0
 8011cde:	dd76      	ble.n	8011dce <_dtoa_r+0x8de>
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	9306      	str	r3, [sp, #24]
 8011ce4:	6933      	ldr	r3, [r6, #16]
 8011ce6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011cea:	6918      	ldr	r0, [r3, #16]
 8011cec:	f000 fe90 	bl	8012a10 <__hi0bits>
 8011cf0:	f1c0 0020 	rsb	r0, r0, #32
 8011cf4:	9b04      	ldr	r3, [sp, #16]
 8011cf6:	4418      	add	r0, r3
 8011cf8:	f010 001f 	ands.w	r0, r0, #31
 8011cfc:	f000 8086 	beq.w	8011e0c <_dtoa_r+0x91c>
 8011d00:	f1c0 0320 	rsb	r3, r0, #32
 8011d04:	2b04      	cmp	r3, #4
 8011d06:	dd7f      	ble.n	8011e08 <_dtoa_r+0x918>
 8011d08:	f1c0 001c 	rsb	r0, r0, #28
 8011d0c:	9b04      	ldr	r3, [sp, #16]
 8011d0e:	4403      	add	r3, r0
 8011d10:	4480      	add	r8, r0
 8011d12:	4405      	add	r5, r0
 8011d14:	9304      	str	r3, [sp, #16]
 8011d16:	f1b8 0f00 	cmp.w	r8, #0
 8011d1a:	dd05      	ble.n	8011d28 <_dtoa_r+0x838>
 8011d1c:	4659      	mov	r1, fp
 8011d1e:	4642      	mov	r2, r8
 8011d20:	4620      	mov	r0, r4
 8011d22:	f000 ffdb 	bl	8012cdc <__lshift>
 8011d26:	4683      	mov	fp, r0
 8011d28:	9b04      	ldr	r3, [sp, #16]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	dd05      	ble.n	8011d3a <_dtoa_r+0x84a>
 8011d2e:	4631      	mov	r1, r6
 8011d30:	461a      	mov	r2, r3
 8011d32:	4620      	mov	r0, r4
 8011d34:	f000 ffd2 	bl	8012cdc <__lshift>
 8011d38:	4606      	mov	r6, r0
 8011d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d069      	beq.n	8011e14 <_dtoa_r+0x924>
 8011d40:	4631      	mov	r1, r6
 8011d42:	4658      	mov	r0, fp
 8011d44:	f001 f836 	bl	8012db4 <__mcmp>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	da63      	bge.n	8011e14 <_dtoa_r+0x924>
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	4659      	mov	r1, fp
 8011d50:	220a      	movs	r2, #10
 8011d52:	4620      	mov	r0, r4
 8011d54:	f000 fdc8 	bl	80128e8 <__multadd>
 8011d58:	9b08      	ldr	r3, [sp, #32]
 8011d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d5e:	4683      	mov	fp, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f000 818f 	beq.w	8012084 <_dtoa_r+0xb94>
 8011d66:	4639      	mov	r1, r7
 8011d68:	2300      	movs	r3, #0
 8011d6a:	220a      	movs	r2, #10
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f000 fdbb 	bl	80128e8 <__multadd>
 8011d72:	f1b9 0f00 	cmp.w	r9, #0
 8011d76:	4607      	mov	r7, r0
 8011d78:	f300 808e 	bgt.w	8011e98 <_dtoa_r+0x9a8>
 8011d7c:	9b05      	ldr	r3, [sp, #20]
 8011d7e:	2b02      	cmp	r3, #2
 8011d80:	dc50      	bgt.n	8011e24 <_dtoa_r+0x934>
 8011d82:	e089      	b.n	8011e98 <_dtoa_r+0x9a8>
 8011d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d8a:	e75d      	b.n	8011c48 <_dtoa_r+0x758>
 8011d8c:	9b01      	ldr	r3, [sp, #4]
 8011d8e:	1e5e      	subs	r6, r3, #1
 8011d90:	9b06      	ldr	r3, [sp, #24]
 8011d92:	42b3      	cmp	r3, r6
 8011d94:	bfbf      	itttt	lt
 8011d96:	9b06      	ldrlt	r3, [sp, #24]
 8011d98:	9606      	strlt	r6, [sp, #24]
 8011d9a:	1af2      	sublt	r2, r6, r3
 8011d9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011d9e:	bfb6      	itet	lt
 8011da0:	189b      	addlt	r3, r3, r2
 8011da2:	1b9e      	subge	r6, r3, r6
 8011da4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011da6:	9b01      	ldr	r3, [sp, #4]
 8011da8:	bfb8      	it	lt
 8011daa:	2600      	movlt	r6, #0
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	bfb5      	itete	lt
 8011db0:	eba8 0503 	sublt.w	r5, r8, r3
 8011db4:	9b01      	ldrge	r3, [sp, #4]
 8011db6:	2300      	movlt	r3, #0
 8011db8:	4645      	movge	r5, r8
 8011dba:	e747      	b.n	8011c4c <_dtoa_r+0x75c>
 8011dbc:	9e06      	ldr	r6, [sp, #24]
 8011dbe:	9f08      	ldr	r7, [sp, #32]
 8011dc0:	4645      	mov	r5, r8
 8011dc2:	e74c      	b.n	8011c5e <_dtoa_r+0x76e>
 8011dc4:	9a06      	ldr	r2, [sp, #24]
 8011dc6:	e775      	b.n	8011cb4 <_dtoa_r+0x7c4>
 8011dc8:	9b05      	ldr	r3, [sp, #20]
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	dc18      	bgt.n	8011e00 <_dtoa_r+0x910>
 8011dce:	9b02      	ldr	r3, [sp, #8]
 8011dd0:	b9b3      	cbnz	r3, 8011e00 <_dtoa_r+0x910>
 8011dd2:	9b03      	ldr	r3, [sp, #12]
 8011dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011dd8:	b9a3      	cbnz	r3, 8011e04 <_dtoa_r+0x914>
 8011dda:	9b03      	ldr	r3, [sp, #12]
 8011ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011de0:	0d1b      	lsrs	r3, r3, #20
 8011de2:	051b      	lsls	r3, r3, #20
 8011de4:	b12b      	cbz	r3, 8011df2 <_dtoa_r+0x902>
 8011de6:	9b04      	ldr	r3, [sp, #16]
 8011de8:	3301      	adds	r3, #1
 8011dea:	9304      	str	r3, [sp, #16]
 8011dec:	f108 0801 	add.w	r8, r8, #1
 8011df0:	2301      	movs	r3, #1
 8011df2:	9306      	str	r3, [sp, #24]
 8011df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f47f af74 	bne.w	8011ce4 <_dtoa_r+0x7f4>
 8011dfc:	2001      	movs	r0, #1
 8011dfe:	e779      	b.n	8011cf4 <_dtoa_r+0x804>
 8011e00:	2300      	movs	r3, #0
 8011e02:	e7f6      	b.n	8011df2 <_dtoa_r+0x902>
 8011e04:	9b02      	ldr	r3, [sp, #8]
 8011e06:	e7f4      	b.n	8011df2 <_dtoa_r+0x902>
 8011e08:	d085      	beq.n	8011d16 <_dtoa_r+0x826>
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	301c      	adds	r0, #28
 8011e0e:	e77d      	b.n	8011d0c <_dtoa_r+0x81c>
 8011e10:	40240000 	.word	0x40240000
 8011e14:	9b01      	ldr	r3, [sp, #4]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	dc38      	bgt.n	8011e8c <_dtoa_r+0x99c>
 8011e1a:	9b05      	ldr	r3, [sp, #20]
 8011e1c:	2b02      	cmp	r3, #2
 8011e1e:	dd35      	ble.n	8011e8c <_dtoa_r+0x99c>
 8011e20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011e24:	f1b9 0f00 	cmp.w	r9, #0
 8011e28:	d10d      	bne.n	8011e46 <_dtoa_r+0x956>
 8011e2a:	4631      	mov	r1, r6
 8011e2c:	464b      	mov	r3, r9
 8011e2e:	2205      	movs	r2, #5
 8011e30:	4620      	mov	r0, r4
 8011e32:	f000 fd59 	bl	80128e8 <__multadd>
 8011e36:	4601      	mov	r1, r0
 8011e38:	4606      	mov	r6, r0
 8011e3a:	4658      	mov	r0, fp
 8011e3c:	f000 ffba 	bl	8012db4 <__mcmp>
 8011e40:	2800      	cmp	r0, #0
 8011e42:	f73f adbd 	bgt.w	80119c0 <_dtoa_r+0x4d0>
 8011e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e48:	9d00      	ldr	r5, [sp, #0]
 8011e4a:	ea6f 0a03 	mvn.w	sl, r3
 8011e4e:	f04f 0800 	mov.w	r8, #0
 8011e52:	4631      	mov	r1, r6
 8011e54:	4620      	mov	r0, r4
 8011e56:	f000 fd25 	bl	80128a4 <_Bfree>
 8011e5a:	2f00      	cmp	r7, #0
 8011e5c:	f43f aeb4 	beq.w	8011bc8 <_dtoa_r+0x6d8>
 8011e60:	f1b8 0f00 	cmp.w	r8, #0
 8011e64:	d005      	beq.n	8011e72 <_dtoa_r+0x982>
 8011e66:	45b8      	cmp	r8, r7
 8011e68:	d003      	beq.n	8011e72 <_dtoa_r+0x982>
 8011e6a:	4641      	mov	r1, r8
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f000 fd19 	bl	80128a4 <_Bfree>
 8011e72:	4639      	mov	r1, r7
 8011e74:	4620      	mov	r0, r4
 8011e76:	f000 fd15 	bl	80128a4 <_Bfree>
 8011e7a:	e6a5      	b.n	8011bc8 <_dtoa_r+0x6d8>
 8011e7c:	2600      	movs	r6, #0
 8011e7e:	4637      	mov	r7, r6
 8011e80:	e7e1      	b.n	8011e46 <_dtoa_r+0x956>
 8011e82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011e84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011e88:	4637      	mov	r7, r6
 8011e8a:	e599      	b.n	80119c0 <_dtoa_r+0x4d0>
 8011e8c:	9b08      	ldr	r3, [sp, #32]
 8011e8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f000 80fd 	beq.w	8012092 <_dtoa_r+0xba2>
 8011e98:	2d00      	cmp	r5, #0
 8011e9a:	dd05      	ble.n	8011ea8 <_dtoa_r+0x9b8>
 8011e9c:	4639      	mov	r1, r7
 8011e9e:	462a      	mov	r2, r5
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f000 ff1b 	bl	8012cdc <__lshift>
 8011ea6:	4607      	mov	r7, r0
 8011ea8:	9b06      	ldr	r3, [sp, #24]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d05c      	beq.n	8011f68 <_dtoa_r+0xa78>
 8011eae:	6879      	ldr	r1, [r7, #4]
 8011eb0:	4620      	mov	r0, r4
 8011eb2:	f000 fcb7 	bl	8012824 <_Balloc>
 8011eb6:	4605      	mov	r5, r0
 8011eb8:	b928      	cbnz	r0, 8011ec6 <_dtoa_r+0x9d6>
 8011eba:	4b80      	ldr	r3, [pc, #512]	; (80120bc <_dtoa_r+0xbcc>)
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011ec2:	f7ff bb2e 	b.w	8011522 <_dtoa_r+0x32>
 8011ec6:	693a      	ldr	r2, [r7, #16]
 8011ec8:	3202      	adds	r2, #2
 8011eca:	0092      	lsls	r2, r2, #2
 8011ecc:	f107 010c 	add.w	r1, r7, #12
 8011ed0:	300c      	adds	r0, #12
 8011ed2:	f000 fc99 	bl	8012808 <memcpy>
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	4629      	mov	r1, r5
 8011eda:	4620      	mov	r0, r4
 8011edc:	f000 fefe 	bl	8012cdc <__lshift>
 8011ee0:	9b00      	ldr	r3, [sp, #0]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	9301      	str	r3, [sp, #4]
 8011ee6:	9b00      	ldr	r3, [sp, #0]
 8011ee8:	444b      	add	r3, r9
 8011eea:	9307      	str	r3, [sp, #28]
 8011eec:	9b02      	ldr	r3, [sp, #8]
 8011eee:	f003 0301 	and.w	r3, r3, #1
 8011ef2:	46b8      	mov	r8, r7
 8011ef4:	9306      	str	r3, [sp, #24]
 8011ef6:	4607      	mov	r7, r0
 8011ef8:	9b01      	ldr	r3, [sp, #4]
 8011efa:	4631      	mov	r1, r6
 8011efc:	3b01      	subs	r3, #1
 8011efe:	4658      	mov	r0, fp
 8011f00:	9302      	str	r3, [sp, #8]
 8011f02:	f7ff fa69 	bl	80113d8 <quorem>
 8011f06:	4603      	mov	r3, r0
 8011f08:	3330      	adds	r3, #48	; 0x30
 8011f0a:	9004      	str	r0, [sp, #16]
 8011f0c:	4641      	mov	r1, r8
 8011f0e:	4658      	mov	r0, fp
 8011f10:	9308      	str	r3, [sp, #32]
 8011f12:	f000 ff4f 	bl	8012db4 <__mcmp>
 8011f16:	463a      	mov	r2, r7
 8011f18:	4681      	mov	r9, r0
 8011f1a:	4631      	mov	r1, r6
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f000 ff65 	bl	8012dec <__mdiff>
 8011f22:	68c2      	ldr	r2, [r0, #12]
 8011f24:	9b08      	ldr	r3, [sp, #32]
 8011f26:	4605      	mov	r5, r0
 8011f28:	bb02      	cbnz	r2, 8011f6c <_dtoa_r+0xa7c>
 8011f2a:	4601      	mov	r1, r0
 8011f2c:	4658      	mov	r0, fp
 8011f2e:	f000 ff41 	bl	8012db4 <__mcmp>
 8011f32:	9b08      	ldr	r3, [sp, #32]
 8011f34:	4602      	mov	r2, r0
 8011f36:	4629      	mov	r1, r5
 8011f38:	4620      	mov	r0, r4
 8011f3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011f3e:	f000 fcb1 	bl	80128a4 <_Bfree>
 8011f42:	9b05      	ldr	r3, [sp, #20]
 8011f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f46:	9d01      	ldr	r5, [sp, #4]
 8011f48:	ea43 0102 	orr.w	r1, r3, r2
 8011f4c:	9b06      	ldr	r3, [sp, #24]
 8011f4e:	430b      	orrs	r3, r1
 8011f50:	9b08      	ldr	r3, [sp, #32]
 8011f52:	d10d      	bne.n	8011f70 <_dtoa_r+0xa80>
 8011f54:	2b39      	cmp	r3, #57	; 0x39
 8011f56:	d029      	beq.n	8011fac <_dtoa_r+0xabc>
 8011f58:	f1b9 0f00 	cmp.w	r9, #0
 8011f5c:	dd01      	ble.n	8011f62 <_dtoa_r+0xa72>
 8011f5e:	9b04      	ldr	r3, [sp, #16]
 8011f60:	3331      	adds	r3, #49	; 0x31
 8011f62:	9a02      	ldr	r2, [sp, #8]
 8011f64:	7013      	strb	r3, [r2, #0]
 8011f66:	e774      	b.n	8011e52 <_dtoa_r+0x962>
 8011f68:	4638      	mov	r0, r7
 8011f6a:	e7b9      	b.n	8011ee0 <_dtoa_r+0x9f0>
 8011f6c:	2201      	movs	r2, #1
 8011f6e:	e7e2      	b.n	8011f36 <_dtoa_r+0xa46>
 8011f70:	f1b9 0f00 	cmp.w	r9, #0
 8011f74:	db06      	blt.n	8011f84 <_dtoa_r+0xa94>
 8011f76:	9905      	ldr	r1, [sp, #20]
 8011f78:	ea41 0909 	orr.w	r9, r1, r9
 8011f7c:	9906      	ldr	r1, [sp, #24]
 8011f7e:	ea59 0101 	orrs.w	r1, r9, r1
 8011f82:	d120      	bne.n	8011fc6 <_dtoa_r+0xad6>
 8011f84:	2a00      	cmp	r2, #0
 8011f86:	ddec      	ble.n	8011f62 <_dtoa_r+0xa72>
 8011f88:	4659      	mov	r1, fp
 8011f8a:	2201      	movs	r2, #1
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	9301      	str	r3, [sp, #4]
 8011f90:	f000 fea4 	bl	8012cdc <__lshift>
 8011f94:	4631      	mov	r1, r6
 8011f96:	4683      	mov	fp, r0
 8011f98:	f000 ff0c 	bl	8012db4 <__mcmp>
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	9b01      	ldr	r3, [sp, #4]
 8011fa0:	dc02      	bgt.n	8011fa8 <_dtoa_r+0xab8>
 8011fa2:	d1de      	bne.n	8011f62 <_dtoa_r+0xa72>
 8011fa4:	07da      	lsls	r2, r3, #31
 8011fa6:	d5dc      	bpl.n	8011f62 <_dtoa_r+0xa72>
 8011fa8:	2b39      	cmp	r3, #57	; 0x39
 8011faa:	d1d8      	bne.n	8011f5e <_dtoa_r+0xa6e>
 8011fac:	9a02      	ldr	r2, [sp, #8]
 8011fae:	2339      	movs	r3, #57	; 0x39
 8011fb0:	7013      	strb	r3, [r2, #0]
 8011fb2:	462b      	mov	r3, r5
 8011fb4:	461d      	mov	r5, r3
 8011fb6:	3b01      	subs	r3, #1
 8011fb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011fbc:	2a39      	cmp	r2, #57	; 0x39
 8011fbe:	d050      	beq.n	8012062 <_dtoa_r+0xb72>
 8011fc0:	3201      	adds	r2, #1
 8011fc2:	701a      	strb	r2, [r3, #0]
 8011fc4:	e745      	b.n	8011e52 <_dtoa_r+0x962>
 8011fc6:	2a00      	cmp	r2, #0
 8011fc8:	dd03      	ble.n	8011fd2 <_dtoa_r+0xae2>
 8011fca:	2b39      	cmp	r3, #57	; 0x39
 8011fcc:	d0ee      	beq.n	8011fac <_dtoa_r+0xabc>
 8011fce:	3301      	adds	r3, #1
 8011fd0:	e7c7      	b.n	8011f62 <_dtoa_r+0xa72>
 8011fd2:	9a01      	ldr	r2, [sp, #4]
 8011fd4:	9907      	ldr	r1, [sp, #28]
 8011fd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011fda:	428a      	cmp	r2, r1
 8011fdc:	d02a      	beq.n	8012034 <_dtoa_r+0xb44>
 8011fde:	4659      	mov	r1, fp
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	220a      	movs	r2, #10
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f000 fc7f 	bl	80128e8 <__multadd>
 8011fea:	45b8      	cmp	r8, r7
 8011fec:	4683      	mov	fp, r0
 8011fee:	f04f 0300 	mov.w	r3, #0
 8011ff2:	f04f 020a 	mov.w	r2, #10
 8011ff6:	4641      	mov	r1, r8
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	d107      	bne.n	801200c <_dtoa_r+0xb1c>
 8011ffc:	f000 fc74 	bl	80128e8 <__multadd>
 8012000:	4680      	mov	r8, r0
 8012002:	4607      	mov	r7, r0
 8012004:	9b01      	ldr	r3, [sp, #4]
 8012006:	3301      	adds	r3, #1
 8012008:	9301      	str	r3, [sp, #4]
 801200a:	e775      	b.n	8011ef8 <_dtoa_r+0xa08>
 801200c:	f000 fc6c 	bl	80128e8 <__multadd>
 8012010:	4639      	mov	r1, r7
 8012012:	4680      	mov	r8, r0
 8012014:	2300      	movs	r3, #0
 8012016:	220a      	movs	r2, #10
 8012018:	4620      	mov	r0, r4
 801201a:	f000 fc65 	bl	80128e8 <__multadd>
 801201e:	4607      	mov	r7, r0
 8012020:	e7f0      	b.n	8012004 <_dtoa_r+0xb14>
 8012022:	f1b9 0f00 	cmp.w	r9, #0
 8012026:	9a00      	ldr	r2, [sp, #0]
 8012028:	bfcc      	ite	gt
 801202a:	464d      	movgt	r5, r9
 801202c:	2501      	movle	r5, #1
 801202e:	4415      	add	r5, r2
 8012030:	f04f 0800 	mov.w	r8, #0
 8012034:	4659      	mov	r1, fp
 8012036:	2201      	movs	r2, #1
 8012038:	4620      	mov	r0, r4
 801203a:	9301      	str	r3, [sp, #4]
 801203c:	f000 fe4e 	bl	8012cdc <__lshift>
 8012040:	4631      	mov	r1, r6
 8012042:	4683      	mov	fp, r0
 8012044:	f000 feb6 	bl	8012db4 <__mcmp>
 8012048:	2800      	cmp	r0, #0
 801204a:	dcb2      	bgt.n	8011fb2 <_dtoa_r+0xac2>
 801204c:	d102      	bne.n	8012054 <_dtoa_r+0xb64>
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	07db      	lsls	r3, r3, #31
 8012052:	d4ae      	bmi.n	8011fb2 <_dtoa_r+0xac2>
 8012054:	462b      	mov	r3, r5
 8012056:	461d      	mov	r5, r3
 8012058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801205c:	2a30      	cmp	r2, #48	; 0x30
 801205e:	d0fa      	beq.n	8012056 <_dtoa_r+0xb66>
 8012060:	e6f7      	b.n	8011e52 <_dtoa_r+0x962>
 8012062:	9a00      	ldr	r2, [sp, #0]
 8012064:	429a      	cmp	r2, r3
 8012066:	d1a5      	bne.n	8011fb4 <_dtoa_r+0xac4>
 8012068:	f10a 0a01 	add.w	sl, sl, #1
 801206c:	2331      	movs	r3, #49	; 0x31
 801206e:	e779      	b.n	8011f64 <_dtoa_r+0xa74>
 8012070:	4b13      	ldr	r3, [pc, #76]	; (80120c0 <_dtoa_r+0xbd0>)
 8012072:	f7ff baaf 	b.w	80115d4 <_dtoa_r+0xe4>
 8012076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012078:	2b00      	cmp	r3, #0
 801207a:	f47f aa86 	bne.w	801158a <_dtoa_r+0x9a>
 801207e:	4b11      	ldr	r3, [pc, #68]	; (80120c4 <_dtoa_r+0xbd4>)
 8012080:	f7ff baa8 	b.w	80115d4 <_dtoa_r+0xe4>
 8012084:	f1b9 0f00 	cmp.w	r9, #0
 8012088:	dc03      	bgt.n	8012092 <_dtoa_r+0xba2>
 801208a:	9b05      	ldr	r3, [sp, #20]
 801208c:	2b02      	cmp	r3, #2
 801208e:	f73f aec9 	bgt.w	8011e24 <_dtoa_r+0x934>
 8012092:	9d00      	ldr	r5, [sp, #0]
 8012094:	4631      	mov	r1, r6
 8012096:	4658      	mov	r0, fp
 8012098:	f7ff f99e 	bl	80113d8 <quorem>
 801209c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80120a0:	f805 3b01 	strb.w	r3, [r5], #1
 80120a4:	9a00      	ldr	r2, [sp, #0]
 80120a6:	1aaa      	subs	r2, r5, r2
 80120a8:	4591      	cmp	r9, r2
 80120aa:	ddba      	ble.n	8012022 <_dtoa_r+0xb32>
 80120ac:	4659      	mov	r1, fp
 80120ae:	2300      	movs	r3, #0
 80120b0:	220a      	movs	r2, #10
 80120b2:	4620      	mov	r0, r4
 80120b4:	f000 fc18 	bl	80128e8 <__multadd>
 80120b8:	4683      	mov	fp, r0
 80120ba:	e7eb      	b.n	8012094 <_dtoa_r+0xba4>
 80120bc:	08015814 	.word	0x08015814
 80120c0:	08015614 	.word	0x08015614
 80120c4:	08015791 	.word	0x08015791

080120c8 <rshift>:
 80120c8:	6903      	ldr	r3, [r0, #16]
 80120ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80120ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80120d6:	f100 0414 	add.w	r4, r0, #20
 80120da:	dd45      	ble.n	8012168 <rshift+0xa0>
 80120dc:	f011 011f 	ands.w	r1, r1, #31
 80120e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80120e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80120e8:	d10c      	bne.n	8012104 <rshift+0x3c>
 80120ea:	f100 0710 	add.w	r7, r0, #16
 80120ee:	4629      	mov	r1, r5
 80120f0:	42b1      	cmp	r1, r6
 80120f2:	d334      	bcc.n	801215e <rshift+0x96>
 80120f4:	1a9b      	subs	r3, r3, r2
 80120f6:	009b      	lsls	r3, r3, #2
 80120f8:	1eea      	subs	r2, r5, #3
 80120fa:	4296      	cmp	r6, r2
 80120fc:	bf38      	it	cc
 80120fe:	2300      	movcc	r3, #0
 8012100:	4423      	add	r3, r4
 8012102:	e015      	b.n	8012130 <rshift+0x68>
 8012104:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012108:	f1c1 0820 	rsb	r8, r1, #32
 801210c:	40cf      	lsrs	r7, r1
 801210e:	f105 0e04 	add.w	lr, r5, #4
 8012112:	46a1      	mov	r9, r4
 8012114:	4576      	cmp	r6, lr
 8012116:	46f4      	mov	ip, lr
 8012118:	d815      	bhi.n	8012146 <rshift+0x7e>
 801211a:	1a9b      	subs	r3, r3, r2
 801211c:	009a      	lsls	r2, r3, #2
 801211e:	3a04      	subs	r2, #4
 8012120:	3501      	adds	r5, #1
 8012122:	42ae      	cmp	r6, r5
 8012124:	bf38      	it	cc
 8012126:	2200      	movcc	r2, #0
 8012128:	18a3      	adds	r3, r4, r2
 801212a:	50a7      	str	r7, [r4, r2]
 801212c:	b107      	cbz	r7, 8012130 <rshift+0x68>
 801212e:	3304      	adds	r3, #4
 8012130:	1b1a      	subs	r2, r3, r4
 8012132:	42a3      	cmp	r3, r4
 8012134:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012138:	bf08      	it	eq
 801213a:	2300      	moveq	r3, #0
 801213c:	6102      	str	r2, [r0, #16]
 801213e:	bf08      	it	eq
 8012140:	6143      	streq	r3, [r0, #20]
 8012142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012146:	f8dc c000 	ldr.w	ip, [ip]
 801214a:	fa0c fc08 	lsl.w	ip, ip, r8
 801214e:	ea4c 0707 	orr.w	r7, ip, r7
 8012152:	f849 7b04 	str.w	r7, [r9], #4
 8012156:	f85e 7b04 	ldr.w	r7, [lr], #4
 801215a:	40cf      	lsrs	r7, r1
 801215c:	e7da      	b.n	8012114 <rshift+0x4c>
 801215e:	f851 cb04 	ldr.w	ip, [r1], #4
 8012162:	f847 cf04 	str.w	ip, [r7, #4]!
 8012166:	e7c3      	b.n	80120f0 <rshift+0x28>
 8012168:	4623      	mov	r3, r4
 801216a:	e7e1      	b.n	8012130 <rshift+0x68>

0801216c <__hexdig_fun>:
 801216c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012170:	2b09      	cmp	r3, #9
 8012172:	d802      	bhi.n	801217a <__hexdig_fun+0xe>
 8012174:	3820      	subs	r0, #32
 8012176:	b2c0      	uxtb	r0, r0
 8012178:	4770      	bx	lr
 801217a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801217e:	2b05      	cmp	r3, #5
 8012180:	d801      	bhi.n	8012186 <__hexdig_fun+0x1a>
 8012182:	3847      	subs	r0, #71	; 0x47
 8012184:	e7f7      	b.n	8012176 <__hexdig_fun+0xa>
 8012186:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801218a:	2b05      	cmp	r3, #5
 801218c:	d801      	bhi.n	8012192 <__hexdig_fun+0x26>
 801218e:	3827      	subs	r0, #39	; 0x27
 8012190:	e7f1      	b.n	8012176 <__hexdig_fun+0xa>
 8012192:	2000      	movs	r0, #0
 8012194:	4770      	bx	lr
	...

08012198 <__gethex>:
 8012198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219c:	ed2d 8b02 	vpush	{d8}
 80121a0:	b089      	sub	sp, #36	; 0x24
 80121a2:	ee08 0a10 	vmov	s16, r0
 80121a6:	9304      	str	r3, [sp, #16]
 80121a8:	4bbc      	ldr	r3, [pc, #752]	; (801249c <__gethex+0x304>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	9301      	str	r3, [sp, #4]
 80121ae:	4618      	mov	r0, r3
 80121b0:	468b      	mov	fp, r1
 80121b2:	4690      	mov	r8, r2
 80121b4:	f7ee f80c 	bl	80001d0 <strlen>
 80121b8:	9b01      	ldr	r3, [sp, #4]
 80121ba:	f8db 2000 	ldr.w	r2, [fp]
 80121be:	4403      	add	r3, r0
 80121c0:	4682      	mov	sl, r0
 80121c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80121c6:	9305      	str	r3, [sp, #20]
 80121c8:	1c93      	adds	r3, r2, #2
 80121ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80121ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80121d2:	32fe      	adds	r2, #254	; 0xfe
 80121d4:	18d1      	adds	r1, r2, r3
 80121d6:	461f      	mov	r7, r3
 80121d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80121dc:	9100      	str	r1, [sp, #0]
 80121de:	2830      	cmp	r0, #48	; 0x30
 80121e0:	d0f8      	beq.n	80121d4 <__gethex+0x3c>
 80121e2:	f7ff ffc3 	bl	801216c <__hexdig_fun>
 80121e6:	4604      	mov	r4, r0
 80121e8:	2800      	cmp	r0, #0
 80121ea:	d13a      	bne.n	8012262 <__gethex+0xca>
 80121ec:	9901      	ldr	r1, [sp, #4]
 80121ee:	4652      	mov	r2, sl
 80121f0:	4638      	mov	r0, r7
 80121f2:	f7fe fa08 	bl	8010606 <strncmp>
 80121f6:	4605      	mov	r5, r0
 80121f8:	2800      	cmp	r0, #0
 80121fa:	d168      	bne.n	80122ce <__gethex+0x136>
 80121fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012200:	eb07 060a 	add.w	r6, r7, sl
 8012204:	f7ff ffb2 	bl	801216c <__hexdig_fun>
 8012208:	2800      	cmp	r0, #0
 801220a:	d062      	beq.n	80122d2 <__gethex+0x13a>
 801220c:	4633      	mov	r3, r6
 801220e:	7818      	ldrb	r0, [r3, #0]
 8012210:	2830      	cmp	r0, #48	; 0x30
 8012212:	461f      	mov	r7, r3
 8012214:	f103 0301 	add.w	r3, r3, #1
 8012218:	d0f9      	beq.n	801220e <__gethex+0x76>
 801221a:	f7ff ffa7 	bl	801216c <__hexdig_fun>
 801221e:	2301      	movs	r3, #1
 8012220:	fab0 f480 	clz	r4, r0
 8012224:	0964      	lsrs	r4, r4, #5
 8012226:	4635      	mov	r5, r6
 8012228:	9300      	str	r3, [sp, #0]
 801222a:	463a      	mov	r2, r7
 801222c:	4616      	mov	r6, r2
 801222e:	3201      	adds	r2, #1
 8012230:	7830      	ldrb	r0, [r6, #0]
 8012232:	f7ff ff9b 	bl	801216c <__hexdig_fun>
 8012236:	2800      	cmp	r0, #0
 8012238:	d1f8      	bne.n	801222c <__gethex+0x94>
 801223a:	9901      	ldr	r1, [sp, #4]
 801223c:	4652      	mov	r2, sl
 801223e:	4630      	mov	r0, r6
 8012240:	f7fe f9e1 	bl	8010606 <strncmp>
 8012244:	b980      	cbnz	r0, 8012268 <__gethex+0xd0>
 8012246:	b94d      	cbnz	r5, 801225c <__gethex+0xc4>
 8012248:	eb06 050a 	add.w	r5, r6, sl
 801224c:	462a      	mov	r2, r5
 801224e:	4616      	mov	r6, r2
 8012250:	3201      	adds	r2, #1
 8012252:	7830      	ldrb	r0, [r6, #0]
 8012254:	f7ff ff8a 	bl	801216c <__hexdig_fun>
 8012258:	2800      	cmp	r0, #0
 801225a:	d1f8      	bne.n	801224e <__gethex+0xb6>
 801225c:	1bad      	subs	r5, r5, r6
 801225e:	00ad      	lsls	r5, r5, #2
 8012260:	e004      	b.n	801226c <__gethex+0xd4>
 8012262:	2400      	movs	r4, #0
 8012264:	4625      	mov	r5, r4
 8012266:	e7e0      	b.n	801222a <__gethex+0x92>
 8012268:	2d00      	cmp	r5, #0
 801226a:	d1f7      	bne.n	801225c <__gethex+0xc4>
 801226c:	7833      	ldrb	r3, [r6, #0]
 801226e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012272:	2b50      	cmp	r3, #80	; 0x50
 8012274:	d13b      	bne.n	80122ee <__gethex+0x156>
 8012276:	7873      	ldrb	r3, [r6, #1]
 8012278:	2b2b      	cmp	r3, #43	; 0x2b
 801227a:	d02c      	beq.n	80122d6 <__gethex+0x13e>
 801227c:	2b2d      	cmp	r3, #45	; 0x2d
 801227e:	d02e      	beq.n	80122de <__gethex+0x146>
 8012280:	1c71      	adds	r1, r6, #1
 8012282:	f04f 0900 	mov.w	r9, #0
 8012286:	7808      	ldrb	r0, [r1, #0]
 8012288:	f7ff ff70 	bl	801216c <__hexdig_fun>
 801228c:	1e43      	subs	r3, r0, #1
 801228e:	b2db      	uxtb	r3, r3
 8012290:	2b18      	cmp	r3, #24
 8012292:	d82c      	bhi.n	80122ee <__gethex+0x156>
 8012294:	f1a0 0210 	sub.w	r2, r0, #16
 8012298:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801229c:	f7ff ff66 	bl	801216c <__hexdig_fun>
 80122a0:	1e43      	subs	r3, r0, #1
 80122a2:	b2db      	uxtb	r3, r3
 80122a4:	2b18      	cmp	r3, #24
 80122a6:	d91d      	bls.n	80122e4 <__gethex+0x14c>
 80122a8:	f1b9 0f00 	cmp.w	r9, #0
 80122ac:	d000      	beq.n	80122b0 <__gethex+0x118>
 80122ae:	4252      	negs	r2, r2
 80122b0:	4415      	add	r5, r2
 80122b2:	f8cb 1000 	str.w	r1, [fp]
 80122b6:	b1e4      	cbz	r4, 80122f2 <__gethex+0x15a>
 80122b8:	9b00      	ldr	r3, [sp, #0]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	bf14      	ite	ne
 80122be:	2700      	movne	r7, #0
 80122c0:	2706      	moveq	r7, #6
 80122c2:	4638      	mov	r0, r7
 80122c4:	b009      	add	sp, #36	; 0x24
 80122c6:	ecbd 8b02 	vpop	{d8}
 80122ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ce:	463e      	mov	r6, r7
 80122d0:	4625      	mov	r5, r4
 80122d2:	2401      	movs	r4, #1
 80122d4:	e7ca      	b.n	801226c <__gethex+0xd4>
 80122d6:	f04f 0900 	mov.w	r9, #0
 80122da:	1cb1      	adds	r1, r6, #2
 80122dc:	e7d3      	b.n	8012286 <__gethex+0xee>
 80122de:	f04f 0901 	mov.w	r9, #1
 80122e2:	e7fa      	b.n	80122da <__gethex+0x142>
 80122e4:	230a      	movs	r3, #10
 80122e6:	fb03 0202 	mla	r2, r3, r2, r0
 80122ea:	3a10      	subs	r2, #16
 80122ec:	e7d4      	b.n	8012298 <__gethex+0x100>
 80122ee:	4631      	mov	r1, r6
 80122f0:	e7df      	b.n	80122b2 <__gethex+0x11a>
 80122f2:	1bf3      	subs	r3, r6, r7
 80122f4:	3b01      	subs	r3, #1
 80122f6:	4621      	mov	r1, r4
 80122f8:	2b07      	cmp	r3, #7
 80122fa:	dc0b      	bgt.n	8012314 <__gethex+0x17c>
 80122fc:	ee18 0a10 	vmov	r0, s16
 8012300:	f000 fa90 	bl	8012824 <_Balloc>
 8012304:	4604      	mov	r4, r0
 8012306:	b940      	cbnz	r0, 801231a <__gethex+0x182>
 8012308:	4b65      	ldr	r3, [pc, #404]	; (80124a0 <__gethex+0x308>)
 801230a:	4602      	mov	r2, r0
 801230c:	21de      	movs	r1, #222	; 0xde
 801230e:	4865      	ldr	r0, [pc, #404]	; (80124a4 <__gethex+0x30c>)
 8012310:	f001 f990 	bl	8013634 <__assert_func>
 8012314:	3101      	adds	r1, #1
 8012316:	105b      	asrs	r3, r3, #1
 8012318:	e7ee      	b.n	80122f8 <__gethex+0x160>
 801231a:	f100 0914 	add.w	r9, r0, #20
 801231e:	f04f 0b00 	mov.w	fp, #0
 8012322:	f1ca 0301 	rsb	r3, sl, #1
 8012326:	f8cd 9008 	str.w	r9, [sp, #8]
 801232a:	f8cd b000 	str.w	fp, [sp]
 801232e:	9306      	str	r3, [sp, #24]
 8012330:	42b7      	cmp	r7, r6
 8012332:	d340      	bcc.n	80123b6 <__gethex+0x21e>
 8012334:	9802      	ldr	r0, [sp, #8]
 8012336:	9b00      	ldr	r3, [sp, #0]
 8012338:	f840 3b04 	str.w	r3, [r0], #4
 801233c:	eba0 0009 	sub.w	r0, r0, r9
 8012340:	1080      	asrs	r0, r0, #2
 8012342:	0146      	lsls	r6, r0, #5
 8012344:	6120      	str	r0, [r4, #16]
 8012346:	4618      	mov	r0, r3
 8012348:	f000 fb62 	bl	8012a10 <__hi0bits>
 801234c:	1a30      	subs	r0, r6, r0
 801234e:	f8d8 6000 	ldr.w	r6, [r8]
 8012352:	42b0      	cmp	r0, r6
 8012354:	dd63      	ble.n	801241e <__gethex+0x286>
 8012356:	1b87      	subs	r7, r0, r6
 8012358:	4639      	mov	r1, r7
 801235a:	4620      	mov	r0, r4
 801235c:	f000 fefc 	bl	8013158 <__any_on>
 8012360:	4682      	mov	sl, r0
 8012362:	b1a8      	cbz	r0, 8012390 <__gethex+0x1f8>
 8012364:	1e7b      	subs	r3, r7, #1
 8012366:	1159      	asrs	r1, r3, #5
 8012368:	f003 021f 	and.w	r2, r3, #31
 801236c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012370:	f04f 0a01 	mov.w	sl, #1
 8012374:	fa0a f202 	lsl.w	r2, sl, r2
 8012378:	420a      	tst	r2, r1
 801237a:	d009      	beq.n	8012390 <__gethex+0x1f8>
 801237c:	4553      	cmp	r3, sl
 801237e:	dd05      	ble.n	801238c <__gethex+0x1f4>
 8012380:	1eb9      	subs	r1, r7, #2
 8012382:	4620      	mov	r0, r4
 8012384:	f000 fee8 	bl	8013158 <__any_on>
 8012388:	2800      	cmp	r0, #0
 801238a:	d145      	bne.n	8012418 <__gethex+0x280>
 801238c:	f04f 0a02 	mov.w	sl, #2
 8012390:	4639      	mov	r1, r7
 8012392:	4620      	mov	r0, r4
 8012394:	f7ff fe98 	bl	80120c8 <rshift>
 8012398:	443d      	add	r5, r7
 801239a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801239e:	42ab      	cmp	r3, r5
 80123a0:	da4c      	bge.n	801243c <__gethex+0x2a4>
 80123a2:	ee18 0a10 	vmov	r0, s16
 80123a6:	4621      	mov	r1, r4
 80123a8:	f000 fa7c 	bl	80128a4 <_Bfree>
 80123ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80123ae:	2300      	movs	r3, #0
 80123b0:	6013      	str	r3, [r2, #0]
 80123b2:	27a3      	movs	r7, #163	; 0xa3
 80123b4:	e785      	b.n	80122c2 <__gethex+0x12a>
 80123b6:	1e73      	subs	r3, r6, #1
 80123b8:	9a05      	ldr	r2, [sp, #20]
 80123ba:	9303      	str	r3, [sp, #12]
 80123bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d019      	beq.n	80123f8 <__gethex+0x260>
 80123c4:	f1bb 0f20 	cmp.w	fp, #32
 80123c8:	d107      	bne.n	80123da <__gethex+0x242>
 80123ca:	9b02      	ldr	r3, [sp, #8]
 80123cc:	9a00      	ldr	r2, [sp, #0]
 80123ce:	f843 2b04 	str.w	r2, [r3], #4
 80123d2:	9302      	str	r3, [sp, #8]
 80123d4:	2300      	movs	r3, #0
 80123d6:	9300      	str	r3, [sp, #0]
 80123d8:	469b      	mov	fp, r3
 80123da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80123de:	f7ff fec5 	bl	801216c <__hexdig_fun>
 80123e2:	9b00      	ldr	r3, [sp, #0]
 80123e4:	f000 000f 	and.w	r0, r0, #15
 80123e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80123ec:	4303      	orrs	r3, r0
 80123ee:	9300      	str	r3, [sp, #0]
 80123f0:	f10b 0b04 	add.w	fp, fp, #4
 80123f4:	9b03      	ldr	r3, [sp, #12]
 80123f6:	e00d      	b.n	8012414 <__gethex+0x27c>
 80123f8:	9b03      	ldr	r3, [sp, #12]
 80123fa:	9a06      	ldr	r2, [sp, #24]
 80123fc:	4413      	add	r3, r2
 80123fe:	42bb      	cmp	r3, r7
 8012400:	d3e0      	bcc.n	80123c4 <__gethex+0x22c>
 8012402:	4618      	mov	r0, r3
 8012404:	9901      	ldr	r1, [sp, #4]
 8012406:	9307      	str	r3, [sp, #28]
 8012408:	4652      	mov	r2, sl
 801240a:	f7fe f8fc 	bl	8010606 <strncmp>
 801240e:	9b07      	ldr	r3, [sp, #28]
 8012410:	2800      	cmp	r0, #0
 8012412:	d1d7      	bne.n	80123c4 <__gethex+0x22c>
 8012414:	461e      	mov	r6, r3
 8012416:	e78b      	b.n	8012330 <__gethex+0x198>
 8012418:	f04f 0a03 	mov.w	sl, #3
 801241c:	e7b8      	b.n	8012390 <__gethex+0x1f8>
 801241e:	da0a      	bge.n	8012436 <__gethex+0x29e>
 8012420:	1a37      	subs	r7, r6, r0
 8012422:	4621      	mov	r1, r4
 8012424:	ee18 0a10 	vmov	r0, s16
 8012428:	463a      	mov	r2, r7
 801242a:	f000 fc57 	bl	8012cdc <__lshift>
 801242e:	1bed      	subs	r5, r5, r7
 8012430:	4604      	mov	r4, r0
 8012432:	f100 0914 	add.w	r9, r0, #20
 8012436:	f04f 0a00 	mov.w	sl, #0
 801243a:	e7ae      	b.n	801239a <__gethex+0x202>
 801243c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012440:	42a8      	cmp	r0, r5
 8012442:	dd72      	ble.n	801252a <__gethex+0x392>
 8012444:	1b45      	subs	r5, r0, r5
 8012446:	42ae      	cmp	r6, r5
 8012448:	dc36      	bgt.n	80124b8 <__gethex+0x320>
 801244a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801244e:	2b02      	cmp	r3, #2
 8012450:	d02a      	beq.n	80124a8 <__gethex+0x310>
 8012452:	2b03      	cmp	r3, #3
 8012454:	d02c      	beq.n	80124b0 <__gethex+0x318>
 8012456:	2b01      	cmp	r3, #1
 8012458:	d115      	bne.n	8012486 <__gethex+0x2ee>
 801245a:	42ae      	cmp	r6, r5
 801245c:	d113      	bne.n	8012486 <__gethex+0x2ee>
 801245e:	2e01      	cmp	r6, #1
 8012460:	d10b      	bne.n	801247a <__gethex+0x2e2>
 8012462:	9a04      	ldr	r2, [sp, #16]
 8012464:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012468:	6013      	str	r3, [r2, #0]
 801246a:	2301      	movs	r3, #1
 801246c:	6123      	str	r3, [r4, #16]
 801246e:	f8c9 3000 	str.w	r3, [r9]
 8012472:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012474:	2762      	movs	r7, #98	; 0x62
 8012476:	601c      	str	r4, [r3, #0]
 8012478:	e723      	b.n	80122c2 <__gethex+0x12a>
 801247a:	1e71      	subs	r1, r6, #1
 801247c:	4620      	mov	r0, r4
 801247e:	f000 fe6b 	bl	8013158 <__any_on>
 8012482:	2800      	cmp	r0, #0
 8012484:	d1ed      	bne.n	8012462 <__gethex+0x2ca>
 8012486:	ee18 0a10 	vmov	r0, s16
 801248a:	4621      	mov	r1, r4
 801248c:	f000 fa0a 	bl	80128a4 <_Bfree>
 8012490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012492:	2300      	movs	r3, #0
 8012494:	6013      	str	r3, [r2, #0]
 8012496:	2750      	movs	r7, #80	; 0x50
 8012498:	e713      	b.n	80122c2 <__gethex+0x12a>
 801249a:	bf00      	nop
 801249c:	08015890 	.word	0x08015890
 80124a0:	08015814 	.word	0x08015814
 80124a4:	08015825 	.word	0x08015825
 80124a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d1eb      	bne.n	8012486 <__gethex+0x2ee>
 80124ae:	e7d8      	b.n	8012462 <__gethex+0x2ca>
 80124b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d1d5      	bne.n	8012462 <__gethex+0x2ca>
 80124b6:	e7e6      	b.n	8012486 <__gethex+0x2ee>
 80124b8:	1e6f      	subs	r7, r5, #1
 80124ba:	f1ba 0f00 	cmp.w	sl, #0
 80124be:	d131      	bne.n	8012524 <__gethex+0x38c>
 80124c0:	b127      	cbz	r7, 80124cc <__gethex+0x334>
 80124c2:	4639      	mov	r1, r7
 80124c4:	4620      	mov	r0, r4
 80124c6:	f000 fe47 	bl	8013158 <__any_on>
 80124ca:	4682      	mov	sl, r0
 80124cc:	117b      	asrs	r3, r7, #5
 80124ce:	2101      	movs	r1, #1
 80124d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80124d4:	f007 071f 	and.w	r7, r7, #31
 80124d8:	fa01 f707 	lsl.w	r7, r1, r7
 80124dc:	421f      	tst	r7, r3
 80124de:	4629      	mov	r1, r5
 80124e0:	4620      	mov	r0, r4
 80124e2:	bf18      	it	ne
 80124e4:	f04a 0a02 	orrne.w	sl, sl, #2
 80124e8:	1b76      	subs	r6, r6, r5
 80124ea:	f7ff fded 	bl	80120c8 <rshift>
 80124ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80124f2:	2702      	movs	r7, #2
 80124f4:	f1ba 0f00 	cmp.w	sl, #0
 80124f8:	d048      	beq.n	801258c <__gethex+0x3f4>
 80124fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80124fe:	2b02      	cmp	r3, #2
 8012500:	d015      	beq.n	801252e <__gethex+0x396>
 8012502:	2b03      	cmp	r3, #3
 8012504:	d017      	beq.n	8012536 <__gethex+0x39e>
 8012506:	2b01      	cmp	r3, #1
 8012508:	d109      	bne.n	801251e <__gethex+0x386>
 801250a:	f01a 0f02 	tst.w	sl, #2
 801250e:	d006      	beq.n	801251e <__gethex+0x386>
 8012510:	f8d9 0000 	ldr.w	r0, [r9]
 8012514:	ea4a 0a00 	orr.w	sl, sl, r0
 8012518:	f01a 0f01 	tst.w	sl, #1
 801251c:	d10e      	bne.n	801253c <__gethex+0x3a4>
 801251e:	f047 0710 	orr.w	r7, r7, #16
 8012522:	e033      	b.n	801258c <__gethex+0x3f4>
 8012524:	f04f 0a01 	mov.w	sl, #1
 8012528:	e7d0      	b.n	80124cc <__gethex+0x334>
 801252a:	2701      	movs	r7, #1
 801252c:	e7e2      	b.n	80124f4 <__gethex+0x35c>
 801252e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012530:	f1c3 0301 	rsb	r3, r3, #1
 8012534:	9315      	str	r3, [sp, #84]	; 0x54
 8012536:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012538:	2b00      	cmp	r3, #0
 801253a:	d0f0      	beq.n	801251e <__gethex+0x386>
 801253c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012540:	f104 0314 	add.w	r3, r4, #20
 8012544:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012548:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801254c:	f04f 0c00 	mov.w	ip, #0
 8012550:	4618      	mov	r0, r3
 8012552:	f853 2b04 	ldr.w	r2, [r3], #4
 8012556:	f1b2 3fff 	cmp.w	r2, #4294967295
 801255a:	d01c      	beq.n	8012596 <__gethex+0x3fe>
 801255c:	3201      	adds	r2, #1
 801255e:	6002      	str	r2, [r0, #0]
 8012560:	2f02      	cmp	r7, #2
 8012562:	f104 0314 	add.w	r3, r4, #20
 8012566:	d13f      	bne.n	80125e8 <__gethex+0x450>
 8012568:	f8d8 2000 	ldr.w	r2, [r8]
 801256c:	3a01      	subs	r2, #1
 801256e:	42b2      	cmp	r2, r6
 8012570:	d10a      	bne.n	8012588 <__gethex+0x3f0>
 8012572:	1171      	asrs	r1, r6, #5
 8012574:	2201      	movs	r2, #1
 8012576:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801257a:	f006 061f 	and.w	r6, r6, #31
 801257e:	fa02 f606 	lsl.w	r6, r2, r6
 8012582:	421e      	tst	r6, r3
 8012584:	bf18      	it	ne
 8012586:	4617      	movne	r7, r2
 8012588:	f047 0720 	orr.w	r7, r7, #32
 801258c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801258e:	601c      	str	r4, [r3, #0]
 8012590:	9b04      	ldr	r3, [sp, #16]
 8012592:	601d      	str	r5, [r3, #0]
 8012594:	e695      	b.n	80122c2 <__gethex+0x12a>
 8012596:	4299      	cmp	r1, r3
 8012598:	f843 cc04 	str.w	ip, [r3, #-4]
 801259c:	d8d8      	bhi.n	8012550 <__gethex+0x3b8>
 801259e:	68a3      	ldr	r3, [r4, #8]
 80125a0:	459b      	cmp	fp, r3
 80125a2:	db19      	blt.n	80125d8 <__gethex+0x440>
 80125a4:	6861      	ldr	r1, [r4, #4]
 80125a6:	ee18 0a10 	vmov	r0, s16
 80125aa:	3101      	adds	r1, #1
 80125ac:	f000 f93a 	bl	8012824 <_Balloc>
 80125b0:	4681      	mov	r9, r0
 80125b2:	b918      	cbnz	r0, 80125bc <__gethex+0x424>
 80125b4:	4b1a      	ldr	r3, [pc, #104]	; (8012620 <__gethex+0x488>)
 80125b6:	4602      	mov	r2, r0
 80125b8:	2184      	movs	r1, #132	; 0x84
 80125ba:	e6a8      	b.n	801230e <__gethex+0x176>
 80125bc:	6922      	ldr	r2, [r4, #16]
 80125be:	3202      	adds	r2, #2
 80125c0:	f104 010c 	add.w	r1, r4, #12
 80125c4:	0092      	lsls	r2, r2, #2
 80125c6:	300c      	adds	r0, #12
 80125c8:	f000 f91e 	bl	8012808 <memcpy>
 80125cc:	4621      	mov	r1, r4
 80125ce:	ee18 0a10 	vmov	r0, s16
 80125d2:	f000 f967 	bl	80128a4 <_Bfree>
 80125d6:	464c      	mov	r4, r9
 80125d8:	6923      	ldr	r3, [r4, #16]
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80125e0:	6122      	str	r2, [r4, #16]
 80125e2:	2201      	movs	r2, #1
 80125e4:	615a      	str	r2, [r3, #20]
 80125e6:	e7bb      	b.n	8012560 <__gethex+0x3c8>
 80125e8:	6922      	ldr	r2, [r4, #16]
 80125ea:	455a      	cmp	r2, fp
 80125ec:	dd0b      	ble.n	8012606 <__gethex+0x46e>
 80125ee:	2101      	movs	r1, #1
 80125f0:	4620      	mov	r0, r4
 80125f2:	f7ff fd69 	bl	80120c8 <rshift>
 80125f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80125fa:	3501      	adds	r5, #1
 80125fc:	42ab      	cmp	r3, r5
 80125fe:	f6ff aed0 	blt.w	80123a2 <__gethex+0x20a>
 8012602:	2701      	movs	r7, #1
 8012604:	e7c0      	b.n	8012588 <__gethex+0x3f0>
 8012606:	f016 061f 	ands.w	r6, r6, #31
 801260a:	d0fa      	beq.n	8012602 <__gethex+0x46a>
 801260c:	449a      	add	sl, r3
 801260e:	f1c6 0620 	rsb	r6, r6, #32
 8012612:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012616:	f000 f9fb 	bl	8012a10 <__hi0bits>
 801261a:	42b0      	cmp	r0, r6
 801261c:	dbe7      	blt.n	80125ee <__gethex+0x456>
 801261e:	e7f0      	b.n	8012602 <__gethex+0x46a>
 8012620:	08015814 	.word	0x08015814

08012624 <L_shift>:
 8012624:	f1c2 0208 	rsb	r2, r2, #8
 8012628:	0092      	lsls	r2, r2, #2
 801262a:	b570      	push	{r4, r5, r6, lr}
 801262c:	f1c2 0620 	rsb	r6, r2, #32
 8012630:	6843      	ldr	r3, [r0, #4]
 8012632:	6804      	ldr	r4, [r0, #0]
 8012634:	fa03 f506 	lsl.w	r5, r3, r6
 8012638:	432c      	orrs	r4, r5
 801263a:	40d3      	lsrs	r3, r2
 801263c:	6004      	str	r4, [r0, #0]
 801263e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012642:	4288      	cmp	r0, r1
 8012644:	d3f4      	bcc.n	8012630 <L_shift+0xc>
 8012646:	bd70      	pop	{r4, r5, r6, pc}

08012648 <__match>:
 8012648:	b530      	push	{r4, r5, lr}
 801264a:	6803      	ldr	r3, [r0, #0]
 801264c:	3301      	adds	r3, #1
 801264e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012652:	b914      	cbnz	r4, 801265a <__match+0x12>
 8012654:	6003      	str	r3, [r0, #0]
 8012656:	2001      	movs	r0, #1
 8012658:	bd30      	pop	{r4, r5, pc}
 801265a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801265e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012662:	2d19      	cmp	r5, #25
 8012664:	bf98      	it	ls
 8012666:	3220      	addls	r2, #32
 8012668:	42a2      	cmp	r2, r4
 801266a:	d0f0      	beq.n	801264e <__match+0x6>
 801266c:	2000      	movs	r0, #0
 801266e:	e7f3      	b.n	8012658 <__match+0x10>

08012670 <__hexnan>:
 8012670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012674:	680b      	ldr	r3, [r1, #0]
 8012676:	6801      	ldr	r1, [r0, #0]
 8012678:	115e      	asrs	r6, r3, #5
 801267a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801267e:	f013 031f 	ands.w	r3, r3, #31
 8012682:	b087      	sub	sp, #28
 8012684:	bf18      	it	ne
 8012686:	3604      	addne	r6, #4
 8012688:	2500      	movs	r5, #0
 801268a:	1f37      	subs	r7, r6, #4
 801268c:	4682      	mov	sl, r0
 801268e:	4690      	mov	r8, r2
 8012690:	9301      	str	r3, [sp, #4]
 8012692:	f846 5c04 	str.w	r5, [r6, #-4]
 8012696:	46b9      	mov	r9, r7
 8012698:	463c      	mov	r4, r7
 801269a:	9502      	str	r5, [sp, #8]
 801269c:	46ab      	mov	fp, r5
 801269e:	784a      	ldrb	r2, [r1, #1]
 80126a0:	1c4b      	adds	r3, r1, #1
 80126a2:	9303      	str	r3, [sp, #12]
 80126a4:	b342      	cbz	r2, 80126f8 <__hexnan+0x88>
 80126a6:	4610      	mov	r0, r2
 80126a8:	9105      	str	r1, [sp, #20]
 80126aa:	9204      	str	r2, [sp, #16]
 80126ac:	f7ff fd5e 	bl	801216c <__hexdig_fun>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	d14f      	bne.n	8012754 <__hexnan+0xe4>
 80126b4:	9a04      	ldr	r2, [sp, #16]
 80126b6:	9905      	ldr	r1, [sp, #20]
 80126b8:	2a20      	cmp	r2, #32
 80126ba:	d818      	bhi.n	80126ee <__hexnan+0x7e>
 80126bc:	9b02      	ldr	r3, [sp, #8]
 80126be:	459b      	cmp	fp, r3
 80126c0:	dd13      	ble.n	80126ea <__hexnan+0x7a>
 80126c2:	454c      	cmp	r4, r9
 80126c4:	d206      	bcs.n	80126d4 <__hexnan+0x64>
 80126c6:	2d07      	cmp	r5, #7
 80126c8:	dc04      	bgt.n	80126d4 <__hexnan+0x64>
 80126ca:	462a      	mov	r2, r5
 80126cc:	4649      	mov	r1, r9
 80126ce:	4620      	mov	r0, r4
 80126d0:	f7ff ffa8 	bl	8012624 <L_shift>
 80126d4:	4544      	cmp	r4, r8
 80126d6:	d950      	bls.n	801277a <__hexnan+0x10a>
 80126d8:	2300      	movs	r3, #0
 80126da:	f1a4 0904 	sub.w	r9, r4, #4
 80126de:	f844 3c04 	str.w	r3, [r4, #-4]
 80126e2:	f8cd b008 	str.w	fp, [sp, #8]
 80126e6:	464c      	mov	r4, r9
 80126e8:	461d      	mov	r5, r3
 80126ea:	9903      	ldr	r1, [sp, #12]
 80126ec:	e7d7      	b.n	801269e <__hexnan+0x2e>
 80126ee:	2a29      	cmp	r2, #41	; 0x29
 80126f0:	d156      	bne.n	80127a0 <__hexnan+0x130>
 80126f2:	3102      	adds	r1, #2
 80126f4:	f8ca 1000 	str.w	r1, [sl]
 80126f8:	f1bb 0f00 	cmp.w	fp, #0
 80126fc:	d050      	beq.n	80127a0 <__hexnan+0x130>
 80126fe:	454c      	cmp	r4, r9
 8012700:	d206      	bcs.n	8012710 <__hexnan+0xa0>
 8012702:	2d07      	cmp	r5, #7
 8012704:	dc04      	bgt.n	8012710 <__hexnan+0xa0>
 8012706:	462a      	mov	r2, r5
 8012708:	4649      	mov	r1, r9
 801270a:	4620      	mov	r0, r4
 801270c:	f7ff ff8a 	bl	8012624 <L_shift>
 8012710:	4544      	cmp	r4, r8
 8012712:	d934      	bls.n	801277e <__hexnan+0x10e>
 8012714:	f1a8 0204 	sub.w	r2, r8, #4
 8012718:	4623      	mov	r3, r4
 801271a:	f853 1b04 	ldr.w	r1, [r3], #4
 801271e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012722:	429f      	cmp	r7, r3
 8012724:	d2f9      	bcs.n	801271a <__hexnan+0xaa>
 8012726:	1b3b      	subs	r3, r7, r4
 8012728:	f023 0303 	bic.w	r3, r3, #3
 801272c:	3304      	adds	r3, #4
 801272e:	3401      	adds	r4, #1
 8012730:	3e03      	subs	r6, #3
 8012732:	42b4      	cmp	r4, r6
 8012734:	bf88      	it	hi
 8012736:	2304      	movhi	r3, #4
 8012738:	4443      	add	r3, r8
 801273a:	2200      	movs	r2, #0
 801273c:	f843 2b04 	str.w	r2, [r3], #4
 8012740:	429f      	cmp	r7, r3
 8012742:	d2fb      	bcs.n	801273c <__hexnan+0xcc>
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	b91b      	cbnz	r3, 8012750 <__hexnan+0xe0>
 8012748:	4547      	cmp	r7, r8
 801274a:	d127      	bne.n	801279c <__hexnan+0x12c>
 801274c:	2301      	movs	r3, #1
 801274e:	603b      	str	r3, [r7, #0]
 8012750:	2005      	movs	r0, #5
 8012752:	e026      	b.n	80127a2 <__hexnan+0x132>
 8012754:	3501      	adds	r5, #1
 8012756:	2d08      	cmp	r5, #8
 8012758:	f10b 0b01 	add.w	fp, fp, #1
 801275c:	dd06      	ble.n	801276c <__hexnan+0xfc>
 801275e:	4544      	cmp	r4, r8
 8012760:	d9c3      	bls.n	80126ea <__hexnan+0x7a>
 8012762:	2300      	movs	r3, #0
 8012764:	f844 3c04 	str.w	r3, [r4, #-4]
 8012768:	2501      	movs	r5, #1
 801276a:	3c04      	subs	r4, #4
 801276c:	6822      	ldr	r2, [r4, #0]
 801276e:	f000 000f 	and.w	r0, r0, #15
 8012772:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012776:	6022      	str	r2, [r4, #0]
 8012778:	e7b7      	b.n	80126ea <__hexnan+0x7a>
 801277a:	2508      	movs	r5, #8
 801277c:	e7b5      	b.n	80126ea <__hexnan+0x7a>
 801277e:	9b01      	ldr	r3, [sp, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d0df      	beq.n	8012744 <__hexnan+0xd4>
 8012784:	f04f 32ff 	mov.w	r2, #4294967295
 8012788:	f1c3 0320 	rsb	r3, r3, #32
 801278c:	fa22 f303 	lsr.w	r3, r2, r3
 8012790:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012794:	401a      	ands	r2, r3
 8012796:	f846 2c04 	str.w	r2, [r6, #-4]
 801279a:	e7d3      	b.n	8012744 <__hexnan+0xd4>
 801279c:	3f04      	subs	r7, #4
 801279e:	e7d1      	b.n	8012744 <__hexnan+0xd4>
 80127a0:	2004      	movs	r0, #4
 80127a2:	b007      	add	sp, #28
 80127a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080127a8 <_localeconv_r>:
 80127a8:	4800      	ldr	r0, [pc, #0]	; (80127ac <_localeconv_r+0x4>)
 80127aa:	4770      	bx	lr
 80127ac:	200001b0 	.word	0x200001b0

080127b0 <_lseek_r>:
 80127b0:	b538      	push	{r3, r4, r5, lr}
 80127b2:	4d07      	ldr	r5, [pc, #28]	; (80127d0 <_lseek_r+0x20>)
 80127b4:	4604      	mov	r4, r0
 80127b6:	4608      	mov	r0, r1
 80127b8:	4611      	mov	r1, r2
 80127ba:	2200      	movs	r2, #0
 80127bc:	602a      	str	r2, [r5, #0]
 80127be:	461a      	mov	r2, r3
 80127c0:	f7f2 fb4f 	bl	8004e62 <_lseek>
 80127c4:	1c43      	adds	r3, r0, #1
 80127c6:	d102      	bne.n	80127ce <_lseek_r+0x1e>
 80127c8:	682b      	ldr	r3, [r5, #0]
 80127ca:	b103      	cbz	r3, 80127ce <_lseek_r+0x1e>
 80127cc:	6023      	str	r3, [r4, #0]
 80127ce:	bd38      	pop	{r3, r4, r5, pc}
 80127d0:	20004b44 	.word	0x20004b44

080127d4 <malloc>:
 80127d4:	4b02      	ldr	r3, [pc, #8]	; (80127e0 <malloc+0xc>)
 80127d6:	4601      	mov	r1, r0
 80127d8:	6818      	ldr	r0, [r3, #0]
 80127da:	f000 bd3d 	b.w	8013258 <_malloc_r>
 80127de:	bf00      	nop
 80127e0:	20000058 	.word	0x20000058

080127e4 <__ascii_mbtowc>:
 80127e4:	b082      	sub	sp, #8
 80127e6:	b901      	cbnz	r1, 80127ea <__ascii_mbtowc+0x6>
 80127e8:	a901      	add	r1, sp, #4
 80127ea:	b142      	cbz	r2, 80127fe <__ascii_mbtowc+0x1a>
 80127ec:	b14b      	cbz	r3, 8012802 <__ascii_mbtowc+0x1e>
 80127ee:	7813      	ldrb	r3, [r2, #0]
 80127f0:	600b      	str	r3, [r1, #0]
 80127f2:	7812      	ldrb	r2, [r2, #0]
 80127f4:	1e10      	subs	r0, r2, #0
 80127f6:	bf18      	it	ne
 80127f8:	2001      	movne	r0, #1
 80127fa:	b002      	add	sp, #8
 80127fc:	4770      	bx	lr
 80127fe:	4610      	mov	r0, r2
 8012800:	e7fb      	b.n	80127fa <__ascii_mbtowc+0x16>
 8012802:	f06f 0001 	mvn.w	r0, #1
 8012806:	e7f8      	b.n	80127fa <__ascii_mbtowc+0x16>

08012808 <memcpy>:
 8012808:	440a      	add	r2, r1
 801280a:	4291      	cmp	r1, r2
 801280c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012810:	d100      	bne.n	8012814 <memcpy+0xc>
 8012812:	4770      	bx	lr
 8012814:	b510      	push	{r4, lr}
 8012816:	f811 4b01 	ldrb.w	r4, [r1], #1
 801281a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801281e:	4291      	cmp	r1, r2
 8012820:	d1f9      	bne.n	8012816 <memcpy+0xe>
 8012822:	bd10      	pop	{r4, pc}

08012824 <_Balloc>:
 8012824:	b570      	push	{r4, r5, r6, lr}
 8012826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012828:	4604      	mov	r4, r0
 801282a:	460d      	mov	r5, r1
 801282c:	b976      	cbnz	r6, 801284c <_Balloc+0x28>
 801282e:	2010      	movs	r0, #16
 8012830:	f7ff ffd0 	bl	80127d4 <malloc>
 8012834:	4602      	mov	r2, r0
 8012836:	6260      	str	r0, [r4, #36]	; 0x24
 8012838:	b920      	cbnz	r0, 8012844 <_Balloc+0x20>
 801283a:	4b18      	ldr	r3, [pc, #96]	; (801289c <_Balloc+0x78>)
 801283c:	4818      	ldr	r0, [pc, #96]	; (80128a0 <_Balloc+0x7c>)
 801283e:	2166      	movs	r1, #102	; 0x66
 8012840:	f000 fef8 	bl	8013634 <__assert_func>
 8012844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012848:	6006      	str	r6, [r0, #0]
 801284a:	60c6      	str	r6, [r0, #12]
 801284c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801284e:	68f3      	ldr	r3, [r6, #12]
 8012850:	b183      	cbz	r3, 8012874 <_Balloc+0x50>
 8012852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801285a:	b9b8      	cbnz	r0, 801288c <_Balloc+0x68>
 801285c:	2101      	movs	r1, #1
 801285e:	fa01 f605 	lsl.w	r6, r1, r5
 8012862:	1d72      	adds	r2, r6, #5
 8012864:	0092      	lsls	r2, r2, #2
 8012866:	4620      	mov	r0, r4
 8012868:	f000 fc97 	bl	801319a <_calloc_r>
 801286c:	b160      	cbz	r0, 8012888 <_Balloc+0x64>
 801286e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012872:	e00e      	b.n	8012892 <_Balloc+0x6e>
 8012874:	2221      	movs	r2, #33	; 0x21
 8012876:	2104      	movs	r1, #4
 8012878:	4620      	mov	r0, r4
 801287a:	f000 fc8e 	bl	801319a <_calloc_r>
 801287e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012880:	60f0      	str	r0, [r6, #12]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d1e4      	bne.n	8012852 <_Balloc+0x2e>
 8012888:	2000      	movs	r0, #0
 801288a:	bd70      	pop	{r4, r5, r6, pc}
 801288c:	6802      	ldr	r2, [r0, #0]
 801288e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012892:	2300      	movs	r3, #0
 8012894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012898:	e7f7      	b.n	801288a <_Balloc+0x66>
 801289a:	bf00      	nop
 801289c:	0801579e 	.word	0x0801579e
 80128a0:	080158a4 	.word	0x080158a4

080128a4 <_Bfree>:
 80128a4:	b570      	push	{r4, r5, r6, lr}
 80128a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80128a8:	4605      	mov	r5, r0
 80128aa:	460c      	mov	r4, r1
 80128ac:	b976      	cbnz	r6, 80128cc <_Bfree+0x28>
 80128ae:	2010      	movs	r0, #16
 80128b0:	f7ff ff90 	bl	80127d4 <malloc>
 80128b4:	4602      	mov	r2, r0
 80128b6:	6268      	str	r0, [r5, #36]	; 0x24
 80128b8:	b920      	cbnz	r0, 80128c4 <_Bfree+0x20>
 80128ba:	4b09      	ldr	r3, [pc, #36]	; (80128e0 <_Bfree+0x3c>)
 80128bc:	4809      	ldr	r0, [pc, #36]	; (80128e4 <_Bfree+0x40>)
 80128be:	218a      	movs	r1, #138	; 0x8a
 80128c0:	f000 feb8 	bl	8013634 <__assert_func>
 80128c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80128c8:	6006      	str	r6, [r0, #0]
 80128ca:	60c6      	str	r6, [r0, #12]
 80128cc:	b13c      	cbz	r4, 80128de <_Bfree+0x3a>
 80128ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80128d0:	6862      	ldr	r2, [r4, #4]
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80128d8:	6021      	str	r1, [r4, #0]
 80128da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80128de:	bd70      	pop	{r4, r5, r6, pc}
 80128e0:	0801579e 	.word	0x0801579e
 80128e4:	080158a4 	.word	0x080158a4

080128e8 <__multadd>:
 80128e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ec:	690e      	ldr	r6, [r1, #16]
 80128ee:	4607      	mov	r7, r0
 80128f0:	4698      	mov	r8, r3
 80128f2:	460c      	mov	r4, r1
 80128f4:	f101 0014 	add.w	r0, r1, #20
 80128f8:	2300      	movs	r3, #0
 80128fa:	6805      	ldr	r5, [r0, #0]
 80128fc:	b2a9      	uxth	r1, r5
 80128fe:	fb02 8101 	mla	r1, r2, r1, r8
 8012902:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012906:	0c2d      	lsrs	r5, r5, #16
 8012908:	fb02 c505 	mla	r5, r2, r5, ip
 801290c:	b289      	uxth	r1, r1
 801290e:	3301      	adds	r3, #1
 8012910:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012914:	429e      	cmp	r6, r3
 8012916:	f840 1b04 	str.w	r1, [r0], #4
 801291a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801291e:	dcec      	bgt.n	80128fa <__multadd+0x12>
 8012920:	f1b8 0f00 	cmp.w	r8, #0
 8012924:	d022      	beq.n	801296c <__multadd+0x84>
 8012926:	68a3      	ldr	r3, [r4, #8]
 8012928:	42b3      	cmp	r3, r6
 801292a:	dc19      	bgt.n	8012960 <__multadd+0x78>
 801292c:	6861      	ldr	r1, [r4, #4]
 801292e:	4638      	mov	r0, r7
 8012930:	3101      	adds	r1, #1
 8012932:	f7ff ff77 	bl	8012824 <_Balloc>
 8012936:	4605      	mov	r5, r0
 8012938:	b928      	cbnz	r0, 8012946 <__multadd+0x5e>
 801293a:	4602      	mov	r2, r0
 801293c:	4b0d      	ldr	r3, [pc, #52]	; (8012974 <__multadd+0x8c>)
 801293e:	480e      	ldr	r0, [pc, #56]	; (8012978 <__multadd+0x90>)
 8012940:	21b5      	movs	r1, #181	; 0xb5
 8012942:	f000 fe77 	bl	8013634 <__assert_func>
 8012946:	6922      	ldr	r2, [r4, #16]
 8012948:	3202      	adds	r2, #2
 801294a:	f104 010c 	add.w	r1, r4, #12
 801294e:	0092      	lsls	r2, r2, #2
 8012950:	300c      	adds	r0, #12
 8012952:	f7ff ff59 	bl	8012808 <memcpy>
 8012956:	4621      	mov	r1, r4
 8012958:	4638      	mov	r0, r7
 801295a:	f7ff ffa3 	bl	80128a4 <_Bfree>
 801295e:	462c      	mov	r4, r5
 8012960:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012964:	3601      	adds	r6, #1
 8012966:	f8c3 8014 	str.w	r8, [r3, #20]
 801296a:	6126      	str	r6, [r4, #16]
 801296c:	4620      	mov	r0, r4
 801296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012972:	bf00      	nop
 8012974:	08015814 	.word	0x08015814
 8012978:	080158a4 	.word	0x080158a4

0801297c <__s2b>:
 801297c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012980:	460c      	mov	r4, r1
 8012982:	4615      	mov	r5, r2
 8012984:	461f      	mov	r7, r3
 8012986:	2209      	movs	r2, #9
 8012988:	3308      	adds	r3, #8
 801298a:	4606      	mov	r6, r0
 801298c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012990:	2100      	movs	r1, #0
 8012992:	2201      	movs	r2, #1
 8012994:	429a      	cmp	r2, r3
 8012996:	db09      	blt.n	80129ac <__s2b+0x30>
 8012998:	4630      	mov	r0, r6
 801299a:	f7ff ff43 	bl	8012824 <_Balloc>
 801299e:	b940      	cbnz	r0, 80129b2 <__s2b+0x36>
 80129a0:	4602      	mov	r2, r0
 80129a2:	4b19      	ldr	r3, [pc, #100]	; (8012a08 <__s2b+0x8c>)
 80129a4:	4819      	ldr	r0, [pc, #100]	; (8012a0c <__s2b+0x90>)
 80129a6:	21ce      	movs	r1, #206	; 0xce
 80129a8:	f000 fe44 	bl	8013634 <__assert_func>
 80129ac:	0052      	lsls	r2, r2, #1
 80129ae:	3101      	adds	r1, #1
 80129b0:	e7f0      	b.n	8012994 <__s2b+0x18>
 80129b2:	9b08      	ldr	r3, [sp, #32]
 80129b4:	6143      	str	r3, [r0, #20]
 80129b6:	2d09      	cmp	r5, #9
 80129b8:	f04f 0301 	mov.w	r3, #1
 80129bc:	6103      	str	r3, [r0, #16]
 80129be:	dd16      	ble.n	80129ee <__s2b+0x72>
 80129c0:	f104 0909 	add.w	r9, r4, #9
 80129c4:	46c8      	mov	r8, r9
 80129c6:	442c      	add	r4, r5
 80129c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80129cc:	4601      	mov	r1, r0
 80129ce:	3b30      	subs	r3, #48	; 0x30
 80129d0:	220a      	movs	r2, #10
 80129d2:	4630      	mov	r0, r6
 80129d4:	f7ff ff88 	bl	80128e8 <__multadd>
 80129d8:	45a0      	cmp	r8, r4
 80129da:	d1f5      	bne.n	80129c8 <__s2b+0x4c>
 80129dc:	f1a5 0408 	sub.w	r4, r5, #8
 80129e0:	444c      	add	r4, r9
 80129e2:	1b2d      	subs	r5, r5, r4
 80129e4:	1963      	adds	r3, r4, r5
 80129e6:	42bb      	cmp	r3, r7
 80129e8:	db04      	blt.n	80129f4 <__s2b+0x78>
 80129ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129ee:	340a      	adds	r4, #10
 80129f0:	2509      	movs	r5, #9
 80129f2:	e7f6      	b.n	80129e2 <__s2b+0x66>
 80129f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80129f8:	4601      	mov	r1, r0
 80129fa:	3b30      	subs	r3, #48	; 0x30
 80129fc:	220a      	movs	r2, #10
 80129fe:	4630      	mov	r0, r6
 8012a00:	f7ff ff72 	bl	80128e8 <__multadd>
 8012a04:	e7ee      	b.n	80129e4 <__s2b+0x68>
 8012a06:	bf00      	nop
 8012a08:	08015814 	.word	0x08015814
 8012a0c:	080158a4 	.word	0x080158a4

08012a10 <__hi0bits>:
 8012a10:	0c03      	lsrs	r3, r0, #16
 8012a12:	041b      	lsls	r3, r3, #16
 8012a14:	b9d3      	cbnz	r3, 8012a4c <__hi0bits+0x3c>
 8012a16:	0400      	lsls	r0, r0, #16
 8012a18:	2310      	movs	r3, #16
 8012a1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012a1e:	bf04      	itt	eq
 8012a20:	0200      	lsleq	r0, r0, #8
 8012a22:	3308      	addeq	r3, #8
 8012a24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012a28:	bf04      	itt	eq
 8012a2a:	0100      	lsleq	r0, r0, #4
 8012a2c:	3304      	addeq	r3, #4
 8012a2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012a32:	bf04      	itt	eq
 8012a34:	0080      	lsleq	r0, r0, #2
 8012a36:	3302      	addeq	r3, #2
 8012a38:	2800      	cmp	r0, #0
 8012a3a:	db05      	blt.n	8012a48 <__hi0bits+0x38>
 8012a3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012a40:	f103 0301 	add.w	r3, r3, #1
 8012a44:	bf08      	it	eq
 8012a46:	2320      	moveq	r3, #32
 8012a48:	4618      	mov	r0, r3
 8012a4a:	4770      	bx	lr
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e7e4      	b.n	8012a1a <__hi0bits+0xa>

08012a50 <__lo0bits>:
 8012a50:	6803      	ldr	r3, [r0, #0]
 8012a52:	f013 0207 	ands.w	r2, r3, #7
 8012a56:	4601      	mov	r1, r0
 8012a58:	d00b      	beq.n	8012a72 <__lo0bits+0x22>
 8012a5a:	07da      	lsls	r2, r3, #31
 8012a5c:	d424      	bmi.n	8012aa8 <__lo0bits+0x58>
 8012a5e:	0798      	lsls	r0, r3, #30
 8012a60:	bf49      	itett	mi
 8012a62:	085b      	lsrmi	r3, r3, #1
 8012a64:	089b      	lsrpl	r3, r3, #2
 8012a66:	2001      	movmi	r0, #1
 8012a68:	600b      	strmi	r3, [r1, #0]
 8012a6a:	bf5c      	itt	pl
 8012a6c:	600b      	strpl	r3, [r1, #0]
 8012a6e:	2002      	movpl	r0, #2
 8012a70:	4770      	bx	lr
 8012a72:	b298      	uxth	r0, r3
 8012a74:	b9b0      	cbnz	r0, 8012aa4 <__lo0bits+0x54>
 8012a76:	0c1b      	lsrs	r3, r3, #16
 8012a78:	2010      	movs	r0, #16
 8012a7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012a7e:	bf04      	itt	eq
 8012a80:	0a1b      	lsreq	r3, r3, #8
 8012a82:	3008      	addeq	r0, #8
 8012a84:	071a      	lsls	r2, r3, #28
 8012a86:	bf04      	itt	eq
 8012a88:	091b      	lsreq	r3, r3, #4
 8012a8a:	3004      	addeq	r0, #4
 8012a8c:	079a      	lsls	r2, r3, #30
 8012a8e:	bf04      	itt	eq
 8012a90:	089b      	lsreq	r3, r3, #2
 8012a92:	3002      	addeq	r0, #2
 8012a94:	07da      	lsls	r2, r3, #31
 8012a96:	d403      	bmi.n	8012aa0 <__lo0bits+0x50>
 8012a98:	085b      	lsrs	r3, r3, #1
 8012a9a:	f100 0001 	add.w	r0, r0, #1
 8012a9e:	d005      	beq.n	8012aac <__lo0bits+0x5c>
 8012aa0:	600b      	str	r3, [r1, #0]
 8012aa2:	4770      	bx	lr
 8012aa4:	4610      	mov	r0, r2
 8012aa6:	e7e8      	b.n	8012a7a <__lo0bits+0x2a>
 8012aa8:	2000      	movs	r0, #0
 8012aaa:	4770      	bx	lr
 8012aac:	2020      	movs	r0, #32
 8012aae:	4770      	bx	lr

08012ab0 <__i2b>:
 8012ab0:	b510      	push	{r4, lr}
 8012ab2:	460c      	mov	r4, r1
 8012ab4:	2101      	movs	r1, #1
 8012ab6:	f7ff feb5 	bl	8012824 <_Balloc>
 8012aba:	4602      	mov	r2, r0
 8012abc:	b928      	cbnz	r0, 8012aca <__i2b+0x1a>
 8012abe:	4b05      	ldr	r3, [pc, #20]	; (8012ad4 <__i2b+0x24>)
 8012ac0:	4805      	ldr	r0, [pc, #20]	; (8012ad8 <__i2b+0x28>)
 8012ac2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012ac6:	f000 fdb5 	bl	8013634 <__assert_func>
 8012aca:	2301      	movs	r3, #1
 8012acc:	6144      	str	r4, [r0, #20]
 8012ace:	6103      	str	r3, [r0, #16]
 8012ad0:	bd10      	pop	{r4, pc}
 8012ad2:	bf00      	nop
 8012ad4:	08015814 	.word	0x08015814
 8012ad8:	080158a4 	.word	0x080158a4

08012adc <__multiply>:
 8012adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ae0:	4614      	mov	r4, r2
 8012ae2:	690a      	ldr	r2, [r1, #16]
 8012ae4:	6923      	ldr	r3, [r4, #16]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	bfb8      	it	lt
 8012aea:	460b      	movlt	r3, r1
 8012aec:	460d      	mov	r5, r1
 8012aee:	bfbc      	itt	lt
 8012af0:	4625      	movlt	r5, r4
 8012af2:	461c      	movlt	r4, r3
 8012af4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012af8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012afc:	68ab      	ldr	r3, [r5, #8]
 8012afe:	6869      	ldr	r1, [r5, #4]
 8012b00:	eb0a 0709 	add.w	r7, sl, r9
 8012b04:	42bb      	cmp	r3, r7
 8012b06:	b085      	sub	sp, #20
 8012b08:	bfb8      	it	lt
 8012b0a:	3101      	addlt	r1, #1
 8012b0c:	f7ff fe8a 	bl	8012824 <_Balloc>
 8012b10:	b930      	cbnz	r0, 8012b20 <__multiply+0x44>
 8012b12:	4602      	mov	r2, r0
 8012b14:	4b42      	ldr	r3, [pc, #264]	; (8012c20 <__multiply+0x144>)
 8012b16:	4843      	ldr	r0, [pc, #268]	; (8012c24 <__multiply+0x148>)
 8012b18:	f240 115d 	movw	r1, #349	; 0x15d
 8012b1c:	f000 fd8a 	bl	8013634 <__assert_func>
 8012b20:	f100 0614 	add.w	r6, r0, #20
 8012b24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012b28:	4633      	mov	r3, r6
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	4543      	cmp	r3, r8
 8012b2e:	d31e      	bcc.n	8012b6e <__multiply+0x92>
 8012b30:	f105 0c14 	add.w	ip, r5, #20
 8012b34:	f104 0314 	add.w	r3, r4, #20
 8012b38:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012b3c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8012b40:	9202      	str	r2, [sp, #8]
 8012b42:	ebac 0205 	sub.w	r2, ip, r5
 8012b46:	3a15      	subs	r2, #21
 8012b48:	f022 0203 	bic.w	r2, r2, #3
 8012b4c:	3204      	adds	r2, #4
 8012b4e:	f105 0115 	add.w	r1, r5, #21
 8012b52:	458c      	cmp	ip, r1
 8012b54:	bf38      	it	cc
 8012b56:	2204      	movcc	r2, #4
 8012b58:	9201      	str	r2, [sp, #4]
 8012b5a:	9a02      	ldr	r2, [sp, #8]
 8012b5c:	9303      	str	r3, [sp, #12]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d808      	bhi.n	8012b74 <__multiply+0x98>
 8012b62:	2f00      	cmp	r7, #0
 8012b64:	dc55      	bgt.n	8012c12 <__multiply+0x136>
 8012b66:	6107      	str	r7, [r0, #16]
 8012b68:	b005      	add	sp, #20
 8012b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b6e:	f843 2b04 	str.w	r2, [r3], #4
 8012b72:	e7db      	b.n	8012b2c <__multiply+0x50>
 8012b74:	f8b3 a000 	ldrh.w	sl, [r3]
 8012b78:	f1ba 0f00 	cmp.w	sl, #0
 8012b7c:	d020      	beq.n	8012bc0 <__multiply+0xe4>
 8012b7e:	f105 0e14 	add.w	lr, r5, #20
 8012b82:	46b1      	mov	r9, r6
 8012b84:	2200      	movs	r2, #0
 8012b86:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012b8a:	f8d9 b000 	ldr.w	fp, [r9]
 8012b8e:	b2a1      	uxth	r1, r4
 8012b90:	fa1f fb8b 	uxth.w	fp, fp
 8012b94:	fb0a b101 	mla	r1, sl, r1, fp
 8012b98:	4411      	add	r1, r2
 8012b9a:	f8d9 2000 	ldr.w	r2, [r9]
 8012b9e:	0c24      	lsrs	r4, r4, #16
 8012ba0:	0c12      	lsrs	r2, r2, #16
 8012ba2:	fb0a 2404 	mla	r4, sl, r4, r2
 8012ba6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012baa:	b289      	uxth	r1, r1
 8012bac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012bb0:	45f4      	cmp	ip, lr
 8012bb2:	f849 1b04 	str.w	r1, [r9], #4
 8012bb6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012bba:	d8e4      	bhi.n	8012b86 <__multiply+0xaa>
 8012bbc:	9901      	ldr	r1, [sp, #4]
 8012bbe:	5072      	str	r2, [r6, r1]
 8012bc0:	9a03      	ldr	r2, [sp, #12]
 8012bc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012bc6:	3304      	adds	r3, #4
 8012bc8:	f1b9 0f00 	cmp.w	r9, #0
 8012bcc:	d01f      	beq.n	8012c0e <__multiply+0x132>
 8012bce:	6834      	ldr	r4, [r6, #0]
 8012bd0:	f105 0114 	add.w	r1, r5, #20
 8012bd4:	46b6      	mov	lr, r6
 8012bd6:	f04f 0a00 	mov.w	sl, #0
 8012bda:	880a      	ldrh	r2, [r1, #0]
 8012bdc:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012be0:	fb09 b202 	mla	r2, r9, r2, fp
 8012be4:	4492      	add	sl, r2
 8012be6:	b2a4      	uxth	r4, r4
 8012be8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012bec:	f84e 4b04 	str.w	r4, [lr], #4
 8012bf0:	f851 4b04 	ldr.w	r4, [r1], #4
 8012bf4:	f8be 2000 	ldrh.w	r2, [lr]
 8012bf8:	0c24      	lsrs	r4, r4, #16
 8012bfa:	fb09 2404 	mla	r4, r9, r4, r2
 8012bfe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012c02:	458c      	cmp	ip, r1
 8012c04:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012c08:	d8e7      	bhi.n	8012bda <__multiply+0xfe>
 8012c0a:	9a01      	ldr	r2, [sp, #4]
 8012c0c:	50b4      	str	r4, [r6, r2]
 8012c0e:	3604      	adds	r6, #4
 8012c10:	e7a3      	b.n	8012b5a <__multiply+0x7e>
 8012c12:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d1a5      	bne.n	8012b66 <__multiply+0x8a>
 8012c1a:	3f01      	subs	r7, #1
 8012c1c:	e7a1      	b.n	8012b62 <__multiply+0x86>
 8012c1e:	bf00      	nop
 8012c20:	08015814 	.word	0x08015814
 8012c24:	080158a4 	.word	0x080158a4

08012c28 <__pow5mult>:
 8012c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c2c:	4615      	mov	r5, r2
 8012c2e:	f012 0203 	ands.w	r2, r2, #3
 8012c32:	4606      	mov	r6, r0
 8012c34:	460f      	mov	r7, r1
 8012c36:	d007      	beq.n	8012c48 <__pow5mult+0x20>
 8012c38:	4c25      	ldr	r4, [pc, #148]	; (8012cd0 <__pow5mult+0xa8>)
 8012c3a:	3a01      	subs	r2, #1
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012c42:	f7ff fe51 	bl	80128e8 <__multadd>
 8012c46:	4607      	mov	r7, r0
 8012c48:	10ad      	asrs	r5, r5, #2
 8012c4a:	d03d      	beq.n	8012cc8 <__pow5mult+0xa0>
 8012c4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012c4e:	b97c      	cbnz	r4, 8012c70 <__pow5mult+0x48>
 8012c50:	2010      	movs	r0, #16
 8012c52:	f7ff fdbf 	bl	80127d4 <malloc>
 8012c56:	4602      	mov	r2, r0
 8012c58:	6270      	str	r0, [r6, #36]	; 0x24
 8012c5a:	b928      	cbnz	r0, 8012c68 <__pow5mult+0x40>
 8012c5c:	4b1d      	ldr	r3, [pc, #116]	; (8012cd4 <__pow5mult+0xac>)
 8012c5e:	481e      	ldr	r0, [pc, #120]	; (8012cd8 <__pow5mult+0xb0>)
 8012c60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012c64:	f000 fce6 	bl	8013634 <__assert_func>
 8012c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012c6c:	6004      	str	r4, [r0, #0]
 8012c6e:	60c4      	str	r4, [r0, #12]
 8012c70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012c74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012c78:	b94c      	cbnz	r4, 8012c8e <__pow5mult+0x66>
 8012c7a:	f240 2171 	movw	r1, #625	; 0x271
 8012c7e:	4630      	mov	r0, r6
 8012c80:	f7ff ff16 	bl	8012ab0 <__i2b>
 8012c84:	2300      	movs	r3, #0
 8012c86:	f8c8 0008 	str.w	r0, [r8, #8]
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	6003      	str	r3, [r0, #0]
 8012c8e:	f04f 0900 	mov.w	r9, #0
 8012c92:	07eb      	lsls	r3, r5, #31
 8012c94:	d50a      	bpl.n	8012cac <__pow5mult+0x84>
 8012c96:	4639      	mov	r1, r7
 8012c98:	4622      	mov	r2, r4
 8012c9a:	4630      	mov	r0, r6
 8012c9c:	f7ff ff1e 	bl	8012adc <__multiply>
 8012ca0:	4639      	mov	r1, r7
 8012ca2:	4680      	mov	r8, r0
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f7ff fdfd 	bl	80128a4 <_Bfree>
 8012caa:	4647      	mov	r7, r8
 8012cac:	106d      	asrs	r5, r5, #1
 8012cae:	d00b      	beq.n	8012cc8 <__pow5mult+0xa0>
 8012cb0:	6820      	ldr	r0, [r4, #0]
 8012cb2:	b938      	cbnz	r0, 8012cc4 <__pow5mult+0x9c>
 8012cb4:	4622      	mov	r2, r4
 8012cb6:	4621      	mov	r1, r4
 8012cb8:	4630      	mov	r0, r6
 8012cba:	f7ff ff0f 	bl	8012adc <__multiply>
 8012cbe:	6020      	str	r0, [r4, #0]
 8012cc0:	f8c0 9000 	str.w	r9, [r0]
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	e7e4      	b.n	8012c92 <__pow5mult+0x6a>
 8012cc8:	4638      	mov	r0, r7
 8012cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cce:	bf00      	nop
 8012cd0:	080159f8 	.word	0x080159f8
 8012cd4:	0801579e 	.word	0x0801579e
 8012cd8:	080158a4 	.word	0x080158a4

08012cdc <__lshift>:
 8012cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	6849      	ldr	r1, [r1, #4]
 8012ce4:	6923      	ldr	r3, [r4, #16]
 8012ce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012cea:	68a3      	ldr	r3, [r4, #8]
 8012cec:	4607      	mov	r7, r0
 8012cee:	4691      	mov	r9, r2
 8012cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012cf4:	f108 0601 	add.w	r6, r8, #1
 8012cf8:	42b3      	cmp	r3, r6
 8012cfa:	db0b      	blt.n	8012d14 <__lshift+0x38>
 8012cfc:	4638      	mov	r0, r7
 8012cfe:	f7ff fd91 	bl	8012824 <_Balloc>
 8012d02:	4605      	mov	r5, r0
 8012d04:	b948      	cbnz	r0, 8012d1a <__lshift+0x3e>
 8012d06:	4602      	mov	r2, r0
 8012d08:	4b28      	ldr	r3, [pc, #160]	; (8012dac <__lshift+0xd0>)
 8012d0a:	4829      	ldr	r0, [pc, #164]	; (8012db0 <__lshift+0xd4>)
 8012d0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012d10:	f000 fc90 	bl	8013634 <__assert_func>
 8012d14:	3101      	adds	r1, #1
 8012d16:	005b      	lsls	r3, r3, #1
 8012d18:	e7ee      	b.n	8012cf8 <__lshift+0x1c>
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	f100 0114 	add.w	r1, r0, #20
 8012d20:	f100 0210 	add.w	r2, r0, #16
 8012d24:	4618      	mov	r0, r3
 8012d26:	4553      	cmp	r3, sl
 8012d28:	db33      	blt.n	8012d92 <__lshift+0xb6>
 8012d2a:	6920      	ldr	r0, [r4, #16]
 8012d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012d30:	f104 0314 	add.w	r3, r4, #20
 8012d34:	f019 091f 	ands.w	r9, r9, #31
 8012d38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012d3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012d40:	d02b      	beq.n	8012d9a <__lshift+0xbe>
 8012d42:	f1c9 0e20 	rsb	lr, r9, #32
 8012d46:	468a      	mov	sl, r1
 8012d48:	2200      	movs	r2, #0
 8012d4a:	6818      	ldr	r0, [r3, #0]
 8012d4c:	fa00 f009 	lsl.w	r0, r0, r9
 8012d50:	4302      	orrs	r2, r0
 8012d52:	f84a 2b04 	str.w	r2, [sl], #4
 8012d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d5a:	459c      	cmp	ip, r3
 8012d5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012d60:	d8f3      	bhi.n	8012d4a <__lshift+0x6e>
 8012d62:	ebac 0304 	sub.w	r3, ip, r4
 8012d66:	3b15      	subs	r3, #21
 8012d68:	f023 0303 	bic.w	r3, r3, #3
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	f104 0015 	add.w	r0, r4, #21
 8012d72:	4584      	cmp	ip, r0
 8012d74:	bf38      	it	cc
 8012d76:	2304      	movcc	r3, #4
 8012d78:	50ca      	str	r2, [r1, r3]
 8012d7a:	b10a      	cbz	r2, 8012d80 <__lshift+0xa4>
 8012d7c:	f108 0602 	add.w	r6, r8, #2
 8012d80:	3e01      	subs	r6, #1
 8012d82:	4638      	mov	r0, r7
 8012d84:	612e      	str	r6, [r5, #16]
 8012d86:	4621      	mov	r1, r4
 8012d88:	f7ff fd8c 	bl	80128a4 <_Bfree>
 8012d8c:	4628      	mov	r0, r5
 8012d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8012d96:	3301      	adds	r3, #1
 8012d98:	e7c5      	b.n	8012d26 <__lshift+0x4a>
 8012d9a:	3904      	subs	r1, #4
 8012d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8012da4:	459c      	cmp	ip, r3
 8012da6:	d8f9      	bhi.n	8012d9c <__lshift+0xc0>
 8012da8:	e7ea      	b.n	8012d80 <__lshift+0xa4>
 8012daa:	bf00      	nop
 8012dac:	08015814 	.word	0x08015814
 8012db0:	080158a4 	.word	0x080158a4

08012db4 <__mcmp>:
 8012db4:	b530      	push	{r4, r5, lr}
 8012db6:	6902      	ldr	r2, [r0, #16]
 8012db8:	690c      	ldr	r4, [r1, #16]
 8012dba:	1b12      	subs	r2, r2, r4
 8012dbc:	d10e      	bne.n	8012ddc <__mcmp+0x28>
 8012dbe:	f100 0314 	add.w	r3, r0, #20
 8012dc2:	3114      	adds	r1, #20
 8012dc4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012dc8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012dcc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012dd0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012dd4:	42a5      	cmp	r5, r4
 8012dd6:	d003      	beq.n	8012de0 <__mcmp+0x2c>
 8012dd8:	d305      	bcc.n	8012de6 <__mcmp+0x32>
 8012dda:	2201      	movs	r2, #1
 8012ddc:	4610      	mov	r0, r2
 8012dde:	bd30      	pop	{r4, r5, pc}
 8012de0:	4283      	cmp	r3, r0
 8012de2:	d3f3      	bcc.n	8012dcc <__mcmp+0x18>
 8012de4:	e7fa      	b.n	8012ddc <__mcmp+0x28>
 8012de6:	f04f 32ff 	mov.w	r2, #4294967295
 8012dea:	e7f7      	b.n	8012ddc <__mcmp+0x28>

08012dec <__mdiff>:
 8012dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df0:	460c      	mov	r4, r1
 8012df2:	4606      	mov	r6, r0
 8012df4:	4611      	mov	r1, r2
 8012df6:	4620      	mov	r0, r4
 8012df8:	4617      	mov	r7, r2
 8012dfa:	f7ff ffdb 	bl	8012db4 <__mcmp>
 8012dfe:	1e05      	subs	r5, r0, #0
 8012e00:	d110      	bne.n	8012e24 <__mdiff+0x38>
 8012e02:	4629      	mov	r1, r5
 8012e04:	4630      	mov	r0, r6
 8012e06:	f7ff fd0d 	bl	8012824 <_Balloc>
 8012e0a:	b930      	cbnz	r0, 8012e1a <__mdiff+0x2e>
 8012e0c:	4b39      	ldr	r3, [pc, #228]	; (8012ef4 <__mdiff+0x108>)
 8012e0e:	4602      	mov	r2, r0
 8012e10:	f240 2132 	movw	r1, #562	; 0x232
 8012e14:	4838      	ldr	r0, [pc, #224]	; (8012ef8 <__mdiff+0x10c>)
 8012e16:	f000 fc0d 	bl	8013634 <__assert_func>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e24:	bfa4      	itt	ge
 8012e26:	463b      	movge	r3, r7
 8012e28:	4627      	movge	r7, r4
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	6879      	ldr	r1, [r7, #4]
 8012e2e:	bfa6      	itte	ge
 8012e30:	461c      	movge	r4, r3
 8012e32:	2500      	movge	r5, #0
 8012e34:	2501      	movlt	r5, #1
 8012e36:	f7ff fcf5 	bl	8012824 <_Balloc>
 8012e3a:	b920      	cbnz	r0, 8012e46 <__mdiff+0x5a>
 8012e3c:	4b2d      	ldr	r3, [pc, #180]	; (8012ef4 <__mdiff+0x108>)
 8012e3e:	4602      	mov	r2, r0
 8012e40:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012e44:	e7e6      	b.n	8012e14 <__mdiff+0x28>
 8012e46:	693e      	ldr	r6, [r7, #16]
 8012e48:	60c5      	str	r5, [r0, #12]
 8012e4a:	6925      	ldr	r5, [r4, #16]
 8012e4c:	f107 0114 	add.w	r1, r7, #20
 8012e50:	f104 0914 	add.w	r9, r4, #20
 8012e54:	f100 0e14 	add.w	lr, r0, #20
 8012e58:	f107 0210 	add.w	r2, r7, #16
 8012e5c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8012e60:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8012e64:	46f2      	mov	sl, lr
 8012e66:	2700      	movs	r7, #0
 8012e68:	f859 3b04 	ldr.w	r3, [r9], #4
 8012e6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012e70:	fa1f f883 	uxth.w	r8, r3
 8012e74:	fa17 f78b 	uxtah	r7, r7, fp
 8012e78:	0c1b      	lsrs	r3, r3, #16
 8012e7a:	eba7 0808 	sub.w	r8, r7, r8
 8012e7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012e82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012e86:	fa1f f888 	uxth.w	r8, r8
 8012e8a:	141f      	asrs	r7, r3, #16
 8012e8c:	454d      	cmp	r5, r9
 8012e8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012e92:	f84a 3b04 	str.w	r3, [sl], #4
 8012e96:	d8e7      	bhi.n	8012e68 <__mdiff+0x7c>
 8012e98:	1b2b      	subs	r3, r5, r4
 8012e9a:	3b15      	subs	r3, #21
 8012e9c:	f023 0303 	bic.w	r3, r3, #3
 8012ea0:	3304      	adds	r3, #4
 8012ea2:	3415      	adds	r4, #21
 8012ea4:	42a5      	cmp	r5, r4
 8012ea6:	bf38      	it	cc
 8012ea8:	2304      	movcc	r3, #4
 8012eaa:	4419      	add	r1, r3
 8012eac:	4473      	add	r3, lr
 8012eae:	469e      	mov	lr, r3
 8012eb0:	460d      	mov	r5, r1
 8012eb2:	4565      	cmp	r5, ip
 8012eb4:	d30e      	bcc.n	8012ed4 <__mdiff+0xe8>
 8012eb6:	f10c 0203 	add.w	r2, ip, #3
 8012eba:	1a52      	subs	r2, r2, r1
 8012ebc:	f022 0203 	bic.w	r2, r2, #3
 8012ec0:	3903      	subs	r1, #3
 8012ec2:	458c      	cmp	ip, r1
 8012ec4:	bf38      	it	cc
 8012ec6:	2200      	movcc	r2, #0
 8012ec8:	441a      	add	r2, r3
 8012eca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012ece:	b17b      	cbz	r3, 8012ef0 <__mdiff+0x104>
 8012ed0:	6106      	str	r6, [r0, #16]
 8012ed2:	e7a5      	b.n	8012e20 <__mdiff+0x34>
 8012ed4:	f855 8b04 	ldr.w	r8, [r5], #4
 8012ed8:	fa17 f488 	uxtah	r4, r7, r8
 8012edc:	1422      	asrs	r2, r4, #16
 8012ede:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012ee2:	b2a4      	uxth	r4, r4
 8012ee4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012ee8:	f84e 4b04 	str.w	r4, [lr], #4
 8012eec:	1417      	asrs	r7, r2, #16
 8012eee:	e7e0      	b.n	8012eb2 <__mdiff+0xc6>
 8012ef0:	3e01      	subs	r6, #1
 8012ef2:	e7ea      	b.n	8012eca <__mdiff+0xde>
 8012ef4:	08015814 	.word	0x08015814
 8012ef8:	080158a4 	.word	0x080158a4

08012efc <__ulp>:
 8012efc:	b082      	sub	sp, #8
 8012efe:	ed8d 0b00 	vstr	d0, [sp]
 8012f02:	9b01      	ldr	r3, [sp, #4]
 8012f04:	4912      	ldr	r1, [pc, #72]	; (8012f50 <__ulp+0x54>)
 8012f06:	4019      	ands	r1, r3
 8012f08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012f0c:	2900      	cmp	r1, #0
 8012f0e:	dd05      	ble.n	8012f1c <__ulp+0x20>
 8012f10:	2200      	movs	r2, #0
 8012f12:	460b      	mov	r3, r1
 8012f14:	ec43 2b10 	vmov	d0, r2, r3
 8012f18:	b002      	add	sp, #8
 8012f1a:	4770      	bx	lr
 8012f1c:	4249      	negs	r1, r1
 8012f1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012f22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012f26:	f04f 0200 	mov.w	r2, #0
 8012f2a:	f04f 0300 	mov.w	r3, #0
 8012f2e:	da04      	bge.n	8012f3a <__ulp+0x3e>
 8012f30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012f34:	fa41 f300 	asr.w	r3, r1, r0
 8012f38:	e7ec      	b.n	8012f14 <__ulp+0x18>
 8012f3a:	f1a0 0114 	sub.w	r1, r0, #20
 8012f3e:	291e      	cmp	r1, #30
 8012f40:	bfda      	itte	le
 8012f42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012f46:	fa20 f101 	lsrle.w	r1, r0, r1
 8012f4a:	2101      	movgt	r1, #1
 8012f4c:	460a      	mov	r2, r1
 8012f4e:	e7e1      	b.n	8012f14 <__ulp+0x18>
 8012f50:	7ff00000 	.word	0x7ff00000

08012f54 <__b2d>:
 8012f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f56:	6905      	ldr	r5, [r0, #16]
 8012f58:	f100 0714 	add.w	r7, r0, #20
 8012f5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012f60:	1f2e      	subs	r6, r5, #4
 8012f62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012f66:	4620      	mov	r0, r4
 8012f68:	f7ff fd52 	bl	8012a10 <__hi0bits>
 8012f6c:	f1c0 0320 	rsb	r3, r0, #32
 8012f70:	280a      	cmp	r0, #10
 8012f72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012ff0 <__b2d+0x9c>
 8012f76:	600b      	str	r3, [r1, #0]
 8012f78:	dc14      	bgt.n	8012fa4 <__b2d+0x50>
 8012f7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012f7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012f82:	42b7      	cmp	r7, r6
 8012f84:	ea41 030c 	orr.w	r3, r1, ip
 8012f88:	bf34      	ite	cc
 8012f8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012f8e:	2100      	movcs	r1, #0
 8012f90:	3015      	adds	r0, #21
 8012f92:	fa04 f000 	lsl.w	r0, r4, r0
 8012f96:	fa21 f10e 	lsr.w	r1, r1, lr
 8012f9a:	ea40 0201 	orr.w	r2, r0, r1
 8012f9e:	ec43 2b10 	vmov	d0, r2, r3
 8012fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fa4:	42b7      	cmp	r7, r6
 8012fa6:	bf3a      	itte	cc
 8012fa8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012fac:	f1a5 0608 	subcc.w	r6, r5, #8
 8012fb0:	2100      	movcs	r1, #0
 8012fb2:	380b      	subs	r0, #11
 8012fb4:	d017      	beq.n	8012fe6 <__b2d+0x92>
 8012fb6:	f1c0 0c20 	rsb	ip, r0, #32
 8012fba:	fa04 f500 	lsl.w	r5, r4, r0
 8012fbe:	42be      	cmp	r6, r7
 8012fc0:	fa21 f40c 	lsr.w	r4, r1, ip
 8012fc4:	ea45 0504 	orr.w	r5, r5, r4
 8012fc8:	bf8c      	ite	hi
 8012fca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012fce:	2400      	movls	r4, #0
 8012fd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012fd4:	fa01 f000 	lsl.w	r0, r1, r0
 8012fd8:	fa24 f40c 	lsr.w	r4, r4, ip
 8012fdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012fe0:	ea40 0204 	orr.w	r2, r0, r4
 8012fe4:	e7db      	b.n	8012f9e <__b2d+0x4a>
 8012fe6:	ea44 030c 	orr.w	r3, r4, ip
 8012fea:	460a      	mov	r2, r1
 8012fec:	e7d7      	b.n	8012f9e <__b2d+0x4a>
 8012fee:	bf00      	nop
 8012ff0:	3ff00000 	.word	0x3ff00000

08012ff4 <__d2b>:
 8012ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ff8:	4689      	mov	r9, r1
 8012ffa:	2101      	movs	r1, #1
 8012ffc:	ec57 6b10 	vmov	r6, r7, d0
 8013000:	4690      	mov	r8, r2
 8013002:	f7ff fc0f 	bl	8012824 <_Balloc>
 8013006:	4604      	mov	r4, r0
 8013008:	b930      	cbnz	r0, 8013018 <__d2b+0x24>
 801300a:	4602      	mov	r2, r0
 801300c:	4b25      	ldr	r3, [pc, #148]	; (80130a4 <__d2b+0xb0>)
 801300e:	4826      	ldr	r0, [pc, #152]	; (80130a8 <__d2b+0xb4>)
 8013010:	f240 310a 	movw	r1, #778	; 0x30a
 8013014:	f000 fb0e 	bl	8013634 <__assert_func>
 8013018:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801301c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013020:	bb35      	cbnz	r5, 8013070 <__d2b+0x7c>
 8013022:	2e00      	cmp	r6, #0
 8013024:	9301      	str	r3, [sp, #4]
 8013026:	d028      	beq.n	801307a <__d2b+0x86>
 8013028:	4668      	mov	r0, sp
 801302a:	9600      	str	r6, [sp, #0]
 801302c:	f7ff fd10 	bl	8012a50 <__lo0bits>
 8013030:	9900      	ldr	r1, [sp, #0]
 8013032:	b300      	cbz	r0, 8013076 <__d2b+0x82>
 8013034:	9a01      	ldr	r2, [sp, #4]
 8013036:	f1c0 0320 	rsb	r3, r0, #32
 801303a:	fa02 f303 	lsl.w	r3, r2, r3
 801303e:	430b      	orrs	r3, r1
 8013040:	40c2      	lsrs	r2, r0
 8013042:	6163      	str	r3, [r4, #20]
 8013044:	9201      	str	r2, [sp, #4]
 8013046:	9b01      	ldr	r3, [sp, #4]
 8013048:	61a3      	str	r3, [r4, #24]
 801304a:	2b00      	cmp	r3, #0
 801304c:	bf14      	ite	ne
 801304e:	2202      	movne	r2, #2
 8013050:	2201      	moveq	r2, #1
 8013052:	6122      	str	r2, [r4, #16]
 8013054:	b1d5      	cbz	r5, 801308c <__d2b+0x98>
 8013056:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801305a:	4405      	add	r5, r0
 801305c:	f8c9 5000 	str.w	r5, [r9]
 8013060:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013064:	f8c8 0000 	str.w	r0, [r8]
 8013068:	4620      	mov	r0, r4
 801306a:	b003      	add	sp, #12
 801306c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013074:	e7d5      	b.n	8013022 <__d2b+0x2e>
 8013076:	6161      	str	r1, [r4, #20]
 8013078:	e7e5      	b.n	8013046 <__d2b+0x52>
 801307a:	a801      	add	r0, sp, #4
 801307c:	f7ff fce8 	bl	8012a50 <__lo0bits>
 8013080:	9b01      	ldr	r3, [sp, #4]
 8013082:	6163      	str	r3, [r4, #20]
 8013084:	2201      	movs	r2, #1
 8013086:	6122      	str	r2, [r4, #16]
 8013088:	3020      	adds	r0, #32
 801308a:	e7e3      	b.n	8013054 <__d2b+0x60>
 801308c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013090:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013094:	f8c9 0000 	str.w	r0, [r9]
 8013098:	6918      	ldr	r0, [r3, #16]
 801309a:	f7ff fcb9 	bl	8012a10 <__hi0bits>
 801309e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80130a2:	e7df      	b.n	8013064 <__d2b+0x70>
 80130a4:	08015814 	.word	0x08015814
 80130a8:	080158a4 	.word	0x080158a4

080130ac <__ratio>:
 80130ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130b0:	4688      	mov	r8, r1
 80130b2:	4669      	mov	r1, sp
 80130b4:	4681      	mov	r9, r0
 80130b6:	f7ff ff4d 	bl	8012f54 <__b2d>
 80130ba:	a901      	add	r1, sp, #4
 80130bc:	4640      	mov	r0, r8
 80130be:	ec55 4b10 	vmov	r4, r5, d0
 80130c2:	f7ff ff47 	bl	8012f54 <__b2d>
 80130c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80130ca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80130ce:	eba3 0c02 	sub.w	ip, r3, r2
 80130d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80130d6:	1a9b      	subs	r3, r3, r2
 80130d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80130dc:	ec51 0b10 	vmov	r0, r1, d0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	bfd6      	itet	le
 80130e4:	460a      	movle	r2, r1
 80130e6:	462a      	movgt	r2, r5
 80130e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80130ec:	468b      	mov	fp, r1
 80130ee:	462f      	mov	r7, r5
 80130f0:	bfd4      	ite	le
 80130f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80130f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80130fa:	4620      	mov	r0, r4
 80130fc:	ee10 2a10 	vmov	r2, s0
 8013100:	465b      	mov	r3, fp
 8013102:	4639      	mov	r1, r7
 8013104:	f7ed fba2 	bl	800084c <__aeabi_ddiv>
 8013108:	ec41 0b10 	vmov	d0, r0, r1
 801310c:	b003      	add	sp, #12
 801310e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013112 <__copybits>:
 8013112:	3901      	subs	r1, #1
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	1149      	asrs	r1, r1, #5
 8013118:	6914      	ldr	r4, [r2, #16]
 801311a:	3101      	adds	r1, #1
 801311c:	f102 0314 	add.w	r3, r2, #20
 8013120:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013124:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013128:	1f05      	subs	r5, r0, #4
 801312a:	42a3      	cmp	r3, r4
 801312c:	d30c      	bcc.n	8013148 <__copybits+0x36>
 801312e:	1aa3      	subs	r3, r4, r2
 8013130:	3b11      	subs	r3, #17
 8013132:	f023 0303 	bic.w	r3, r3, #3
 8013136:	3211      	adds	r2, #17
 8013138:	42a2      	cmp	r2, r4
 801313a:	bf88      	it	hi
 801313c:	2300      	movhi	r3, #0
 801313e:	4418      	add	r0, r3
 8013140:	2300      	movs	r3, #0
 8013142:	4288      	cmp	r0, r1
 8013144:	d305      	bcc.n	8013152 <__copybits+0x40>
 8013146:	bd70      	pop	{r4, r5, r6, pc}
 8013148:	f853 6b04 	ldr.w	r6, [r3], #4
 801314c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013150:	e7eb      	b.n	801312a <__copybits+0x18>
 8013152:	f840 3b04 	str.w	r3, [r0], #4
 8013156:	e7f4      	b.n	8013142 <__copybits+0x30>

08013158 <__any_on>:
 8013158:	f100 0214 	add.w	r2, r0, #20
 801315c:	6900      	ldr	r0, [r0, #16]
 801315e:	114b      	asrs	r3, r1, #5
 8013160:	4298      	cmp	r0, r3
 8013162:	b510      	push	{r4, lr}
 8013164:	db11      	blt.n	801318a <__any_on+0x32>
 8013166:	dd0a      	ble.n	801317e <__any_on+0x26>
 8013168:	f011 011f 	ands.w	r1, r1, #31
 801316c:	d007      	beq.n	801317e <__any_on+0x26>
 801316e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013172:	fa24 f001 	lsr.w	r0, r4, r1
 8013176:	fa00 f101 	lsl.w	r1, r0, r1
 801317a:	428c      	cmp	r4, r1
 801317c:	d10b      	bne.n	8013196 <__any_on+0x3e>
 801317e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013182:	4293      	cmp	r3, r2
 8013184:	d803      	bhi.n	801318e <__any_on+0x36>
 8013186:	2000      	movs	r0, #0
 8013188:	bd10      	pop	{r4, pc}
 801318a:	4603      	mov	r3, r0
 801318c:	e7f7      	b.n	801317e <__any_on+0x26>
 801318e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013192:	2900      	cmp	r1, #0
 8013194:	d0f5      	beq.n	8013182 <__any_on+0x2a>
 8013196:	2001      	movs	r0, #1
 8013198:	e7f6      	b.n	8013188 <__any_on+0x30>

0801319a <_calloc_r>:
 801319a:	b513      	push	{r0, r1, r4, lr}
 801319c:	434a      	muls	r2, r1
 801319e:	4611      	mov	r1, r2
 80131a0:	9201      	str	r2, [sp, #4]
 80131a2:	f000 f859 	bl	8013258 <_malloc_r>
 80131a6:	4604      	mov	r4, r0
 80131a8:	b118      	cbz	r0, 80131b2 <_calloc_r+0x18>
 80131aa:	9a01      	ldr	r2, [sp, #4]
 80131ac:	2100      	movs	r1, #0
 80131ae:	f7fc fb3f 	bl	800f830 <memset>
 80131b2:	4620      	mov	r0, r4
 80131b4:	b002      	add	sp, #8
 80131b6:	bd10      	pop	{r4, pc}

080131b8 <_free_r>:
 80131b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131ba:	2900      	cmp	r1, #0
 80131bc:	d048      	beq.n	8013250 <_free_r+0x98>
 80131be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131c2:	9001      	str	r0, [sp, #4]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	f1a1 0404 	sub.w	r4, r1, #4
 80131ca:	bfb8      	it	lt
 80131cc:	18e4      	addlt	r4, r4, r3
 80131ce:	f000 fc35 	bl	8013a3c <__malloc_lock>
 80131d2:	4a20      	ldr	r2, [pc, #128]	; (8013254 <_free_r+0x9c>)
 80131d4:	9801      	ldr	r0, [sp, #4]
 80131d6:	6813      	ldr	r3, [r2, #0]
 80131d8:	4615      	mov	r5, r2
 80131da:	b933      	cbnz	r3, 80131ea <_free_r+0x32>
 80131dc:	6063      	str	r3, [r4, #4]
 80131de:	6014      	str	r4, [r2, #0]
 80131e0:	b003      	add	sp, #12
 80131e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80131e6:	f000 bc2f 	b.w	8013a48 <__malloc_unlock>
 80131ea:	42a3      	cmp	r3, r4
 80131ec:	d90b      	bls.n	8013206 <_free_r+0x4e>
 80131ee:	6821      	ldr	r1, [r4, #0]
 80131f0:	1862      	adds	r2, r4, r1
 80131f2:	4293      	cmp	r3, r2
 80131f4:	bf04      	itt	eq
 80131f6:	681a      	ldreq	r2, [r3, #0]
 80131f8:	685b      	ldreq	r3, [r3, #4]
 80131fa:	6063      	str	r3, [r4, #4]
 80131fc:	bf04      	itt	eq
 80131fe:	1852      	addeq	r2, r2, r1
 8013200:	6022      	streq	r2, [r4, #0]
 8013202:	602c      	str	r4, [r5, #0]
 8013204:	e7ec      	b.n	80131e0 <_free_r+0x28>
 8013206:	461a      	mov	r2, r3
 8013208:	685b      	ldr	r3, [r3, #4]
 801320a:	b10b      	cbz	r3, 8013210 <_free_r+0x58>
 801320c:	42a3      	cmp	r3, r4
 801320e:	d9fa      	bls.n	8013206 <_free_r+0x4e>
 8013210:	6811      	ldr	r1, [r2, #0]
 8013212:	1855      	adds	r5, r2, r1
 8013214:	42a5      	cmp	r5, r4
 8013216:	d10b      	bne.n	8013230 <_free_r+0x78>
 8013218:	6824      	ldr	r4, [r4, #0]
 801321a:	4421      	add	r1, r4
 801321c:	1854      	adds	r4, r2, r1
 801321e:	42a3      	cmp	r3, r4
 8013220:	6011      	str	r1, [r2, #0]
 8013222:	d1dd      	bne.n	80131e0 <_free_r+0x28>
 8013224:	681c      	ldr	r4, [r3, #0]
 8013226:	685b      	ldr	r3, [r3, #4]
 8013228:	6053      	str	r3, [r2, #4]
 801322a:	4421      	add	r1, r4
 801322c:	6011      	str	r1, [r2, #0]
 801322e:	e7d7      	b.n	80131e0 <_free_r+0x28>
 8013230:	d902      	bls.n	8013238 <_free_r+0x80>
 8013232:	230c      	movs	r3, #12
 8013234:	6003      	str	r3, [r0, #0]
 8013236:	e7d3      	b.n	80131e0 <_free_r+0x28>
 8013238:	6825      	ldr	r5, [r4, #0]
 801323a:	1961      	adds	r1, r4, r5
 801323c:	428b      	cmp	r3, r1
 801323e:	bf04      	itt	eq
 8013240:	6819      	ldreq	r1, [r3, #0]
 8013242:	685b      	ldreq	r3, [r3, #4]
 8013244:	6063      	str	r3, [r4, #4]
 8013246:	bf04      	itt	eq
 8013248:	1949      	addeq	r1, r1, r5
 801324a:	6021      	streq	r1, [r4, #0]
 801324c:	6054      	str	r4, [r2, #4]
 801324e:	e7c7      	b.n	80131e0 <_free_r+0x28>
 8013250:	b003      	add	sp, #12
 8013252:	bd30      	pop	{r4, r5, pc}
 8013254:	20000498 	.word	0x20000498

08013258 <_malloc_r>:
 8013258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801325a:	1ccd      	adds	r5, r1, #3
 801325c:	f025 0503 	bic.w	r5, r5, #3
 8013260:	3508      	adds	r5, #8
 8013262:	2d0c      	cmp	r5, #12
 8013264:	bf38      	it	cc
 8013266:	250c      	movcc	r5, #12
 8013268:	2d00      	cmp	r5, #0
 801326a:	4606      	mov	r6, r0
 801326c:	db01      	blt.n	8013272 <_malloc_r+0x1a>
 801326e:	42a9      	cmp	r1, r5
 8013270:	d903      	bls.n	801327a <_malloc_r+0x22>
 8013272:	230c      	movs	r3, #12
 8013274:	6033      	str	r3, [r6, #0]
 8013276:	2000      	movs	r0, #0
 8013278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801327a:	f000 fbdf 	bl	8013a3c <__malloc_lock>
 801327e:	4921      	ldr	r1, [pc, #132]	; (8013304 <_malloc_r+0xac>)
 8013280:	680a      	ldr	r2, [r1, #0]
 8013282:	4614      	mov	r4, r2
 8013284:	b99c      	cbnz	r4, 80132ae <_malloc_r+0x56>
 8013286:	4f20      	ldr	r7, [pc, #128]	; (8013308 <_malloc_r+0xb0>)
 8013288:	683b      	ldr	r3, [r7, #0]
 801328a:	b923      	cbnz	r3, 8013296 <_malloc_r+0x3e>
 801328c:	4621      	mov	r1, r4
 801328e:	4630      	mov	r0, r6
 8013290:	f000 f9b2 	bl	80135f8 <_sbrk_r>
 8013294:	6038      	str	r0, [r7, #0]
 8013296:	4629      	mov	r1, r5
 8013298:	4630      	mov	r0, r6
 801329a:	f000 f9ad 	bl	80135f8 <_sbrk_r>
 801329e:	1c43      	adds	r3, r0, #1
 80132a0:	d123      	bne.n	80132ea <_malloc_r+0x92>
 80132a2:	230c      	movs	r3, #12
 80132a4:	6033      	str	r3, [r6, #0]
 80132a6:	4630      	mov	r0, r6
 80132a8:	f000 fbce 	bl	8013a48 <__malloc_unlock>
 80132ac:	e7e3      	b.n	8013276 <_malloc_r+0x1e>
 80132ae:	6823      	ldr	r3, [r4, #0]
 80132b0:	1b5b      	subs	r3, r3, r5
 80132b2:	d417      	bmi.n	80132e4 <_malloc_r+0x8c>
 80132b4:	2b0b      	cmp	r3, #11
 80132b6:	d903      	bls.n	80132c0 <_malloc_r+0x68>
 80132b8:	6023      	str	r3, [r4, #0]
 80132ba:	441c      	add	r4, r3
 80132bc:	6025      	str	r5, [r4, #0]
 80132be:	e004      	b.n	80132ca <_malloc_r+0x72>
 80132c0:	6863      	ldr	r3, [r4, #4]
 80132c2:	42a2      	cmp	r2, r4
 80132c4:	bf0c      	ite	eq
 80132c6:	600b      	streq	r3, [r1, #0]
 80132c8:	6053      	strne	r3, [r2, #4]
 80132ca:	4630      	mov	r0, r6
 80132cc:	f000 fbbc 	bl	8013a48 <__malloc_unlock>
 80132d0:	f104 000b 	add.w	r0, r4, #11
 80132d4:	1d23      	adds	r3, r4, #4
 80132d6:	f020 0007 	bic.w	r0, r0, #7
 80132da:	1ac2      	subs	r2, r0, r3
 80132dc:	d0cc      	beq.n	8013278 <_malloc_r+0x20>
 80132de:	1a1b      	subs	r3, r3, r0
 80132e0:	50a3      	str	r3, [r4, r2]
 80132e2:	e7c9      	b.n	8013278 <_malloc_r+0x20>
 80132e4:	4622      	mov	r2, r4
 80132e6:	6864      	ldr	r4, [r4, #4]
 80132e8:	e7cc      	b.n	8013284 <_malloc_r+0x2c>
 80132ea:	1cc4      	adds	r4, r0, #3
 80132ec:	f024 0403 	bic.w	r4, r4, #3
 80132f0:	42a0      	cmp	r0, r4
 80132f2:	d0e3      	beq.n	80132bc <_malloc_r+0x64>
 80132f4:	1a21      	subs	r1, r4, r0
 80132f6:	4630      	mov	r0, r6
 80132f8:	f000 f97e 	bl	80135f8 <_sbrk_r>
 80132fc:	3001      	adds	r0, #1
 80132fe:	d1dd      	bne.n	80132bc <_malloc_r+0x64>
 8013300:	e7cf      	b.n	80132a2 <_malloc_r+0x4a>
 8013302:	bf00      	nop
 8013304:	20000498 	.word	0x20000498
 8013308:	2000049c 	.word	0x2000049c

0801330c <__ssputs_r>:
 801330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013310:	688e      	ldr	r6, [r1, #8]
 8013312:	429e      	cmp	r6, r3
 8013314:	4682      	mov	sl, r0
 8013316:	460c      	mov	r4, r1
 8013318:	4690      	mov	r8, r2
 801331a:	461f      	mov	r7, r3
 801331c:	d838      	bhi.n	8013390 <__ssputs_r+0x84>
 801331e:	898a      	ldrh	r2, [r1, #12]
 8013320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013324:	d032      	beq.n	801338c <__ssputs_r+0x80>
 8013326:	6825      	ldr	r5, [r4, #0]
 8013328:	6909      	ldr	r1, [r1, #16]
 801332a:	eba5 0901 	sub.w	r9, r5, r1
 801332e:	6965      	ldr	r5, [r4, #20]
 8013330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013338:	3301      	adds	r3, #1
 801333a:	444b      	add	r3, r9
 801333c:	106d      	asrs	r5, r5, #1
 801333e:	429d      	cmp	r5, r3
 8013340:	bf38      	it	cc
 8013342:	461d      	movcc	r5, r3
 8013344:	0553      	lsls	r3, r2, #21
 8013346:	d531      	bpl.n	80133ac <__ssputs_r+0xa0>
 8013348:	4629      	mov	r1, r5
 801334a:	f7ff ff85 	bl	8013258 <_malloc_r>
 801334e:	4606      	mov	r6, r0
 8013350:	b950      	cbnz	r0, 8013368 <__ssputs_r+0x5c>
 8013352:	230c      	movs	r3, #12
 8013354:	f8ca 3000 	str.w	r3, [sl]
 8013358:	89a3      	ldrh	r3, [r4, #12]
 801335a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801335e:	81a3      	strh	r3, [r4, #12]
 8013360:	f04f 30ff 	mov.w	r0, #4294967295
 8013364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013368:	6921      	ldr	r1, [r4, #16]
 801336a:	464a      	mov	r2, r9
 801336c:	f7ff fa4c 	bl	8012808 <memcpy>
 8013370:	89a3      	ldrh	r3, [r4, #12]
 8013372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801337a:	81a3      	strh	r3, [r4, #12]
 801337c:	6126      	str	r6, [r4, #16]
 801337e:	6165      	str	r5, [r4, #20]
 8013380:	444e      	add	r6, r9
 8013382:	eba5 0509 	sub.w	r5, r5, r9
 8013386:	6026      	str	r6, [r4, #0]
 8013388:	60a5      	str	r5, [r4, #8]
 801338a:	463e      	mov	r6, r7
 801338c:	42be      	cmp	r6, r7
 801338e:	d900      	bls.n	8013392 <__ssputs_r+0x86>
 8013390:	463e      	mov	r6, r7
 8013392:	4632      	mov	r2, r6
 8013394:	6820      	ldr	r0, [r4, #0]
 8013396:	4641      	mov	r1, r8
 8013398:	f000 fb36 	bl	8013a08 <memmove>
 801339c:	68a3      	ldr	r3, [r4, #8]
 801339e:	6822      	ldr	r2, [r4, #0]
 80133a0:	1b9b      	subs	r3, r3, r6
 80133a2:	4432      	add	r2, r6
 80133a4:	60a3      	str	r3, [r4, #8]
 80133a6:	6022      	str	r2, [r4, #0]
 80133a8:	2000      	movs	r0, #0
 80133aa:	e7db      	b.n	8013364 <__ssputs_r+0x58>
 80133ac:	462a      	mov	r2, r5
 80133ae:	f000 fb51 	bl	8013a54 <_realloc_r>
 80133b2:	4606      	mov	r6, r0
 80133b4:	2800      	cmp	r0, #0
 80133b6:	d1e1      	bne.n	801337c <__ssputs_r+0x70>
 80133b8:	6921      	ldr	r1, [r4, #16]
 80133ba:	4650      	mov	r0, sl
 80133bc:	f7ff fefc 	bl	80131b8 <_free_r>
 80133c0:	e7c7      	b.n	8013352 <__ssputs_r+0x46>
	...

080133c4 <_svfiprintf_r>:
 80133c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133c8:	4698      	mov	r8, r3
 80133ca:	898b      	ldrh	r3, [r1, #12]
 80133cc:	061b      	lsls	r3, r3, #24
 80133ce:	b09d      	sub	sp, #116	; 0x74
 80133d0:	4607      	mov	r7, r0
 80133d2:	460d      	mov	r5, r1
 80133d4:	4614      	mov	r4, r2
 80133d6:	d50e      	bpl.n	80133f6 <_svfiprintf_r+0x32>
 80133d8:	690b      	ldr	r3, [r1, #16]
 80133da:	b963      	cbnz	r3, 80133f6 <_svfiprintf_r+0x32>
 80133dc:	2140      	movs	r1, #64	; 0x40
 80133de:	f7ff ff3b 	bl	8013258 <_malloc_r>
 80133e2:	6028      	str	r0, [r5, #0]
 80133e4:	6128      	str	r0, [r5, #16]
 80133e6:	b920      	cbnz	r0, 80133f2 <_svfiprintf_r+0x2e>
 80133e8:	230c      	movs	r3, #12
 80133ea:	603b      	str	r3, [r7, #0]
 80133ec:	f04f 30ff 	mov.w	r0, #4294967295
 80133f0:	e0d1      	b.n	8013596 <_svfiprintf_r+0x1d2>
 80133f2:	2340      	movs	r3, #64	; 0x40
 80133f4:	616b      	str	r3, [r5, #20]
 80133f6:	2300      	movs	r3, #0
 80133f8:	9309      	str	r3, [sp, #36]	; 0x24
 80133fa:	2320      	movs	r3, #32
 80133fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013400:	f8cd 800c 	str.w	r8, [sp, #12]
 8013404:	2330      	movs	r3, #48	; 0x30
 8013406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80135b0 <_svfiprintf_r+0x1ec>
 801340a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801340e:	f04f 0901 	mov.w	r9, #1
 8013412:	4623      	mov	r3, r4
 8013414:	469a      	mov	sl, r3
 8013416:	f813 2b01 	ldrb.w	r2, [r3], #1
 801341a:	b10a      	cbz	r2, 8013420 <_svfiprintf_r+0x5c>
 801341c:	2a25      	cmp	r2, #37	; 0x25
 801341e:	d1f9      	bne.n	8013414 <_svfiprintf_r+0x50>
 8013420:	ebba 0b04 	subs.w	fp, sl, r4
 8013424:	d00b      	beq.n	801343e <_svfiprintf_r+0x7a>
 8013426:	465b      	mov	r3, fp
 8013428:	4622      	mov	r2, r4
 801342a:	4629      	mov	r1, r5
 801342c:	4638      	mov	r0, r7
 801342e:	f7ff ff6d 	bl	801330c <__ssputs_r>
 8013432:	3001      	adds	r0, #1
 8013434:	f000 80aa 	beq.w	801358c <_svfiprintf_r+0x1c8>
 8013438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801343a:	445a      	add	r2, fp
 801343c:	9209      	str	r2, [sp, #36]	; 0x24
 801343e:	f89a 3000 	ldrb.w	r3, [sl]
 8013442:	2b00      	cmp	r3, #0
 8013444:	f000 80a2 	beq.w	801358c <_svfiprintf_r+0x1c8>
 8013448:	2300      	movs	r3, #0
 801344a:	f04f 32ff 	mov.w	r2, #4294967295
 801344e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013452:	f10a 0a01 	add.w	sl, sl, #1
 8013456:	9304      	str	r3, [sp, #16]
 8013458:	9307      	str	r3, [sp, #28]
 801345a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801345e:	931a      	str	r3, [sp, #104]	; 0x68
 8013460:	4654      	mov	r4, sl
 8013462:	2205      	movs	r2, #5
 8013464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013468:	4851      	ldr	r0, [pc, #324]	; (80135b0 <_svfiprintf_r+0x1ec>)
 801346a:	f7ec feb9 	bl	80001e0 <memchr>
 801346e:	9a04      	ldr	r2, [sp, #16]
 8013470:	b9d8      	cbnz	r0, 80134aa <_svfiprintf_r+0xe6>
 8013472:	06d0      	lsls	r0, r2, #27
 8013474:	bf44      	itt	mi
 8013476:	2320      	movmi	r3, #32
 8013478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801347c:	0711      	lsls	r1, r2, #28
 801347e:	bf44      	itt	mi
 8013480:	232b      	movmi	r3, #43	; 0x2b
 8013482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013486:	f89a 3000 	ldrb.w	r3, [sl]
 801348a:	2b2a      	cmp	r3, #42	; 0x2a
 801348c:	d015      	beq.n	80134ba <_svfiprintf_r+0xf6>
 801348e:	9a07      	ldr	r2, [sp, #28]
 8013490:	4654      	mov	r4, sl
 8013492:	2000      	movs	r0, #0
 8013494:	f04f 0c0a 	mov.w	ip, #10
 8013498:	4621      	mov	r1, r4
 801349a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801349e:	3b30      	subs	r3, #48	; 0x30
 80134a0:	2b09      	cmp	r3, #9
 80134a2:	d94e      	bls.n	8013542 <_svfiprintf_r+0x17e>
 80134a4:	b1b0      	cbz	r0, 80134d4 <_svfiprintf_r+0x110>
 80134a6:	9207      	str	r2, [sp, #28]
 80134a8:	e014      	b.n	80134d4 <_svfiprintf_r+0x110>
 80134aa:	eba0 0308 	sub.w	r3, r0, r8
 80134ae:	fa09 f303 	lsl.w	r3, r9, r3
 80134b2:	4313      	orrs	r3, r2
 80134b4:	9304      	str	r3, [sp, #16]
 80134b6:	46a2      	mov	sl, r4
 80134b8:	e7d2      	b.n	8013460 <_svfiprintf_r+0x9c>
 80134ba:	9b03      	ldr	r3, [sp, #12]
 80134bc:	1d19      	adds	r1, r3, #4
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	9103      	str	r1, [sp, #12]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	bfbb      	ittet	lt
 80134c6:	425b      	neglt	r3, r3
 80134c8:	f042 0202 	orrlt.w	r2, r2, #2
 80134cc:	9307      	strge	r3, [sp, #28]
 80134ce:	9307      	strlt	r3, [sp, #28]
 80134d0:	bfb8      	it	lt
 80134d2:	9204      	strlt	r2, [sp, #16]
 80134d4:	7823      	ldrb	r3, [r4, #0]
 80134d6:	2b2e      	cmp	r3, #46	; 0x2e
 80134d8:	d10c      	bne.n	80134f4 <_svfiprintf_r+0x130>
 80134da:	7863      	ldrb	r3, [r4, #1]
 80134dc:	2b2a      	cmp	r3, #42	; 0x2a
 80134de:	d135      	bne.n	801354c <_svfiprintf_r+0x188>
 80134e0:	9b03      	ldr	r3, [sp, #12]
 80134e2:	1d1a      	adds	r2, r3, #4
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	9203      	str	r2, [sp, #12]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	bfb8      	it	lt
 80134ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80134f0:	3402      	adds	r4, #2
 80134f2:	9305      	str	r3, [sp, #20]
 80134f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80135c0 <_svfiprintf_r+0x1fc>
 80134f8:	7821      	ldrb	r1, [r4, #0]
 80134fa:	2203      	movs	r2, #3
 80134fc:	4650      	mov	r0, sl
 80134fe:	f7ec fe6f 	bl	80001e0 <memchr>
 8013502:	b140      	cbz	r0, 8013516 <_svfiprintf_r+0x152>
 8013504:	2340      	movs	r3, #64	; 0x40
 8013506:	eba0 000a 	sub.w	r0, r0, sl
 801350a:	fa03 f000 	lsl.w	r0, r3, r0
 801350e:	9b04      	ldr	r3, [sp, #16]
 8013510:	4303      	orrs	r3, r0
 8013512:	3401      	adds	r4, #1
 8013514:	9304      	str	r3, [sp, #16]
 8013516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801351a:	4826      	ldr	r0, [pc, #152]	; (80135b4 <_svfiprintf_r+0x1f0>)
 801351c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013520:	2206      	movs	r2, #6
 8013522:	f7ec fe5d 	bl	80001e0 <memchr>
 8013526:	2800      	cmp	r0, #0
 8013528:	d038      	beq.n	801359c <_svfiprintf_r+0x1d8>
 801352a:	4b23      	ldr	r3, [pc, #140]	; (80135b8 <_svfiprintf_r+0x1f4>)
 801352c:	bb1b      	cbnz	r3, 8013576 <_svfiprintf_r+0x1b2>
 801352e:	9b03      	ldr	r3, [sp, #12]
 8013530:	3307      	adds	r3, #7
 8013532:	f023 0307 	bic.w	r3, r3, #7
 8013536:	3308      	adds	r3, #8
 8013538:	9303      	str	r3, [sp, #12]
 801353a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801353c:	4433      	add	r3, r6
 801353e:	9309      	str	r3, [sp, #36]	; 0x24
 8013540:	e767      	b.n	8013412 <_svfiprintf_r+0x4e>
 8013542:	fb0c 3202 	mla	r2, ip, r2, r3
 8013546:	460c      	mov	r4, r1
 8013548:	2001      	movs	r0, #1
 801354a:	e7a5      	b.n	8013498 <_svfiprintf_r+0xd4>
 801354c:	2300      	movs	r3, #0
 801354e:	3401      	adds	r4, #1
 8013550:	9305      	str	r3, [sp, #20]
 8013552:	4619      	mov	r1, r3
 8013554:	f04f 0c0a 	mov.w	ip, #10
 8013558:	4620      	mov	r0, r4
 801355a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801355e:	3a30      	subs	r2, #48	; 0x30
 8013560:	2a09      	cmp	r2, #9
 8013562:	d903      	bls.n	801356c <_svfiprintf_r+0x1a8>
 8013564:	2b00      	cmp	r3, #0
 8013566:	d0c5      	beq.n	80134f4 <_svfiprintf_r+0x130>
 8013568:	9105      	str	r1, [sp, #20]
 801356a:	e7c3      	b.n	80134f4 <_svfiprintf_r+0x130>
 801356c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013570:	4604      	mov	r4, r0
 8013572:	2301      	movs	r3, #1
 8013574:	e7f0      	b.n	8013558 <_svfiprintf_r+0x194>
 8013576:	ab03      	add	r3, sp, #12
 8013578:	9300      	str	r3, [sp, #0]
 801357a:	462a      	mov	r2, r5
 801357c:	4b0f      	ldr	r3, [pc, #60]	; (80135bc <_svfiprintf_r+0x1f8>)
 801357e:	a904      	add	r1, sp, #16
 8013580:	4638      	mov	r0, r7
 8013582:	f7fc f9fd 	bl	800f980 <_printf_float>
 8013586:	1c42      	adds	r2, r0, #1
 8013588:	4606      	mov	r6, r0
 801358a:	d1d6      	bne.n	801353a <_svfiprintf_r+0x176>
 801358c:	89ab      	ldrh	r3, [r5, #12]
 801358e:	065b      	lsls	r3, r3, #25
 8013590:	f53f af2c 	bmi.w	80133ec <_svfiprintf_r+0x28>
 8013594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013596:	b01d      	add	sp, #116	; 0x74
 8013598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801359c:	ab03      	add	r3, sp, #12
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	462a      	mov	r2, r5
 80135a2:	4b06      	ldr	r3, [pc, #24]	; (80135bc <_svfiprintf_r+0x1f8>)
 80135a4:	a904      	add	r1, sp, #16
 80135a6:	4638      	mov	r0, r7
 80135a8:	f7fc fc8e 	bl	800fec8 <_printf_i>
 80135ac:	e7eb      	b.n	8013586 <_svfiprintf_r+0x1c2>
 80135ae:	bf00      	nop
 80135b0:	08015a04 	.word	0x08015a04
 80135b4:	08015a0e 	.word	0x08015a0e
 80135b8:	0800f981 	.word	0x0800f981
 80135bc:	0801330d 	.word	0x0801330d
 80135c0:	08015a0a 	.word	0x08015a0a

080135c4 <_read_r>:
 80135c4:	b538      	push	{r3, r4, r5, lr}
 80135c6:	4d07      	ldr	r5, [pc, #28]	; (80135e4 <_read_r+0x20>)
 80135c8:	4604      	mov	r4, r0
 80135ca:	4608      	mov	r0, r1
 80135cc:	4611      	mov	r1, r2
 80135ce:	2200      	movs	r2, #0
 80135d0:	602a      	str	r2, [r5, #0]
 80135d2:	461a      	mov	r2, r3
 80135d4:	f7f1 fbe5 	bl	8004da2 <_read>
 80135d8:	1c43      	adds	r3, r0, #1
 80135da:	d102      	bne.n	80135e2 <_read_r+0x1e>
 80135dc:	682b      	ldr	r3, [r5, #0]
 80135de:	b103      	cbz	r3, 80135e2 <_read_r+0x1e>
 80135e0:	6023      	str	r3, [r4, #0]
 80135e2:	bd38      	pop	{r3, r4, r5, pc}
 80135e4:	20004b44 	.word	0x20004b44

080135e8 <nan>:
 80135e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80135f0 <nan+0x8>
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop
 80135f0:	00000000 	.word	0x00000000
 80135f4:	7ff80000 	.word	0x7ff80000

080135f8 <_sbrk_r>:
 80135f8:	b538      	push	{r3, r4, r5, lr}
 80135fa:	4d06      	ldr	r5, [pc, #24]	; (8013614 <_sbrk_r+0x1c>)
 80135fc:	2300      	movs	r3, #0
 80135fe:	4604      	mov	r4, r0
 8013600:	4608      	mov	r0, r1
 8013602:	602b      	str	r3, [r5, #0]
 8013604:	f7f1 fc3a 	bl	8004e7c <_sbrk>
 8013608:	1c43      	adds	r3, r0, #1
 801360a:	d102      	bne.n	8013612 <_sbrk_r+0x1a>
 801360c:	682b      	ldr	r3, [r5, #0]
 801360e:	b103      	cbz	r3, 8013612 <_sbrk_r+0x1a>
 8013610:	6023      	str	r3, [r4, #0]
 8013612:	bd38      	pop	{r3, r4, r5, pc}
 8013614:	20004b44 	.word	0x20004b44

08013618 <__ascii_wctomb>:
 8013618:	b149      	cbz	r1, 801362e <__ascii_wctomb+0x16>
 801361a:	2aff      	cmp	r2, #255	; 0xff
 801361c:	bf85      	ittet	hi
 801361e:	238a      	movhi	r3, #138	; 0x8a
 8013620:	6003      	strhi	r3, [r0, #0]
 8013622:	700a      	strbls	r2, [r1, #0]
 8013624:	f04f 30ff 	movhi.w	r0, #4294967295
 8013628:	bf98      	it	ls
 801362a:	2001      	movls	r0, #1
 801362c:	4770      	bx	lr
 801362e:	4608      	mov	r0, r1
 8013630:	4770      	bx	lr
	...

08013634 <__assert_func>:
 8013634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013636:	4614      	mov	r4, r2
 8013638:	461a      	mov	r2, r3
 801363a:	4b09      	ldr	r3, [pc, #36]	; (8013660 <__assert_func+0x2c>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	4605      	mov	r5, r0
 8013640:	68d8      	ldr	r0, [r3, #12]
 8013642:	b14c      	cbz	r4, 8013658 <__assert_func+0x24>
 8013644:	4b07      	ldr	r3, [pc, #28]	; (8013664 <__assert_func+0x30>)
 8013646:	9100      	str	r1, [sp, #0]
 8013648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801364c:	4906      	ldr	r1, [pc, #24]	; (8013668 <__assert_func+0x34>)
 801364e:	462b      	mov	r3, r5
 8013650:	f000 f9a6 	bl	80139a0 <fiprintf>
 8013654:	f000 fc3e 	bl	8013ed4 <abort>
 8013658:	4b04      	ldr	r3, [pc, #16]	; (801366c <__assert_func+0x38>)
 801365a:	461c      	mov	r4, r3
 801365c:	e7f3      	b.n	8013646 <__assert_func+0x12>
 801365e:	bf00      	nop
 8013660:	20000058 	.word	0x20000058
 8013664:	08015a15 	.word	0x08015a15
 8013668:	08015a22 	.word	0x08015a22
 801366c:	08015a50 	.word	0x08015a50

08013670 <__sflush_r>:
 8013670:	898a      	ldrh	r2, [r1, #12]
 8013672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013676:	4605      	mov	r5, r0
 8013678:	0710      	lsls	r0, r2, #28
 801367a:	460c      	mov	r4, r1
 801367c:	d458      	bmi.n	8013730 <__sflush_r+0xc0>
 801367e:	684b      	ldr	r3, [r1, #4]
 8013680:	2b00      	cmp	r3, #0
 8013682:	dc05      	bgt.n	8013690 <__sflush_r+0x20>
 8013684:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013686:	2b00      	cmp	r3, #0
 8013688:	dc02      	bgt.n	8013690 <__sflush_r+0x20>
 801368a:	2000      	movs	r0, #0
 801368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013690:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013692:	2e00      	cmp	r6, #0
 8013694:	d0f9      	beq.n	801368a <__sflush_r+0x1a>
 8013696:	2300      	movs	r3, #0
 8013698:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801369c:	682f      	ldr	r7, [r5, #0]
 801369e:	602b      	str	r3, [r5, #0]
 80136a0:	d032      	beq.n	8013708 <__sflush_r+0x98>
 80136a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80136a4:	89a3      	ldrh	r3, [r4, #12]
 80136a6:	075a      	lsls	r2, r3, #29
 80136a8:	d505      	bpl.n	80136b6 <__sflush_r+0x46>
 80136aa:	6863      	ldr	r3, [r4, #4]
 80136ac:	1ac0      	subs	r0, r0, r3
 80136ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80136b0:	b10b      	cbz	r3, 80136b6 <__sflush_r+0x46>
 80136b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80136b4:	1ac0      	subs	r0, r0, r3
 80136b6:	2300      	movs	r3, #0
 80136b8:	4602      	mov	r2, r0
 80136ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80136bc:	6a21      	ldr	r1, [r4, #32]
 80136be:	4628      	mov	r0, r5
 80136c0:	47b0      	blx	r6
 80136c2:	1c43      	adds	r3, r0, #1
 80136c4:	89a3      	ldrh	r3, [r4, #12]
 80136c6:	d106      	bne.n	80136d6 <__sflush_r+0x66>
 80136c8:	6829      	ldr	r1, [r5, #0]
 80136ca:	291d      	cmp	r1, #29
 80136cc:	d82c      	bhi.n	8013728 <__sflush_r+0xb8>
 80136ce:	4a2a      	ldr	r2, [pc, #168]	; (8013778 <__sflush_r+0x108>)
 80136d0:	40ca      	lsrs	r2, r1
 80136d2:	07d6      	lsls	r6, r2, #31
 80136d4:	d528      	bpl.n	8013728 <__sflush_r+0xb8>
 80136d6:	2200      	movs	r2, #0
 80136d8:	6062      	str	r2, [r4, #4]
 80136da:	04d9      	lsls	r1, r3, #19
 80136dc:	6922      	ldr	r2, [r4, #16]
 80136de:	6022      	str	r2, [r4, #0]
 80136e0:	d504      	bpl.n	80136ec <__sflush_r+0x7c>
 80136e2:	1c42      	adds	r2, r0, #1
 80136e4:	d101      	bne.n	80136ea <__sflush_r+0x7a>
 80136e6:	682b      	ldr	r3, [r5, #0]
 80136e8:	b903      	cbnz	r3, 80136ec <__sflush_r+0x7c>
 80136ea:	6560      	str	r0, [r4, #84]	; 0x54
 80136ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136ee:	602f      	str	r7, [r5, #0]
 80136f0:	2900      	cmp	r1, #0
 80136f2:	d0ca      	beq.n	801368a <__sflush_r+0x1a>
 80136f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136f8:	4299      	cmp	r1, r3
 80136fa:	d002      	beq.n	8013702 <__sflush_r+0x92>
 80136fc:	4628      	mov	r0, r5
 80136fe:	f7ff fd5b 	bl	80131b8 <_free_r>
 8013702:	2000      	movs	r0, #0
 8013704:	6360      	str	r0, [r4, #52]	; 0x34
 8013706:	e7c1      	b.n	801368c <__sflush_r+0x1c>
 8013708:	6a21      	ldr	r1, [r4, #32]
 801370a:	2301      	movs	r3, #1
 801370c:	4628      	mov	r0, r5
 801370e:	47b0      	blx	r6
 8013710:	1c41      	adds	r1, r0, #1
 8013712:	d1c7      	bne.n	80136a4 <__sflush_r+0x34>
 8013714:	682b      	ldr	r3, [r5, #0]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d0c4      	beq.n	80136a4 <__sflush_r+0x34>
 801371a:	2b1d      	cmp	r3, #29
 801371c:	d001      	beq.n	8013722 <__sflush_r+0xb2>
 801371e:	2b16      	cmp	r3, #22
 8013720:	d101      	bne.n	8013726 <__sflush_r+0xb6>
 8013722:	602f      	str	r7, [r5, #0]
 8013724:	e7b1      	b.n	801368a <__sflush_r+0x1a>
 8013726:	89a3      	ldrh	r3, [r4, #12]
 8013728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801372c:	81a3      	strh	r3, [r4, #12]
 801372e:	e7ad      	b.n	801368c <__sflush_r+0x1c>
 8013730:	690f      	ldr	r7, [r1, #16]
 8013732:	2f00      	cmp	r7, #0
 8013734:	d0a9      	beq.n	801368a <__sflush_r+0x1a>
 8013736:	0793      	lsls	r3, r2, #30
 8013738:	680e      	ldr	r6, [r1, #0]
 801373a:	bf08      	it	eq
 801373c:	694b      	ldreq	r3, [r1, #20]
 801373e:	600f      	str	r7, [r1, #0]
 8013740:	bf18      	it	ne
 8013742:	2300      	movne	r3, #0
 8013744:	eba6 0807 	sub.w	r8, r6, r7
 8013748:	608b      	str	r3, [r1, #8]
 801374a:	f1b8 0f00 	cmp.w	r8, #0
 801374e:	dd9c      	ble.n	801368a <__sflush_r+0x1a>
 8013750:	6a21      	ldr	r1, [r4, #32]
 8013752:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013754:	4643      	mov	r3, r8
 8013756:	463a      	mov	r2, r7
 8013758:	4628      	mov	r0, r5
 801375a:	47b0      	blx	r6
 801375c:	2800      	cmp	r0, #0
 801375e:	dc06      	bgt.n	801376e <__sflush_r+0xfe>
 8013760:	89a3      	ldrh	r3, [r4, #12]
 8013762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013766:	81a3      	strh	r3, [r4, #12]
 8013768:	f04f 30ff 	mov.w	r0, #4294967295
 801376c:	e78e      	b.n	801368c <__sflush_r+0x1c>
 801376e:	4407      	add	r7, r0
 8013770:	eba8 0800 	sub.w	r8, r8, r0
 8013774:	e7e9      	b.n	801374a <__sflush_r+0xda>
 8013776:	bf00      	nop
 8013778:	20400001 	.word	0x20400001

0801377c <_fflush_r>:
 801377c:	b538      	push	{r3, r4, r5, lr}
 801377e:	690b      	ldr	r3, [r1, #16]
 8013780:	4605      	mov	r5, r0
 8013782:	460c      	mov	r4, r1
 8013784:	b913      	cbnz	r3, 801378c <_fflush_r+0x10>
 8013786:	2500      	movs	r5, #0
 8013788:	4628      	mov	r0, r5
 801378a:	bd38      	pop	{r3, r4, r5, pc}
 801378c:	b118      	cbz	r0, 8013796 <_fflush_r+0x1a>
 801378e:	6983      	ldr	r3, [r0, #24]
 8013790:	b90b      	cbnz	r3, 8013796 <_fflush_r+0x1a>
 8013792:	f000 f887 	bl	80138a4 <__sinit>
 8013796:	4b14      	ldr	r3, [pc, #80]	; (80137e8 <_fflush_r+0x6c>)
 8013798:	429c      	cmp	r4, r3
 801379a:	d11b      	bne.n	80137d4 <_fflush_r+0x58>
 801379c:	686c      	ldr	r4, [r5, #4]
 801379e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d0ef      	beq.n	8013786 <_fflush_r+0xa>
 80137a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80137a8:	07d0      	lsls	r0, r2, #31
 80137aa:	d404      	bmi.n	80137b6 <_fflush_r+0x3a>
 80137ac:	0599      	lsls	r1, r3, #22
 80137ae:	d402      	bmi.n	80137b6 <_fflush_r+0x3a>
 80137b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137b2:	f000 f927 	bl	8013a04 <__retarget_lock_acquire_recursive>
 80137b6:	4628      	mov	r0, r5
 80137b8:	4621      	mov	r1, r4
 80137ba:	f7ff ff59 	bl	8013670 <__sflush_r>
 80137be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80137c0:	07da      	lsls	r2, r3, #31
 80137c2:	4605      	mov	r5, r0
 80137c4:	d4e0      	bmi.n	8013788 <_fflush_r+0xc>
 80137c6:	89a3      	ldrh	r3, [r4, #12]
 80137c8:	059b      	lsls	r3, r3, #22
 80137ca:	d4dd      	bmi.n	8013788 <_fflush_r+0xc>
 80137cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137ce:	f000 f91a 	bl	8013a06 <__retarget_lock_release_recursive>
 80137d2:	e7d9      	b.n	8013788 <_fflush_r+0xc>
 80137d4:	4b05      	ldr	r3, [pc, #20]	; (80137ec <_fflush_r+0x70>)
 80137d6:	429c      	cmp	r4, r3
 80137d8:	d101      	bne.n	80137de <_fflush_r+0x62>
 80137da:	68ac      	ldr	r4, [r5, #8]
 80137dc:	e7df      	b.n	801379e <_fflush_r+0x22>
 80137de:	4b04      	ldr	r3, [pc, #16]	; (80137f0 <_fflush_r+0x74>)
 80137e0:	429c      	cmp	r4, r3
 80137e2:	bf08      	it	eq
 80137e4:	68ec      	ldreq	r4, [r5, #12]
 80137e6:	e7da      	b.n	801379e <_fflush_r+0x22>
 80137e8:	08015a74 	.word	0x08015a74
 80137ec:	08015a94 	.word	0x08015a94
 80137f0:	08015a54 	.word	0x08015a54

080137f4 <std>:
 80137f4:	2300      	movs	r3, #0
 80137f6:	b510      	push	{r4, lr}
 80137f8:	4604      	mov	r4, r0
 80137fa:	e9c0 3300 	strd	r3, r3, [r0]
 80137fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013802:	6083      	str	r3, [r0, #8]
 8013804:	8181      	strh	r1, [r0, #12]
 8013806:	6643      	str	r3, [r0, #100]	; 0x64
 8013808:	81c2      	strh	r2, [r0, #14]
 801380a:	6183      	str	r3, [r0, #24]
 801380c:	4619      	mov	r1, r3
 801380e:	2208      	movs	r2, #8
 8013810:	305c      	adds	r0, #92	; 0x5c
 8013812:	f7fc f80d 	bl	800f830 <memset>
 8013816:	4b05      	ldr	r3, [pc, #20]	; (801382c <std+0x38>)
 8013818:	6263      	str	r3, [r4, #36]	; 0x24
 801381a:	4b05      	ldr	r3, [pc, #20]	; (8013830 <std+0x3c>)
 801381c:	62a3      	str	r3, [r4, #40]	; 0x28
 801381e:	4b05      	ldr	r3, [pc, #20]	; (8013834 <std+0x40>)
 8013820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013822:	4b05      	ldr	r3, [pc, #20]	; (8013838 <std+0x44>)
 8013824:	6224      	str	r4, [r4, #32]
 8013826:	6323      	str	r3, [r4, #48]	; 0x30
 8013828:	bd10      	pop	{r4, pc}
 801382a:	bf00      	nop
 801382c:	08010581 	.word	0x08010581
 8013830:	080105a3 	.word	0x080105a3
 8013834:	080105db 	.word	0x080105db
 8013838:	080105ff 	.word	0x080105ff

0801383c <_cleanup_r>:
 801383c:	4901      	ldr	r1, [pc, #4]	; (8013844 <_cleanup_r+0x8>)
 801383e:	f000 b8c1 	b.w	80139c4 <_fwalk_reent>
 8013842:	bf00      	nop
 8013844:	0801377d 	.word	0x0801377d

08013848 <__sfmoreglue>:
 8013848:	b570      	push	{r4, r5, r6, lr}
 801384a:	1e4a      	subs	r2, r1, #1
 801384c:	2568      	movs	r5, #104	; 0x68
 801384e:	4355      	muls	r5, r2
 8013850:	460e      	mov	r6, r1
 8013852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013856:	f7ff fcff 	bl	8013258 <_malloc_r>
 801385a:	4604      	mov	r4, r0
 801385c:	b140      	cbz	r0, 8013870 <__sfmoreglue+0x28>
 801385e:	2100      	movs	r1, #0
 8013860:	e9c0 1600 	strd	r1, r6, [r0]
 8013864:	300c      	adds	r0, #12
 8013866:	60a0      	str	r0, [r4, #8]
 8013868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801386c:	f7fb ffe0 	bl	800f830 <memset>
 8013870:	4620      	mov	r0, r4
 8013872:	bd70      	pop	{r4, r5, r6, pc}

08013874 <__sfp_lock_acquire>:
 8013874:	4801      	ldr	r0, [pc, #4]	; (801387c <__sfp_lock_acquire+0x8>)
 8013876:	f000 b8c5 	b.w	8013a04 <__retarget_lock_acquire_recursive>
 801387a:	bf00      	nop
 801387c:	20004b50 	.word	0x20004b50

08013880 <__sfp_lock_release>:
 8013880:	4801      	ldr	r0, [pc, #4]	; (8013888 <__sfp_lock_release+0x8>)
 8013882:	f000 b8c0 	b.w	8013a06 <__retarget_lock_release_recursive>
 8013886:	bf00      	nop
 8013888:	20004b50 	.word	0x20004b50

0801388c <__sinit_lock_acquire>:
 801388c:	4801      	ldr	r0, [pc, #4]	; (8013894 <__sinit_lock_acquire+0x8>)
 801388e:	f000 b8b9 	b.w	8013a04 <__retarget_lock_acquire_recursive>
 8013892:	bf00      	nop
 8013894:	20004b4b 	.word	0x20004b4b

08013898 <__sinit_lock_release>:
 8013898:	4801      	ldr	r0, [pc, #4]	; (80138a0 <__sinit_lock_release+0x8>)
 801389a:	f000 b8b4 	b.w	8013a06 <__retarget_lock_release_recursive>
 801389e:	bf00      	nop
 80138a0:	20004b4b 	.word	0x20004b4b

080138a4 <__sinit>:
 80138a4:	b510      	push	{r4, lr}
 80138a6:	4604      	mov	r4, r0
 80138a8:	f7ff fff0 	bl	801388c <__sinit_lock_acquire>
 80138ac:	69a3      	ldr	r3, [r4, #24]
 80138ae:	b11b      	cbz	r3, 80138b8 <__sinit+0x14>
 80138b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138b4:	f7ff bff0 	b.w	8013898 <__sinit_lock_release>
 80138b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80138bc:	6523      	str	r3, [r4, #80]	; 0x50
 80138be:	4b13      	ldr	r3, [pc, #76]	; (801390c <__sinit+0x68>)
 80138c0:	4a13      	ldr	r2, [pc, #76]	; (8013910 <__sinit+0x6c>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80138c6:	42a3      	cmp	r3, r4
 80138c8:	bf04      	itt	eq
 80138ca:	2301      	moveq	r3, #1
 80138cc:	61a3      	streq	r3, [r4, #24]
 80138ce:	4620      	mov	r0, r4
 80138d0:	f000 f820 	bl	8013914 <__sfp>
 80138d4:	6060      	str	r0, [r4, #4]
 80138d6:	4620      	mov	r0, r4
 80138d8:	f000 f81c 	bl	8013914 <__sfp>
 80138dc:	60a0      	str	r0, [r4, #8]
 80138de:	4620      	mov	r0, r4
 80138e0:	f000 f818 	bl	8013914 <__sfp>
 80138e4:	2200      	movs	r2, #0
 80138e6:	60e0      	str	r0, [r4, #12]
 80138e8:	2104      	movs	r1, #4
 80138ea:	6860      	ldr	r0, [r4, #4]
 80138ec:	f7ff ff82 	bl	80137f4 <std>
 80138f0:	68a0      	ldr	r0, [r4, #8]
 80138f2:	2201      	movs	r2, #1
 80138f4:	2109      	movs	r1, #9
 80138f6:	f7ff ff7d 	bl	80137f4 <std>
 80138fa:	68e0      	ldr	r0, [r4, #12]
 80138fc:	2202      	movs	r2, #2
 80138fe:	2112      	movs	r1, #18
 8013900:	f7ff ff78 	bl	80137f4 <std>
 8013904:	2301      	movs	r3, #1
 8013906:	61a3      	str	r3, [r4, #24]
 8013908:	e7d2      	b.n	80138b0 <__sinit+0xc>
 801390a:	bf00      	nop
 801390c:	08015600 	.word	0x08015600
 8013910:	0801383d 	.word	0x0801383d

08013914 <__sfp>:
 8013914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013916:	4607      	mov	r7, r0
 8013918:	f7ff ffac 	bl	8013874 <__sfp_lock_acquire>
 801391c:	4b1e      	ldr	r3, [pc, #120]	; (8013998 <__sfp+0x84>)
 801391e:	681e      	ldr	r6, [r3, #0]
 8013920:	69b3      	ldr	r3, [r6, #24]
 8013922:	b913      	cbnz	r3, 801392a <__sfp+0x16>
 8013924:	4630      	mov	r0, r6
 8013926:	f7ff ffbd 	bl	80138a4 <__sinit>
 801392a:	3648      	adds	r6, #72	; 0x48
 801392c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013930:	3b01      	subs	r3, #1
 8013932:	d503      	bpl.n	801393c <__sfp+0x28>
 8013934:	6833      	ldr	r3, [r6, #0]
 8013936:	b30b      	cbz	r3, 801397c <__sfp+0x68>
 8013938:	6836      	ldr	r6, [r6, #0]
 801393a:	e7f7      	b.n	801392c <__sfp+0x18>
 801393c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013940:	b9d5      	cbnz	r5, 8013978 <__sfp+0x64>
 8013942:	4b16      	ldr	r3, [pc, #88]	; (801399c <__sfp+0x88>)
 8013944:	60e3      	str	r3, [r4, #12]
 8013946:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801394a:	6665      	str	r5, [r4, #100]	; 0x64
 801394c:	f000 f859 	bl	8013a02 <__retarget_lock_init_recursive>
 8013950:	f7ff ff96 	bl	8013880 <__sfp_lock_release>
 8013954:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013958:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801395c:	6025      	str	r5, [r4, #0]
 801395e:	61a5      	str	r5, [r4, #24]
 8013960:	2208      	movs	r2, #8
 8013962:	4629      	mov	r1, r5
 8013964:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013968:	f7fb ff62 	bl	800f830 <memset>
 801396c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013970:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013974:	4620      	mov	r0, r4
 8013976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013978:	3468      	adds	r4, #104	; 0x68
 801397a:	e7d9      	b.n	8013930 <__sfp+0x1c>
 801397c:	2104      	movs	r1, #4
 801397e:	4638      	mov	r0, r7
 8013980:	f7ff ff62 	bl	8013848 <__sfmoreglue>
 8013984:	4604      	mov	r4, r0
 8013986:	6030      	str	r0, [r6, #0]
 8013988:	2800      	cmp	r0, #0
 801398a:	d1d5      	bne.n	8013938 <__sfp+0x24>
 801398c:	f7ff ff78 	bl	8013880 <__sfp_lock_release>
 8013990:	230c      	movs	r3, #12
 8013992:	603b      	str	r3, [r7, #0]
 8013994:	e7ee      	b.n	8013974 <__sfp+0x60>
 8013996:	bf00      	nop
 8013998:	08015600 	.word	0x08015600
 801399c:	ffff0001 	.word	0xffff0001

080139a0 <fiprintf>:
 80139a0:	b40e      	push	{r1, r2, r3}
 80139a2:	b503      	push	{r0, r1, lr}
 80139a4:	4601      	mov	r1, r0
 80139a6:	ab03      	add	r3, sp, #12
 80139a8:	4805      	ldr	r0, [pc, #20]	; (80139c0 <fiprintf+0x20>)
 80139aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80139ae:	6800      	ldr	r0, [r0, #0]
 80139b0:	9301      	str	r3, [sp, #4]
 80139b2:	f000 f89f 	bl	8013af4 <_vfiprintf_r>
 80139b6:	b002      	add	sp, #8
 80139b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80139bc:	b003      	add	sp, #12
 80139be:	4770      	bx	lr
 80139c0:	20000058 	.word	0x20000058

080139c4 <_fwalk_reent>:
 80139c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139c8:	4606      	mov	r6, r0
 80139ca:	4688      	mov	r8, r1
 80139cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80139d0:	2700      	movs	r7, #0
 80139d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80139d6:	f1b9 0901 	subs.w	r9, r9, #1
 80139da:	d505      	bpl.n	80139e8 <_fwalk_reent+0x24>
 80139dc:	6824      	ldr	r4, [r4, #0]
 80139de:	2c00      	cmp	r4, #0
 80139e0:	d1f7      	bne.n	80139d2 <_fwalk_reent+0xe>
 80139e2:	4638      	mov	r0, r7
 80139e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139e8:	89ab      	ldrh	r3, [r5, #12]
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d907      	bls.n	80139fe <_fwalk_reent+0x3a>
 80139ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80139f2:	3301      	adds	r3, #1
 80139f4:	d003      	beq.n	80139fe <_fwalk_reent+0x3a>
 80139f6:	4629      	mov	r1, r5
 80139f8:	4630      	mov	r0, r6
 80139fa:	47c0      	blx	r8
 80139fc:	4307      	orrs	r7, r0
 80139fe:	3568      	adds	r5, #104	; 0x68
 8013a00:	e7e9      	b.n	80139d6 <_fwalk_reent+0x12>

08013a02 <__retarget_lock_init_recursive>:
 8013a02:	4770      	bx	lr

08013a04 <__retarget_lock_acquire_recursive>:
 8013a04:	4770      	bx	lr

08013a06 <__retarget_lock_release_recursive>:
 8013a06:	4770      	bx	lr

08013a08 <memmove>:
 8013a08:	4288      	cmp	r0, r1
 8013a0a:	b510      	push	{r4, lr}
 8013a0c:	eb01 0402 	add.w	r4, r1, r2
 8013a10:	d902      	bls.n	8013a18 <memmove+0x10>
 8013a12:	4284      	cmp	r4, r0
 8013a14:	4623      	mov	r3, r4
 8013a16:	d807      	bhi.n	8013a28 <memmove+0x20>
 8013a18:	1e43      	subs	r3, r0, #1
 8013a1a:	42a1      	cmp	r1, r4
 8013a1c:	d008      	beq.n	8013a30 <memmove+0x28>
 8013a1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013a26:	e7f8      	b.n	8013a1a <memmove+0x12>
 8013a28:	4402      	add	r2, r0
 8013a2a:	4601      	mov	r1, r0
 8013a2c:	428a      	cmp	r2, r1
 8013a2e:	d100      	bne.n	8013a32 <memmove+0x2a>
 8013a30:	bd10      	pop	{r4, pc}
 8013a32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013a36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013a3a:	e7f7      	b.n	8013a2c <memmove+0x24>

08013a3c <__malloc_lock>:
 8013a3c:	4801      	ldr	r0, [pc, #4]	; (8013a44 <__malloc_lock+0x8>)
 8013a3e:	f7ff bfe1 	b.w	8013a04 <__retarget_lock_acquire_recursive>
 8013a42:	bf00      	nop
 8013a44:	20004b4c 	.word	0x20004b4c

08013a48 <__malloc_unlock>:
 8013a48:	4801      	ldr	r0, [pc, #4]	; (8013a50 <__malloc_unlock+0x8>)
 8013a4a:	f7ff bfdc 	b.w	8013a06 <__retarget_lock_release_recursive>
 8013a4e:	bf00      	nop
 8013a50:	20004b4c 	.word	0x20004b4c

08013a54 <_realloc_r>:
 8013a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a56:	4607      	mov	r7, r0
 8013a58:	4614      	mov	r4, r2
 8013a5a:	460e      	mov	r6, r1
 8013a5c:	b921      	cbnz	r1, 8013a68 <_realloc_r+0x14>
 8013a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013a62:	4611      	mov	r1, r2
 8013a64:	f7ff bbf8 	b.w	8013258 <_malloc_r>
 8013a68:	b922      	cbnz	r2, 8013a74 <_realloc_r+0x20>
 8013a6a:	f7ff fba5 	bl	80131b8 <_free_r>
 8013a6e:	4625      	mov	r5, r4
 8013a70:	4628      	mov	r0, r5
 8013a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a74:	f000 fa9a 	bl	8013fac <_malloc_usable_size_r>
 8013a78:	42a0      	cmp	r0, r4
 8013a7a:	d20f      	bcs.n	8013a9c <_realloc_r+0x48>
 8013a7c:	4621      	mov	r1, r4
 8013a7e:	4638      	mov	r0, r7
 8013a80:	f7ff fbea 	bl	8013258 <_malloc_r>
 8013a84:	4605      	mov	r5, r0
 8013a86:	2800      	cmp	r0, #0
 8013a88:	d0f2      	beq.n	8013a70 <_realloc_r+0x1c>
 8013a8a:	4631      	mov	r1, r6
 8013a8c:	4622      	mov	r2, r4
 8013a8e:	f7fe febb 	bl	8012808 <memcpy>
 8013a92:	4631      	mov	r1, r6
 8013a94:	4638      	mov	r0, r7
 8013a96:	f7ff fb8f 	bl	80131b8 <_free_r>
 8013a9a:	e7e9      	b.n	8013a70 <_realloc_r+0x1c>
 8013a9c:	4635      	mov	r5, r6
 8013a9e:	e7e7      	b.n	8013a70 <_realloc_r+0x1c>

08013aa0 <__sfputc_r>:
 8013aa0:	6893      	ldr	r3, [r2, #8]
 8013aa2:	3b01      	subs	r3, #1
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	b410      	push	{r4}
 8013aa8:	6093      	str	r3, [r2, #8]
 8013aaa:	da08      	bge.n	8013abe <__sfputc_r+0x1e>
 8013aac:	6994      	ldr	r4, [r2, #24]
 8013aae:	42a3      	cmp	r3, r4
 8013ab0:	db01      	blt.n	8013ab6 <__sfputc_r+0x16>
 8013ab2:	290a      	cmp	r1, #10
 8013ab4:	d103      	bne.n	8013abe <__sfputc_r+0x1e>
 8013ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013aba:	f000 b94b 	b.w	8013d54 <__swbuf_r>
 8013abe:	6813      	ldr	r3, [r2, #0]
 8013ac0:	1c58      	adds	r0, r3, #1
 8013ac2:	6010      	str	r0, [r2, #0]
 8013ac4:	7019      	strb	r1, [r3, #0]
 8013ac6:	4608      	mov	r0, r1
 8013ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013acc:	4770      	bx	lr

08013ace <__sfputs_r>:
 8013ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ad0:	4606      	mov	r6, r0
 8013ad2:	460f      	mov	r7, r1
 8013ad4:	4614      	mov	r4, r2
 8013ad6:	18d5      	adds	r5, r2, r3
 8013ad8:	42ac      	cmp	r4, r5
 8013ada:	d101      	bne.n	8013ae0 <__sfputs_r+0x12>
 8013adc:	2000      	movs	r0, #0
 8013ade:	e007      	b.n	8013af0 <__sfputs_r+0x22>
 8013ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ae4:	463a      	mov	r2, r7
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f7ff ffda 	bl	8013aa0 <__sfputc_r>
 8013aec:	1c43      	adds	r3, r0, #1
 8013aee:	d1f3      	bne.n	8013ad8 <__sfputs_r+0xa>
 8013af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013af4 <_vfiprintf_r>:
 8013af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af8:	460d      	mov	r5, r1
 8013afa:	b09d      	sub	sp, #116	; 0x74
 8013afc:	4614      	mov	r4, r2
 8013afe:	4698      	mov	r8, r3
 8013b00:	4606      	mov	r6, r0
 8013b02:	b118      	cbz	r0, 8013b0c <_vfiprintf_r+0x18>
 8013b04:	6983      	ldr	r3, [r0, #24]
 8013b06:	b90b      	cbnz	r3, 8013b0c <_vfiprintf_r+0x18>
 8013b08:	f7ff fecc 	bl	80138a4 <__sinit>
 8013b0c:	4b89      	ldr	r3, [pc, #548]	; (8013d34 <_vfiprintf_r+0x240>)
 8013b0e:	429d      	cmp	r5, r3
 8013b10:	d11b      	bne.n	8013b4a <_vfiprintf_r+0x56>
 8013b12:	6875      	ldr	r5, [r6, #4]
 8013b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b16:	07d9      	lsls	r1, r3, #31
 8013b18:	d405      	bmi.n	8013b26 <_vfiprintf_r+0x32>
 8013b1a:	89ab      	ldrh	r3, [r5, #12]
 8013b1c:	059a      	lsls	r2, r3, #22
 8013b1e:	d402      	bmi.n	8013b26 <_vfiprintf_r+0x32>
 8013b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b22:	f7ff ff6f 	bl	8013a04 <__retarget_lock_acquire_recursive>
 8013b26:	89ab      	ldrh	r3, [r5, #12]
 8013b28:	071b      	lsls	r3, r3, #28
 8013b2a:	d501      	bpl.n	8013b30 <_vfiprintf_r+0x3c>
 8013b2c:	692b      	ldr	r3, [r5, #16]
 8013b2e:	b9eb      	cbnz	r3, 8013b6c <_vfiprintf_r+0x78>
 8013b30:	4629      	mov	r1, r5
 8013b32:	4630      	mov	r0, r6
 8013b34:	f000 f960 	bl	8013df8 <__swsetup_r>
 8013b38:	b1c0      	cbz	r0, 8013b6c <_vfiprintf_r+0x78>
 8013b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013b3c:	07dc      	lsls	r4, r3, #31
 8013b3e:	d50e      	bpl.n	8013b5e <_vfiprintf_r+0x6a>
 8013b40:	f04f 30ff 	mov.w	r0, #4294967295
 8013b44:	b01d      	add	sp, #116	; 0x74
 8013b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4a:	4b7b      	ldr	r3, [pc, #492]	; (8013d38 <_vfiprintf_r+0x244>)
 8013b4c:	429d      	cmp	r5, r3
 8013b4e:	d101      	bne.n	8013b54 <_vfiprintf_r+0x60>
 8013b50:	68b5      	ldr	r5, [r6, #8]
 8013b52:	e7df      	b.n	8013b14 <_vfiprintf_r+0x20>
 8013b54:	4b79      	ldr	r3, [pc, #484]	; (8013d3c <_vfiprintf_r+0x248>)
 8013b56:	429d      	cmp	r5, r3
 8013b58:	bf08      	it	eq
 8013b5a:	68f5      	ldreq	r5, [r6, #12]
 8013b5c:	e7da      	b.n	8013b14 <_vfiprintf_r+0x20>
 8013b5e:	89ab      	ldrh	r3, [r5, #12]
 8013b60:	0598      	lsls	r0, r3, #22
 8013b62:	d4ed      	bmi.n	8013b40 <_vfiprintf_r+0x4c>
 8013b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013b66:	f7ff ff4e 	bl	8013a06 <__retarget_lock_release_recursive>
 8013b6a:	e7e9      	b.n	8013b40 <_vfiprintf_r+0x4c>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b70:	2320      	movs	r3, #32
 8013b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b7a:	2330      	movs	r3, #48	; 0x30
 8013b7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013d40 <_vfiprintf_r+0x24c>
 8013b80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b84:	f04f 0901 	mov.w	r9, #1
 8013b88:	4623      	mov	r3, r4
 8013b8a:	469a      	mov	sl, r3
 8013b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b90:	b10a      	cbz	r2, 8013b96 <_vfiprintf_r+0xa2>
 8013b92:	2a25      	cmp	r2, #37	; 0x25
 8013b94:	d1f9      	bne.n	8013b8a <_vfiprintf_r+0x96>
 8013b96:	ebba 0b04 	subs.w	fp, sl, r4
 8013b9a:	d00b      	beq.n	8013bb4 <_vfiprintf_r+0xc0>
 8013b9c:	465b      	mov	r3, fp
 8013b9e:	4622      	mov	r2, r4
 8013ba0:	4629      	mov	r1, r5
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	f7ff ff93 	bl	8013ace <__sfputs_r>
 8013ba8:	3001      	adds	r0, #1
 8013baa:	f000 80aa 	beq.w	8013d02 <_vfiprintf_r+0x20e>
 8013bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013bb0:	445a      	add	r2, fp
 8013bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8013bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f000 80a2 	beq.w	8013d02 <_vfiprintf_r+0x20e>
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bc8:	f10a 0a01 	add.w	sl, sl, #1
 8013bcc:	9304      	str	r3, [sp, #16]
 8013bce:	9307      	str	r3, [sp, #28]
 8013bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8013bd6:	4654      	mov	r4, sl
 8013bd8:	2205      	movs	r2, #5
 8013bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bde:	4858      	ldr	r0, [pc, #352]	; (8013d40 <_vfiprintf_r+0x24c>)
 8013be0:	f7ec fafe 	bl	80001e0 <memchr>
 8013be4:	9a04      	ldr	r2, [sp, #16]
 8013be6:	b9d8      	cbnz	r0, 8013c20 <_vfiprintf_r+0x12c>
 8013be8:	06d1      	lsls	r1, r2, #27
 8013bea:	bf44      	itt	mi
 8013bec:	2320      	movmi	r3, #32
 8013bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bf2:	0713      	lsls	r3, r2, #28
 8013bf4:	bf44      	itt	mi
 8013bf6:	232b      	movmi	r3, #43	; 0x2b
 8013bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8013c00:	2b2a      	cmp	r3, #42	; 0x2a
 8013c02:	d015      	beq.n	8013c30 <_vfiprintf_r+0x13c>
 8013c04:	9a07      	ldr	r2, [sp, #28]
 8013c06:	4654      	mov	r4, sl
 8013c08:	2000      	movs	r0, #0
 8013c0a:	f04f 0c0a 	mov.w	ip, #10
 8013c0e:	4621      	mov	r1, r4
 8013c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c14:	3b30      	subs	r3, #48	; 0x30
 8013c16:	2b09      	cmp	r3, #9
 8013c18:	d94e      	bls.n	8013cb8 <_vfiprintf_r+0x1c4>
 8013c1a:	b1b0      	cbz	r0, 8013c4a <_vfiprintf_r+0x156>
 8013c1c:	9207      	str	r2, [sp, #28]
 8013c1e:	e014      	b.n	8013c4a <_vfiprintf_r+0x156>
 8013c20:	eba0 0308 	sub.w	r3, r0, r8
 8013c24:	fa09 f303 	lsl.w	r3, r9, r3
 8013c28:	4313      	orrs	r3, r2
 8013c2a:	9304      	str	r3, [sp, #16]
 8013c2c:	46a2      	mov	sl, r4
 8013c2e:	e7d2      	b.n	8013bd6 <_vfiprintf_r+0xe2>
 8013c30:	9b03      	ldr	r3, [sp, #12]
 8013c32:	1d19      	adds	r1, r3, #4
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	9103      	str	r1, [sp, #12]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	bfbb      	ittet	lt
 8013c3c:	425b      	neglt	r3, r3
 8013c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8013c42:	9307      	strge	r3, [sp, #28]
 8013c44:	9307      	strlt	r3, [sp, #28]
 8013c46:	bfb8      	it	lt
 8013c48:	9204      	strlt	r2, [sp, #16]
 8013c4a:	7823      	ldrb	r3, [r4, #0]
 8013c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8013c4e:	d10c      	bne.n	8013c6a <_vfiprintf_r+0x176>
 8013c50:	7863      	ldrb	r3, [r4, #1]
 8013c52:	2b2a      	cmp	r3, #42	; 0x2a
 8013c54:	d135      	bne.n	8013cc2 <_vfiprintf_r+0x1ce>
 8013c56:	9b03      	ldr	r3, [sp, #12]
 8013c58:	1d1a      	adds	r2, r3, #4
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	9203      	str	r2, [sp, #12]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	bfb8      	it	lt
 8013c62:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c66:	3402      	adds	r4, #2
 8013c68:	9305      	str	r3, [sp, #20]
 8013c6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013d50 <_vfiprintf_r+0x25c>
 8013c6e:	7821      	ldrb	r1, [r4, #0]
 8013c70:	2203      	movs	r2, #3
 8013c72:	4650      	mov	r0, sl
 8013c74:	f7ec fab4 	bl	80001e0 <memchr>
 8013c78:	b140      	cbz	r0, 8013c8c <_vfiprintf_r+0x198>
 8013c7a:	2340      	movs	r3, #64	; 0x40
 8013c7c:	eba0 000a 	sub.w	r0, r0, sl
 8013c80:	fa03 f000 	lsl.w	r0, r3, r0
 8013c84:	9b04      	ldr	r3, [sp, #16]
 8013c86:	4303      	orrs	r3, r0
 8013c88:	3401      	adds	r4, #1
 8013c8a:	9304      	str	r3, [sp, #16]
 8013c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c90:	482c      	ldr	r0, [pc, #176]	; (8013d44 <_vfiprintf_r+0x250>)
 8013c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c96:	2206      	movs	r2, #6
 8013c98:	f7ec faa2 	bl	80001e0 <memchr>
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	d03f      	beq.n	8013d20 <_vfiprintf_r+0x22c>
 8013ca0:	4b29      	ldr	r3, [pc, #164]	; (8013d48 <_vfiprintf_r+0x254>)
 8013ca2:	bb1b      	cbnz	r3, 8013cec <_vfiprintf_r+0x1f8>
 8013ca4:	9b03      	ldr	r3, [sp, #12]
 8013ca6:	3307      	adds	r3, #7
 8013ca8:	f023 0307 	bic.w	r3, r3, #7
 8013cac:	3308      	adds	r3, #8
 8013cae:	9303      	str	r3, [sp, #12]
 8013cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cb2:	443b      	add	r3, r7
 8013cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8013cb6:	e767      	b.n	8013b88 <_vfiprintf_r+0x94>
 8013cb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013cbc:	460c      	mov	r4, r1
 8013cbe:	2001      	movs	r0, #1
 8013cc0:	e7a5      	b.n	8013c0e <_vfiprintf_r+0x11a>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	3401      	adds	r4, #1
 8013cc6:	9305      	str	r3, [sp, #20]
 8013cc8:	4619      	mov	r1, r3
 8013cca:	f04f 0c0a 	mov.w	ip, #10
 8013cce:	4620      	mov	r0, r4
 8013cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cd4:	3a30      	subs	r2, #48	; 0x30
 8013cd6:	2a09      	cmp	r2, #9
 8013cd8:	d903      	bls.n	8013ce2 <_vfiprintf_r+0x1ee>
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d0c5      	beq.n	8013c6a <_vfiprintf_r+0x176>
 8013cde:	9105      	str	r1, [sp, #20]
 8013ce0:	e7c3      	b.n	8013c6a <_vfiprintf_r+0x176>
 8013ce2:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ce6:	4604      	mov	r4, r0
 8013ce8:	2301      	movs	r3, #1
 8013cea:	e7f0      	b.n	8013cce <_vfiprintf_r+0x1da>
 8013cec:	ab03      	add	r3, sp, #12
 8013cee:	9300      	str	r3, [sp, #0]
 8013cf0:	462a      	mov	r2, r5
 8013cf2:	4b16      	ldr	r3, [pc, #88]	; (8013d4c <_vfiprintf_r+0x258>)
 8013cf4:	a904      	add	r1, sp, #16
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f7fb fe42 	bl	800f980 <_printf_float>
 8013cfc:	4607      	mov	r7, r0
 8013cfe:	1c78      	adds	r0, r7, #1
 8013d00:	d1d6      	bne.n	8013cb0 <_vfiprintf_r+0x1bc>
 8013d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d04:	07d9      	lsls	r1, r3, #31
 8013d06:	d405      	bmi.n	8013d14 <_vfiprintf_r+0x220>
 8013d08:	89ab      	ldrh	r3, [r5, #12]
 8013d0a:	059a      	lsls	r2, r3, #22
 8013d0c:	d402      	bmi.n	8013d14 <_vfiprintf_r+0x220>
 8013d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d10:	f7ff fe79 	bl	8013a06 <__retarget_lock_release_recursive>
 8013d14:	89ab      	ldrh	r3, [r5, #12]
 8013d16:	065b      	lsls	r3, r3, #25
 8013d18:	f53f af12 	bmi.w	8013b40 <_vfiprintf_r+0x4c>
 8013d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d1e:	e711      	b.n	8013b44 <_vfiprintf_r+0x50>
 8013d20:	ab03      	add	r3, sp, #12
 8013d22:	9300      	str	r3, [sp, #0]
 8013d24:	462a      	mov	r2, r5
 8013d26:	4b09      	ldr	r3, [pc, #36]	; (8013d4c <_vfiprintf_r+0x258>)
 8013d28:	a904      	add	r1, sp, #16
 8013d2a:	4630      	mov	r0, r6
 8013d2c:	f7fc f8cc 	bl	800fec8 <_printf_i>
 8013d30:	e7e4      	b.n	8013cfc <_vfiprintf_r+0x208>
 8013d32:	bf00      	nop
 8013d34:	08015a74 	.word	0x08015a74
 8013d38:	08015a94 	.word	0x08015a94
 8013d3c:	08015a54 	.word	0x08015a54
 8013d40:	08015a04 	.word	0x08015a04
 8013d44:	08015a0e 	.word	0x08015a0e
 8013d48:	0800f981 	.word	0x0800f981
 8013d4c:	08013acf 	.word	0x08013acf
 8013d50:	08015a0a 	.word	0x08015a0a

08013d54 <__swbuf_r>:
 8013d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d56:	460e      	mov	r6, r1
 8013d58:	4614      	mov	r4, r2
 8013d5a:	4605      	mov	r5, r0
 8013d5c:	b118      	cbz	r0, 8013d66 <__swbuf_r+0x12>
 8013d5e:	6983      	ldr	r3, [r0, #24]
 8013d60:	b90b      	cbnz	r3, 8013d66 <__swbuf_r+0x12>
 8013d62:	f7ff fd9f 	bl	80138a4 <__sinit>
 8013d66:	4b21      	ldr	r3, [pc, #132]	; (8013dec <__swbuf_r+0x98>)
 8013d68:	429c      	cmp	r4, r3
 8013d6a:	d12b      	bne.n	8013dc4 <__swbuf_r+0x70>
 8013d6c:	686c      	ldr	r4, [r5, #4]
 8013d6e:	69a3      	ldr	r3, [r4, #24]
 8013d70:	60a3      	str	r3, [r4, #8]
 8013d72:	89a3      	ldrh	r3, [r4, #12]
 8013d74:	071a      	lsls	r2, r3, #28
 8013d76:	d52f      	bpl.n	8013dd8 <__swbuf_r+0x84>
 8013d78:	6923      	ldr	r3, [r4, #16]
 8013d7a:	b36b      	cbz	r3, 8013dd8 <__swbuf_r+0x84>
 8013d7c:	6923      	ldr	r3, [r4, #16]
 8013d7e:	6820      	ldr	r0, [r4, #0]
 8013d80:	1ac0      	subs	r0, r0, r3
 8013d82:	6963      	ldr	r3, [r4, #20]
 8013d84:	b2f6      	uxtb	r6, r6
 8013d86:	4283      	cmp	r3, r0
 8013d88:	4637      	mov	r7, r6
 8013d8a:	dc04      	bgt.n	8013d96 <__swbuf_r+0x42>
 8013d8c:	4621      	mov	r1, r4
 8013d8e:	4628      	mov	r0, r5
 8013d90:	f7ff fcf4 	bl	801377c <_fflush_r>
 8013d94:	bb30      	cbnz	r0, 8013de4 <__swbuf_r+0x90>
 8013d96:	68a3      	ldr	r3, [r4, #8]
 8013d98:	3b01      	subs	r3, #1
 8013d9a:	60a3      	str	r3, [r4, #8]
 8013d9c:	6823      	ldr	r3, [r4, #0]
 8013d9e:	1c5a      	adds	r2, r3, #1
 8013da0:	6022      	str	r2, [r4, #0]
 8013da2:	701e      	strb	r6, [r3, #0]
 8013da4:	6963      	ldr	r3, [r4, #20]
 8013da6:	3001      	adds	r0, #1
 8013da8:	4283      	cmp	r3, r0
 8013daa:	d004      	beq.n	8013db6 <__swbuf_r+0x62>
 8013dac:	89a3      	ldrh	r3, [r4, #12]
 8013dae:	07db      	lsls	r3, r3, #31
 8013db0:	d506      	bpl.n	8013dc0 <__swbuf_r+0x6c>
 8013db2:	2e0a      	cmp	r6, #10
 8013db4:	d104      	bne.n	8013dc0 <__swbuf_r+0x6c>
 8013db6:	4621      	mov	r1, r4
 8013db8:	4628      	mov	r0, r5
 8013dba:	f7ff fcdf 	bl	801377c <_fflush_r>
 8013dbe:	b988      	cbnz	r0, 8013de4 <__swbuf_r+0x90>
 8013dc0:	4638      	mov	r0, r7
 8013dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dc4:	4b0a      	ldr	r3, [pc, #40]	; (8013df0 <__swbuf_r+0x9c>)
 8013dc6:	429c      	cmp	r4, r3
 8013dc8:	d101      	bne.n	8013dce <__swbuf_r+0x7a>
 8013dca:	68ac      	ldr	r4, [r5, #8]
 8013dcc:	e7cf      	b.n	8013d6e <__swbuf_r+0x1a>
 8013dce:	4b09      	ldr	r3, [pc, #36]	; (8013df4 <__swbuf_r+0xa0>)
 8013dd0:	429c      	cmp	r4, r3
 8013dd2:	bf08      	it	eq
 8013dd4:	68ec      	ldreq	r4, [r5, #12]
 8013dd6:	e7ca      	b.n	8013d6e <__swbuf_r+0x1a>
 8013dd8:	4621      	mov	r1, r4
 8013dda:	4628      	mov	r0, r5
 8013ddc:	f000 f80c 	bl	8013df8 <__swsetup_r>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d0cb      	beq.n	8013d7c <__swbuf_r+0x28>
 8013de4:	f04f 37ff 	mov.w	r7, #4294967295
 8013de8:	e7ea      	b.n	8013dc0 <__swbuf_r+0x6c>
 8013dea:	bf00      	nop
 8013dec:	08015a74 	.word	0x08015a74
 8013df0:	08015a94 	.word	0x08015a94
 8013df4:	08015a54 	.word	0x08015a54

08013df8 <__swsetup_r>:
 8013df8:	4b32      	ldr	r3, [pc, #200]	; (8013ec4 <__swsetup_r+0xcc>)
 8013dfa:	b570      	push	{r4, r5, r6, lr}
 8013dfc:	681d      	ldr	r5, [r3, #0]
 8013dfe:	4606      	mov	r6, r0
 8013e00:	460c      	mov	r4, r1
 8013e02:	b125      	cbz	r5, 8013e0e <__swsetup_r+0x16>
 8013e04:	69ab      	ldr	r3, [r5, #24]
 8013e06:	b913      	cbnz	r3, 8013e0e <__swsetup_r+0x16>
 8013e08:	4628      	mov	r0, r5
 8013e0a:	f7ff fd4b 	bl	80138a4 <__sinit>
 8013e0e:	4b2e      	ldr	r3, [pc, #184]	; (8013ec8 <__swsetup_r+0xd0>)
 8013e10:	429c      	cmp	r4, r3
 8013e12:	d10f      	bne.n	8013e34 <__swsetup_r+0x3c>
 8013e14:	686c      	ldr	r4, [r5, #4]
 8013e16:	89a3      	ldrh	r3, [r4, #12]
 8013e18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e1c:	0719      	lsls	r1, r3, #28
 8013e1e:	d42c      	bmi.n	8013e7a <__swsetup_r+0x82>
 8013e20:	06dd      	lsls	r5, r3, #27
 8013e22:	d411      	bmi.n	8013e48 <__swsetup_r+0x50>
 8013e24:	2309      	movs	r3, #9
 8013e26:	6033      	str	r3, [r6, #0]
 8013e28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013e2c:	81a3      	strh	r3, [r4, #12]
 8013e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e32:	e03e      	b.n	8013eb2 <__swsetup_r+0xba>
 8013e34:	4b25      	ldr	r3, [pc, #148]	; (8013ecc <__swsetup_r+0xd4>)
 8013e36:	429c      	cmp	r4, r3
 8013e38:	d101      	bne.n	8013e3e <__swsetup_r+0x46>
 8013e3a:	68ac      	ldr	r4, [r5, #8]
 8013e3c:	e7eb      	b.n	8013e16 <__swsetup_r+0x1e>
 8013e3e:	4b24      	ldr	r3, [pc, #144]	; (8013ed0 <__swsetup_r+0xd8>)
 8013e40:	429c      	cmp	r4, r3
 8013e42:	bf08      	it	eq
 8013e44:	68ec      	ldreq	r4, [r5, #12]
 8013e46:	e7e6      	b.n	8013e16 <__swsetup_r+0x1e>
 8013e48:	0758      	lsls	r0, r3, #29
 8013e4a:	d512      	bpl.n	8013e72 <__swsetup_r+0x7a>
 8013e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013e4e:	b141      	cbz	r1, 8013e62 <__swsetup_r+0x6a>
 8013e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e54:	4299      	cmp	r1, r3
 8013e56:	d002      	beq.n	8013e5e <__swsetup_r+0x66>
 8013e58:	4630      	mov	r0, r6
 8013e5a:	f7ff f9ad 	bl	80131b8 <_free_r>
 8013e5e:	2300      	movs	r3, #0
 8013e60:	6363      	str	r3, [r4, #52]	; 0x34
 8013e62:	89a3      	ldrh	r3, [r4, #12]
 8013e64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013e68:	81a3      	strh	r3, [r4, #12]
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	6063      	str	r3, [r4, #4]
 8013e6e:	6923      	ldr	r3, [r4, #16]
 8013e70:	6023      	str	r3, [r4, #0]
 8013e72:	89a3      	ldrh	r3, [r4, #12]
 8013e74:	f043 0308 	orr.w	r3, r3, #8
 8013e78:	81a3      	strh	r3, [r4, #12]
 8013e7a:	6923      	ldr	r3, [r4, #16]
 8013e7c:	b94b      	cbnz	r3, 8013e92 <__swsetup_r+0x9a>
 8013e7e:	89a3      	ldrh	r3, [r4, #12]
 8013e80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e88:	d003      	beq.n	8013e92 <__swsetup_r+0x9a>
 8013e8a:	4621      	mov	r1, r4
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	f000 f84d 	bl	8013f2c <__smakebuf_r>
 8013e92:	89a0      	ldrh	r0, [r4, #12]
 8013e94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013e98:	f010 0301 	ands.w	r3, r0, #1
 8013e9c:	d00a      	beq.n	8013eb4 <__swsetup_r+0xbc>
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	60a3      	str	r3, [r4, #8]
 8013ea2:	6963      	ldr	r3, [r4, #20]
 8013ea4:	425b      	negs	r3, r3
 8013ea6:	61a3      	str	r3, [r4, #24]
 8013ea8:	6923      	ldr	r3, [r4, #16]
 8013eaa:	b943      	cbnz	r3, 8013ebe <__swsetup_r+0xc6>
 8013eac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013eb0:	d1ba      	bne.n	8013e28 <__swsetup_r+0x30>
 8013eb2:	bd70      	pop	{r4, r5, r6, pc}
 8013eb4:	0781      	lsls	r1, r0, #30
 8013eb6:	bf58      	it	pl
 8013eb8:	6963      	ldrpl	r3, [r4, #20]
 8013eba:	60a3      	str	r3, [r4, #8]
 8013ebc:	e7f4      	b.n	8013ea8 <__swsetup_r+0xb0>
 8013ebe:	2000      	movs	r0, #0
 8013ec0:	e7f7      	b.n	8013eb2 <__swsetup_r+0xba>
 8013ec2:	bf00      	nop
 8013ec4:	20000058 	.word	0x20000058
 8013ec8:	08015a74 	.word	0x08015a74
 8013ecc:	08015a94 	.word	0x08015a94
 8013ed0:	08015a54 	.word	0x08015a54

08013ed4 <abort>:
 8013ed4:	b508      	push	{r3, lr}
 8013ed6:	2006      	movs	r0, #6
 8013ed8:	f000 f898 	bl	801400c <raise>
 8013edc:	2001      	movs	r0, #1
 8013ede:	f7f0 ff56 	bl	8004d8e <_exit>

08013ee2 <__swhatbuf_r>:
 8013ee2:	b570      	push	{r4, r5, r6, lr}
 8013ee4:	460e      	mov	r6, r1
 8013ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eea:	2900      	cmp	r1, #0
 8013eec:	b096      	sub	sp, #88	; 0x58
 8013eee:	4614      	mov	r4, r2
 8013ef0:	461d      	mov	r5, r3
 8013ef2:	da07      	bge.n	8013f04 <__swhatbuf_r+0x22>
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	602b      	str	r3, [r5, #0]
 8013ef8:	89b3      	ldrh	r3, [r6, #12]
 8013efa:	061a      	lsls	r2, r3, #24
 8013efc:	d410      	bmi.n	8013f20 <__swhatbuf_r+0x3e>
 8013efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013f02:	e00e      	b.n	8013f22 <__swhatbuf_r+0x40>
 8013f04:	466a      	mov	r2, sp
 8013f06:	f000 f89d 	bl	8014044 <_fstat_r>
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	dbf2      	blt.n	8013ef4 <__swhatbuf_r+0x12>
 8013f0e:	9a01      	ldr	r2, [sp, #4]
 8013f10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f18:	425a      	negs	r2, r3
 8013f1a:	415a      	adcs	r2, r3
 8013f1c:	602a      	str	r2, [r5, #0]
 8013f1e:	e7ee      	b.n	8013efe <__swhatbuf_r+0x1c>
 8013f20:	2340      	movs	r3, #64	; 0x40
 8013f22:	2000      	movs	r0, #0
 8013f24:	6023      	str	r3, [r4, #0]
 8013f26:	b016      	add	sp, #88	; 0x58
 8013f28:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f2c <__smakebuf_r>:
 8013f2c:	898b      	ldrh	r3, [r1, #12]
 8013f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f30:	079d      	lsls	r5, r3, #30
 8013f32:	4606      	mov	r6, r0
 8013f34:	460c      	mov	r4, r1
 8013f36:	d507      	bpl.n	8013f48 <__smakebuf_r+0x1c>
 8013f38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f3c:	6023      	str	r3, [r4, #0]
 8013f3e:	6123      	str	r3, [r4, #16]
 8013f40:	2301      	movs	r3, #1
 8013f42:	6163      	str	r3, [r4, #20]
 8013f44:	b002      	add	sp, #8
 8013f46:	bd70      	pop	{r4, r5, r6, pc}
 8013f48:	ab01      	add	r3, sp, #4
 8013f4a:	466a      	mov	r2, sp
 8013f4c:	f7ff ffc9 	bl	8013ee2 <__swhatbuf_r>
 8013f50:	9900      	ldr	r1, [sp, #0]
 8013f52:	4605      	mov	r5, r0
 8013f54:	4630      	mov	r0, r6
 8013f56:	f7ff f97f 	bl	8013258 <_malloc_r>
 8013f5a:	b948      	cbnz	r0, 8013f70 <__smakebuf_r+0x44>
 8013f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f60:	059a      	lsls	r2, r3, #22
 8013f62:	d4ef      	bmi.n	8013f44 <__smakebuf_r+0x18>
 8013f64:	f023 0303 	bic.w	r3, r3, #3
 8013f68:	f043 0302 	orr.w	r3, r3, #2
 8013f6c:	81a3      	strh	r3, [r4, #12]
 8013f6e:	e7e3      	b.n	8013f38 <__smakebuf_r+0xc>
 8013f70:	4b0d      	ldr	r3, [pc, #52]	; (8013fa8 <__smakebuf_r+0x7c>)
 8013f72:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f74:	89a3      	ldrh	r3, [r4, #12]
 8013f76:	6020      	str	r0, [r4, #0]
 8013f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f7c:	81a3      	strh	r3, [r4, #12]
 8013f7e:	9b00      	ldr	r3, [sp, #0]
 8013f80:	6163      	str	r3, [r4, #20]
 8013f82:	9b01      	ldr	r3, [sp, #4]
 8013f84:	6120      	str	r0, [r4, #16]
 8013f86:	b15b      	cbz	r3, 8013fa0 <__smakebuf_r+0x74>
 8013f88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f8c:	4630      	mov	r0, r6
 8013f8e:	f000 f86b 	bl	8014068 <_isatty_r>
 8013f92:	b128      	cbz	r0, 8013fa0 <__smakebuf_r+0x74>
 8013f94:	89a3      	ldrh	r3, [r4, #12]
 8013f96:	f023 0303 	bic.w	r3, r3, #3
 8013f9a:	f043 0301 	orr.w	r3, r3, #1
 8013f9e:	81a3      	strh	r3, [r4, #12]
 8013fa0:	89a0      	ldrh	r0, [r4, #12]
 8013fa2:	4305      	orrs	r5, r0
 8013fa4:	81a5      	strh	r5, [r4, #12]
 8013fa6:	e7cd      	b.n	8013f44 <__smakebuf_r+0x18>
 8013fa8:	0801383d 	.word	0x0801383d

08013fac <_malloc_usable_size_r>:
 8013fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fb0:	1f18      	subs	r0, r3, #4
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	bfbc      	itt	lt
 8013fb6:	580b      	ldrlt	r3, [r1, r0]
 8013fb8:	18c0      	addlt	r0, r0, r3
 8013fba:	4770      	bx	lr

08013fbc <_raise_r>:
 8013fbc:	291f      	cmp	r1, #31
 8013fbe:	b538      	push	{r3, r4, r5, lr}
 8013fc0:	4604      	mov	r4, r0
 8013fc2:	460d      	mov	r5, r1
 8013fc4:	d904      	bls.n	8013fd0 <_raise_r+0x14>
 8013fc6:	2316      	movs	r3, #22
 8013fc8:	6003      	str	r3, [r0, #0]
 8013fca:	f04f 30ff 	mov.w	r0, #4294967295
 8013fce:	bd38      	pop	{r3, r4, r5, pc}
 8013fd0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013fd2:	b112      	cbz	r2, 8013fda <_raise_r+0x1e>
 8013fd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013fd8:	b94b      	cbnz	r3, 8013fee <_raise_r+0x32>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f000 f830 	bl	8014040 <_getpid_r>
 8013fe0:	462a      	mov	r2, r5
 8013fe2:	4601      	mov	r1, r0
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013fea:	f000 b817 	b.w	801401c <_kill_r>
 8013fee:	2b01      	cmp	r3, #1
 8013ff0:	d00a      	beq.n	8014008 <_raise_r+0x4c>
 8013ff2:	1c59      	adds	r1, r3, #1
 8013ff4:	d103      	bne.n	8013ffe <_raise_r+0x42>
 8013ff6:	2316      	movs	r3, #22
 8013ff8:	6003      	str	r3, [r0, #0]
 8013ffa:	2001      	movs	r0, #1
 8013ffc:	e7e7      	b.n	8013fce <_raise_r+0x12>
 8013ffe:	2400      	movs	r4, #0
 8014000:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014004:	4628      	mov	r0, r5
 8014006:	4798      	blx	r3
 8014008:	2000      	movs	r0, #0
 801400a:	e7e0      	b.n	8013fce <_raise_r+0x12>

0801400c <raise>:
 801400c:	4b02      	ldr	r3, [pc, #8]	; (8014018 <raise+0xc>)
 801400e:	4601      	mov	r1, r0
 8014010:	6818      	ldr	r0, [r3, #0]
 8014012:	f7ff bfd3 	b.w	8013fbc <_raise_r>
 8014016:	bf00      	nop
 8014018:	20000058 	.word	0x20000058

0801401c <_kill_r>:
 801401c:	b538      	push	{r3, r4, r5, lr}
 801401e:	4d07      	ldr	r5, [pc, #28]	; (801403c <_kill_r+0x20>)
 8014020:	2300      	movs	r3, #0
 8014022:	4604      	mov	r4, r0
 8014024:	4608      	mov	r0, r1
 8014026:	4611      	mov	r1, r2
 8014028:	602b      	str	r3, [r5, #0]
 801402a:	f7f0 fea0 	bl	8004d6e <_kill>
 801402e:	1c43      	adds	r3, r0, #1
 8014030:	d102      	bne.n	8014038 <_kill_r+0x1c>
 8014032:	682b      	ldr	r3, [r5, #0]
 8014034:	b103      	cbz	r3, 8014038 <_kill_r+0x1c>
 8014036:	6023      	str	r3, [r4, #0]
 8014038:	bd38      	pop	{r3, r4, r5, pc}
 801403a:	bf00      	nop
 801403c:	20004b44 	.word	0x20004b44

08014040 <_getpid_r>:
 8014040:	f7f0 be8d 	b.w	8004d5e <_getpid>

08014044 <_fstat_r>:
 8014044:	b538      	push	{r3, r4, r5, lr}
 8014046:	4d07      	ldr	r5, [pc, #28]	; (8014064 <_fstat_r+0x20>)
 8014048:	2300      	movs	r3, #0
 801404a:	4604      	mov	r4, r0
 801404c:	4608      	mov	r0, r1
 801404e:	4611      	mov	r1, r2
 8014050:	602b      	str	r3, [r5, #0]
 8014052:	f7f0 feeb 	bl	8004e2c <_fstat>
 8014056:	1c43      	adds	r3, r0, #1
 8014058:	d102      	bne.n	8014060 <_fstat_r+0x1c>
 801405a:	682b      	ldr	r3, [r5, #0]
 801405c:	b103      	cbz	r3, 8014060 <_fstat_r+0x1c>
 801405e:	6023      	str	r3, [r4, #0]
 8014060:	bd38      	pop	{r3, r4, r5, pc}
 8014062:	bf00      	nop
 8014064:	20004b44 	.word	0x20004b44

08014068 <_isatty_r>:
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	4d06      	ldr	r5, [pc, #24]	; (8014084 <_isatty_r+0x1c>)
 801406c:	2300      	movs	r3, #0
 801406e:	4604      	mov	r4, r0
 8014070:	4608      	mov	r0, r1
 8014072:	602b      	str	r3, [r5, #0]
 8014074:	f7f0 feea 	bl	8004e4c <_isatty>
 8014078:	1c43      	adds	r3, r0, #1
 801407a:	d102      	bne.n	8014082 <_isatty_r+0x1a>
 801407c:	682b      	ldr	r3, [r5, #0]
 801407e:	b103      	cbz	r3, 8014082 <_isatty_r+0x1a>
 8014080:	6023      	str	r3, [r4, #0]
 8014082:	bd38      	pop	{r3, r4, r5, pc}
 8014084:	20004b44 	.word	0x20004b44

08014088 <atan2>:
 8014088:	f000 b8ce 	b.w	8014228 <__ieee754_atan2>

0801408c <sqrt>:
 801408c:	b538      	push	{r3, r4, r5, lr}
 801408e:	ed2d 8b02 	vpush	{d8}
 8014092:	ec55 4b10 	vmov	r4, r5, d0
 8014096:	f000 f991 	bl	80143bc <__ieee754_sqrt>
 801409a:	4b15      	ldr	r3, [pc, #84]	; (80140f0 <sqrt+0x64>)
 801409c:	eeb0 8a40 	vmov.f32	s16, s0
 80140a0:	eef0 8a60 	vmov.f32	s17, s1
 80140a4:	f993 3000 	ldrsb.w	r3, [r3]
 80140a8:	3301      	adds	r3, #1
 80140aa:	d019      	beq.n	80140e0 <sqrt+0x54>
 80140ac:	4622      	mov	r2, r4
 80140ae:	462b      	mov	r3, r5
 80140b0:	4620      	mov	r0, r4
 80140b2:	4629      	mov	r1, r5
 80140b4:	f7ec fd3a 	bl	8000b2c <__aeabi_dcmpun>
 80140b8:	b990      	cbnz	r0, 80140e0 <sqrt+0x54>
 80140ba:	2200      	movs	r2, #0
 80140bc:	2300      	movs	r3, #0
 80140be:	4620      	mov	r0, r4
 80140c0:	4629      	mov	r1, r5
 80140c2:	f7ec fd0b 	bl	8000adc <__aeabi_dcmplt>
 80140c6:	b158      	cbz	r0, 80140e0 <sqrt+0x54>
 80140c8:	f7fb fb88 	bl	800f7dc <__errno>
 80140cc:	2321      	movs	r3, #33	; 0x21
 80140ce:	6003      	str	r3, [r0, #0]
 80140d0:	2200      	movs	r2, #0
 80140d2:	2300      	movs	r3, #0
 80140d4:	4610      	mov	r0, r2
 80140d6:	4619      	mov	r1, r3
 80140d8:	f7ec fbb8 	bl	800084c <__aeabi_ddiv>
 80140dc:	ec41 0b18 	vmov	d8, r0, r1
 80140e0:	eeb0 0a48 	vmov.f32	s0, s16
 80140e4:	eef0 0a68 	vmov.f32	s1, s17
 80140e8:	ecbd 8b02 	vpop	{d8}
 80140ec:	bd38      	pop	{r3, r4, r5, pc}
 80140ee:	bf00      	nop
 80140f0:	2000022c 	.word	0x2000022c

080140f4 <powf>:
 80140f4:	b508      	push	{r3, lr}
 80140f6:	ed2d 8b04 	vpush	{d8-d9}
 80140fa:	eeb0 9a40 	vmov.f32	s18, s0
 80140fe:	eef0 8a60 	vmov.f32	s17, s1
 8014102:	f000 fa0f 	bl	8014524 <__ieee754_powf>
 8014106:	4b43      	ldr	r3, [pc, #268]	; (8014214 <powf+0x120>)
 8014108:	f993 3000 	ldrsb.w	r3, [r3]
 801410c:	3301      	adds	r3, #1
 801410e:	eeb0 8a40 	vmov.f32	s16, s0
 8014112:	d012      	beq.n	801413a <powf+0x46>
 8014114:	eef4 8a68 	vcmp.f32	s17, s17
 8014118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411c:	d60d      	bvs.n	801413a <powf+0x46>
 801411e:	eeb4 9a49 	vcmp.f32	s18, s18
 8014122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014126:	d70d      	bvc.n	8014144 <powf+0x50>
 8014128:	eef5 8a40 	vcmp.f32	s17, #0.0
 801412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014130:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014134:	bf08      	it	eq
 8014136:	eeb0 8a67 	vmoveq.f32	s16, s15
 801413a:	eeb0 0a48 	vmov.f32	s0, s16
 801413e:	ecbd 8b04 	vpop	{d8-d9}
 8014142:	bd08      	pop	{r3, pc}
 8014144:	eddf 9a34 	vldr	s19, [pc, #208]	; 8014218 <powf+0x124>
 8014148:	eeb4 9a69 	vcmp.f32	s18, s19
 801414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014150:	d116      	bne.n	8014180 <powf+0x8c>
 8014152:	eef4 8a69 	vcmp.f32	s17, s19
 8014156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801415a:	d057      	beq.n	801420c <powf+0x118>
 801415c:	eeb0 0a68 	vmov.f32	s0, s17
 8014160:	f000 fe56 	bl	8014e10 <finitef>
 8014164:	2800      	cmp	r0, #0
 8014166:	d0e8      	beq.n	801413a <powf+0x46>
 8014168:	eef4 8ae9 	vcmpe.f32	s17, s19
 801416c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014170:	d5e3      	bpl.n	801413a <powf+0x46>
 8014172:	f7fb fb33 	bl	800f7dc <__errno>
 8014176:	2321      	movs	r3, #33	; 0x21
 8014178:	6003      	str	r3, [r0, #0]
 801417a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 801421c <powf+0x128>
 801417e:	e7dc      	b.n	801413a <powf+0x46>
 8014180:	f000 fe46 	bl	8014e10 <finitef>
 8014184:	bb50      	cbnz	r0, 80141dc <powf+0xe8>
 8014186:	eeb0 0a49 	vmov.f32	s0, s18
 801418a:	f000 fe41 	bl	8014e10 <finitef>
 801418e:	b328      	cbz	r0, 80141dc <powf+0xe8>
 8014190:	eeb0 0a68 	vmov.f32	s0, s17
 8014194:	f000 fe3c 	bl	8014e10 <finitef>
 8014198:	b300      	cbz	r0, 80141dc <powf+0xe8>
 801419a:	eeb4 8a48 	vcmp.f32	s16, s16
 801419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141a2:	d706      	bvc.n	80141b2 <powf+0xbe>
 80141a4:	f7fb fb1a 	bl	800f7dc <__errno>
 80141a8:	2321      	movs	r3, #33	; 0x21
 80141aa:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80141ae:	6003      	str	r3, [r0, #0]
 80141b0:	e7c3      	b.n	801413a <powf+0x46>
 80141b2:	f7fb fb13 	bl	800f7dc <__errno>
 80141b6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80141ba:	2322      	movs	r3, #34	; 0x22
 80141bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c0:	6003      	str	r3, [r0, #0]
 80141c2:	d508      	bpl.n	80141d6 <powf+0xe2>
 80141c4:	eeb0 0a68 	vmov.f32	s0, s17
 80141c8:	f000 fe30 	bl	8014e2c <rintf>
 80141cc:	eeb4 0a68 	vcmp.f32	s0, s17
 80141d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d4:	d1d1      	bne.n	801417a <powf+0x86>
 80141d6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8014220 <powf+0x12c>
 80141da:	e7ae      	b.n	801413a <powf+0x46>
 80141dc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80141e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e4:	d1a9      	bne.n	801413a <powf+0x46>
 80141e6:	eeb0 0a49 	vmov.f32	s0, s18
 80141ea:	f000 fe11 	bl	8014e10 <finitef>
 80141ee:	2800      	cmp	r0, #0
 80141f0:	d0a3      	beq.n	801413a <powf+0x46>
 80141f2:	eeb0 0a68 	vmov.f32	s0, s17
 80141f6:	f000 fe0b 	bl	8014e10 <finitef>
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d09d      	beq.n	801413a <powf+0x46>
 80141fe:	f7fb faed 	bl	800f7dc <__errno>
 8014202:	2322      	movs	r3, #34	; 0x22
 8014204:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8014218 <powf+0x124>
 8014208:	6003      	str	r3, [r0, #0]
 801420a:	e796      	b.n	801413a <powf+0x46>
 801420c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014210:	e793      	b.n	801413a <powf+0x46>
 8014212:	bf00      	nop
 8014214:	2000022c 	.word	0x2000022c
 8014218:	00000000 	.word	0x00000000
 801421c:	ff800000 	.word	0xff800000
 8014220:	7f800000 	.word	0x7f800000
 8014224:	00000000 	.word	0x00000000

08014228 <__ieee754_atan2>:
 8014228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801422c:	ec57 6b11 	vmov	r6, r7, d1
 8014230:	4273      	negs	r3, r6
 8014232:	f8df e184 	ldr.w	lr, [pc, #388]	; 80143b8 <__ieee754_atan2+0x190>
 8014236:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801423a:	4333      	orrs	r3, r6
 801423c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014240:	4573      	cmp	r3, lr
 8014242:	ec51 0b10 	vmov	r0, r1, d0
 8014246:	ee11 8a10 	vmov	r8, s2
 801424a:	d80a      	bhi.n	8014262 <__ieee754_atan2+0x3a>
 801424c:	4244      	negs	r4, r0
 801424e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014252:	4304      	orrs	r4, r0
 8014254:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014258:	4574      	cmp	r4, lr
 801425a:	ee10 9a10 	vmov	r9, s0
 801425e:	468c      	mov	ip, r1
 8014260:	d907      	bls.n	8014272 <__ieee754_atan2+0x4a>
 8014262:	4632      	mov	r2, r6
 8014264:	463b      	mov	r3, r7
 8014266:	f7ec f811 	bl	800028c <__adddf3>
 801426a:	ec41 0b10 	vmov	d0, r0, r1
 801426e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014272:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8014276:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801427a:	4334      	orrs	r4, r6
 801427c:	d103      	bne.n	8014286 <__ieee754_atan2+0x5e>
 801427e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014282:	f000 bc15 	b.w	8014ab0 <atan>
 8014286:	17bc      	asrs	r4, r7, #30
 8014288:	f004 0402 	and.w	r4, r4, #2
 801428c:	ea53 0909 	orrs.w	r9, r3, r9
 8014290:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014294:	d107      	bne.n	80142a6 <__ieee754_atan2+0x7e>
 8014296:	2c02      	cmp	r4, #2
 8014298:	d060      	beq.n	801435c <__ieee754_atan2+0x134>
 801429a:	2c03      	cmp	r4, #3
 801429c:	d1e5      	bne.n	801426a <__ieee754_atan2+0x42>
 801429e:	a142      	add	r1, pc, #264	; (adr r1, 80143a8 <__ieee754_atan2+0x180>)
 80142a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142a4:	e7e1      	b.n	801426a <__ieee754_atan2+0x42>
 80142a6:	ea52 0808 	orrs.w	r8, r2, r8
 80142aa:	d106      	bne.n	80142ba <__ieee754_atan2+0x92>
 80142ac:	f1bc 0f00 	cmp.w	ip, #0
 80142b0:	da5f      	bge.n	8014372 <__ieee754_atan2+0x14a>
 80142b2:	a13f      	add	r1, pc, #252	; (adr r1, 80143b0 <__ieee754_atan2+0x188>)
 80142b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80142b8:	e7d7      	b.n	801426a <__ieee754_atan2+0x42>
 80142ba:	4572      	cmp	r2, lr
 80142bc:	d10f      	bne.n	80142de <__ieee754_atan2+0xb6>
 80142be:	4293      	cmp	r3, r2
 80142c0:	f104 34ff 	add.w	r4, r4, #4294967295
 80142c4:	d107      	bne.n	80142d6 <__ieee754_atan2+0xae>
 80142c6:	2c02      	cmp	r4, #2
 80142c8:	d84c      	bhi.n	8014364 <__ieee754_atan2+0x13c>
 80142ca:	4b35      	ldr	r3, [pc, #212]	; (80143a0 <__ieee754_atan2+0x178>)
 80142cc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80142d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80142d4:	e7c9      	b.n	801426a <__ieee754_atan2+0x42>
 80142d6:	2c02      	cmp	r4, #2
 80142d8:	d848      	bhi.n	801436c <__ieee754_atan2+0x144>
 80142da:	4b32      	ldr	r3, [pc, #200]	; (80143a4 <__ieee754_atan2+0x17c>)
 80142dc:	e7f6      	b.n	80142cc <__ieee754_atan2+0xa4>
 80142de:	4573      	cmp	r3, lr
 80142e0:	d0e4      	beq.n	80142ac <__ieee754_atan2+0x84>
 80142e2:	1a9b      	subs	r3, r3, r2
 80142e4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80142e8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80142ec:	da1e      	bge.n	801432c <__ieee754_atan2+0x104>
 80142ee:	2f00      	cmp	r7, #0
 80142f0:	da01      	bge.n	80142f6 <__ieee754_atan2+0xce>
 80142f2:	323c      	adds	r2, #60	; 0x3c
 80142f4:	db1e      	blt.n	8014334 <__ieee754_atan2+0x10c>
 80142f6:	4632      	mov	r2, r6
 80142f8:	463b      	mov	r3, r7
 80142fa:	f7ec faa7 	bl	800084c <__aeabi_ddiv>
 80142fe:	ec41 0b10 	vmov	d0, r0, r1
 8014302:	f000 fd75 	bl	8014df0 <fabs>
 8014306:	f000 fbd3 	bl	8014ab0 <atan>
 801430a:	ec51 0b10 	vmov	r0, r1, d0
 801430e:	2c01      	cmp	r4, #1
 8014310:	d013      	beq.n	801433a <__ieee754_atan2+0x112>
 8014312:	2c02      	cmp	r4, #2
 8014314:	d015      	beq.n	8014342 <__ieee754_atan2+0x11a>
 8014316:	2c00      	cmp	r4, #0
 8014318:	d0a7      	beq.n	801426a <__ieee754_atan2+0x42>
 801431a:	a319      	add	r3, pc, #100	; (adr r3, 8014380 <__ieee754_atan2+0x158>)
 801431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014320:	f7eb ffb2 	bl	8000288 <__aeabi_dsub>
 8014324:	a318      	add	r3, pc, #96	; (adr r3, 8014388 <__ieee754_atan2+0x160>)
 8014326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801432a:	e014      	b.n	8014356 <__ieee754_atan2+0x12e>
 801432c:	a118      	add	r1, pc, #96	; (adr r1, 8014390 <__ieee754_atan2+0x168>)
 801432e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014332:	e7ec      	b.n	801430e <__ieee754_atan2+0xe6>
 8014334:	2000      	movs	r0, #0
 8014336:	2100      	movs	r1, #0
 8014338:	e7e9      	b.n	801430e <__ieee754_atan2+0xe6>
 801433a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801433e:	4619      	mov	r1, r3
 8014340:	e793      	b.n	801426a <__ieee754_atan2+0x42>
 8014342:	a30f      	add	r3, pc, #60	; (adr r3, 8014380 <__ieee754_atan2+0x158>)
 8014344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014348:	f7eb ff9e 	bl	8000288 <__aeabi_dsub>
 801434c:	4602      	mov	r2, r0
 801434e:	460b      	mov	r3, r1
 8014350:	a10d      	add	r1, pc, #52	; (adr r1, 8014388 <__ieee754_atan2+0x160>)
 8014352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014356:	f7eb ff97 	bl	8000288 <__aeabi_dsub>
 801435a:	e786      	b.n	801426a <__ieee754_atan2+0x42>
 801435c:	a10a      	add	r1, pc, #40	; (adr r1, 8014388 <__ieee754_atan2+0x160>)
 801435e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014362:	e782      	b.n	801426a <__ieee754_atan2+0x42>
 8014364:	a10c      	add	r1, pc, #48	; (adr r1, 8014398 <__ieee754_atan2+0x170>)
 8014366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801436a:	e77e      	b.n	801426a <__ieee754_atan2+0x42>
 801436c:	2000      	movs	r0, #0
 801436e:	2100      	movs	r1, #0
 8014370:	e77b      	b.n	801426a <__ieee754_atan2+0x42>
 8014372:	a107      	add	r1, pc, #28	; (adr r1, 8014390 <__ieee754_atan2+0x168>)
 8014374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014378:	e777      	b.n	801426a <__ieee754_atan2+0x42>
 801437a:	bf00      	nop
 801437c:	f3af 8000 	nop.w
 8014380:	33145c07 	.word	0x33145c07
 8014384:	3ca1a626 	.word	0x3ca1a626
 8014388:	54442d18 	.word	0x54442d18
 801438c:	400921fb 	.word	0x400921fb
 8014390:	54442d18 	.word	0x54442d18
 8014394:	3ff921fb 	.word	0x3ff921fb
 8014398:	54442d18 	.word	0x54442d18
 801439c:	3fe921fb 	.word	0x3fe921fb
 80143a0:	08015ab8 	.word	0x08015ab8
 80143a4:	08015ad0 	.word	0x08015ad0
 80143a8:	54442d18 	.word	0x54442d18
 80143ac:	c00921fb 	.word	0xc00921fb
 80143b0:	54442d18 	.word	0x54442d18
 80143b4:	bff921fb 	.word	0xbff921fb
 80143b8:	7ff00000 	.word	0x7ff00000

080143bc <__ieee754_sqrt>:
 80143bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143c0:	ec55 4b10 	vmov	r4, r5, d0
 80143c4:	4e56      	ldr	r6, [pc, #344]	; (8014520 <__ieee754_sqrt+0x164>)
 80143c6:	43ae      	bics	r6, r5
 80143c8:	ee10 0a10 	vmov	r0, s0
 80143cc:	ee10 3a10 	vmov	r3, s0
 80143d0:	4629      	mov	r1, r5
 80143d2:	462a      	mov	r2, r5
 80143d4:	d110      	bne.n	80143f8 <__ieee754_sqrt+0x3c>
 80143d6:	ee10 2a10 	vmov	r2, s0
 80143da:	462b      	mov	r3, r5
 80143dc:	f7ec f90c 	bl	80005f8 <__aeabi_dmul>
 80143e0:	4602      	mov	r2, r0
 80143e2:	460b      	mov	r3, r1
 80143e4:	4620      	mov	r0, r4
 80143e6:	4629      	mov	r1, r5
 80143e8:	f7eb ff50 	bl	800028c <__adddf3>
 80143ec:	4604      	mov	r4, r0
 80143ee:	460d      	mov	r5, r1
 80143f0:	ec45 4b10 	vmov	d0, r4, r5
 80143f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143f8:	2d00      	cmp	r5, #0
 80143fa:	dc10      	bgt.n	801441e <__ieee754_sqrt+0x62>
 80143fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014400:	4330      	orrs	r0, r6
 8014402:	d0f5      	beq.n	80143f0 <__ieee754_sqrt+0x34>
 8014404:	b15d      	cbz	r5, 801441e <__ieee754_sqrt+0x62>
 8014406:	ee10 2a10 	vmov	r2, s0
 801440a:	462b      	mov	r3, r5
 801440c:	ee10 0a10 	vmov	r0, s0
 8014410:	f7eb ff3a 	bl	8000288 <__aeabi_dsub>
 8014414:	4602      	mov	r2, r0
 8014416:	460b      	mov	r3, r1
 8014418:	f7ec fa18 	bl	800084c <__aeabi_ddiv>
 801441c:	e7e6      	b.n	80143ec <__ieee754_sqrt+0x30>
 801441e:	1509      	asrs	r1, r1, #20
 8014420:	d076      	beq.n	8014510 <__ieee754_sqrt+0x154>
 8014422:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014426:	07ce      	lsls	r6, r1, #31
 8014428:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801442c:	bf5e      	ittt	pl
 801442e:	0fda      	lsrpl	r2, r3, #31
 8014430:	005b      	lslpl	r3, r3, #1
 8014432:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014436:	0fda      	lsrs	r2, r3, #31
 8014438:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801443c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014440:	2000      	movs	r0, #0
 8014442:	106d      	asrs	r5, r5, #1
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	f04f 0e16 	mov.w	lr, #22
 801444a:	4684      	mov	ip, r0
 801444c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014450:	eb0c 0401 	add.w	r4, ip, r1
 8014454:	4294      	cmp	r4, r2
 8014456:	bfde      	ittt	le
 8014458:	1b12      	suble	r2, r2, r4
 801445a:	eb04 0c01 	addle.w	ip, r4, r1
 801445e:	1840      	addle	r0, r0, r1
 8014460:	0052      	lsls	r2, r2, #1
 8014462:	f1be 0e01 	subs.w	lr, lr, #1
 8014466:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801446a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801446e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014472:	d1ed      	bne.n	8014450 <__ieee754_sqrt+0x94>
 8014474:	4671      	mov	r1, lr
 8014476:	2720      	movs	r7, #32
 8014478:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801447c:	4562      	cmp	r2, ip
 801447e:	eb04 060e 	add.w	r6, r4, lr
 8014482:	dc02      	bgt.n	801448a <__ieee754_sqrt+0xce>
 8014484:	d113      	bne.n	80144ae <__ieee754_sqrt+0xf2>
 8014486:	429e      	cmp	r6, r3
 8014488:	d811      	bhi.n	80144ae <__ieee754_sqrt+0xf2>
 801448a:	2e00      	cmp	r6, #0
 801448c:	eb06 0e04 	add.w	lr, r6, r4
 8014490:	da43      	bge.n	801451a <__ieee754_sqrt+0x15e>
 8014492:	f1be 0f00 	cmp.w	lr, #0
 8014496:	db40      	blt.n	801451a <__ieee754_sqrt+0x15e>
 8014498:	f10c 0801 	add.w	r8, ip, #1
 801449c:	eba2 020c 	sub.w	r2, r2, ip
 80144a0:	429e      	cmp	r6, r3
 80144a2:	bf88      	it	hi
 80144a4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80144a8:	1b9b      	subs	r3, r3, r6
 80144aa:	4421      	add	r1, r4
 80144ac:	46c4      	mov	ip, r8
 80144ae:	0052      	lsls	r2, r2, #1
 80144b0:	3f01      	subs	r7, #1
 80144b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80144b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80144ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80144be:	d1dd      	bne.n	801447c <__ieee754_sqrt+0xc0>
 80144c0:	4313      	orrs	r3, r2
 80144c2:	d006      	beq.n	80144d2 <__ieee754_sqrt+0x116>
 80144c4:	1c4c      	adds	r4, r1, #1
 80144c6:	bf13      	iteet	ne
 80144c8:	3101      	addne	r1, #1
 80144ca:	3001      	addeq	r0, #1
 80144cc:	4639      	moveq	r1, r7
 80144ce:	f021 0101 	bicne.w	r1, r1, #1
 80144d2:	1043      	asrs	r3, r0, #1
 80144d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80144d8:	0849      	lsrs	r1, r1, #1
 80144da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80144de:	07c2      	lsls	r2, r0, #31
 80144e0:	bf48      	it	mi
 80144e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80144e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80144ea:	460c      	mov	r4, r1
 80144ec:	463d      	mov	r5, r7
 80144ee:	e77f      	b.n	80143f0 <__ieee754_sqrt+0x34>
 80144f0:	0ada      	lsrs	r2, r3, #11
 80144f2:	3815      	subs	r0, #21
 80144f4:	055b      	lsls	r3, r3, #21
 80144f6:	2a00      	cmp	r2, #0
 80144f8:	d0fa      	beq.n	80144f0 <__ieee754_sqrt+0x134>
 80144fa:	02d7      	lsls	r7, r2, #11
 80144fc:	d50a      	bpl.n	8014514 <__ieee754_sqrt+0x158>
 80144fe:	f1c1 0420 	rsb	r4, r1, #32
 8014502:	fa23 f404 	lsr.w	r4, r3, r4
 8014506:	1e4d      	subs	r5, r1, #1
 8014508:	408b      	lsls	r3, r1
 801450a:	4322      	orrs	r2, r4
 801450c:	1b41      	subs	r1, r0, r5
 801450e:	e788      	b.n	8014422 <__ieee754_sqrt+0x66>
 8014510:	4608      	mov	r0, r1
 8014512:	e7f0      	b.n	80144f6 <__ieee754_sqrt+0x13a>
 8014514:	0052      	lsls	r2, r2, #1
 8014516:	3101      	adds	r1, #1
 8014518:	e7ef      	b.n	80144fa <__ieee754_sqrt+0x13e>
 801451a:	46e0      	mov	r8, ip
 801451c:	e7be      	b.n	801449c <__ieee754_sqrt+0xe0>
 801451e:	bf00      	nop
 8014520:	7ff00000 	.word	0x7ff00000

08014524 <__ieee754_powf>:
 8014524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014528:	ee10 5a90 	vmov	r5, s1
 801452c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8014530:	ed2d 8b02 	vpush	{d8}
 8014534:	eeb0 8a40 	vmov.f32	s16, s0
 8014538:	eef0 8a60 	vmov.f32	s17, s1
 801453c:	f000 8291 	beq.w	8014a62 <__ieee754_powf+0x53e>
 8014540:	ee10 8a10 	vmov	r8, s0
 8014544:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8014548:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801454c:	dc06      	bgt.n	801455c <__ieee754_powf+0x38>
 801454e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8014552:	dd0a      	ble.n	801456a <__ieee754_powf+0x46>
 8014554:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014558:	f000 8283 	beq.w	8014a62 <__ieee754_powf+0x53e>
 801455c:	ecbd 8b02 	vpop	{d8}
 8014560:	48d8      	ldr	r0, [pc, #864]	; (80148c4 <__ieee754_powf+0x3a0>)
 8014562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014566:	f7fb bfe5 	b.w	8010534 <nanf>
 801456a:	f1b8 0f00 	cmp.w	r8, #0
 801456e:	da1f      	bge.n	80145b0 <__ieee754_powf+0x8c>
 8014570:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8014574:	da2e      	bge.n	80145d4 <__ieee754_powf+0xb0>
 8014576:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801457a:	f2c0 827b 	blt.w	8014a74 <__ieee754_powf+0x550>
 801457e:	15fb      	asrs	r3, r7, #23
 8014580:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8014584:	fa47 f603 	asr.w	r6, r7, r3
 8014588:	fa06 f303 	lsl.w	r3, r6, r3
 801458c:	42bb      	cmp	r3, r7
 801458e:	f040 8271 	bne.w	8014a74 <__ieee754_powf+0x550>
 8014592:	f006 0601 	and.w	r6, r6, #1
 8014596:	f1c6 0602 	rsb	r6, r6, #2
 801459a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801459e:	d120      	bne.n	80145e2 <__ieee754_powf+0xbe>
 80145a0:	2d00      	cmp	r5, #0
 80145a2:	f280 8264 	bge.w	8014a6e <__ieee754_powf+0x54a>
 80145a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80145aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80145ae:	e00d      	b.n	80145cc <__ieee754_powf+0xa8>
 80145b0:	2600      	movs	r6, #0
 80145b2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80145b6:	d1f0      	bne.n	801459a <__ieee754_powf+0x76>
 80145b8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80145bc:	f000 8251 	beq.w	8014a62 <__ieee754_powf+0x53e>
 80145c0:	dd0a      	ble.n	80145d8 <__ieee754_powf+0xb4>
 80145c2:	2d00      	cmp	r5, #0
 80145c4:	f280 8250 	bge.w	8014a68 <__ieee754_powf+0x544>
 80145c8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80148c8 <__ieee754_powf+0x3a4>
 80145cc:	ecbd 8b02 	vpop	{d8}
 80145d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145d4:	2602      	movs	r6, #2
 80145d6:	e7ec      	b.n	80145b2 <__ieee754_powf+0x8e>
 80145d8:	2d00      	cmp	r5, #0
 80145da:	daf5      	bge.n	80145c8 <__ieee754_powf+0xa4>
 80145dc:	eeb1 0a68 	vneg.f32	s0, s17
 80145e0:	e7f4      	b.n	80145cc <__ieee754_powf+0xa8>
 80145e2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80145e6:	d102      	bne.n	80145ee <__ieee754_powf+0xca>
 80145e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 80145ec:	e7ee      	b.n	80145cc <__ieee754_powf+0xa8>
 80145ee:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80145f2:	eeb0 0a48 	vmov.f32	s0, s16
 80145f6:	d108      	bne.n	801460a <__ieee754_powf+0xe6>
 80145f8:	f1b8 0f00 	cmp.w	r8, #0
 80145fc:	db05      	blt.n	801460a <__ieee754_powf+0xe6>
 80145fe:	ecbd 8b02 	vpop	{d8}
 8014602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014606:	f000 ba4d 	b.w	8014aa4 <__ieee754_sqrtf>
 801460a:	f000 fbfa 	bl	8014e02 <fabsf>
 801460e:	b124      	cbz	r4, 801461a <__ieee754_powf+0xf6>
 8014610:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8014614:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8014618:	d117      	bne.n	801464a <__ieee754_powf+0x126>
 801461a:	2d00      	cmp	r5, #0
 801461c:	bfbc      	itt	lt
 801461e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8014622:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8014626:	f1b8 0f00 	cmp.w	r8, #0
 801462a:	dacf      	bge.n	80145cc <__ieee754_powf+0xa8>
 801462c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8014630:	ea54 0306 	orrs.w	r3, r4, r6
 8014634:	d104      	bne.n	8014640 <__ieee754_powf+0x11c>
 8014636:	ee70 7a40 	vsub.f32	s15, s0, s0
 801463a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801463e:	e7c5      	b.n	80145cc <__ieee754_powf+0xa8>
 8014640:	2e01      	cmp	r6, #1
 8014642:	d1c3      	bne.n	80145cc <__ieee754_powf+0xa8>
 8014644:	eeb1 0a40 	vneg.f32	s0, s0
 8014648:	e7c0      	b.n	80145cc <__ieee754_powf+0xa8>
 801464a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801464e:	3801      	subs	r0, #1
 8014650:	ea56 0300 	orrs.w	r3, r6, r0
 8014654:	d104      	bne.n	8014660 <__ieee754_powf+0x13c>
 8014656:	ee38 8a48 	vsub.f32	s16, s16, s16
 801465a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801465e:	e7b5      	b.n	80145cc <__ieee754_powf+0xa8>
 8014660:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8014664:	dd6b      	ble.n	801473e <__ieee754_powf+0x21a>
 8014666:	4b99      	ldr	r3, [pc, #612]	; (80148cc <__ieee754_powf+0x3a8>)
 8014668:	429c      	cmp	r4, r3
 801466a:	dc06      	bgt.n	801467a <__ieee754_powf+0x156>
 801466c:	2d00      	cmp	r5, #0
 801466e:	daab      	bge.n	80145c8 <__ieee754_powf+0xa4>
 8014670:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80148d0 <__ieee754_powf+0x3ac>
 8014674:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014678:	e7a8      	b.n	80145cc <__ieee754_powf+0xa8>
 801467a:	4b96      	ldr	r3, [pc, #600]	; (80148d4 <__ieee754_powf+0x3b0>)
 801467c:	429c      	cmp	r4, r3
 801467e:	dd02      	ble.n	8014686 <__ieee754_powf+0x162>
 8014680:	2d00      	cmp	r5, #0
 8014682:	dcf5      	bgt.n	8014670 <__ieee754_powf+0x14c>
 8014684:	e7a0      	b.n	80145c8 <__ieee754_powf+0xa4>
 8014686:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801468a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801468e:	eddf 6a92 	vldr	s13, [pc, #584]	; 80148d8 <__ieee754_powf+0x3b4>
 8014692:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014696:	eee0 6a67 	vfms.f32	s13, s0, s15
 801469a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801469e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80146a2:	ee20 7a00 	vmul.f32	s14, s0, s0
 80146a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146aa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80148dc <__ieee754_powf+0x3b8>
 80146ae:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80146b2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80148e0 <__ieee754_powf+0x3bc>
 80146b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80146ba:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80148e4 <__ieee754_powf+0x3c0>
 80146be:	eef0 6a67 	vmov.f32	s13, s15
 80146c2:	eee0 6a07 	vfma.f32	s13, s0, s14
 80146c6:	ee16 3a90 	vmov	r3, s13
 80146ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80146ce:	f023 030f 	bic.w	r3, r3, #15
 80146d2:	ee00 3a90 	vmov	s1, r3
 80146d6:	eee0 0a47 	vfms.f32	s1, s0, s14
 80146da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80146de:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80146e2:	f025 050f 	bic.w	r5, r5, #15
 80146e6:	ee07 5a10 	vmov	s14, r5
 80146ea:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80146ee:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80146f2:	ee07 3a90 	vmov	s15, r3
 80146f6:	eee7 0a27 	vfma.f32	s1, s14, s15
 80146fa:	3e01      	subs	r6, #1
 80146fc:	ea56 0200 	orrs.w	r2, r6, r0
 8014700:	ee07 5a10 	vmov	s14, r5
 8014704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014708:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801470c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8014710:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014714:	ee17 4a10 	vmov	r4, s14
 8014718:	bf08      	it	eq
 801471a:	eeb0 8a40 	vmoveq.f32	s16, s0
 801471e:	2c00      	cmp	r4, #0
 8014720:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014724:	f340 8184 	ble.w	8014a30 <__ieee754_powf+0x50c>
 8014728:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801472c:	f340 80fc 	ble.w	8014928 <__ieee754_powf+0x404>
 8014730:	eddf 7a67 	vldr	s15, [pc, #412]	; 80148d0 <__ieee754_powf+0x3ac>
 8014734:	ee28 0a27 	vmul.f32	s0, s16, s15
 8014738:	ee20 0a27 	vmul.f32	s0, s0, s15
 801473c:	e746      	b.n	80145cc <__ieee754_powf+0xa8>
 801473e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8014742:	bf01      	itttt	eq
 8014744:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80148e8 <__ieee754_powf+0x3c4>
 8014748:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801474c:	f06f 0217 	mvneq.w	r2, #23
 8014750:	ee17 4a90 	vmoveq	r4, s15
 8014754:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8014758:	bf18      	it	ne
 801475a:	2200      	movne	r2, #0
 801475c:	3b7f      	subs	r3, #127	; 0x7f
 801475e:	4413      	add	r3, r2
 8014760:	4a62      	ldr	r2, [pc, #392]	; (80148ec <__ieee754_powf+0x3c8>)
 8014762:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8014766:	4294      	cmp	r4, r2
 8014768:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801476c:	dd06      	ble.n	801477c <__ieee754_powf+0x258>
 801476e:	4a60      	ldr	r2, [pc, #384]	; (80148f0 <__ieee754_powf+0x3cc>)
 8014770:	4294      	cmp	r4, r2
 8014772:	f340 80a4 	ble.w	80148be <__ieee754_powf+0x39a>
 8014776:	3301      	adds	r3, #1
 8014778:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801477c:	2400      	movs	r4, #0
 801477e:	4a5d      	ldr	r2, [pc, #372]	; (80148f4 <__ieee754_powf+0x3d0>)
 8014780:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8014784:	ee07 1a90 	vmov	s15, r1
 8014788:	ed92 7a00 	vldr	s14, [r2]
 801478c:	4a5a      	ldr	r2, [pc, #360]	; (80148f8 <__ieee754_powf+0x3d4>)
 801478e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8014792:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014796:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801479a:	1049      	asrs	r1, r1, #1
 801479c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80147a0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80147a4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80147a8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80147ac:	ee06 1a10 	vmov	s12, r1
 80147b0:	ee65 4a26 	vmul.f32	s9, s10, s13
 80147b4:	ee36 7a47 	vsub.f32	s14, s12, s14
 80147b8:	ee14 7a90 	vmov	r7, s9
 80147bc:	4017      	ands	r7, r2
 80147be:	ee05 7a90 	vmov	s11, r7
 80147c2:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80147c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80147ca:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80148fc <__ieee754_powf+0x3d8>
 80147ce:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80147d2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80147d6:	ee25 6a26 	vmul.f32	s12, s10, s13
 80147da:	eddf 6a49 	vldr	s13, [pc, #292]	; 8014900 <__ieee754_powf+0x3dc>
 80147de:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80147e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8014904 <__ieee754_powf+0x3e0>
 80147e6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80148d8 <__ieee754_powf+0x3b4>
 80147ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80147f2:	eddf 6a45 	vldr	s13, [pc, #276]	; 8014908 <__ieee754_powf+0x3e4>
 80147f6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80147fa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801490c <__ieee754_powf+0x3e8>
 80147fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014802:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8014806:	ee27 5aa7 	vmul.f32	s10, s15, s15
 801480a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801480e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8014812:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8014816:	eef0 7a45 	vmov.f32	s15, s10
 801481a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014822:	ee17 1a90 	vmov	r1, s15
 8014826:	4011      	ands	r1, r2
 8014828:	ee07 1a90 	vmov	s15, r1
 801482c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8014830:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8014834:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8014838:	ee27 7a24 	vmul.f32	s14, s14, s9
 801483c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014840:	eeb0 6a47 	vmov.f32	s12, s14
 8014844:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014848:	ee16 1a10 	vmov	r1, s12
 801484c:	4011      	ands	r1, r2
 801484e:	ee06 1a90 	vmov	s13, r1
 8014852:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8014856:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8014910 <__ieee754_powf+0x3ec>
 801485a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8014914 <__ieee754_powf+0x3f0>
 801485e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014862:	ee06 1a10 	vmov	s12, r1
 8014866:	ee27 7a27 	vmul.f32	s14, s14, s15
 801486a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014918 <__ieee754_powf+0x3f4>
 801486e:	492b      	ldr	r1, [pc, #172]	; (801491c <__ieee754_powf+0x3f8>)
 8014870:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014878:	edd1 7a00 	vldr	s15, [r1]
 801487c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014880:	ee07 3a90 	vmov	s15, r3
 8014884:	4b26      	ldr	r3, [pc, #152]	; (8014920 <__ieee754_powf+0x3fc>)
 8014886:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801488a:	eef0 7a47 	vmov.f32	s15, s14
 801488e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8014892:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014896:	edd4 0a00 	vldr	s1, [r4]
 801489a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801489e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80148a2:	ee17 3a90 	vmov	r3, s15
 80148a6:	4013      	ands	r3, r2
 80148a8:	ee07 3a90 	vmov	s15, r3
 80148ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80148b0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80148b4:	eee6 6a65 	vfms.f32	s13, s12, s11
 80148b8:	ee77 7a66 	vsub.f32	s15, s14, s13
 80148bc:	e70f      	b.n	80146de <__ieee754_powf+0x1ba>
 80148be:	2401      	movs	r4, #1
 80148c0:	e75d      	b.n	801477e <__ieee754_powf+0x25a>
 80148c2:	bf00      	nop
 80148c4:	08015a50 	.word	0x08015a50
 80148c8:	00000000 	.word	0x00000000
 80148cc:	3f7ffff7 	.word	0x3f7ffff7
 80148d0:	7149f2ca 	.word	0x7149f2ca
 80148d4:	3f800007 	.word	0x3f800007
 80148d8:	3eaaaaab 	.word	0x3eaaaaab
 80148dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80148e0:	36eca570 	.word	0x36eca570
 80148e4:	3fb8aa00 	.word	0x3fb8aa00
 80148e8:	4b800000 	.word	0x4b800000
 80148ec:	001cc471 	.word	0x001cc471
 80148f0:	005db3d6 	.word	0x005db3d6
 80148f4:	08015ae8 	.word	0x08015ae8
 80148f8:	fffff000 	.word	0xfffff000
 80148fc:	3e6c3255 	.word	0x3e6c3255
 8014900:	3e53f142 	.word	0x3e53f142
 8014904:	3e8ba305 	.word	0x3e8ba305
 8014908:	3edb6db7 	.word	0x3edb6db7
 801490c:	3f19999a 	.word	0x3f19999a
 8014910:	3f76384f 	.word	0x3f76384f
 8014914:	3f763800 	.word	0x3f763800
 8014918:	369dc3a0 	.word	0x369dc3a0
 801491c:	08015af8 	.word	0x08015af8
 8014920:	08015af0 	.word	0x08015af0
 8014924:	3338aa3c 	.word	0x3338aa3c
 8014928:	f040 8092 	bne.w	8014a50 <__ieee754_powf+0x52c>
 801492c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8014924 <__ieee754_powf+0x400>
 8014930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014934:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8014938:	eef4 6ac7 	vcmpe.f32	s13, s14
 801493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014940:	f73f aef6 	bgt.w	8014730 <__ieee754_powf+0x20c>
 8014944:	15db      	asrs	r3, r3, #23
 8014946:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801494a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801494e:	4103      	asrs	r3, r0
 8014950:	4423      	add	r3, r4
 8014952:	4949      	ldr	r1, [pc, #292]	; (8014a78 <__ieee754_powf+0x554>)
 8014954:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014958:	3a7f      	subs	r2, #127	; 0x7f
 801495a:	4111      	asrs	r1, r2
 801495c:	ea23 0101 	bic.w	r1, r3, r1
 8014960:	ee07 1a10 	vmov	s14, r1
 8014964:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014968:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801496c:	f1c2 0217 	rsb	r2, r2, #23
 8014970:	4110      	asrs	r0, r2
 8014972:	2c00      	cmp	r4, #0
 8014974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014978:	bfb8      	it	lt
 801497a:	4240      	neglt	r0, r0
 801497c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014980:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8014a7c <__ieee754_powf+0x558>
 8014984:	ee17 3a10 	vmov	r3, s14
 8014988:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801498c:	f023 030f 	bic.w	r3, r3, #15
 8014990:	ee07 3a10 	vmov	s14, r3
 8014994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014998:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801499c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8014a80 <__ieee754_powf+0x55c>
 80149a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149a4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80149a8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8014a84 <__ieee754_powf+0x560>
 80149ac:	eeb0 0a67 	vmov.f32	s0, s15
 80149b0:	eea7 0a26 	vfma.f32	s0, s14, s13
 80149b4:	eeb0 6a40 	vmov.f32	s12, s0
 80149b8:	eea7 6a66 	vfms.f32	s12, s14, s13
 80149bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80149c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80149c4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014a88 <__ieee754_powf+0x564>
 80149c8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8014a8c <__ieee754_powf+0x568>
 80149cc:	eea7 6a26 	vfma.f32	s12, s14, s13
 80149d0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014a90 <__ieee754_powf+0x56c>
 80149d4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80149d8:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8014a94 <__ieee754_powf+0x570>
 80149dc:	eea6 6a87 	vfma.f32	s12, s13, s14
 80149e0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8014a98 <__ieee754_powf+0x574>
 80149e4:	eee6 6a07 	vfma.f32	s13, s12, s14
 80149e8:	eeb0 6a40 	vmov.f32	s12, s0
 80149ec:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80149f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80149f4:	eeb0 7a46 	vmov.f32	s14, s12
 80149f8:	ee77 6a66 	vsub.f32	s13, s14, s13
 80149fc:	ee20 6a06 	vmul.f32	s12, s0, s12
 8014a00:	eee0 7a27 	vfma.f32	s15, s0, s15
 8014a04:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014a0c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014a10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a14:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014a18:	ee10 3a10 	vmov	r3, s0
 8014a1c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8014a20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014a24:	da1a      	bge.n	8014a5c <__ieee754_powf+0x538>
 8014a26:	f000 fa5d 	bl	8014ee4 <scalbnf>
 8014a2a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014a2e:	e5cd      	b.n	80145cc <__ieee754_powf+0xa8>
 8014a30:	4a1a      	ldr	r2, [pc, #104]	; (8014a9c <__ieee754_powf+0x578>)
 8014a32:	4293      	cmp	r3, r2
 8014a34:	dd02      	ble.n	8014a3c <__ieee754_powf+0x518>
 8014a36:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8014aa0 <__ieee754_powf+0x57c>
 8014a3a:	e67b      	b.n	8014734 <__ieee754_powf+0x210>
 8014a3c:	d108      	bne.n	8014a50 <__ieee754_powf+0x52c>
 8014a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014a42:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8014a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a4a:	f6ff af7b 	blt.w	8014944 <__ieee754_powf+0x420>
 8014a4e:	e7f2      	b.n	8014a36 <__ieee754_powf+0x512>
 8014a50:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8014a54:	f73f af76 	bgt.w	8014944 <__ieee754_powf+0x420>
 8014a58:	2000      	movs	r0, #0
 8014a5a:	e78f      	b.n	801497c <__ieee754_powf+0x458>
 8014a5c:	ee00 3a10 	vmov	s0, r3
 8014a60:	e7e3      	b.n	8014a2a <__ieee754_powf+0x506>
 8014a62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a66:	e5b1      	b.n	80145cc <__ieee754_powf+0xa8>
 8014a68:	eeb0 0a68 	vmov.f32	s0, s17
 8014a6c:	e5ae      	b.n	80145cc <__ieee754_powf+0xa8>
 8014a6e:	eeb0 0a48 	vmov.f32	s0, s16
 8014a72:	e5ab      	b.n	80145cc <__ieee754_powf+0xa8>
 8014a74:	2600      	movs	r6, #0
 8014a76:	e590      	b.n	801459a <__ieee754_powf+0x76>
 8014a78:	007fffff 	.word	0x007fffff
 8014a7c:	3f317218 	.word	0x3f317218
 8014a80:	35bfbe8c 	.word	0x35bfbe8c
 8014a84:	3f317200 	.word	0x3f317200
 8014a88:	3331bb4c 	.word	0x3331bb4c
 8014a8c:	b5ddea0e 	.word	0xb5ddea0e
 8014a90:	388ab355 	.word	0x388ab355
 8014a94:	bb360b61 	.word	0xbb360b61
 8014a98:	3e2aaaab 	.word	0x3e2aaaab
 8014a9c:	43160000 	.word	0x43160000
 8014aa0:	0da24260 	.word	0x0da24260

08014aa4 <__ieee754_sqrtf>:
 8014aa4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014aa8:	4770      	bx	lr
 8014aaa:	0000      	movs	r0, r0
 8014aac:	0000      	movs	r0, r0
	...

08014ab0 <atan>:
 8014ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab4:	ec55 4b10 	vmov	r4, r5, d0
 8014ab8:	4bc3      	ldr	r3, [pc, #780]	; (8014dc8 <atan+0x318>)
 8014aba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014abe:	429e      	cmp	r6, r3
 8014ac0:	46ab      	mov	fp, r5
 8014ac2:	dd18      	ble.n	8014af6 <atan+0x46>
 8014ac4:	4bc1      	ldr	r3, [pc, #772]	; (8014dcc <atan+0x31c>)
 8014ac6:	429e      	cmp	r6, r3
 8014ac8:	dc01      	bgt.n	8014ace <atan+0x1e>
 8014aca:	d109      	bne.n	8014ae0 <atan+0x30>
 8014acc:	b144      	cbz	r4, 8014ae0 <atan+0x30>
 8014ace:	4622      	mov	r2, r4
 8014ad0:	462b      	mov	r3, r5
 8014ad2:	4620      	mov	r0, r4
 8014ad4:	4629      	mov	r1, r5
 8014ad6:	f7eb fbd9 	bl	800028c <__adddf3>
 8014ada:	4604      	mov	r4, r0
 8014adc:	460d      	mov	r5, r1
 8014ade:	e006      	b.n	8014aee <atan+0x3e>
 8014ae0:	f1bb 0f00 	cmp.w	fp, #0
 8014ae4:	f300 8131 	bgt.w	8014d4a <atan+0x29a>
 8014ae8:	a59b      	add	r5, pc, #620	; (adr r5, 8014d58 <atan+0x2a8>)
 8014aea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014aee:	ec45 4b10 	vmov	d0, r4, r5
 8014af2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af6:	4bb6      	ldr	r3, [pc, #728]	; (8014dd0 <atan+0x320>)
 8014af8:	429e      	cmp	r6, r3
 8014afa:	dc14      	bgt.n	8014b26 <atan+0x76>
 8014afc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014b00:	429e      	cmp	r6, r3
 8014b02:	dc0d      	bgt.n	8014b20 <atan+0x70>
 8014b04:	a396      	add	r3, pc, #600	; (adr r3, 8014d60 <atan+0x2b0>)
 8014b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0a:	ee10 0a10 	vmov	r0, s0
 8014b0e:	4629      	mov	r1, r5
 8014b10:	f7eb fbbc 	bl	800028c <__adddf3>
 8014b14:	4baf      	ldr	r3, [pc, #700]	; (8014dd4 <atan+0x324>)
 8014b16:	2200      	movs	r2, #0
 8014b18:	f7eb fffe 	bl	8000b18 <__aeabi_dcmpgt>
 8014b1c:	2800      	cmp	r0, #0
 8014b1e:	d1e6      	bne.n	8014aee <atan+0x3e>
 8014b20:	f04f 3aff 	mov.w	sl, #4294967295
 8014b24:	e02b      	b.n	8014b7e <atan+0xce>
 8014b26:	f000 f963 	bl	8014df0 <fabs>
 8014b2a:	4bab      	ldr	r3, [pc, #684]	; (8014dd8 <atan+0x328>)
 8014b2c:	429e      	cmp	r6, r3
 8014b2e:	ec55 4b10 	vmov	r4, r5, d0
 8014b32:	f300 80bf 	bgt.w	8014cb4 <atan+0x204>
 8014b36:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014b3a:	429e      	cmp	r6, r3
 8014b3c:	f300 80a0 	bgt.w	8014c80 <atan+0x1d0>
 8014b40:	ee10 2a10 	vmov	r2, s0
 8014b44:	ee10 0a10 	vmov	r0, s0
 8014b48:	462b      	mov	r3, r5
 8014b4a:	4629      	mov	r1, r5
 8014b4c:	f7eb fb9e 	bl	800028c <__adddf3>
 8014b50:	4ba0      	ldr	r3, [pc, #640]	; (8014dd4 <atan+0x324>)
 8014b52:	2200      	movs	r2, #0
 8014b54:	f7eb fb98 	bl	8000288 <__aeabi_dsub>
 8014b58:	2200      	movs	r2, #0
 8014b5a:	4606      	mov	r6, r0
 8014b5c:	460f      	mov	r7, r1
 8014b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014b62:	4620      	mov	r0, r4
 8014b64:	4629      	mov	r1, r5
 8014b66:	f7eb fb91 	bl	800028c <__adddf3>
 8014b6a:	4602      	mov	r2, r0
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	4630      	mov	r0, r6
 8014b70:	4639      	mov	r1, r7
 8014b72:	f7eb fe6b 	bl	800084c <__aeabi_ddiv>
 8014b76:	f04f 0a00 	mov.w	sl, #0
 8014b7a:	4604      	mov	r4, r0
 8014b7c:	460d      	mov	r5, r1
 8014b7e:	4622      	mov	r2, r4
 8014b80:	462b      	mov	r3, r5
 8014b82:	4620      	mov	r0, r4
 8014b84:	4629      	mov	r1, r5
 8014b86:	f7eb fd37 	bl	80005f8 <__aeabi_dmul>
 8014b8a:	4602      	mov	r2, r0
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	4680      	mov	r8, r0
 8014b90:	4689      	mov	r9, r1
 8014b92:	f7eb fd31 	bl	80005f8 <__aeabi_dmul>
 8014b96:	a374      	add	r3, pc, #464	; (adr r3, 8014d68 <atan+0x2b8>)
 8014b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9c:	4606      	mov	r6, r0
 8014b9e:	460f      	mov	r7, r1
 8014ba0:	f7eb fd2a 	bl	80005f8 <__aeabi_dmul>
 8014ba4:	a372      	add	r3, pc, #456	; (adr r3, 8014d70 <atan+0x2c0>)
 8014ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014baa:	f7eb fb6f 	bl	800028c <__adddf3>
 8014bae:	4632      	mov	r2, r6
 8014bb0:	463b      	mov	r3, r7
 8014bb2:	f7eb fd21 	bl	80005f8 <__aeabi_dmul>
 8014bb6:	a370      	add	r3, pc, #448	; (adr r3, 8014d78 <atan+0x2c8>)
 8014bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbc:	f7eb fb66 	bl	800028c <__adddf3>
 8014bc0:	4632      	mov	r2, r6
 8014bc2:	463b      	mov	r3, r7
 8014bc4:	f7eb fd18 	bl	80005f8 <__aeabi_dmul>
 8014bc8:	a36d      	add	r3, pc, #436	; (adr r3, 8014d80 <atan+0x2d0>)
 8014bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bce:	f7eb fb5d 	bl	800028c <__adddf3>
 8014bd2:	4632      	mov	r2, r6
 8014bd4:	463b      	mov	r3, r7
 8014bd6:	f7eb fd0f 	bl	80005f8 <__aeabi_dmul>
 8014bda:	a36b      	add	r3, pc, #428	; (adr r3, 8014d88 <atan+0x2d8>)
 8014bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be0:	f7eb fb54 	bl	800028c <__adddf3>
 8014be4:	4632      	mov	r2, r6
 8014be6:	463b      	mov	r3, r7
 8014be8:	f7eb fd06 	bl	80005f8 <__aeabi_dmul>
 8014bec:	a368      	add	r3, pc, #416	; (adr r3, 8014d90 <atan+0x2e0>)
 8014bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf2:	f7eb fb4b 	bl	800028c <__adddf3>
 8014bf6:	4642      	mov	r2, r8
 8014bf8:	464b      	mov	r3, r9
 8014bfa:	f7eb fcfd 	bl	80005f8 <__aeabi_dmul>
 8014bfe:	a366      	add	r3, pc, #408	; (adr r3, 8014d98 <atan+0x2e8>)
 8014c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c04:	4680      	mov	r8, r0
 8014c06:	4689      	mov	r9, r1
 8014c08:	4630      	mov	r0, r6
 8014c0a:	4639      	mov	r1, r7
 8014c0c:	f7eb fcf4 	bl	80005f8 <__aeabi_dmul>
 8014c10:	a363      	add	r3, pc, #396	; (adr r3, 8014da0 <atan+0x2f0>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	f7eb fb37 	bl	8000288 <__aeabi_dsub>
 8014c1a:	4632      	mov	r2, r6
 8014c1c:	463b      	mov	r3, r7
 8014c1e:	f7eb fceb 	bl	80005f8 <__aeabi_dmul>
 8014c22:	a361      	add	r3, pc, #388	; (adr r3, 8014da8 <atan+0x2f8>)
 8014c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c28:	f7eb fb2e 	bl	8000288 <__aeabi_dsub>
 8014c2c:	4632      	mov	r2, r6
 8014c2e:	463b      	mov	r3, r7
 8014c30:	f7eb fce2 	bl	80005f8 <__aeabi_dmul>
 8014c34:	a35e      	add	r3, pc, #376	; (adr r3, 8014db0 <atan+0x300>)
 8014c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3a:	f7eb fb25 	bl	8000288 <__aeabi_dsub>
 8014c3e:	4632      	mov	r2, r6
 8014c40:	463b      	mov	r3, r7
 8014c42:	f7eb fcd9 	bl	80005f8 <__aeabi_dmul>
 8014c46:	a35c      	add	r3, pc, #368	; (adr r3, 8014db8 <atan+0x308>)
 8014c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4c:	f7eb fb1c 	bl	8000288 <__aeabi_dsub>
 8014c50:	4632      	mov	r2, r6
 8014c52:	463b      	mov	r3, r7
 8014c54:	f7eb fcd0 	bl	80005f8 <__aeabi_dmul>
 8014c58:	4602      	mov	r2, r0
 8014c5a:	460b      	mov	r3, r1
 8014c5c:	4640      	mov	r0, r8
 8014c5e:	4649      	mov	r1, r9
 8014c60:	f7eb fb14 	bl	800028c <__adddf3>
 8014c64:	4622      	mov	r2, r4
 8014c66:	462b      	mov	r3, r5
 8014c68:	f7eb fcc6 	bl	80005f8 <__aeabi_dmul>
 8014c6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014c70:	4602      	mov	r2, r0
 8014c72:	460b      	mov	r3, r1
 8014c74:	d14b      	bne.n	8014d0e <atan+0x25e>
 8014c76:	4620      	mov	r0, r4
 8014c78:	4629      	mov	r1, r5
 8014c7a:	f7eb fb05 	bl	8000288 <__aeabi_dsub>
 8014c7e:	e72c      	b.n	8014ada <atan+0x2a>
 8014c80:	ee10 0a10 	vmov	r0, s0
 8014c84:	4b53      	ldr	r3, [pc, #332]	; (8014dd4 <atan+0x324>)
 8014c86:	2200      	movs	r2, #0
 8014c88:	4629      	mov	r1, r5
 8014c8a:	f7eb fafd 	bl	8000288 <__aeabi_dsub>
 8014c8e:	4b51      	ldr	r3, [pc, #324]	; (8014dd4 <atan+0x324>)
 8014c90:	4606      	mov	r6, r0
 8014c92:	460f      	mov	r7, r1
 8014c94:	2200      	movs	r2, #0
 8014c96:	4620      	mov	r0, r4
 8014c98:	4629      	mov	r1, r5
 8014c9a:	f7eb faf7 	bl	800028c <__adddf3>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	4630      	mov	r0, r6
 8014ca4:	4639      	mov	r1, r7
 8014ca6:	f7eb fdd1 	bl	800084c <__aeabi_ddiv>
 8014caa:	f04f 0a01 	mov.w	sl, #1
 8014cae:	4604      	mov	r4, r0
 8014cb0:	460d      	mov	r5, r1
 8014cb2:	e764      	b.n	8014b7e <atan+0xce>
 8014cb4:	4b49      	ldr	r3, [pc, #292]	; (8014ddc <atan+0x32c>)
 8014cb6:	429e      	cmp	r6, r3
 8014cb8:	da1d      	bge.n	8014cf6 <atan+0x246>
 8014cba:	ee10 0a10 	vmov	r0, s0
 8014cbe:	4b48      	ldr	r3, [pc, #288]	; (8014de0 <atan+0x330>)
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	4629      	mov	r1, r5
 8014cc4:	f7eb fae0 	bl	8000288 <__aeabi_dsub>
 8014cc8:	4b45      	ldr	r3, [pc, #276]	; (8014de0 <atan+0x330>)
 8014cca:	4606      	mov	r6, r0
 8014ccc:	460f      	mov	r7, r1
 8014cce:	2200      	movs	r2, #0
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	4629      	mov	r1, r5
 8014cd4:	f7eb fc90 	bl	80005f8 <__aeabi_dmul>
 8014cd8:	4b3e      	ldr	r3, [pc, #248]	; (8014dd4 <atan+0x324>)
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f7eb fad6 	bl	800028c <__adddf3>
 8014ce0:	4602      	mov	r2, r0
 8014ce2:	460b      	mov	r3, r1
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	4639      	mov	r1, r7
 8014ce8:	f7eb fdb0 	bl	800084c <__aeabi_ddiv>
 8014cec:	f04f 0a02 	mov.w	sl, #2
 8014cf0:	4604      	mov	r4, r0
 8014cf2:	460d      	mov	r5, r1
 8014cf4:	e743      	b.n	8014b7e <atan+0xce>
 8014cf6:	462b      	mov	r3, r5
 8014cf8:	ee10 2a10 	vmov	r2, s0
 8014cfc:	4939      	ldr	r1, [pc, #228]	; (8014de4 <atan+0x334>)
 8014cfe:	2000      	movs	r0, #0
 8014d00:	f7eb fda4 	bl	800084c <__aeabi_ddiv>
 8014d04:	f04f 0a03 	mov.w	sl, #3
 8014d08:	4604      	mov	r4, r0
 8014d0a:	460d      	mov	r5, r1
 8014d0c:	e737      	b.n	8014b7e <atan+0xce>
 8014d0e:	4b36      	ldr	r3, [pc, #216]	; (8014de8 <atan+0x338>)
 8014d10:	4e36      	ldr	r6, [pc, #216]	; (8014dec <atan+0x33c>)
 8014d12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014d16:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8014d1a:	e9da 2300 	ldrd	r2, r3, [sl]
 8014d1e:	f7eb fab3 	bl	8000288 <__aeabi_dsub>
 8014d22:	4622      	mov	r2, r4
 8014d24:	462b      	mov	r3, r5
 8014d26:	f7eb faaf 	bl	8000288 <__aeabi_dsub>
 8014d2a:	4602      	mov	r2, r0
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014d32:	f7eb faa9 	bl	8000288 <__aeabi_dsub>
 8014d36:	f1bb 0f00 	cmp.w	fp, #0
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	460d      	mov	r5, r1
 8014d3e:	f6bf aed6 	bge.w	8014aee <atan+0x3e>
 8014d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d46:	461d      	mov	r5, r3
 8014d48:	e6d1      	b.n	8014aee <atan+0x3e>
 8014d4a:	a51d      	add	r5, pc, #116	; (adr r5, 8014dc0 <atan+0x310>)
 8014d4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014d50:	e6cd      	b.n	8014aee <atan+0x3e>
 8014d52:	bf00      	nop
 8014d54:	f3af 8000 	nop.w
 8014d58:	54442d18 	.word	0x54442d18
 8014d5c:	bff921fb 	.word	0xbff921fb
 8014d60:	8800759c 	.word	0x8800759c
 8014d64:	7e37e43c 	.word	0x7e37e43c
 8014d68:	e322da11 	.word	0xe322da11
 8014d6c:	3f90ad3a 	.word	0x3f90ad3a
 8014d70:	24760deb 	.word	0x24760deb
 8014d74:	3fa97b4b 	.word	0x3fa97b4b
 8014d78:	a0d03d51 	.word	0xa0d03d51
 8014d7c:	3fb10d66 	.word	0x3fb10d66
 8014d80:	c54c206e 	.word	0xc54c206e
 8014d84:	3fb745cd 	.word	0x3fb745cd
 8014d88:	920083ff 	.word	0x920083ff
 8014d8c:	3fc24924 	.word	0x3fc24924
 8014d90:	5555550d 	.word	0x5555550d
 8014d94:	3fd55555 	.word	0x3fd55555
 8014d98:	2c6a6c2f 	.word	0x2c6a6c2f
 8014d9c:	bfa2b444 	.word	0xbfa2b444
 8014da0:	52defd9a 	.word	0x52defd9a
 8014da4:	3fadde2d 	.word	0x3fadde2d
 8014da8:	af749a6d 	.word	0xaf749a6d
 8014dac:	3fb3b0f2 	.word	0x3fb3b0f2
 8014db0:	fe231671 	.word	0xfe231671
 8014db4:	3fbc71c6 	.word	0x3fbc71c6
 8014db8:	9998ebc4 	.word	0x9998ebc4
 8014dbc:	3fc99999 	.word	0x3fc99999
 8014dc0:	54442d18 	.word	0x54442d18
 8014dc4:	3ff921fb 	.word	0x3ff921fb
 8014dc8:	440fffff 	.word	0x440fffff
 8014dcc:	7ff00000 	.word	0x7ff00000
 8014dd0:	3fdbffff 	.word	0x3fdbffff
 8014dd4:	3ff00000 	.word	0x3ff00000
 8014dd8:	3ff2ffff 	.word	0x3ff2ffff
 8014ddc:	40038000 	.word	0x40038000
 8014de0:	3ff80000 	.word	0x3ff80000
 8014de4:	bff00000 	.word	0xbff00000
 8014de8:	08015b20 	.word	0x08015b20
 8014dec:	08015b00 	.word	0x08015b00

08014df0 <fabs>:
 8014df0:	ec51 0b10 	vmov	r0, r1, d0
 8014df4:	ee10 2a10 	vmov	r2, s0
 8014df8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014dfc:	ec43 2b10 	vmov	d0, r2, r3
 8014e00:	4770      	bx	lr

08014e02 <fabsf>:
 8014e02:	ee10 3a10 	vmov	r3, s0
 8014e06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e0a:	ee00 3a10 	vmov	s0, r3
 8014e0e:	4770      	bx	lr

08014e10 <finitef>:
 8014e10:	b082      	sub	sp, #8
 8014e12:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014e16:	9801      	ldr	r0, [sp, #4]
 8014e18:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014e1c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014e20:	bfac      	ite	ge
 8014e22:	2000      	movge	r0, #0
 8014e24:	2001      	movlt	r0, #1
 8014e26:	b002      	add	sp, #8
 8014e28:	4770      	bx	lr
	...

08014e2c <rintf>:
 8014e2c:	ee10 2a10 	vmov	r2, s0
 8014e30:	b513      	push	{r0, r1, r4, lr}
 8014e32:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8014e36:	397f      	subs	r1, #127	; 0x7f
 8014e38:	2916      	cmp	r1, #22
 8014e3a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8014e3e:	dc47      	bgt.n	8014ed0 <rintf+0xa4>
 8014e40:	b32b      	cbz	r3, 8014e8e <rintf+0x62>
 8014e42:	2900      	cmp	r1, #0
 8014e44:	ee10 3a10 	vmov	r3, s0
 8014e48:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8014e4c:	da21      	bge.n	8014e92 <rintf+0x66>
 8014e4e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8014e52:	425b      	negs	r3, r3
 8014e54:	4921      	ldr	r1, [pc, #132]	; (8014edc <rintf+0xb0>)
 8014e56:	0a5b      	lsrs	r3, r3, #9
 8014e58:	0d12      	lsrs	r2, r2, #20
 8014e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e5e:	0512      	lsls	r2, r2, #20
 8014e60:	4313      	orrs	r3, r2
 8014e62:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8014e66:	ee07 3a90 	vmov	s15, r3
 8014e6a:	edd1 6a00 	vldr	s13, [r1]
 8014e6e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8014e72:	ed8d 7a01 	vstr	s14, [sp, #4]
 8014e76:	eddd 7a01 	vldr	s15, [sp, #4]
 8014e7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014e7e:	ee17 3a90 	vmov	r3, s15
 8014e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014e86:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8014e8a:	ee00 3a10 	vmov	s0, r3
 8014e8e:	b002      	add	sp, #8
 8014e90:	bd10      	pop	{r4, pc}
 8014e92:	4a13      	ldr	r2, [pc, #76]	; (8014ee0 <rintf+0xb4>)
 8014e94:	410a      	asrs	r2, r1
 8014e96:	4213      	tst	r3, r2
 8014e98:	d0f9      	beq.n	8014e8e <rintf+0x62>
 8014e9a:	0854      	lsrs	r4, r2, #1
 8014e9c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8014ea0:	d006      	beq.n	8014eb0 <rintf+0x84>
 8014ea2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014ea6:	ea23 0304 	bic.w	r3, r3, r4
 8014eaa:	fa42 f101 	asr.w	r1, r2, r1
 8014eae:	430b      	orrs	r3, r1
 8014eb0:	4a0a      	ldr	r2, [pc, #40]	; (8014edc <rintf+0xb0>)
 8014eb2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8014eb6:	ed90 7a00 	vldr	s14, [r0]
 8014eba:	ee07 3a90 	vmov	s15, r3
 8014ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ec2:	edcd 7a01 	vstr	s15, [sp, #4]
 8014ec6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014eca:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014ece:	e7de      	b.n	8014e8e <rintf+0x62>
 8014ed0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014ed4:	d3db      	bcc.n	8014e8e <rintf+0x62>
 8014ed6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014eda:	e7d8      	b.n	8014e8e <rintf+0x62>
 8014edc:	08015b40 	.word	0x08015b40
 8014ee0:	007fffff 	.word	0x007fffff

08014ee4 <scalbnf>:
 8014ee4:	ee10 3a10 	vmov	r3, s0
 8014ee8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014eec:	d025      	beq.n	8014f3a <scalbnf+0x56>
 8014eee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014ef2:	d302      	bcc.n	8014efa <scalbnf+0x16>
 8014ef4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014ef8:	4770      	bx	lr
 8014efa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014efe:	d122      	bne.n	8014f46 <scalbnf+0x62>
 8014f00:	4b2a      	ldr	r3, [pc, #168]	; (8014fac <scalbnf+0xc8>)
 8014f02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014fb0 <scalbnf+0xcc>
 8014f06:	4298      	cmp	r0, r3
 8014f08:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f0c:	db16      	blt.n	8014f3c <scalbnf+0x58>
 8014f0e:	ee10 3a10 	vmov	r3, s0
 8014f12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014f16:	3a19      	subs	r2, #25
 8014f18:	4402      	add	r2, r0
 8014f1a:	2afe      	cmp	r2, #254	; 0xfe
 8014f1c:	dd15      	ble.n	8014f4a <scalbnf+0x66>
 8014f1e:	ee10 3a10 	vmov	r3, s0
 8014f22:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014fb4 <scalbnf+0xd0>
 8014f26:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014fb8 <scalbnf+0xd4>
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	eeb0 7a67 	vmov.f32	s14, s15
 8014f30:	bfb8      	it	lt
 8014f32:	eef0 7a66 	vmovlt.f32	s15, s13
 8014f36:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014f3a:	4770      	bx	lr
 8014f3c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014fbc <scalbnf+0xd8>
 8014f40:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f44:	4770      	bx	lr
 8014f46:	0dd2      	lsrs	r2, r2, #23
 8014f48:	e7e6      	b.n	8014f18 <scalbnf+0x34>
 8014f4a:	2a00      	cmp	r2, #0
 8014f4c:	dd06      	ble.n	8014f5c <scalbnf+0x78>
 8014f4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f52:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014f56:	ee00 3a10 	vmov	s0, r3
 8014f5a:	4770      	bx	lr
 8014f5c:	f112 0f16 	cmn.w	r2, #22
 8014f60:	da1a      	bge.n	8014f98 <scalbnf+0xb4>
 8014f62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014f66:	4298      	cmp	r0, r3
 8014f68:	ee10 3a10 	vmov	r3, s0
 8014f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f70:	dd0a      	ble.n	8014f88 <scalbnf+0xa4>
 8014f72:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014fb4 <scalbnf+0xd0>
 8014f76:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014fb8 <scalbnf+0xd4>
 8014f7a:	eef0 7a40 	vmov.f32	s15, s0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	bf18      	it	ne
 8014f82:	eeb0 0a47 	vmovne.f32	s0, s14
 8014f86:	e7db      	b.n	8014f40 <scalbnf+0x5c>
 8014f88:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014fbc <scalbnf+0xd8>
 8014f8c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014fc0 <scalbnf+0xdc>
 8014f90:	eef0 7a40 	vmov.f32	s15, s0
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	e7f3      	b.n	8014f80 <scalbnf+0x9c>
 8014f98:	3219      	adds	r2, #25
 8014f9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f9e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014fa2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014fc4 <scalbnf+0xe0>
 8014fa6:	ee07 3a10 	vmov	s14, r3
 8014faa:	e7c4      	b.n	8014f36 <scalbnf+0x52>
 8014fac:	ffff3cb0 	.word	0xffff3cb0
 8014fb0:	4c000000 	.word	0x4c000000
 8014fb4:	7149f2ca 	.word	0x7149f2ca
 8014fb8:	f149f2ca 	.word	0xf149f2ca
 8014fbc:	0da24260 	.word	0x0da24260
 8014fc0:	8da24260 	.word	0x8da24260
 8014fc4:	33000000 	.word	0x33000000

08014fc8 <_init>:
 8014fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fca:	bf00      	nop
 8014fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fce:	bc08      	pop	{r3}
 8014fd0:	469e      	mov	lr, r3
 8014fd2:	4770      	bx	lr

08014fd4 <_fini>:
 8014fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd6:	bf00      	nop
 8014fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fda:	bc08      	pop	{r3}
 8014fdc:	469e      	mov	lr, r3
 8014fde:	4770      	bx	lr
